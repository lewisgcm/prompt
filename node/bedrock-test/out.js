var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined") return require.apply(this, arguments);
  throw Error('Dynamic require of "' + x + '" is not supported');
});
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require3() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// ../../../../node_modules/esbuild-plugin-polyfill-node/polyfills/__dirname.js
var init_dirname = __esm({
  "../../../../node_modules/esbuild-plugin-polyfill-node/polyfills/__dirname.js"() {
  }
});

// node_modules/@smithy/types/dist-cjs/index.js
var require_dist_cjs = __commonJS({
  "node_modules/@smithy/types/dist-cjs/index.js"(exports6, module) {
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      AlgorithmId: () => AlgorithmId,
      EndpointURLScheme: () => EndpointURLScheme,
      FieldPosition: () => FieldPosition,
      HttpApiKeyAuthLocation: () => HttpApiKeyAuthLocation2,
      HttpAuthLocation: () => HttpAuthLocation,
      IniSectionType: () => IniSectionType,
      RequestHandlerProtocol: () => RequestHandlerProtocol,
      SMITHY_CONTEXT_KEY: () => SMITHY_CONTEXT_KEY4,
      getDefaultClientConfiguration: () => getDefaultClientConfiguration,
      resolveDefaultRuntimeConfig: () => resolveDefaultRuntimeConfig
    });
    module.exports = __toCommonJS3(src_exports);
    var HttpAuthLocation = /* @__PURE__ */ ((HttpAuthLocation2) => {
      HttpAuthLocation2["HEADER"] = "header";
      HttpAuthLocation2["QUERY"] = "query";
      return HttpAuthLocation2;
    })(HttpAuthLocation || {});
    var HttpApiKeyAuthLocation2 = /* @__PURE__ */ ((HttpApiKeyAuthLocation22) => {
      HttpApiKeyAuthLocation22["HEADER"] = "header";
      HttpApiKeyAuthLocation22["QUERY"] = "query";
      return HttpApiKeyAuthLocation22;
    })(HttpApiKeyAuthLocation2 || {});
    var EndpointURLScheme = /* @__PURE__ */ ((EndpointURLScheme2) => {
      EndpointURLScheme2["HTTP"] = "http";
      EndpointURLScheme2["HTTPS"] = "https";
      return EndpointURLScheme2;
    })(EndpointURLScheme || {});
    var AlgorithmId = /* @__PURE__ */ ((AlgorithmId2) => {
      AlgorithmId2["MD5"] = "md5";
      AlgorithmId2["CRC32"] = "crc32";
      AlgorithmId2["CRC32C"] = "crc32c";
      AlgorithmId2["SHA1"] = "sha1";
      AlgorithmId2["SHA256"] = "sha256";
      return AlgorithmId2;
    })(AlgorithmId || {});
    var getChecksumConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
      const checksumAlgorithms = [];
      if (runtimeConfig.sha256 !== void 0) {
        checksumAlgorithms.push({
          algorithmId: () => "sha256",
          checksumConstructor: () => runtimeConfig.sha256
        });
      }
      if (runtimeConfig.md5 != void 0) {
        checksumAlgorithms.push({
          algorithmId: () => "md5",
          checksumConstructor: () => runtimeConfig.md5
        });
      }
      return {
        _checksumAlgorithms: checksumAlgorithms,
        addChecksumAlgorithm(algo) {
          this._checksumAlgorithms.push(algo);
        },
        checksumAlgorithms() {
          return this._checksumAlgorithms;
        }
      };
    }, "getChecksumConfiguration");
    var resolveChecksumRuntimeConfig = /* @__PURE__ */ __name((clientConfig) => {
      const runtimeConfig = {};
      clientConfig.checksumAlgorithms().forEach((checksumAlgorithm) => {
        runtimeConfig[checksumAlgorithm.algorithmId()] = checksumAlgorithm.checksumConstructor();
      });
      return runtimeConfig;
    }, "resolveChecksumRuntimeConfig");
    var getDefaultClientConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
      return {
        ...getChecksumConfiguration(runtimeConfig)
      };
    }, "getDefaultClientConfiguration");
    var resolveDefaultRuntimeConfig = /* @__PURE__ */ __name((config2) => {
      return {
        ...resolveChecksumRuntimeConfig(config2)
      };
    }, "resolveDefaultRuntimeConfig");
    var FieldPosition = /* @__PURE__ */ ((FieldPosition2) => {
      FieldPosition2[FieldPosition2["HEADER"] = 0] = "HEADER";
      FieldPosition2[FieldPosition2["TRAILER"] = 1] = "TRAILER";
      return FieldPosition2;
    })(FieldPosition || {});
    var SMITHY_CONTEXT_KEY4 = "__smithy_context";
    var IniSectionType = /* @__PURE__ */ ((IniSectionType2) => {
      IniSectionType2["PROFILE"] = "profile";
      IniSectionType2["SSO_SESSION"] = "sso-session";
      IniSectionType2["SERVICES"] = "services";
      return IniSectionType2;
    })(IniSectionType || {});
    var RequestHandlerProtocol = /* @__PURE__ */ ((RequestHandlerProtocol2) => {
      RequestHandlerProtocol2["HTTP_0_9"] = "http/0.9";
      RequestHandlerProtocol2["HTTP_1_0"] = "http/1.0";
      RequestHandlerProtocol2["TDS_8_0"] = "tds/8.0";
      return RequestHandlerProtocol2;
    })(RequestHandlerProtocol || {});
  }
});

// node_modules/@smithy/protocol-http/dist-cjs/index.js
var require_dist_cjs2 = __commonJS({
  "node_modules/@smithy/protocol-http/dist-cjs/index.js"(exports6, module) {
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      Field: () => Field,
      Fields: () => Fields,
      HttpRequest: () => HttpRequest9,
      HttpResponse: () => HttpResponse3,
      IHttpRequest: () => import_types5.HttpRequest,
      getHttpHandlerExtensionConfiguration: () => getHttpHandlerExtensionConfiguration,
      isValidHostname: () => isValidHostname,
      resolveHttpHandlerRuntimeConfig: () => resolveHttpHandlerRuntimeConfig
    });
    module.exports = __toCommonJS3(src_exports);
    var getHttpHandlerExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
      let httpHandler = runtimeConfig.httpHandler;
      return {
        setHttpHandler(handler) {
          httpHandler = handler;
        },
        httpHandler() {
          return httpHandler;
        },
        updateHttpClientConfig(key, value) {
          httpHandler.updateHttpClientConfig(key, value);
        },
        httpHandlerConfigs() {
          return httpHandler.httpHandlerConfigs();
        }
      };
    }, "getHttpHandlerExtensionConfiguration");
    var resolveHttpHandlerRuntimeConfig = /* @__PURE__ */ __name((httpHandlerExtensionConfiguration) => {
      return {
        httpHandler: httpHandlerExtensionConfiguration.httpHandler()
      };
    }, "resolveHttpHandlerRuntimeConfig");
    var import_types5 = require_dist_cjs();
    var _Field = class _Field {
      constructor({ name, kind = import_types5.FieldPosition.HEADER, values = [] }) {
        this.name = name;
        this.kind = kind;
        this.values = values;
      }
      /**
       * Appends a value to the field.
       *
       * @param value The value to append.
       */
      add(value) {
        this.values.push(value);
      }
      /**
       * Overwrite existing field values.
       *
       * @param values The new field values.
       */
      set(values) {
        this.values = values;
      }
      /**
       * Remove all matching entries from list.
       *
       * @param value Value to remove.
       */
      remove(value) {
        this.values = this.values.filter((v) => v !== value);
      }
      /**
       * Get comma-delimited string.
       *
       * @returns String representation of {@link Field}.
       */
      toString() {
        return this.values.map((v) => v.includes(",") || v.includes(" ") ? `"${v}"` : v).join(", ");
      }
      /**
       * Get string values as a list
       *
       * @returns Values in {@link Field} as a list.
       */
      get() {
        return this.values;
      }
    };
    __name(_Field, "Field");
    var Field = _Field;
    var _Fields = class _Fields {
      constructor({ fields = [], encoding = "utf-8" }) {
        this.entries = {};
        fields.forEach(this.setField.bind(this));
        this.encoding = encoding;
      }
      /**
       * Set entry for a {@link Field} name. The `name`
       * attribute will be used to key the collection.
       *
       * @param field The {@link Field} to set.
       */
      setField(field) {
        this.entries[field.name.toLowerCase()] = field;
      }
      /**
       *  Retrieve {@link Field} entry by name.
       *
       * @param name The name of the {@link Field} entry
       *  to retrieve
       * @returns The {@link Field} if it exists.
       */
      getField(name) {
        return this.entries[name.toLowerCase()];
      }
      /**
       * Delete entry from collection.
       *
       * @param name Name of the entry to delete.
       */
      removeField(name) {
        delete this.entries[name.toLowerCase()];
      }
      /**
       * Helper function for retrieving specific types of fields.
       * Used to grab all headers or all trailers.
       *
       * @param kind {@link FieldPosition} of entries to retrieve.
       * @returns The {@link Field} entries with the specified
       *  {@link FieldPosition}.
       */
      getByType(kind) {
        return Object.values(this.entries).filter((field) => field.kind === kind);
      }
    };
    __name(_Fields, "Fields");
    var Fields = _Fields;
    var _HttpRequest = class _HttpRequest2 {
      constructor(options) {
        this.method = options.method || "GET";
        this.hostname = options.hostname || "localhost";
        this.port = options.port;
        this.query = options.query || {};
        this.headers = options.headers || {};
        this.body = options.body;
        this.protocol = options.protocol ? options.protocol.slice(-1) !== ":" ? `${options.protocol}:` : options.protocol : "https:";
        this.path = options.path ? options.path.charAt(0) !== "/" ? `/${options.path}` : options.path : "/";
        this.username = options.username;
        this.password = options.password;
        this.fragment = options.fragment;
      }
      /**
       * Note: this does not deep-clone the body.
       */
      static clone(request) {
        const cloned = new _HttpRequest2({
          ...request,
          headers: { ...request.headers }
        });
        if (cloned.query) {
          cloned.query = cloneQuery(cloned.query);
        }
        return cloned;
      }
      /**
       * This method only actually asserts that request is the interface {@link IHttpRequest},
       * and not necessarily this concrete class. Left in place for API stability.
       *
       * Do not call instance methods on the input of this function, and
       * do not assume it has the HttpRequest prototype.
       */
      static isInstance(request) {
        if (!request) {
          return false;
        }
        const req = request;
        return "method" in req && "protocol" in req && "hostname" in req && "path" in req && typeof req["query"] === "object" && typeof req["headers"] === "object";
      }
      /**
       * @deprecated use static HttpRequest.clone(request) instead. It's not safe to call
       * this method because {@link HttpRequest.isInstance} incorrectly
       * asserts that IHttpRequest (interface) objects are of type HttpRequest (class).
       */
      clone() {
        return _HttpRequest2.clone(this);
      }
    };
    __name(_HttpRequest, "HttpRequest");
    var HttpRequest9 = _HttpRequest;
    function cloneQuery(query) {
      return Object.keys(query).reduce((carry, paramName) => {
        const param = query[paramName];
        return {
          ...carry,
          [paramName]: Array.isArray(param) ? [...param] : param
        };
      }, {});
    }
    __name(cloneQuery, "cloneQuery");
    var _HttpResponse = class _HttpResponse {
      constructor(options) {
        this.statusCode = options.statusCode;
        this.reason = options.reason;
        this.headers = options.headers || {};
        this.body = options.body;
      }
      static isInstance(response) {
        if (!response)
          return false;
        const resp = response;
        return typeof resp.statusCode === "number" && typeof resp.headers === "object";
      }
    };
    __name(_HttpResponse, "HttpResponse");
    var HttpResponse3 = _HttpResponse;
    function isValidHostname(hostname) {
      const hostPattern = /^[a-z0-9][a-z0-9\.\-]*[a-z0-9]$/;
      return hostPattern.test(hostname);
    }
    __name(isValidHostname, "isValidHostname");
  }
});

// node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js
var require_dist_cjs3 = __commonJS({
  "node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js"(exports6, module) {
    "use strict";
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      getHostHeaderPlugin: () => getHostHeaderPlugin,
      hostHeaderMiddleware: () => hostHeaderMiddleware,
      hostHeaderMiddlewareOptions: () => hostHeaderMiddlewareOptions,
      resolveHostHeaderConfig: () => resolveHostHeaderConfig
    });
    module.exports = __toCommonJS3(src_exports);
    var import_protocol_http11 = require_dist_cjs2();
    function resolveHostHeaderConfig(input) {
      return input;
    }
    __name(resolveHostHeaderConfig, "resolveHostHeaderConfig");
    var hostHeaderMiddleware = /* @__PURE__ */ __name((options) => (next) => async (args) => {
      if (!import_protocol_http11.HttpRequest.isInstance(args.request))
        return next(args);
      const { request } = args;
      const { handlerProtocol = "" } = options.requestHandler.metadata || {};
      if (handlerProtocol.indexOf("h2") >= 0 && !request.headers[":authority"]) {
        delete request.headers["host"];
        request.headers[":authority"] = request.hostname + (request.port ? ":" + request.port : "");
      } else if (!request.headers["host"]) {
        let host = request.hostname;
        if (request.port != null)
          host += `:${request.port}`;
        request.headers["host"] = host;
      }
      return next(args);
    }, "hostHeaderMiddleware");
    var hostHeaderMiddlewareOptions = {
      name: "hostHeaderMiddleware",
      step: "build",
      priority: "low",
      tags: ["HOST"],
      override: true
    };
    var getHostHeaderPlugin = /* @__PURE__ */ __name((options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(hostHeaderMiddleware(options), hostHeaderMiddlewareOptions);
      }
    }), "getHostHeaderPlugin");
  }
});

// node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js
var require_dist_cjs4 = __commonJS({
  "node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js"(exports6, module) {
    "use strict";
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      getLoggerPlugin: () => getLoggerPlugin,
      loggerMiddleware: () => loggerMiddleware,
      loggerMiddlewareOptions: () => loggerMiddlewareOptions
    });
    module.exports = __toCommonJS3(src_exports);
    var loggerMiddleware = /* @__PURE__ */ __name(() => (next, context) => async (args) => {
      var _a, _b;
      try {
        const response = await next(args);
        const { clientName, commandName, logger, dynamoDbDocumentClientOptions = {} } = context;
        const { overrideInputFilterSensitiveLog, overrideOutputFilterSensitiveLog } = dynamoDbDocumentClientOptions;
        const inputFilterSensitiveLog = overrideInputFilterSensitiveLog ?? context.inputFilterSensitiveLog;
        const outputFilterSensitiveLog = overrideOutputFilterSensitiveLog ?? context.outputFilterSensitiveLog;
        const { $metadata, ...outputWithoutMetadata } = response.output;
        (_a = logger == null ? void 0 : logger.info) == null ? void 0 : _a.call(logger, {
          clientName,
          commandName,
          input: inputFilterSensitiveLog(args.input),
          output: outputFilterSensitiveLog(outputWithoutMetadata),
          metadata: $metadata
        });
        return response;
      } catch (error) {
        const { clientName, commandName, logger, dynamoDbDocumentClientOptions = {} } = context;
        const { overrideInputFilterSensitiveLog } = dynamoDbDocumentClientOptions;
        const inputFilterSensitiveLog = overrideInputFilterSensitiveLog ?? context.inputFilterSensitiveLog;
        (_b = logger == null ? void 0 : logger.error) == null ? void 0 : _b.call(logger, {
          clientName,
          commandName,
          input: inputFilterSensitiveLog(args.input),
          error,
          metadata: error.$metadata
        });
        throw error;
      }
    }, "loggerMiddleware");
    var loggerMiddlewareOptions = {
      name: "loggerMiddleware",
      tags: ["LOGGER"],
      step: "initialize",
      override: true
    };
    var getLoggerPlugin = /* @__PURE__ */ __name((options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(loggerMiddleware(), loggerMiddlewareOptions);
      }
    }), "getLoggerPlugin");
  }
});

// node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js
var require_dist_cjs5 = __commonJS({
  "node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js"(exports6, module) {
    "use strict";
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      addRecursionDetectionMiddlewareOptions: () => addRecursionDetectionMiddlewareOptions,
      getRecursionDetectionPlugin: () => getRecursionDetectionPlugin,
      recursionDetectionMiddleware: () => recursionDetectionMiddleware
    });
    module.exports = __toCommonJS3(src_exports);
    var import_protocol_http11 = require_dist_cjs2();
    var TRACE_ID_HEADER_NAME = "X-Amzn-Trace-Id";
    var ENV_LAMBDA_FUNCTION_NAME = "AWS_LAMBDA_FUNCTION_NAME";
    var ENV_TRACE_ID = "_X_AMZN_TRACE_ID";
    var recursionDetectionMiddleware = /* @__PURE__ */ __name((options) => (next) => async (args) => {
      const { request } = args;
      if (!import_protocol_http11.HttpRequest.isInstance(request) || options.runtime !== "node" || request.headers.hasOwnProperty(TRACE_ID_HEADER_NAME)) {
        return next(args);
      }
      const functionName = process.env[ENV_LAMBDA_FUNCTION_NAME];
      const traceId = process.env[ENV_TRACE_ID];
      const nonEmptyString = /* @__PURE__ */ __name((str) => typeof str === "string" && str.length > 0, "nonEmptyString");
      if (nonEmptyString(functionName) && nonEmptyString(traceId)) {
        request.headers[TRACE_ID_HEADER_NAME] = traceId;
      }
      return next({
        ...args,
        request
      });
    }, "recursionDetectionMiddleware");
    var addRecursionDetectionMiddlewareOptions = {
      step: "build",
      tags: ["RECURSION_DETECTION"],
      name: "recursionDetectionMiddleware",
      override: true,
      priority: "low"
    };
    var getRecursionDetectionPlugin = /* @__PURE__ */ __name((options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(recursionDetectionMiddleware(options), addRecursionDetectionMiddlewareOptions);
      }
    }), "getRecursionDetectionPlugin");
  }
});

// node_modules/@smithy/core/dist-es/getSmithyContext.js
var import_types, getSmithyContext;
var init_getSmithyContext = __esm({
  "node_modules/@smithy/core/dist-es/getSmithyContext.js"() {
    init_dirname();
    import_types = __toESM(require_dist_cjs());
    getSmithyContext = (context) => context[import_types.SMITHY_CONTEXT_KEY] || (context[import_types.SMITHY_CONTEXT_KEY] = {});
  }
});

// node_modules/@smithy/util-middleware/dist-cjs/index.js
var require_dist_cjs6 = __commonJS({
  "node_modules/@smithy/util-middleware/dist-cjs/index.js"(exports6, module) {
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      getSmithyContext: () => getSmithyContext4,
      normalizeProvider: () => normalizeProvider2
    });
    module.exports = __toCommonJS3(src_exports);
    var import_types5 = require_dist_cjs();
    var getSmithyContext4 = /* @__PURE__ */ __name((context) => context[import_types5.SMITHY_CONTEXT_KEY] || (context[import_types5.SMITHY_CONTEXT_KEY] = {}), "getSmithyContext");
    var normalizeProvider2 = /* @__PURE__ */ __name((input) => {
      if (typeof input === "function")
        return input;
      const promisified = Promise.resolve(input);
      return () => promisified;
    }, "normalizeProvider");
  }
});

// node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/httpAuthSchemeMiddleware.js
function convertHttpAuthSchemesToMap(httpAuthSchemes) {
  const map = /* @__PURE__ */ new Map();
  for (const scheme of httpAuthSchemes) {
    map.set(scheme.schemeId, scheme);
  }
  return map;
}
var import_types2, import_util_middleware, httpAuthSchemeMiddleware;
var init_httpAuthSchemeMiddleware = __esm({
  "node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/httpAuthSchemeMiddleware.js"() {
    init_dirname();
    import_types2 = __toESM(require_dist_cjs());
    import_util_middleware = __toESM(require_dist_cjs6());
    httpAuthSchemeMiddleware = (config2, mwOptions) => (next, context) => async (args) => {
      const options = config2.httpAuthSchemeProvider(await mwOptions.httpAuthSchemeParametersProvider(config2, context, args.input));
      const authSchemes = convertHttpAuthSchemesToMap(config2.httpAuthSchemes);
      const smithyContext = (0, import_util_middleware.getSmithyContext)(context);
      const failureReasons = [];
      for (const option of options) {
        const scheme = authSchemes.get(option.schemeId);
        if (!scheme) {
          failureReasons.push(`HttpAuthScheme \`${option.schemeId}\` was not enabled for this service.`);
          continue;
        }
        const identityProvider = scheme.identityProvider(await mwOptions.identityProviderConfigProvider(config2));
        if (!identityProvider) {
          failureReasons.push(`HttpAuthScheme \`${option.schemeId}\` did not have an IdentityProvider configured.`);
          continue;
        }
        const { identityProperties = {}, signingProperties = {} } = option.propertiesExtractor?.(config2, context) || {};
        option.identityProperties = Object.assign(option.identityProperties || {}, identityProperties);
        option.signingProperties = Object.assign(option.signingProperties || {}, signingProperties);
        smithyContext.selectedHttpAuthScheme = {
          httpAuthOption: option,
          identity: await identityProvider(option.identityProperties),
          signer: scheme.signer
        };
        break;
      }
      if (!smithyContext.selectedHttpAuthScheme) {
        throw new Error(failureReasons.join("\n"));
      }
      return next(args);
    };
  }
});

// node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/getHttpAuthSchemeEndpointRuleSetPlugin.js
var httpAuthSchemeEndpointRuleSetMiddlewareOptions, getHttpAuthSchemeEndpointRuleSetPlugin;
var init_getHttpAuthSchemeEndpointRuleSetPlugin = __esm({
  "node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/getHttpAuthSchemeEndpointRuleSetPlugin.js"() {
    init_dirname();
    init_httpAuthSchemeMiddleware();
    httpAuthSchemeEndpointRuleSetMiddlewareOptions = {
      step: "serialize",
      tags: ["HTTP_AUTH_SCHEME"],
      name: "httpAuthSchemeMiddleware",
      override: true,
      relation: "before",
      toMiddleware: "endpointV2Middleware"
    };
    getHttpAuthSchemeEndpointRuleSetPlugin = (config2, { httpAuthSchemeParametersProvider, identityProviderConfigProvider }) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo(httpAuthSchemeMiddleware(config2, {
          httpAuthSchemeParametersProvider,
          identityProviderConfigProvider
        }), httpAuthSchemeEndpointRuleSetMiddlewareOptions);
      }
    });
  }
});

// node_modules/@smithy/middleware-serde/dist-cjs/index.js
var require_dist_cjs7 = __commonJS({
  "node_modules/@smithy/middleware-serde/dist-cjs/index.js"(exports6, module) {
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      deserializerMiddleware: () => deserializerMiddleware,
      deserializerMiddlewareOption: () => deserializerMiddlewareOption,
      getSerdePlugin: () => getSerdePlugin,
      serializerMiddleware: () => serializerMiddleware,
      serializerMiddlewareOption: () => serializerMiddlewareOption2
    });
    module.exports = __toCommonJS3(src_exports);
    var deserializerMiddleware = /* @__PURE__ */ __name((options, deserializer) => (next) => async (args) => {
      const { response } = await next(args);
      try {
        const parsed = await deserializer(response, options);
        return {
          response,
          output: parsed
        };
      } catch (error) {
        Object.defineProperty(error, "$response", {
          value: response
        });
        if (!("$metadata" in error)) {
          const hint = `Deserialization error: to see the raw response, inspect the hidden field {error}.$response on this object.`;
          error.message += "\n  " + hint;
          if (typeof error.$responseBodyText !== "undefined") {
            if (error.$response) {
              error.$response.body = error.$responseBodyText;
            }
          }
        }
        throw error;
      }
    }, "deserializerMiddleware");
    var serializerMiddleware = /* @__PURE__ */ __name((options, serializer) => (next, context) => async (args) => {
      var _a;
      const endpoint = ((_a = context.endpointV2) == null ? void 0 : _a.url) && options.urlParser ? async () => options.urlParser(context.endpointV2.url) : options.endpoint;
      if (!endpoint) {
        throw new Error("No valid endpoint provider available.");
      }
      const request = await serializer(args.input, { ...options, endpoint });
      return next({
        ...args,
        request
      });
    }, "serializerMiddleware");
    var deserializerMiddlewareOption = {
      name: "deserializerMiddleware",
      step: "deserialize",
      tags: ["DESERIALIZER"],
      override: true
    };
    var serializerMiddlewareOption2 = {
      name: "serializerMiddleware",
      step: "serialize",
      tags: ["SERIALIZER"],
      override: true
    };
    function getSerdePlugin(config2, serializer, deserializer) {
      return {
        applyToStack: (commandStack) => {
          commandStack.add(deserializerMiddleware(config2, deserializer), deserializerMiddlewareOption);
          commandStack.add(serializerMiddleware(config2, serializer), serializerMiddlewareOption2);
        }
      };
    }
    __name(getSerdePlugin, "getSerdePlugin");
  }
});

// node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/getHttpAuthSchemePlugin.js
var import_middleware_serde, httpAuthSchemeMiddlewareOptions, getHttpAuthSchemePlugin;
var init_getHttpAuthSchemePlugin = __esm({
  "node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/getHttpAuthSchemePlugin.js"() {
    init_dirname();
    import_middleware_serde = __toESM(require_dist_cjs7());
    init_httpAuthSchemeMiddleware();
    httpAuthSchemeMiddlewareOptions = {
      step: "serialize",
      tags: ["HTTP_AUTH_SCHEME"],
      name: "httpAuthSchemeMiddleware",
      override: true,
      relation: "before",
      toMiddleware: import_middleware_serde.serializerMiddlewareOption.name
    };
    getHttpAuthSchemePlugin = (config2, { httpAuthSchemeParametersProvider, identityProviderConfigProvider }) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo(httpAuthSchemeMiddleware(config2, {
          httpAuthSchemeParametersProvider,
          identityProviderConfigProvider
        }), httpAuthSchemeMiddlewareOptions);
      }
    });
  }
});

// node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/index.js
var init_middleware_http_auth_scheme = __esm({
  "node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/index.js"() {
    init_dirname();
    init_httpAuthSchemeMiddleware();
    init_getHttpAuthSchemeEndpointRuleSetPlugin();
    init_getHttpAuthSchemePlugin();
  }
});

// node_modules/@smithy/core/dist-es/middleware-http-signing/httpSigningMiddleware.js
var import_protocol_http, import_types3, import_util_middleware2, defaultErrorHandler, defaultSuccessHandler, httpSigningMiddleware;
var init_httpSigningMiddleware = __esm({
  "node_modules/@smithy/core/dist-es/middleware-http-signing/httpSigningMiddleware.js"() {
    init_dirname();
    import_protocol_http = __toESM(require_dist_cjs2());
    import_types3 = __toESM(require_dist_cjs());
    import_util_middleware2 = __toESM(require_dist_cjs6());
    defaultErrorHandler = (signingProperties) => (error) => {
      throw error;
    };
    defaultSuccessHandler = (httpResponse, signingProperties) => {
    };
    httpSigningMiddleware = (config2) => (next, context) => async (args) => {
      if (!import_protocol_http.HttpRequest.isInstance(args.request)) {
        return next(args);
      }
      const smithyContext = (0, import_util_middleware2.getSmithyContext)(context);
      const scheme = smithyContext.selectedHttpAuthScheme;
      if (!scheme) {
        throw new Error(`No HttpAuthScheme was selected: unable to sign request`);
      }
      const { httpAuthOption: { signingProperties = {} }, identity, signer } = scheme;
      const output = await next({
        ...args,
        request: await signer.sign(args.request, identity, signingProperties)
      }).catch((signer.errorHandler || defaultErrorHandler)(signingProperties));
      (signer.successHandler || defaultSuccessHandler)(output.response, signingProperties);
      return output;
    };
  }
});

// node_modules/@smithy/core/dist-es/middleware-http-signing/getHttpSigningMiddleware.js
var httpSigningMiddlewareOptions, getHttpSigningPlugin;
var init_getHttpSigningMiddleware = __esm({
  "node_modules/@smithy/core/dist-es/middleware-http-signing/getHttpSigningMiddleware.js"() {
    init_dirname();
    init_httpSigningMiddleware();
    httpSigningMiddlewareOptions = {
      step: "finalizeRequest",
      tags: ["HTTP_SIGNING"],
      name: "httpSigningMiddleware",
      aliases: ["apiKeyMiddleware", "tokenMiddleware", "awsAuthMiddleware"],
      override: true,
      relation: "after",
      toMiddleware: "retryMiddleware"
    };
    getHttpSigningPlugin = (config2) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo(httpSigningMiddleware(config2), httpSigningMiddlewareOptions);
      }
    });
  }
});

// node_modules/@smithy/core/dist-es/middleware-http-signing/index.js
var init_middleware_http_signing = __esm({
  "node_modules/@smithy/core/dist-es/middleware-http-signing/index.js"() {
    init_dirname();
    init_httpSigningMiddleware();
    init_getHttpSigningMiddleware();
  }
});

// node_modules/@smithy/core/dist-es/normalizeProvider.js
var normalizeProvider;
var init_normalizeProvider = __esm({
  "node_modules/@smithy/core/dist-es/normalizeProvider.js"() {
    init_dirname();
    normalizeProvider = (input) => {
      if (typeof input === "function")
        return input;
      const promisified = Promise.resolve(input);
      return () => promisified;
    };
  }
});

// node_modules/@smithy/core/dist-es/pagination/createPaginator.js
function createPaginator(ClientCtor, CommandCtor, inputTokenName, outputTokenName, pageSizeTokenName) {
  return async function* paginateOperation(config2, input, ...additionalArguments) {
    let token = config2.startingToken || void 0;
    let hasNext = true;
    let page;
    while (hasNext) {
      input[inputTokenName] = token;
      if (pageSizeTokenName) {
        input[pageSizeTokenName] = input[pageSizeTokenName] ?? config2.pageSize;
      }
      if (config2.client instanceof ClientCtor) {
        page = await makePagedClientRequest(CommandCtor, config2.client, input, ...additionalArguments);
      } else {
        throw new Error(`Invalid client, expected instance of ${ClientCtor.name}`);
      }
      yield page;
      const prevToken = token;
      token = get(page, outputTokenName);
      hasNext = !!(token && (!config2.stopOnSameToken || token !== prevToken));
    }
    return void 0;
  };
}
var makePagedClientRequest, get;
var init_createPaginator = __esm({
  "node_modules/@smithy/core/dist-es/pagination/createPaginator.js"() {
    init_dirname();
    makePagedClientRequest = async (CommandCtor, client, input, ...args) => {
      return await client.send(new CommandCtor(input), ...args);
    };
    get = (fromObject, path) => {
      let cursor = fromObject;
      const pathComponents = path.split(".");
      for (const step of pathComponents) {
        if (!cursor || typeof cursor !== "object") {
          return void 0;
        }
        cursor = cursor[step];
      }
      return cursor;
    };
  }
});

// node_modules/@smithy/is-array-buffer/dist-cjs/index.js
var require_dist_cjs8 = __commonJS({
  "node_modules/@smithy/is-array-buffer/dist-cjs/index.js"(exports6, module) {
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      isArrayBuffer: () => isArrayBuffer
    });
    module.exports = __toCommonJS3(src_exports);
    var isArrayBuffer = /* @__PURE__ */ __name((arg) => typeof ArrayBuffer === "function" && arg instanceof ArrayBuffer || Object.prototype.toString.call(arg) === "[object ArrayBuffer]", "isArrayBuffer");
  }
});

// node_modules/@smithy/util-buffer-from/dist-cjs/index.js
var require_dist_cjs9 = __commonJS({
  "node_modules/@smithy/util-buffer-from/dist-cjs/index.js"(exports6, module) {
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      fromArrayBuffer: () => fromArrayBuffer,
      fromString: () => fromString
    });
    module.exports = __toCommonJS3(src_exports);
    var import_is_array_buffer = require_dist_cjs8();
    var import_buffer = __require("buffer");
    var fromArrayBuffer = /* @__PURE__ */ __name((input, offset = 0, length = input.byteLength - offset) => {
      if (!(0, import_is_array_buffer.isArrayBuffer)(input)) {
        throw new TypeError(`The "input" argument must be ArrayBuffer. Received type ${typeof input} (${input})`);
      }
      return import_buffer.Buffer.from(input, offset, length);
    }, "fromArrayBuffer");
    var fromString = /* @__PURE__ */ __name((input, encoding) => {
      if (typeof input !== "string") {
        throw new TypeError(`The "input" argument must be of type string. Received type ${typeof input} (${input})`);
      }
      return encoding ? import_buffer.Buffer.from(input, encoding) : import_buffer.Buffer.from(input);
    }, "fromString");
  }
});

// node_modules/@smithy/util-base64/dist-cjs/fromBase64.js
var require_fromBase64 = __commonJS({
  "node_modules/@smithy/util-base64/dist-cjs/fromBase64.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.fromBase64 = void 0;
    var util_buffer_from_1 = require_dist_cjs9();
    var BASE64_REGEX = /^[A-Za-z0-9+/]*={0,2}$/;
    var fromBase642 = (input) => {
      if (input.length * 3 % 4 !== 0) {
        throw new TypeError(`Incorrect padding on base64 string.`);
      }
      if (!BASE64_REGEX.exec(input)) {
        throw new TypeError(`Invalid base64 string.`);
      }
      const buffer = (0, util_buffer_from_1.fromString)(input, "base64");
      return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);
    };
    exports6.fromBase64 = fromBase642;
  }
});

// node_modules/@smithy/util-utf8/dist-cjs/index.js
var require_dist_cjs10 = __commonJS({
  "node_modules/@smithy/util-utf8/dist-cjs/index.js"(exports6, module) {
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      fromUtf8: () => fromUtf8,
      toUint8Array: () => toUint8Array,
      toUtf8: () => toUtf8
    });
    module.exports = __toCommonJS3(src_exports);
    var import_util_buffer_from = require_dist_cjs9();
    var fromUtf8 = /* @__PURE__ */ __name((input) => {
      const buf = (0, import_util_buffer_from.fromString)(input, "utf8");
      return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    }, "fromUtf8");
    var toUint8Array = /* @__PURE__ */ __name((data) => {
      if (typeof data === "string") {
        return fromUtf8(data);
      }
      if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
      }
      return new Uint8Array(data);
    }, "toUint8Array");
    var toUtf8 = /* @__PURE__ */ __name((input) => {
      if (typeof input === "string") {
        return input;
      }
      if (typeof input !== "object" || typeof input.byteOffset !== "number" || typeof input.byteLength !== "number") {
        throw new Error("@smithy/util-utf8: toUtf8 encoder function only accepts string | Uint8Array.");
      }
      return (0, import_util_buffer_from.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString("utf8");
    }, "toUtf8");
  }
});

// node_modules/@smithy/util-base64/dist-cjs/toBase64.js
var require_toBase64 = __commonJS({
  "node_modules/@smithy/util-base64/dist-cjs/toBase64.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.toBase64 = void 0;
    var util_buffer_from_1 = require_dist_cjs9();
    var util_utf8_1 = require_dist_cjs10();
    var toBase642 = (_input) => {
      let input;
      if (typeof _input === "string") {
        input = (0, util_utf8_1.fromUtf8)(_input);
      } else {
        input = _input;
      }
      if (typeof input !== "object" || typeof input.byteOffset !== "number" || typeof input.byteLength !== "number") {
        throw new Error("@smithy/util-base64: toBase64 encoder function only accepts string | Uint8Array.");
      }
      return (0, util_buffer_from_1.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString("base64");
    };
    exports6.toBase64 = toBase642;
  }
});

// node_modules/@smithy/util-base64/dist-cjs/index.js
var require_dist_cjs11 = __commonJS({
  "node_modules/@smithy/util-base64/dist-cjs/index.js"(exports6, module) {
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __reExport = (target, mod, secondTarget) => (__copyProps3(target, mod, "default"), secondTarget && __copyProps3(secondTarget, mod, "default"));
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    module.exports = __toCommonJS3(src_exports);
    __reExport(src_exports, require_fromBase64(), module.exports);
    __reExport(src_exports, require_toBase64(), module.exports);
  }
});

// dist/stream.js
var stream_exports = {};
__export(stream_exports, {
  Duplex: () => export_Duplex,
  PassThrough: () => export_PassThrough,
  Readable: () => export_Readable,
  Stream: () => Stream,
  Transform: () => export_Transform,
  Writable: () => export_Writable,
  default: () => stream_default,
  finished: () => export_finished,
  pipeline: () => export_pipeline
});
import { EventEmitter as EE } from "events";
function dew$2() {
  if (_dewExec$2) return exports$2;
  _dewExec$2 = true;
  exports$2.byteLength = byteLength;
  exports$2.toByteArray = toByteArray;
  exports$2.fromByteArray = fromByteArray;
  var lookup = [];
  var revLookup = [];
  var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
  var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  for (var i = 0, len = code.length; i < len; ++i) {
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
  }
  revLookup["-".charCodeAt(0)] = 62;
  revLookup["_".charCodeAt(0)] = 63;
  function getLens(b64) {
    var len2 = b64.length;
    if (len2 % 4 > 0) {
      throw new Error("Invalid string. Length must be a multiple of 4");
    }
    var validLen = b64.indexOf("=");
    if (validLen === -1) validLen = len2;
    var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;
    return [validLen, placeHoldersLen];
  }
  function byteLength(b64) {
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
  }
  function _byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
  }
  function toByteArray(b64) {
    var tmp;
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i2;
    for (i2 = 0; i2 < len2; i2 += 4) {
      tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];
      arr[curByte++] = tmp >> 16 & 255;
      arr[curByte++] = tmp >> 8 & 255;
      arr[curByte++] = tmp & 255;
    }
    if (placeHoldersLen === 2) {
      tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;
      arr[curByte++] = tmp & 255;
    }
    if (placeHoldersLen === 1) {
      tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;
      arr[curByte++] = tmp >> 8 & 255;
      arr[curByte++] = tmp & 255;
    }
    return arr;
  }
  function tripletToBase64(num) {
    return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
  }
  function encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for (var i2 = start; i2 < end; i2 += 3) {
      tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);
      output.push(tripletToBase64(tmp));
    }
    return output.join("");
  }
  function fromByteArray(uint8) {
    var tmp;
    var len2 = uint8.length;
    var extraBytes = len2 % 3;
    var parts = [];
    var maxChunkLength = 16383;
    for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {
      parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));
    }
    if (extraBytes === 1) {
      tmp = uint8[len2 - 1];
      parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "==");
    } else if (extraBytes === 2) {
      tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
      parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "=");
    }
    return parts.join("");
  }
  return exports$2;
}
function dew$1() {
  if (_dewExec$1) return exports$1;
  _dewExec$1 = true;
  exports$1.read = function(buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {
    }
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {
    }
    if (e === 0) {
      e = 1 - eBias;
    } else if (e === eMax) {
      return m ? NaN : (s ? -1 : 1) * Infinity;
    } else {
      m = m + Math.pow(2, mLen);
      e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
  };
  exports$1.write = function(buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
      m = isNaN(value) ? 1 : 0;
      e = eMax;
    } else {
      e = Math.floor(Math.log(value) / Math.LN2);
      if (value * (c = Math.pow(2, -e)) < 1) {
        e--;
        c *= 2;
      }
      if (e + eBias >= 1) {
        value += rt / c;
      } else {
        value += rt * Math.pow(2, 1 - eBias);
      }
      if (value * c >= 2) {
        e++;
        c /= 2;
      }
      if (e + eBias >= eMax) {
        m = 0;
        e = eMax;
      } else if (e + eBias >= 1) {
        m = (value * c - 1) * Math.pow(2, mLen);
        e = e + eBias;
      } else {
        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
        e = 0;
      }
    }
    for (; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {
    }
    e = e << mLen | m;
    eLen += mLen;
    for (; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {
    }
    buffer[offset + i - d] |= s * 128;
  };
  return exports$1;
}
function dew() {
  if (_dewExec) return exports;
  _dewExec = true;
  const base64 = dew$2();
  const ieee754 = dew$1();
  const customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" ? Symbol["for"]("nodejs.util.inspect.custom") : null;
  exports.Buffer = Buffer2;
  exports.SlowBuffer = SlowBuffer;
  exports.INSPECT_MAX_BYTES = 50;
  const K_MAX_LENGTH = 2147483647;
  exports.kMaxLength = K_MAX_LENGTH;
  Buffer2.TYPED_ARRAY_SUPPORT = typedArraySupport();
  if (!Buffer2.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {
    console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
  }
  function typedArraySupport() {
    try {
      const arr = new Uint8Array(1);
      const proto = {
        foo: function() {
          return 42;
        }
      };
      Object.setPrototypeOf(proto, Uint8Array.prototype);
      Object.setPrototypeOf(arr, proto);
      return arr.foo() === 42;
    } catch (e) {
      return false;
    }
  }
  Object.defineProperty(Buffer2.prototype, "parent", {
    enumerable: true,
    get: function() {
      if (!Buffer2.isBuffer(this)) return void 0;
      return this.buffer;
    }
  });
  Object.defineProperty(Buffer2.prototype, "offset", {
    enumerable: true,
    get: function() {
      if (!Buffer2.isBuffer(this)) return void 0;
      return this.byteOffset;
    }
  });
  function createBuffer(length) {
    if (length > K_MAX_LENGTH) {
      throw new RangeError('The value "' + length + '" is invalid for option "size"');
    }
    const buf = new Uint8Array(length);
    Object.setPrototypeOf(buf, Buffer2.prototype);
    return buf;
  }
  function Buffer2(arg, encodingOrOffset, length) {
    if (typeof arg === "number") {
      if (typeof encodingOrOffset === "string") {
        throw new TypeError('The "string" argument must be of type string. Received type number');
      }
      return allocUnsafe(arg);
    }
    return from(arg, encodingOrOffset, length);
  }
  Buffer2.poolSize = 8192;
  function from(value, encodingOrOffset, length) {
    if (typeof value === "string") {
      return fromString(value, encodingOrOffset);
    }
    if (ArrayBuffer.isView(value)) {
      return fromArrayView(value);
    }
    if (value == null) {
      throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
    }
    if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
      return fromArrayBuffer(value, encodingOrOffset, length);
    }
    if (typeof SharedArrayBuffer !== "undefined" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {
      return fromArrayBuffer(value, encodingOrOffset, length);
    }
    if (typeof value === "number") {
      throw new TypeError('The "value" argument must not be of type number. Received type number');
    }
    const valueOf = value.valueOf && value.valueOf();
    if (valueOf != null && valueOf !== value) {
      return Buffer2.from(valueOf, encodingOrOffset, length);
    }
    const b = fromObject(value);
    if (b) return b;
    if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") {
      return Buffer2.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
    }
    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
  }
  Buffer2.from = function(value, encodingOrOffset, length) {
    return from(value, encodingOrOffset, length);
  };
  Object.setPrototypeOf(Buffer2.prototype, Uint8Array.prototype);
  Object.setPrototypeOf(Buffer2, Uint8Array);
  function assertSize(size) {
    if (typeof size !== "number") {
      throw new TypeError('"size" argument must be of type number');
    } else if (size < 0) {
      throw new RangeError('The value "' + size + '" is invalid for option "size"');
    }
  }
  function alloc(size, fill, encoding) {
    assertSize(size);
    if (size <= 0) {
      return createBuffer(size);
    }
    if (fill !== void 0) {
      return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
    }
    return createBuffer(size);
  }
  Buffer2.alloc = function(size, fill, encoding) {
    return alloc(size, fill, encoding);
  };
  function allocUnsafe(size) {
    assertSize(size);
    return createBuffer(size < 0 ? 0 : checked(size) | 0);
  }
  Buffer2.allocUnsafe = function(size) {
    return allocUnsafe(size);
  };
  Buffer2.allocUnsafeSlow = function(size) {
    return allocUnsafe(size);
  };
  function fromString(string, encoding) {
    if (typeof encoding !== "string" || encoding === "") {
      encoding = "utf8";
    }
    if (!Buffer2.isEncoding(encoding)) {
      throw new TypeError("Unknown encoding: " + encoding);
    }
    const length = byteLength(string, encoding) | 0;
    let buf = createBuffer(length);
    const actual = buf.write(string, encoding);
    if (actual !== length) {
      buf = buf.slice(0, actual);
    }
    return buf;
  }
  function fromArrayLike(array) {
    const length = array.length < 0 ? 0 : checked(array.length) | 0;
    const buf = createBuffer(length);
    for (let i = 0; i < length; i += 1) {
      buf[i] = array[i] & 255;
    }
    return buf;
  }
  function fromArrayView(arrayView) {
    if (isInstance(arrayView, Uint8Array)) {
      const copy = new Uint8Array(arrayView);
      return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
    }
    return fromArrayLike(arrayView);
  }
  function fromArrayBuffer(array, byteOffset, length) {
    if (byteOffset < 0 || array.byteLength < byteOffset) {
      throw new RangeError('"offset" is outside of buffer bounds');
    }
    if (array.byteLength < byteOffset + (length || 0)) {
      throw new RangeError('"length" is outside of buffer bounds');
    }
    let buf;
    if (byteOffset === void 0 && length === void 0) {
      buf = new Uint8Array(array);
    } else if (length === void 0) {
      buf = new Uint8Array(array, byteOffset);
    } else {
      buf = new Uint8Array(array, byteOffset, length);
    }
    Object.setPrototypeOf(buf, Buffer2.prototype);
    return buf;
  }
  function fromObject(obj) {
    if (Buffer2.isBuffer(obj)) {
      const len = checked(obj.length) | 0;
      const buf = createBuffer(len);
      if (buf.length === 0) {
        return buf;
      }
      obj.copy(buf, 0, 0, len);
      return buf;
    }
    if (obj.length !== void 0) {
      if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
        return createBuffer(0);
      }
      return fromArrayLike(obj);
    }
    if (obj.type === "Buffer" && Array.isArray(obj.data)) {
      return fromArrayLike(obj.data);
    }
  }
  function checked(length) {
    if (length >= K_MAX_LENGTH) {
      throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
    }
    return length | 0;
  }
  function SlowBuffer(length) {
    if (+length != length) {
      length = 0;
    }
    return Buffer2.alloc(+length);
  }
  Buffer2.isBuffer = function isBuffer2(b) {
    return b != null && b._isBuffer === true && b !== Buffer2.prototype;
  };
  Buffer2.compare = function compare(a, b) {
    if (isInstance(a, Uint8Array)) a = Buffer2.from(a, a.offset, a.byteLength);
    if (isInstance(b, Uint8Array)) b = Buffer2.from(b, b.offset, b.byteLength);
    if (!Buffer2.isBuffer(a) || !Buffer2.isBuffer(b)) {
      throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    }
    if (a === b) return 0;
    let x = a.length;
    let y = b.length;
    for (let i = 0, len = Math.min(x, y); i < len; ++i) {
      if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
      }
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
  };
  Buffer2.isEncoding = function isEncoding(encoding) {
    switch (String(encoding).toLowerCase()) {
      case "hex":
      case "utf8":
      case "utf-8":
      case "ascii":
      case "latin1":
      case "binary":
      case "base64":
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return true;
      default:
        return false;
    }
  };
  Buffer2.concat = function concat(list, length) {
    if (!Array.isArray(list)) {
      throw new TypeError('"list" argument must be an Array of Buffers');
    }
    if (list.length === 0) {
      return Buffer2.alloc(0);
    }
    let i;
    if (length === void 0) {
      length = 0;
      for (i = 0; i < list.length; ++i) {
        length += list[i].length;
      }
    }
    const buffer = Buffer2.allocUnsafe(length);
    let pos = 0;
    for (i = 0; i < list.length; ++i) {
      let buf = list[i];
      if (isInstance(buf, Uint8Array)) {
        if (pos + buf.length > buffer.length) {
          if (!Buffer2.isBuffer(buf)) buf = Buffer2.from(buf);
          buf.copy(buffer, pos);
        } else {
          Uint8Array.prototype.set.call(buffer, buf, pos);
        }
      } else if (!Buffer2.isBuffer(buf)) {
        throw new TypeError('"list" argument must be an Array of Buffers');
      } else {
        buf.copy(buffer, pos);
      }
      pos += buf.length;
    }
    return buffer;
  };
  function byteLength(string, encoding) {
    if (Buffer2.isBuffer(string)) {
      return string.length;
    }
    if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
      return string.byteLength;
    }
    if (typeof string !== "string") {
      throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string);
    }
    const len = string.length;
    const mustMatch = arguments.length > 2 && arguments[2] === true;
    if (!mustMatch && len === 0) return 0;
    let loweredCase = false;
    for (; ; ) {
      switch (encoding) {
        case "ascii":
        case "latin1":
        case "binary":
          return len;
        case "utf8":
        case "utf-8":
          return utf8ToBytes(string).length;
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return len * 2;
        case "hex":
          return len >>> 1;
        case "base64":
          return base64ToBytes(string).length;
        default:
          if (loweredCase) {
            return mustMatch ? -1 : utf8ToBytes(string).length;
          }
          encoding = ("" + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  }
  Buffer2.byteLength = byteLength;
  function slowToString(encoding, start, end) {
    let loweredCase = false;
    if (start === void 0 || start < 0) {
      start = 0;
    }
    if (start > this.length) {
      return "";
    }
    if (end === void 0 || end > this.length) {
      end = this.length;
    }
    if (end <= 0) {
      return "";
    }
    end >>>= 0;
    start >>>= 0;
    if (end <= start) {
      return "";
    }
    if (!encoding) encoding = "utf8";
    while (true) {
      switch (encoding) {
        case "hex":
          return hexSlice(this, start, end);
        case "utf8":
        case "utf-8":
          return utf8Slice(this, start, end);
        case "ascii":
          return asciiSlice(this, start, end);
        case "latin1":
        case "binary":
          return latin1Slice(this, start, end);
        case "base64":
          return base64Slice(this, start, end);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return utf16leSlice(this, start, end);
        default:
          if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
          encoding = (encoding + "").toLowerCase();
          loweredCase = true;
      }
    }
  }
  Buffer2.prototype._isBuffer = true;
  function swap(b, n, m) {
    const i = b[n];
    b[n] = b[m];
    b[m] = i;
  }
  Buffer2.prototype.swap16 = function swap16() {
    const len = this.length;
    if (len % 2 !== 0) {
      throw new RangeError("Buffer size must be a multiple of 16-bits");
    }
    for (let i = 0; i < len; i += 2) {
      swap(this, i, i + 1);
    }
    return this;
  };
  Buffer2.prototype.swap32 = function swap32() {
    const len = this.length;
    if (len % 4 !== 0) {
      throw new RangeError("Buffer size must be a multiple of 32-bits");
    }
    for (let i = 0; i < len; i += 4) {
      swap(this, i, i + 3);
      swap(this, i + 1, i + 2);
    }
    return this;
  };
  Buffer2.prototype.swap64 = function swap64() {
    const len = this.length;
    if (len % 8 !== 0) {
      throw new RangeError("Buffer size must be a multiple of 64-bits");
    }
    for (let i = 0; i < len; i += 8) {
      swap(this, i, i + 7);
      swap(this, i + 1, i + 6);
      swap(this, i + 2, i + 5);
      swap(this, i + 3, i + 4);
    }
    return this;
  };
  Buffer2.prototype.toString = function toString() {
    const length = this.length;
    if (length === 0) return "";
    if (arguments.length === 0) return utf8Slice(this, 0, length);
    return slowToString.apply(this, arguments);
  };
  Buffer2.prototype.toLocaleString = Buffer2.prototype.toString;
  Buffer2.prototype.equals = function equals(b) {
    if (!Buffer2.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
    if (this === b) return true;
    return Buffer2.compare(this, b) === 0;
  };
  Buffer2.prototype.inspect = function inspect2() {
    let str = "";
    const max = exports.INSPECT_MAX_BYTES;
    str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
    if (this.length > max) str += " ... ";
    return "<Buffer " + str + ">";
  };
  if (customInspectSymbol) {
    Buffer2.prototype[customInspectSymbol] = Buffer2.prototype.inspect;
  }
  Buffer2.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if (isInstance(target, Uint8Array)) {
      target = Buffer2.from(target, target.offset, target.byteLength);
    }
    if (!Buffer2.isBuffer(target)) {
      throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target);
    }
    if (start === void 0) {
      start = 0;
    }
    if (end === void 0) {
      end = target ? target.length : 0;
    }
    if (thisStart === void 0) {
      thisStart = 0;
    }
    if (thisEnd === void 0) {
      thisEnd = this.length;
    }
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
      throw new RangeError("out of range index");
    }
    if (thisStart >= thisEnd && start >= end) {
      return 0;
    }
    if (thisStart >= thisEnd) {
      return -1;
    }
    if (start >= end) {
      return 1;
    }
    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target) return 0;
    let x = thisEnd - thisStart;
    let y = end - start;
    const len = Math.min(x, y);
    const thisCopy = this.slice(thisStart, thisEnd);
    const targetCopy = target.slice(start, end);
    for (let i = 0; i < len; ++i) {
      if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break;
      }
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
  };
  function bidirectionalIndexOf(buffer, val2, byteOffset, encoding, dir) {
    if (buffer.length === 0) return -1;
    if (typeof byteOffset === "string") {
      encoding = byteOffset;
      byteOffset = 0;
    } else if (byteOffset > 2147483647) {
      byteOffset = 2147483647;
    } else if (byteOffset < -2147483648) {
      byteOffset = -2147483648;
    }
    byteOffset = +byteOffset;
    if (numberIsNaN(byteOffset)) {
      byteOffset = dir ? 0 : buffer.length - 1;
    }
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
      if (dir) return -1;
      else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
      if (dir) byteOffset = 0;
      else return -1;
    }
    if (typeof val2 === "string") {
      val2 = Buffer2.from(val2, encoding);
    }
    if (Buffer2.isBuffer(val2)) {
      if (val2.length === 0) {
        return -1;
      }
      return arrayIndexOf(buffer, val2, byteOffset, encoding, dir);
    } else if (typeof val2 === "number") {
      val2 = val2 & 255;
      if (typeof Uint8Array.prototype.indexOf === "function") {
        if (dir) {
          return Uint8Array.prototype.indexOf.call(buffer, val2, byteOffset);
        } else {
          return Uint8Array.prototype.lastIndexOf.call(buffer, val2, byteOffset);
        }
      }
      return arrayIndexOf(buffer, [val2], byteOffset, encoding, dir);
    }
    throw new TypeError("val must be string, number or Buffer");
  }
  function arrayIndexOf(arr, val2, byteOffset, encoding, dir) {
    let indexSize = 1;
    let arrLength = arr.length;
    let valLength = val2.length;
    if (encoding !== void 0) {
      encoding = String(encoding).toLowerCase();
      if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
        if (arr.length < 2 || val2.length < 2) {
          return -1;
        }
        indexSize = 2;
        arrLength /= 2;
        valLength /= 2;
        byteOffset /= 2;
      }
    }
    function read(buf, i2) {
      if (indexSize === 1) {
        return buf[i2];
      } else {
        return buf.readUInt16BE(i2 * indexSize);
      }
    }
    let i;
    if (dir) {
      let foundIndex = -1;
      for (i = byteOffset; i < arrLength; i++) {
        if (read(arr, i) === read(val2, foundIndex === -1 ? 0 : i - foundIndex)) {
          if (foundIndex === -1) foundIndex = i;
          if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
        } else {
          if (foundIndex !== -1) i -= i - foundIndex;
          foundIndex = -1;
        }
      }
    } else {
      if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
      for (i = byteOffset; i >= 0; i--) {
        let found = true;
        for (let j = 0; j < valLength; j++) {
          if (read(arr, i + j) !== read(val2, j)) {
            found = false;
            break;
          }
        }
        if (found) return i;
      }
    }
    return -1;
  }
  Buffer2.prototype.includes = function includes(val2, byteOffset, encoding) {
    return this.indexOf(val2, byteOffset, encoding) !== -1;
  };
  Buffer2.prototype.indexOf = function indexOf(val2, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val2, byteOffset, encoding, true);
  };
  Buffer2.prototype.lastIndexOf = function lastIndexOf(val2, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val2, byteOffset, encoding, false);
  };
  function hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    const remaining = buf.length - offset;
    if (!length) {
      length = remaining;
    } else {
      length = Number(length);
      if (length > remaining) {
        length = remaining;
      }
    }
    const strLen = string.length;
    if (length > strLen / 2) {
      length = strLen / 2;
    }
    let i;
    for (i = 0; i < length; ++i) {
      const parsed = parseInt(string.substr(i * 2, 2), 16);
      if (numberIsNaN(parsed)) return i;
      buf[offset + i] = parsed;
    }
    return i;
  }
  function utf8Write(buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
  }
  function asciiWrite(buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length);
  }
  function base64Write(buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length);
  }
  function ucs2Write(buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
  }
  Buffer2.prototype.write = function write(string, offset, length, encoding) {
    if (offset === void 0) {
      encoding = "utf8";
      length = this.length;
      offset = 0;
    } else if (length === void 0 && typeof offset === "string") {
      encoding = offset;
      length = this.length;
      offset = 0;
    } else if (isFinite(offset)) {
      offset = offset >>> 0;
      if (isFinite(length)) {
        length = length >>> 0;
        if (encoding === void 0) encoding = "utf8";
      } else {
        encoding = length;
        length = void 0;
      }
    } else {
      throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
    }
    const remaining = this.length - offset;
    if (length === void 0 || length > remaining) length = remaining;
    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
      throw new RangeError("Attempt to write outside buffer bounds");
    }
    if (!encoding) encoding = "utf8";
    let loweredCase = false;
    for (; ; ) {
      switch (encoding) {
        case "hex":
          return hexWrite(this, string, offset, length);
        case "utf8":
        case "utf-8":
          return utf8Write(this, string, offset, length);
        case "ascii":
        case "latin1":
        case "binary":
          return asciiWrite(this, string, offset, length);
        case "base64":
          return base64Write(this, string, offset, length);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return ucs2Write(this, string, offset, length);
        default:
          if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
          encoding = ("" + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  };
  Buffer2.prototype.toJSON = function toJSON() {
    return {
      type: "Buffer",
      data: Array.prototype.slice.call(this._arr || this, 0)
    };
  };
  function base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) {
      return base64.fromByteArray(buf);
    } else {
      return base64.fromByteArray(buf.slice(start, end));
    }
  }
  function utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    const res = [];
    let i = start;
    while (i < end) {
      const firstByte = buf[i];
      let codePoint = null;
      let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
      if (i + bytesPerSequence <= end) {
        let secondByte, thirdByte, fourthByte, tempCodePoint;
        switch (bytesPerSequence) {
          case 1:
            if (firstByte < 128) {
              codePoint = firstByte;
            }
            break;
          case 2:
            secondByte = buf[i + 1];
            if ((secondByte & 192) === 128) {
              tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
              if (tempCodePoint > 127) {
                codePoint = tempCodePoint;
              }
            }
            break;
          case 3:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];
            if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
              tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
              if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                codePoint = tempCodePoint;
              }
            }
            break;
          case 4:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];
            fourthByte = buf[i + 3];
            if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
              tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
              if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                codePoint = tempCodePoint;
              }
            }
        }
      }
      if (codePoint === null) {
        codePoint = 65533;
        bytesPerSequence = 1;
      } else if (codePoint > 65535) {
        codePoint -= 65536;
        res.push(codePoint >>> 10 & 1023 | 55296);
        codePoint = 56320 | codePoint & 1023;
      }
      res.push(codePoint);
      i += bytesPerSequence;
    }
    return decodeCodePointsArray(res);
  }
  const MAX_ARGUMENTS_LENGTH = 4096;
  function decodeCodePointsArray(codePoints) {
    const len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) {
      return String.fromCharCode.apply(String, codePoints);
    }
    let res = "";
    let i = 0;
    while (i < len) {
      res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
    }
    return res;
  }
  function asciiSlice(buf, start, end) {
    let ret = "";
    end = Math.min(buf.length, end);
    for (let i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i] & 127);
    }
    return ret;
  }
  function latin1Slice(buf, start, end) {
    let ret = "";
    end = Math.min(buf.length, end);
    for (let i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i]);
    }
    return ret;
  }
  function hexSlice(buf, start, end) {
    const len = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;
    let out = "";
    for (let i = start; i < end; ++i) {
      out += hexSliceLookupTable[buf[i]];
    }
    return out;
  }
  function utf16leSlice(buf, start, end) {
    const bytes = buf.slice(start, end);
    let res = "";
    for (let i = 0; i < bytes.length - 1; i += 2) {
      res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    }
    return res;
  }
  Buffer2.prototype.slice = function slice(start, end) {
    const len = this.length;
    start = ~~start;
    end = end === void 0 ? len : ~~end;
    if (start < 0) {
      start += len;
      if (start < 0) start = 0;
    } else if (start > len) {
      start = len;
    }
    if (end < 0) {
      end += len;
      if (end < 0) end = 0;
    } else if (end > len) {
      end = len;
    }
    if (end < start) end = start;
    const newBuf = this.subarray(start, end);
    Object.setPrototypeOf(newBuf, Buffer2.prototype);
    return newBuf;
  };
  function checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
    if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
  }
  Buffer2.prototype.readUintLE = Buffer2.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {
    offset = offset >>> 0;
    byteLength2 = byteLength2 >>> 0;
    if (!noAssert) checkOffset(offset, byteLength2, this.length);
    let val2 = this[offset];
    let mul = 1;
    let i = 0;
    while (++i < byteLength2 && (mul *= 256)) {
      val2 += this[offset + i] * mul;
    }
    return val2;
  };
  Buffer2.prototype.readUintBE = Buffer2.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {
    offset = offset >>> 0;
    byteLength2 = byteLength2 >>> 0;
    if (!noAssert) {
      checkOffset(offset, byteLength2, this.length);
    }
    let val2 = this[offset + --byteLength2];
    let mul = 1;
    while (byteLength2 > 0 && (mul *= 256)) {
      val2 += this[offset + --byteLength2] * mul;
    }
    return val2;
  };
  Buffer2.prototype.readUint8 = Buffer2.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset];
  };
  Buffer2.prototype.readUint16LE = Buffer2.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
  };
  Buffer2.prototype.readUint16BE = Buffer2.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
  };
  Buffer2.prototype.readUint32LE = Buffer2.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
  };
  Buffer2.prototype.readUint32BE = Buffer2.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
  };
  Buffer2.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === void 0 || last === void 0) {
      boundsError(offset, this.length - 8);
    }
    const lo = first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;
    const hi = this[++offset] + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + last * 2 ** 24;
    return BigInt(lo) + (BigInt(hi) << BigInt(32));
  });
  Buffer2.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === void 0 || last === void 0) {
      boundsError(offset, this.length - 8);
    }
    const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
    const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last;
    return (BigInt(hi) << BigInt(32)) + BigInt(lo);
  });
  Buffer2.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {
    offset = offset >>> 0;
    byteLength2 = byteLength2 >>> 0;
    if (!noAssert) checkOffset(offset, byteLength2, this.length);
    let val2 = this[offset];
    let mul = 1;
    let i = 0;
    while (++i < byteLength2 && (mul *= 256)) {
      val2 += this[offset + i] * mul;
    }
    mul *= 128;
    if (val2 >= mul) val2 -= Math.pow(2, 8 * byteLength2);
    return val2;
  };
  Buffer2.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {
    offset = offset >>> 0;
    byteLength2 = byteLength2 >>> 0;
    if (!noAssert) checkOffset(offset, byteLength2, this.length);
    let i = byteLength2;
    let mul = 1;
    let val2 = this[offset + --i];
    while (i > 0 && (mul *= 256)) {
      val2 += this[offset + --i] * mul;
    }
    mul *= 128;
    if (val2 >= mul) val2 -= Math.pow(2, 8 * byteLength2);
    return val2;
  };
  Buffer2.prototype.readInt8 = function readInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 128)) return this[offset];
    return (255 - this[offset] + 1) * -1;
  };
  Buffer2.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    const val2 = this[offset] | this[offset + 1] << 8;
    return val2 & 32768 ? val2 | 4294901760 : val2;
  };
  Buffer2.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    const val2 = this[offset + 1] | this[offset] << 8;
    return val2 & 32768 ? val2 | 4294901760 : val2;
  };
  Buffer2.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
  };
  Buffer2.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
  };
  Buffer2.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === void 0 || last === void 0) {
      boundsError(offset, this.length - 8);
    }
    const val2 = this[offset + 4] + this[offset + 5] * 2 ** 8 + this[offset + 6] * 2 ** 16 + (last << 24);
    return (BigInt(val2) << BigInt(32)) + BigInt(first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);
  });
  Buffer2.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === void 0 || last === void 0) {
      boundsError(offset, this.length - 8);
    }
    const val2 = (first << 24) + // Overflow
    this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
    return (BigInt(val2) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last);
  });
  Buffer2.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, true, 23, 4);
  };
  Buffer2.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, false, 23, 4);
  };
  Buffer2.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, true, 52, 8);
  };
  Buffer2.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, false, 52, 8);
  };
  function checkInt(buf, value, offset, ext, max, min) {
    if (!Buffer2.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
  }
  Buffer2.prototype.writeUintLE = Buffer2.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength2 = byteLength2 >>> 0;
    if (!noAssert) {
      const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
      checkInt(this, value, offset, byteLength2, maxBytes, 0);
    }
    let mul = 1;
    let i = 0;
    this[offset] = value & 255;
    while (++i < byteLength2 && (mul *= 256)) {
      this[offset + i] = value / mul & 255;
    }
    return offset + byteLength2;
  };
  Buffer2.prototype.writeUintBE = Buffer2.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength2 = byteLength2 >>> 0;
    if (!noAssert) {
      const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
      checkInt(this, value, offset, byteLength2, maxBytes, 0);
    }
    let i = byteLength2 - 1;
    let mul = 1;
    this[offset + i] = value & 255;
    while (--i >= 0 && (mul *= 256)) {
      this[offset + i] = value / mul & 255;
    }
    return offset + byteLength2;
  };
  Buffer2.prototype.writeUint8 = Buffer2.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 255, 0);
    this[offset] = value & 255;
    return offset + 1;
  };
  Buffer2.prototype.writeUint16LE = Buffer2.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
    this[offset] = value & 255;
    this[offset + 1] = value >>> 8;
    return offset + 2;
  };
  Buffer2.prototype.writeUint16BE = Buffer2.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 255;
    return offset + 2;
  };
  Buffer2.prototype.writeUint32LE = Buffer2.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 255;
    return offset + 4;
  };
  Buffer2.prototype.writeUint32BE = Buffer2.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 255;
    return offset + 4;
  };
  function wrtBigUInt64LE(buf, value, offset, min, max) {
    checkIntBI(value, min, max, buf, offset, 7);
    let lo = Number(value & BigInt(4294967295));
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    let hi = Number(value >> BigInt(32) & BigInt(4294967295));
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    return offset;
  }
  function wrtBigUInt64BE(buf, value, offset, min, max) {
    checkIntBI(value, min, max, buf, offset, 7);
    let lo = Number(value & BigInt(4294967295));
    buf[offset + 7] = lo;
    lo = lo >> 8;
    buf[offset + 6] = lo;
    lo = lo >> 8;
    buf[offset + 5] = lo;
    lo = lo >> 8;
    buf[offset + 4] = lo;
    let hi = Number(value >> BigInt(32) & BigInt(4294967295));
    buf[offset + 3] = hi;
    hi = hi >> 8;
    buf[offset + 2] = hi;
    hi = hi >> 8;
    buf[offset + 1] = hi;
    hi = hi >> 8;
    buf[offset] = hi;
    return offset + 8;
  }
  Buffer2.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {
    return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
  });
  Buffer2.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {
    return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
  });
  Buffer2.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
      const limit = Math.pow(2, 8 * byteLength2 - 1);
      checkInt(this, value, offset, byteLength2, limit - 1, -limit);
    }
    let i = 0;
    let mul = 1;
    let sub = 0;
    this[offset] = value & 255;
    while (++i < byteLength2 && (mul *= 256)) {
      if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
        sub = 1;
      }
      this[offset + i] = (value / mul >> 0) - sub & 255;
    }
    return offset + byteLength2;
  };
  Buffer2.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
      const limit = Math.pow(2, 8 * byteLength2 - 1);
      checkInt(this, value, offset, byteLength2, limit - 1, -limit);
    }
    let i = byteLength2 - 1;
    let mul = 1;
    let sub = 0;
    this[offset + i] = value & 255;
    while (--i >= 0 && (mul *= 256)) {
      if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
        sub = 1;
      }
      this[offset + i] = (value / mul >> 0) - sub & 255;
    }
    return offset + byteLength2;
  };
  Buffer2.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 127, -128);
    if (value < 0) value = 255 + value + 1;
    this[offset] = value & 255;
    return offset + 1;
  };
  Buffer2.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
    this[offset] = value & 255;
    this[offset + 1] = value >>> 8;
    return offset + 2;
  };
  Buffer2.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 255;
    return offset + 2;
  };
  Buffer2.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
    this[offset] = value & 255;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
    return offset + 4;
  };
  Buffer2.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
    if (value < 0) value = 4294967295 + value + 1;
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 255;
    return offset + 4;
  };
  Buffer2.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {
    return wrtBigUInt64LE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
  });
  Buffer2.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {
    return wrtBigUInt64BE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
  });
  function checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
    if (offset < 0) throw new RangeError("Index out of range");
  }
  function writeFloat(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 4);
    }
    ieee754.write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
  }
  Buffer2.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert);
  };
  Buffer2.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert);
  };
  function writeDouble(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 8);
    }
    ieee754.write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
  }
  Buffer2.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert);
  };
  Buffer2.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert);
  };
  Buffer2.prototype.copy = function copy(target, targetStart, start, end) {
    if (!Buffer2.isBuffer(target)) throw new TypeError("argument should be a Buffer");
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;
    if (end === start) return 0;
    if (target.length === 0 || this.length === 0) return 0;
    if (targetStart < 0) {
      throw new RangeError("targetStart out of bounds");
    }
    if (start < 0 || start >= this.length) throw new RangeError("Index out of range");
    if (end < 0) throw new RangeError("sourceEnd out of bounds");
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) {
      end = target.length - targetStart + start;
    }
    const len = end - start;
    if (this === target && typeof Uint8Array.prototype.copyWithin === "function") {
      this.copyWithin(targetStart, start, end);
    } else {
      Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
    }
    return len;
  };
  Buffer2.prototype.fill = function fill(val2, start, end, encoding) {
    if (typeof val2 === "string") {
      if (typeof start === "string") {
        encoding = start;
        start = 0;
        end = this.length;
      } else if (typeof end === "string") {
        encoding = end;
        end = this.length;
      }
      if (encoding !== void 0 && typeof encoding !== "string") {
        throw new TypeError("encoding must be a string");
      }
      if (typeof encoding === "string" && !Buffer2.isEncoding(encoding)) {
        throw new TypeError("Unknown encoding: " + encoding);
      }
      if (val2.length === 1) {
        const code = val2.charCodeAt(0);
        if (encoding === "utf8" && code < 128 || encoding === "latin1") {
          val2 = code;
        }
      }
    } else if (typeof val2 === "number") {
      val2 = val2 & 255;
    } else if (typeof val2 === "boolean") {
      val2 = Number(val2);
    }
    if (start < 0 || this.length < start || this.length < end) {
      throw new RangeError("Out of range index");
    }
    if (end <= start) {
      return this;
    }
    start = start >>> 0;
    end = end === void 0 ? this.length : end >>> 0;
    if (!val2) val2 = 0;
    let i;
    if (typeof val2 === "number") {
      for (i = start; i < end; ++i) {
        this[i] = val2;
      }
    } else {
      const bytes = Buffer2.isBuffer(val2) ? val2 : Buffer2.from(val2, encoding);
      const len = bytes.length;
      if (len === 0) {
        throw new TypeError('The value "' + val2 + '" is invalid for argument "value"');
      }
      for (i = 0; i < end - start; ++i) {
        this[i + start] = bytes[i % len];
      }
    }
    return this;
  };
  const errors = {};
  function E(sym, getMessage, Base) {
    errors[sym] = class NodeError extends Base {
      constructor() {
        super();
        Object.defineProperty(this, "message", {
          value: getMessage.apply(this, arguments),
          writable: true,
          configurable: true
        });
        this.name = `${this.name} [${sym}]`;
        this.stack;
        delete this.name;
      }
      get code() {
        return sym;
      }
      set code(value) {
        Object.defineProperty(this, "code", {
          configurable: true,
          enumerable: true,
          value,
          writable: true
        });
      }
      toString() {
        return `${this.name} [${sym}]: ${this.message}`;
      }
    };
  }
  E("ERR_BUFFER_OUT_OF_BOUNDS", function(name) {
    if (name) {
      return `${name} is outside of buffer bounds`;
    }
    return "Attempt to access memory outside buffer bounds";
  }, RangeError);
  E("ERR_INVALID_ARG_TYPE", function(name, actual) {
    return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
  }, TypeError);
  E("ERR_OUT_OF_RANGE", function(str, range, input) {
    let msg = `The value of "${str}" is out of range.`;
    let received = input;
    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
      received = addNumericalSeparator(String(input));
    } else if (typeof input === "bigint") {
      received = String(input);
      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {
        received = addNumericalSeparator(received);
      }
      received += "n";
    }
    msg += ` It must be ${range}. Received ${received}`;
    return msg;
  }, RangeError);
  function addNumericalSeparator(val2) {
    let res = "";
    let i = val2.length;
    const start = val2[0] === "-" ? 1 : 0;
    for (; i >= start + 4; i -= 3) {
      res = `_${val2.slice(i - 3, i)}${res}`;
    }
    return `${val2.slice(0, i)}${res}`;
  }
  function checkBounds(buf, offset, byteLength2) {
    validateNumber(offset, "offset");
    if (buf[offset] === void 0 || buf[offset + byteLength2] === void 0) {
      boundsError(offset, buf.length - (byteLength2 + 1));
    }
  }
  function checkIntBI(value, min, max, buf, offset, byteLength2) {
    if (value > max || value < min) {
      const n = typeof min === "bigint" ? "n" : "";
      let range;
      {
        if (min === 0 || min === BigInt(0)) {
          range = `>= 0${n} and < 2${n} ** ${(byteLength2 + 1) * 8}${n}`;
        } else {
          range = `>= -(2${n} ** ${(byteLength2 + 1) * 8 - 1}${n}) and < 2 ** ${(byteLength2 + 1) * 8 - 1}${n}`;
        }
      }
      throw new errors.ERR_OUT_OF_RANGE("value", range, value);
    }
    checkBounds(buf, offset, byteLength2);
  }
  function validateNumber(value, name) {
    if (typeof value !== "number") {
      throw new errors.ERR_INVALID_ARG_TYPE(name, "number", value);
    }
  }
  function boundsError(value, length, type) {
    if (Math.floor(value) !== value) {
      validateNumber(value, type);
      throw new errors.ERR_OUT_OF_RANGE("offset", "an integer", value);
    }
    if (length < 0) {
      throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
    }
    throw new errors.ERR_OUT_OF_RANGE("offset", `>= ${0} and <= ${length}`, value);
  }
  const INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
  function base64clean(str) {
    str = str.split("=")[0];
    str = str.trim().replace(INVALID_BASE64_RE, "");
    if (str.length < 2) return "";
    while (str.length % 4 !== 0) {
      str = str + "=";
    }
    return str;
  }
  function utf8ToBytes(string, units) {
    units = units || Infinity;
    let codePoint;
    const length = string.length;
    let leadSurrogate = null;
    const bytes = [];
    for (let i = 0; i < length; ++i) {
      codePoint = string.charCodeAt(i);
      if (codePoint > 55295 && codePoint < 57344) {
        if (!leadSurrogate) {
          if (codePoint > 56319) {
            if ((units -= 3) > -1) bytes.push(239, 191, 189);
            continue;
          } else if (i + 1 === length) {
            if ((units -= 3) > -1) bytes.push(239, 191, 189);
            continue;
          }
          leadSurrogate = codePoint;
          continue;
        }
        if (codePoint < 56320) {
          if ((units -= 3) > -1) bytes.push(239, 191, 189);
          leadSurrogate = codePoint;
          continue;
        }
        codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
      } else if (leadSurrogate) {
        if ((units -= 3) > -1) bytes.push(239, 191, 189);
      }
      leadSurrogate = null;
      if (codePoint < 128) {
        if ((units -= 1) < 0) break;
        bytes.push(codePoint);
      } else if (codePoint < 2048) {
        if ((units -= 2) < 0) break;
        bytes.push(codePoint >> 6 | 192, codePoint & 63 | 128);
      } else if (codePoint < 65536) {
        if ((units -= 3) < 0) break;
        bytes.push(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
      } else if (codePoint < 1114112) {
        if ((units -= 4) < 0) break;
        bytes.push(codePoint >> 18 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
      } else {
        throw new Error("Invalid code point");
      }
    }
    return bytes;
  }
  function asciiToBytes(str) {
    const byteArray = [];
    for (let i = 0; i < str.length; ++i) {
      byteArray.push(str.charCodeAt(i) & 255);
    }
    return byteArray;
  }
  function utf16leToBytes(str, units) {
    let c, hi, lo;
    const byteArray = [];
    for (let i = 0; i < str.length; ++i) {
      if ((units -= 2) < 0) break;
      c = str.charCodeAt(i);
      hi = c >> 8;
      lo = c % 256;
      byteArray.push(lo);
      byteArray.push(hi);
    }
    return byteArray;
  }
  function base64ToBytes(str) {
    return base64.toByteArray(base64clean(str));
  }
  function blitBuffer(src, dst, offset, length) {
    let i;
    for (i = 0; i < length; ++i) {
      if (i + offset >= dst.length || i >= src.length) break;
      dst[i + offset] = src[i];
    }
    return i;
  }
  function isInstance(obj, type) {
    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
  }
  function numberIsNaN(obj) {
    return obj !== obj;
  }
  const hexSliceLookupTable = function() {
    const alphabet = "0123456789abcdef";
    const table = new Array(256);
    for (let i = 0; i < 16; ++i) {
      const i16 = i * 16;
      for (let j = 0; j < 16; ++j) {
        table[i16 + j] = alphabet[i] + alphabet[j];
      }
    }
    return table;
  }();
  function defineBigIntMethod(fn) {
    return typeof BigInt === "undefined" ? BufferBigIntNotDefined : fn;
  }
  function BufferBigIntNotDefined() {
    throw new Error("BigInt not supported");
  }
  return exports;
}
function dew$12() {
  if (_dewExec$12) return exports$22;
  _dewExec$12 = true;
  var buffer = dew();
  var Buffer2 = buffer.Buffer;
  function copyProps(src, dst) {
    for (var key in src) {
      dst[key] = src[key];
    }
  }
  if (Buffer2.from && Buffer2.alloc && Buffer2.allocUnsafe && Buffer2.allocUnsafeSlow) {
    exports$22 = buffer;
  } else {
    copyProps(buffer, exports$22);
    exports$22.Buffer = SafeBuffer;
  }
  function SafeBuffer(arg, encodingOrOffset, length) {
    return Buffer2(arg, encodingOrOffset, length);
  }
  SafeBuffer.prototype = Object.create(Buffer2.prototype);
  copyProps(Buffer2, SafeBuffer);
  SafeBuffer.from = function(arg, encodingOrOffset, length) {
    if (typeof arg === "number") {
      throw new TypeError("Argument must not be a number");
    }
    return Buffer2(arg, encodingOrOffset, length);
  };
  SafeBuffer.alloc = function(size, fill, encoding) {
    if (typeof size !== "number") {
      throw new TypeError("Argument must be a number");
    }
    var buf = Buffer2(size);
    if (fill !== void 0) {
      if (typeof encoding === "string") {
        buf.fill(fill, encoding);
      } else {
        buf.fill(fill);
      }
    } else {
      buf.fill(0);
    }
    return buf;
  };
  SafeBuffer.allocUnsafe = function(size) {
    if (typeof size !== "number") {
      throw new TypeError("Argument must be a number");
    }
    return Buffer2(size);
  };
  SafeBuffer.allocUnsafeSlow = function(size) {
    if (typeof size !== "number") {
      throw new TypeError("Argument must be a number");
    }
    return buffer.SlowBuffer(size);
  };
  return exports$22;
}
function dew2() {
  if (_dewExec2) return exports$12;
  _dewExec2 = true;
  var Buffer2 = dew$12().Buffer;
  var isEncoding = Buffer2.isEncoding || function(encoding) {
    encoding = "" + encoding;
    switch (encoding && encoding.toLowerCase()) {
      case "hex":
      case "utf8":
      case "utf-8":
      case "ascii":
      case "binary":
      case "base64":
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
      case "raw":
        return true;
      default:
        return false;
    }
  };
  function _normalizeEncoding(enc) {
    if (!enc) return "utf8";
    var retried;
    while (true) {
      switch (enc) {
        case "utf8":
        case "utf-8":
          return "utf8";
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return "utf16le";
        case "latin1":
        case "binary":
          return "latin1";
        case "base64":
        case "ascii":
        case "hex":
          return enc;
        default:
          if (retried) return;
          enc = ("" + enc).toLowerCase();
          retried = true;
      }
    }
  }
  function normalizeEncoding(enc) {
    var nenc = _normalizeEncoding(enc);
    if (typeof nenc !== "string" && (Buffer2.isEncoding === isEncoding || !isEncoding(enc))) throw new Error("Unknown encoding: " + enc);
    return nenc || enc;
  }
  exports$12.StringDecoder = StringDecoder2;
  function StringDecoder2(encoding) {
    this.encoding = normalizeEncoding(encoding);
    var nb;
    switch (this.encoding) {
      case "utf16le":
        this.text = utf16Text;
        this.end = utf16End;
        nb = 4;
        break;
      case "utf8":
        this.fillLast = utf8FillLast;
        nb = 4;
        break;
      case "base64":
        this.text = base64Text;
        this.end = base64End;
        nb = 3;
        break;
      default:
        this.write = simpleWrite;
        this.end = simpleEnd;
        return;
    }
    this.lastNeed = 0;
    this.lastTotal = 0;
    this.lastChar = Buffer2.allocUnsafe(nb);
  }
  StringDecoder2.prototype.write = function(buf) {
    if (buf.length === 0) return "";
    var r;
    var i;
    if (this.lastNeed) {
      r = this.fillLast(buf);
      if (r === void 0) return "";
      i = this.lastNeed;
      this.lastNeed = 0;
    } else {
      i = 0;
    }
    if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
    return r || "";
  };
  StringDecoder2.prototype.end = utf8End;
  StringDecoder2.prototype.text = utf8Text;
  StringDecoder2.prototype.fillLast = function(buf) {
    if (this.lastNeed <= buf.length) {
      buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
      return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
    this.lastNeed -= buf.length;
  };
  function utf8CheckByte(byte) {
    if (byte <= 127) return 0;
    else if (byte >> 5 === 6) return 2;
    else if (byte >> 4 === 14) return 3;
    else if (byte >> 3 === 30) return 4;
    return byte >> 6 === 2 ? -1 : -2;
  }
  function utf8CheckIncomplete(self2, buf, i) {
    var j = buf.length - 1;
    if (j < i) return 0;
    var nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
      if (nb > 0) self2.lastNeed = nb - 1;
      return nb;
    }
    if (--j < i || nb === -2) return 0;
    nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
      if (nb > 0) self2.lastNeed = nb - 2;
      return nb;
    }
    if (--j < i || nb === -2) return 0;
    nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
      if (nb > 0) {
        if (nb === 2) nb = 0;
        else self2.lastNeed = nb - 3;
      }
      return nb;
    }
    return 0;
  }
  function utf8CheckExtraBytes(self2, buf, p) {
    if ((buf[0] & 192) !== 128) {
      self2.lastNeed = 0;
      return "\uFFFD";
    }
    if (self2.lastNeed > 1 && buf.length > 1) {
      if ((buf[1] & 192) !== 128) {
        self2.lastNeed = 1;
        return "\uFFFD";
      }
      if (self2.lastNeed > 2 && buf.length > 2) {
        if ((buf[2] & 192) !== 128) {
          self2.lastNeed = 2;
          return "\uFFFD";
        }
      }
    }
  }
  function utf8FillLast(buf) {
    var p = this.lastTotal - this.lastNeed;
    var r = utf8CheckExtraBytes(this, buf);
    if (r !== void 0) return r;
    if (this.lastNeed <= buf.length) {
      buf.copy(this.lastChar, p, 0, this.lastNeed);
      return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, p, 0, buf.length);
    this.lastNeed -= buf.length;
  }
  function utf8Text(buf, i) {
    var total = utf8CheckIncomplete(this, buf, i);
    if (!this.lastNeed) return buf.toString("utf8", i);
    this.lastTotal = total;
    var end = buf.length - (total - this.lastNeed);
    buf.copy(this.lastChar, 0, end);
    return buf.toString("utf8", i, end);
  }
  function utf8End(buf) {
    var r = buf && buf.length ? this.write(buf) : "";
    if (this.lastNeed) return r + "\uFFFD";
    return r;
  }
  function utf16Text(buf, i) {
    if ((buf.length - i) % 2 === 0) {
      var r = buf.toString("utf16le", i);
      if (r) {
        var c = r.charCodeAt(r.length - 1);
        if (c >= 55296 && c <= 56319) {
          this.lastNeed = 2;
          this.lastTotal = 4;
          this.lastChar[0] = buf[buf.length - 2];
          this.lastChar[1] = buf[buf.length - 1];
          return r.slice(0, -1);
        }
      }
      return r;
    }
    this.lastNeed = 1;
    this.lastTotal = 2;
    this.lastChar[0] = buf[buf.length - 1];
    return buf.toString("utf16le", i, buf.length - 1);
  }
  function utf16End(buf) {
    var r = buf && buf.length ? this.write(buf) : "";
    if (this.lastNeed) {
      var end = this.lastTotal - this.lastNeed;
      return r + this.lastChar.toString("utf16le", 0, end);
    }
    return r;
  }
  function base64Text(buf, i) {
    var n = (buf.length - i) % 3;
    if (n === 0) return buf.toString("base64", i);
    this.lastNeed = 3 - n;
    this.lastTotal = 3;
    if (n === 1) {
      this.lastChar[0] = buf[buf.length - 1];
    } else {
      this.lastChar[0] = buf[buf.length - 2];
      this.lastChar[1] = buf[buf.length - 1];
    }
    return buf.toString("base64", i, buf.length - n);
  }
  function base64End(buf) {
    var r = buf && buf.length ? this.write(buf) : "";
    if (this.lastNeed) return r + this.lastChar.toString("base64", 0, 3 - this.lastNeed);
    return r;
  }
  function simpleWrite(buf) {
    return buf.toString(this.encoding);
  }
  function simpleEnd(buf) {
    return buf && buf.length ? this.write(buf) : "";
  }
  return exports$12;
}
function inherits(ctor, superCtor) {
  if (superCtor) {
    ctor.super_ = superCtor;
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  }
}
function Stream() {
  EE.call(this);
}
var __create2, __defProp2, __getOwnPropDesc2, __getOwnPropNames2, __getProtoOf2, __hasOwnProp2, __require2, __esm2, __commonJS2, __export2, __copyProps2, __toESM2, __toCommonJS2, init_dirname2, require_primordials, require_event_target_shim, require_abort_controller, require_util, require_errors, require_validators, process_exports, process2, init_process, require_utils, require_end_of_stream, require_destroy, require_legacy, require_add_abort_signal, require_buffer_list, require_state, exports$2, _dewExec$2, exports$1, _dewExec$1, exports, _dewExec, init_chunk_DtuTasat, exports$22, _dewExec$12, exports$12, _dewExec2, exports2, StringDecoder, init_chunk_CcCWfKp1, string_decoder_exports, init_string_decoder, require_from, require_readable, require_writable, require_duplexify, require_duplex, require_transform, require_passthrough, require_pipeline, require_compose, require_operators, require_promises, require_stream, require_stream_readable, require_stream_writable, require_stream_duplex, require_stream_transform, require_stream_passthrough, import_stream_readable, import_stream_writable, import_stream_duplex, import_stream_transform, import_stream_passthrough, import_end_of_stream, import_pipeline, stream_default, export_Duplex, export_PassThrough, export_Readable, export_Transform, export_Writable, export_finished, export_pipeline;
var init_stream = __esm({
  "dist/stream.js"() {
    init_dirname();
    __create2 = Object.create;
    __defProp2 = Object.defineProperty;
    __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    __getOwnPropNames2 = Object.getOwnPropertyNames;
    __getProtoOf2 = Object.getPrototypeOf;
    __hasOwnProp2 = Object.prototype.hasOwnProperty;
    __require2 = /* @__PURE__ */ ((x) => typeof __require !== "undefined" ? __require : typeof Proxy !== "undefined" ? new Proxy(x, {
      get: (a, b) => (typeof __require !== "undefined" ? __require : a)[b]
    }) : x)(function(x) {
      if (typeof __require !== "undefined") return __require.apply(this, arguments);
      throw Error('Dynamic require of "' + x + '" is not supported');
    });
    __esm2 = (fn, res) => function __init() {
      return fn && (res = (0, fn[__getOwnPropNames2(fn)[0]])(fn = 0)), res;
    };
    __commonJS2 = (cb, mod) => function __require22() {
      return mod || (0, cb[__getOwnPropNames2(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
    };
    __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    init_dirname2 = __esm2({
      "../../../../node_modules/esbuild-plugin-polyfill-node/polyfills/__dirname.js"() {
      }
    });
    require_primordials = __commonJS2({
      "node_modules/readable-stream/lib/ours/primordials.js"(exports32, module) {
        "use strict";
        init_dirname2();
        module.exports = {
          ArrayIsArray(self2) {
            return Array.isArray(self2);
          },
          ArrayPrototypeIncludes(self2, el) {
            return self2.includes(el);
          },
          ArrayPrototypeIndexOf(self2, el) {
            return self2.indexOf(el);
          },
          ArrayPrototypeJoin(self2, sep) {
            return self2.join(sep);
          },
          ArrayPrototypeMap(self2, fn) {
            return self2.map(fn);
          },
          ArrayPrototypePop(self2, el) {
            return self2.pop(el);
          },
          ArrayPrototypePush(self2, el) {
            return self2.push(el);
          },
          ArrayPrototypeSlice(self2, start, end) {
            return self2.slice(start, end);
          },
          Error,
          FunctionPrototypeCall(fn, thisArgs, ...args) {
            return fn.call(thisArgs, ...args);
          },
          FunctionPrototypeSymbolHasInstance(self2, instance) {
            return Function.prototype[Symbol.hasInstance].call(self2, instance);
          },
          MathFloor: Math.floor,
          Number,
          NumberIsInteger: Number.isInteger,
          NumberIsNaN: Number.isNaN,
          NumberMAX_SAFE_INTEGER: Number.MAX_SAFE_INTEGER,
          NumberMIN_SAFE_INTEGER: Number.MIN_SAFE_INTEGER,
          NumberParseInt: Number.parseInt,
          ObjectDefineProperties(self2, props) {
            return Object.defineProperties(self2, props);
          },
          ObjectDefineProperty(self2, name, prop) {
            return Object.defineProperty(self2, name, prop);
          },
          ObjectGetOwnPropertyDescriptor(self2, name) {
            return Object.getOwnPropertyDescriptor(self2, name);
          },
          ObjectKeys(obj) {
            return Object.keys(obj);
          },
          ObjectSetPrototypeOf(target, proto) {
            return Object.setPrototypeOf(target, proto);
          },
          Promise,
          PromisePrototypeCatch(self2, fn) {
            return self2.catch(fn);
          },
          PromisePrototypeThen(self2, thenFn, catchFn) {
            return self2.then(thenFn, catchFn);
          },
          PromiseReject(err) {
            return Promise.reject(err);
          },
          PromiseResolve(val2) {
            return Promise.resolve(val2);
          },
          ReflectApply: Reflect.apply,
          RegExpPrototypeTest(self2, value) {
            return self2.test(value);
          },
          SafeSet: Set,
          String,
          StringPrototypeSlice(self2, start, end) {
            return self2.slice(start, end);
          },
          StringPrototypeToLowerCase(self2) {
            return self2.toLowerCase();
          },
          StringPrototypeToUpperCase(self2) {
            return self2.toUpperCase();
          },
          StringPrototypeTrim(self2) {
            return self2.trim();
          },
          Symbol,
          SymbolFor: Symbol.for,
          SymbolAsyncIterator: Symbol.asyncIterator,
          SymbolHasInstance: Symbol.hasInstance,
          SymbolIterator: Symbol.iterator,
          SymbolDispose: Symbol.dispose || Symbol("Symbol.dispose"),
          SymbolAsyncDispose: Symbol.asyncDispose || Symbol("Symbol.asyncDispose"),
          TypedArrayPrototypeSet(self2, buf, len) {
            return self2.set(buf, len);
          },
          Boolean,
          Uint8Array
        };
      }
    });
    require_event_target_shim = __commonJS2({
      "node_modules/event-target-shim/dist/event-target-shim.js"(exports32, module) {
        "use strict";
        init_dirname2();
        Object.defineProperty(exports32, "__esModule", { value: true });
        var privateData = /* @__PURE__ */ new WeakMap();
        var wrappers = /* @__PURE__ */ new WeakMap();
        function pd(event) {
          const retv = privateData.get(event);
          console.assert(
            retv != null,
            "'this' is expected an Event object, but got",
            event
          );
          return retv;
        }
        function setCancelFlag(data) {
          if (data.passiveListener != null) {
            if (typeof console !== "undefined" && typeof console.error === "function") {
              console.error(
                "Unable to preventDefault inside passive event listener invocation.",
                data.passiveListener
              );
            }
            return;
          }
          if (!data.event.cancelable) {
            return;
          }
          data.canceled = true;
          if (typeof data.event.preventDefault === "function") {
            data.event.preventDefault();
          }
        }
        function Event(eventTarget, event) {
          privateData.set(this, {
            eventTarget,
            event,
            eventPhase: 2,
            currentTarget: eventTarget,
            canceled: false,
            stopped: false,
            immediateStopped: false,
            passiveListener: null,
            timeStamp: event.timeStamp || Date.now()
          });
          Object.defineProperty(this, "isTrusted", { value: false, enumerable: true });
          const keys = Object.keys(event);
          for (let i = 0; i < keys.length; ++i) {
            const key = keys[i];
            if (!(key in this)) {
              Object.defineProperty(this, key, defineRedirectDescriptor(key));
            }
          }
        }
        Event.prototype = {
          /**
           * The type of this event.
           * @type {string}
           */
          get type() {
            return pd(this).event.type;
          },
          /**
           * The target of this event.
           * @type {EventTarget}
           */
          get target() {
            return pd(this).eventTarget;
          },
          /**
           * The target of this event.
           * @type {EventTarget}
           */
          get currentTarget() {
            return pd(this).currentTarget;
          },
          /**
           * @returns {EventTarget[]} The composed path of this event.
           */
          composedPath() {
            const currentTarget = pd(this).currentTarget;
            if (currentTarget == null) {
              return [];
            }
            return [currentTarget];
          },
          /**
           * Constant of NONE.
           * @type {number}
           */
          get NONE() {
            return 0;
          },
          /**
           * Constant of CAPTURING_PHASE.
           * @type {number}
           */
          get CAPTURING_PHASE() {
            return 1;
          },
          /**
           * Constant of AT_TARGET.
           * @type {number}
           */
          get AT_TARGET() {
            return 2;
          },
          /**
           * Constant of BUBBLING_PHASE.
           * @type {number}
           */
          get BUBBLING_PHASE() {
            return 3;
          },
          /**
           * The target of this event.
           * @type {number}
           */
          get eventPhase() {
            return pd(this).eventPhase;
          },
          /**
           * Stop event bubbling.
           * @returns {void}
           */
          stopPropagation() {
            const data = pd(this);
            data.stopped = true;
            if (typeof data.event.stopPropagation === "function") {
              data.event.stopPropagation();
            }
          },
          /**
           * Stop event bubbling.
           * @returns {void}
           */
          stopImmediatePropagation() {
            const data = pd(this);
            data.stopped = true;
            data.immediateStopped = true;
            if (typeof data.event.stopImmediatePropagation === "function") {
              data.event.stopImmediatePropagation();
            }
          },
          /**
           * The flag to be bubbling.
           * @type {boolean}
           */
          get bubbles() {
            return Boolean(pd(this).event.bubbles);
          },
          /**
           * The flag to be cancelable.
           * @type {boolean}
           */
          get cancelable() {
            return Boolean(pd(this).event.cancelable);
          },
          /**
           * Cancel this event.
           * @returns {void}
           */
          preventDefault() {
            setCancelFlag(pd(this));
          },
          /**
           * The flag to indicate cancellation state.
           * @type {boolean}
           */
          get defaultPrevented() {
            return pd(this).canceled;
          },
          /**
           * The flag to be composed.
           * @type {boolean}
           */
          get composed() {
            return Boolean(pd(this).event.composed);
          },
          /**
           * The unix time of this event.
           * @type {number}
           */
          get timeStamp() {
            return pd(this).timeStamp;
          },
          /**
           * The target of this event.
           * @type {EventTarget}
           * @deprecated
           */
          get srcElement() {
            return pd(this).eventTarget;
          },
          /**
           * The flag to stop event bubbling.
           * @type {boolean}
           * @deprecated
           */
          get cancelBubble() {
            return pd(this).stopped;
          },
          set cancelBubble(value) {
            if (!value) {
              return;
            }
            const data = pd(this);
            data.stopped = true;
            if (typeof data.event.cancelBubble === "boolean") {
              data.event.cancelBubble = true;
            }
          },
          /**
           * The flag to indicate cancellation state.
           * @type {boolean}
           * @deprecated
           */
          get returnValue() {
            return !pd(this).canceled;
          },
          set returnValue(value) {
            if (!value) {
              setCancelFlag(pd(this));
            }
          },
          /**
           * Initialize this event object. But do nothing under event dispatching.
           * @param {string} type The event type.
           * @param {boolean} [bubbles=false] The flag to be possible to bubble up.
           * @param {boolean} [cancelable=false] The flag to be possible to cancel.
           * @deprecated
           */
          initEvent() {
          }
        };
        Object.defineProperty(Event.prototype, "constructor", {
          value: Event,
          configurable: true,
          writable: true
        });
        if (typeof window !== "undefined" && typeof window.Event !== "undefined") {
          Object.setPrototypeOf(Event.prototype, window.Event.prototype);
          wrappers.set(window.Event.prototype, Event);
        }
        function defineRedirectDescriptor(key) {
          return {
            get() {
              return pd(this).event[key];
            },
            set(value) {
              pd(this).event[key] = value;
            },
            configurable: true,
            enumerable: true
          };
        }
        function defineCallDescriptor(key) {
          return {
            value() {
              const event = pd(this).event;
              return event[key].apply(event, arguments);
            },
            configurable: true,
            enumerable: true
          };
        }
        function defineWrapper(BaseEvent, proto) {
          const keys = Object.keys(proto);
          if (keys.length === 0) {
            return BaseEvent;
          }
          function CustomEvent(eventTarget, event) {
            BaseEvent.call(this, eventTarget, event);
          }
          CustomEvent.prototype = Object.create(BaseEvent.prototype, {
            constructor: { value: CustomEvent, configurable: true, writable: true }
          });
          for (let i = 0; i < keys.length; ++i) {
            const key = keys[i];
            if (!(key in BaseEvent.prototype)) {
              const descriptor = Object.getOwnPropertyDescriptor(proto, key);
              const isFunc = typeof descriptor.value === "function";
              Object.defineProperty(
                CustomEvent.prototype,
                key,
                isFunc ? defineCallDescriptor(key) : defineRedirectDescriptor(key)
              );
            }
          }
          return CustomEvent;
        }
        function getWrapper(proto) {
          if (proto == null || proto === Object.prototype) {
            return Event;
          }
          let wrapper = wrappers.get(proto);
          if (wrapper == null) {
            wrapper = defineWrapper(getWrapper(Object.getPrototypeOf(proto)), proto);
            wrappers.set(proto, wrapper);
          }
          return wrapper;
        }
        function wrapEvent(eventTarget, event) {
          const Wrapper = getWrapper(Object.getPrototypeOf(event));
          return new Wrapper(eventTarget, event);
        }
        function isStopped(event) {
          return pd(event).immediateStopped;
        }
        function setEventPhase(event, eventPhase) {
          pd(event).eventPhase = eventPhase;
        }
        function setCurrentTarget(event, currentTarget) {
          pd(event).currentTarget = currentTarget;
        }
        function setPassiveListener(event, passiveListener) {
          pd(event).passiveListener = passiveListener;
        }
        var listenersMap = /* @__PURE__ */ new WeakMap();
        var CAPTURE = 1;
        var BUBBLE = 2;
        var ATTRIBUTE = 3;
        function isObject2(x) {
          return x !== null && typeof x === "object";
        }
        function getListeners(eventTarget) {
          const listeners2 = listenersMap.get(eventTarget);
          if (listeners2 == null) {
            throw new TypeError(
              "'this' is expected an EventTarget object, but got another value."
            );
          }
          return listeners2;
        }
        function defineEventAttributeDescriptor(eventName) {
          return {
            get() {
              const listeners2 = getListeners(this);
              let node = listeners2.get(eventName);
              while (node != null) {
                if (node.listenerType === ATTRIBUTE) {
                  return node.listener;
                }
                node = node.next;
              }
              return null;
            },
            set(listener) {
              if (typeof listener !== "function" && !isObject2(listener)) {
                listener = null;
              }
              const listeners2 = getListeners(this);
              let prev = null;
              let node = listeners2.get(eventName);
              while (node != null) {
                if (node.listenerType === ATTRIBUTE) {
                  if (prev !== null) {
                    prev.next = node.next;
                  } else if (node.next !== null) {
                    listeners2.set(eventName, node.next);
                  } else {
                    listeners2.delete(eventName);
                  }
                } else {
                  prev = node;
                }
                node = node.next;
              }
              if (listener !== null) {
                const newNode = {
                  listener,
                  listenerType: ATTRIBUTE,
                  passive: false,
                  once: false,
                  next: null
                };
                if (prev === null) {
                  listeners2.set(eventName, newNode);
                } else {
                  prev.next = newNode;
                }
              }
            },
            configurable: true,
            enumerable: true
          };
        }
        function defineEventAttribute(eventTargetPrototype, eventName) {
          Object.defineProperty(
            eventTargetPrototype,
            `on${eventName}`,
            defineEventAttributeDescriptor(eventName)
          );
        }
        function defineCustomEventTarget(eventNames) {
          function CustomEventTarget() {
            EventTarget.call(this);
          }
          CustomEventTarget.prototype = Object.create(EventTarget.prototype, {
            constructor: {
              value: CustomEventTarget,
              configurable: true,
              writable: true
            }
          });
          for (let i = 0; i < eventNames.length; ++i) {
            defineEventAttribute(CustomEventTarget.prototype, eventNames[i]);
          }
          return CustomEventTarget;
        }
        function EventTarget() {
          if (this instanceof EventTarget) {
            listenersMap.set(this, /* @__PURE__ */ new Map());
            return;
          }
          if (arguments.length === 1 && Array.isArray(arguments[0])) {
            return defineCustomEventTarget(arguments[0]);
          }
          if (arguments.length > 0) {
            const types2 = new Array(arguments.length);
            for (let i = 0; i < arguments.length; ++i) {
              types2[i] = arguments[i];
            }
            return defineCustomEventTarget(types2);
          }
          throw new TypeError("Cannot call a class as a function");
        }
        EventTarget.prototype = {
          /**
           * Add a given listener to this event target.
           * @param {string} eventName The event name to add.
           * @param {Function} listener The listener to add.
           * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.
           * @returns {void}
           */
          addEventListener(eventName, listener, options) {
            if (listener == null) {
              return;
            }
            if (typeof listener !== "function" && !isObject2(listener)) {
              throw new TypeError("'listener' should be a function or an object.");
            }
            const listeners2 = getListeners(this);
            const optionsIsObj = isObject2(options);
            const capture = optionsIsObj ? Boolean(options.capture) : Boolean(options);
            const listenerType = capture ? CAPTURE : BUBBLE;
            const newNode = {
              listener,
              listenerType,
              passive: optionsIsObj && Boolean(options.passive),
              once: optionsIsObj && Boolean(options.once),
              next: null
            };
            let node = listeners2.get(eventName);
            if (node === void 0) {
              listeners2.set(eventName, newNode);
              return;
            }
            let prev = null;
            while (node != null) {
              if (node.listener === listener && node.listenerType === listenerType) {
                return;
              }
              prev = node;
              node = node.next;
            }
            prev.next = newNode;
          },
          /**
           * Remove a given listener from this event target.
           * @param {string} eventName The event name to remove.
           * @param {Function} listener The listener to remove.
           * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.
           * @returns {void}
           */
          removeEventListener(eventName, listener, options) {
            if (listener == null) {
              return;
            }
            const listeners2 = getListeners(this);
            const capture = isObject2(options) ? Boolean(options.capture) : Boolean(options);
            const listenerType = capture ? CAPTURE : BUBBLE;
            let prev = null;
            let node = listeners2.get(eventName);
            while (node != null) {
              if (node.listener === listener && node.listenerType === listenerType) {
                if (prev !== null) {
                  prev.next = node.next;
                } else if (node.next !== null) {
                  listeners2.set(eventName, node.next);
                } else {
                  listeners2.delete(eventName);
                }
                return;
              }
              prev = node;
              node = node.next;
            }
          },
          /**
           * Dispatch a given event.
           * @param {Event|{type:string}} event The event to dispatch.
           * @returns {boolean} `false` if canceled.
           */
          dispatchEvent(event) {
            if (event == null || typeof event.type !== "string") {
              throw new TypeError('"event.type" should be a string.');
            }
            const listeners2 = getListeners(this);
            const eventName = event.type;
            let node = listeners2.get(eventName);
            if (node == null) {
              return true;
            }
            const wrappedEvent = wrapEvent(this, event);
            let prev = null;
            while (node != null) {
              if (node.once) {
                if (prev !== null) {
                  prev.next = node.next;
                } else if (node.next !== null) {
                  listeners2.set(eventName, node.next);
                } else {
                  listeners2.delete(eventName);
                }
              } else {
                prev = node;
              }
              setPassiveListener(
                wrappedEvent,
                node.passive ? node.listener : null
              );
              if (typeof node.listener === "function") {
                try {
                  node.listener.call(this, wrappedEvent);
                } catch (err) {
                  if (typeof console !== "undefined" && typeof console.error === "function") {
                    console.error(err);
                  }
                }
              } else if (node.listenerType !== ATTRIBUTE && typeof node.listener.handleEvent === "function") {
                node.listener.handleEvent(wrappedEvent);
              }
              if (isStopped(wrappedEvent)) {
                break;
              }
              node = node.next;
            }
            setPassiveListener(wrappedEvent, null);
            setEventPhase(wrappedEvent, 0);
            setCurrentTarget(wrappedEvent, null);
            return !wrappedEvent.defaultPrevented;
          }
        };
        Object.defineProperty(EventTarget.prototype, "constructor", {
          value: EventTarget,
          configurable: true,
          writable: true
        });
        if (typeof window !== "undefined" && typeof window.EventTarget !== "undefined") {
          Object.setPrototypeOf(EventTarget.prototype, window.EventTarget.prototype);
        }
        exports32.defineEventAttribute = defineEventAttribute;
        exports32.EventTarget = EventTarget;
        exports32.default = EventTarget;
        module.exports = EventTarget;
        module.exports.EventTarget = module.exports["default"] = EventTarget;
        module.exports.defineEventAttribute = defineEventAttribute;
      }
    });
    require_abort_controller = __commonJS2({
      "node_modules/abort-controller/dist/abort-controller.js"(exports32, module) {
        "use strict";
        init_dirname2();
        Object.defineProperty(exports32, "__esModule", { value: true });
        var eventTargetShim = require_event_target_shim();
        var AbortSignal = class extends eventTargetShim.EventTarget {
          /**
           * AbortSignal cannot be constructed directly.
           */
          constructor() {
            super();
            throw new TypeError("AbortSignal cannot be constructed directly");
          }
          /**
           * Returns `true` if this `AbortSignal`'s `AbortController` has signaled to abort, and `false` otherwise.
           */
          get aborted() {
            const aborted = abortedFlags.get(this);
            if (typeof aborted !== "boolean") {
              throw new TypeError(`Expected 'this' to be an 'AbortSignal' object, but got ${this === null ? "null" : typeof this}`);
            }
            return aborted;
          }
        };
        eventTargetShim.defineEventAttribute(AbortSignal.prototype, "abort");
        function createAbortSignal() {
          const signal = Object.create(AbortSignal.prototype);
          eventTargetShim.EventTarget.call(signal);
          abortedFlags.set(signal, false);
          return signal;
        }
        function abortSignal(signal) {
          if (abortedFlags.get(signal) !== false) {
            return;
          }
          abortedFlags.set(signal, true);
          signal.dispatchEvent({ type: "abort" });
        }
        var abortedFlags = /* @__PURE__ */ new WeakMap();
        Object.defineProperties(AbortSignal.prototype, {
          aborted: { enumerable: true }
        });
        if (typeof Symbol === "function" && typeof Symbol.toStringTag === "symbol") {
          Object.defineProperty(AbortSignal.prototype, Symbol.toStringTag, {
            configurable: true,
            value: "AbortSignal"
          });
        }
        var AbortController2 = class {
          /**
           * Initialize this controller.
           */
          constructor() {
            signals.set(this, createAbortSignal());
          }
          /**
           * Returns the `AbortSignal` object associated with this object.
           */
          get signal() {
            return getSignal(this);
          }
          /**
           * Abort and signal to any observers that the associated activity is to be aborted.
           */
          abort() {
            abortSignal(getSignal(this));
          }
        };
        var signals = /* @__PURE__ */ new WeakMap();
        function getSignal(controller) {
          const signal = signals.get(controller);
          if (signal == null) {
            throw new TypeError(`Expected 'this' to be an 'AbortController' object, but got ${controller === null ? "null" : typeof controller}`);
          }
          return signal;
        }
        Object.defineProperties(AbortController2.prototype, {
          signal: { enumerable: true },
          abort: { enumerable: true }
        });
        if (typeof Symbol === "function" && typeof Symbol.toStringTag === "symbol") {
          Object.defineProperty(AbortController2.prototype, Symbol.toStringTag, {
            configurable: true,
            value: "AbortController"
          });
        }
        exports32.AbortController = AbortController2;
        exports32.AbortSignal = AbortSignal;
        exports32.default = AbortController2;
        module.exports = AbortController2;
        module.exports.AbortController = module.exports["default"] = AbortController2;
        module.exports.AbortSignal = AbortSignal;
      }
    });
    require_util = __commonJS2({
      "node_modules/readable-stream/lib/ours/util.js"(exports32, module) {
        "use strict";
        init_dirname2();
        var bufferModule = __require2("buffer");
        var { kResistStopPropagation, SymbolDispose } = require_primordials();
        var AbortSignal = globalThis.AbortSignal || require_abort_controller().AbortSignal;
        var AbortController2 = globalThis.AbortController || require_abort_controller().AbortController;
        var AsyncFunction = Object.getPrototypeOf(async function() {
        }).constructor;
        var Blob2 = globalThis.Blob || bufferModule.Blob;
        var isBlob2 = typeof Blob2 !== "undefined" ? function isBlob22(b) {
          return b instanceof Blob2;
        } : function isBlob22(b) {
          return false;
        };
        var validateAbortSignal = (signal, name) => {
          if (signal !== void 0 && (signal === null || typeof signal !== "object" || !("aborted" in signal))) {
            throw new ERR_INVALID_ARG_TYPE(name, "AbortSignal", signal);
          }
        };
        var validateFunction = (value, name) => {
          if (typeof value !== "function") throw new ERR_INVALID_ARG_TYPE(name, "Function", value);
        };
        var AggregateError2 = class extends Error {
          constructor(errors) {
            if (!Array.isArray(errors)) {
              throw new TypeError(`Expected input to be an Array, got ${typeof errors}`);
            }
            let message = "";
            for (let i = 0; i < errors.length; i++) {
              message += `    ${errors[i].stack}
`;
            }
            super(message);
            this.name = "AggregateError";
            this.errors = errors;
          }
        };
        module.exports = {
          AggregateError: AggregateError2,
          kEmptyObject: Object.freeze({}),
          once(callback) {
            let called = false;
            return function(...args) {
              if (called) {
                return;
              }
              called = true;
              callback.apply(this, args);
            };
          },
          createDeferredPromise: function() {
            let resolve;
            let reject;
            const promise = new Promise((res, rej) => {
              resolve = res;
              reject = rej;
            });
            return {
              promise,
              resolve,
              reject
            };
          },
          promisify(fn) {
            return new Promise((resolve, reject) => {
              fn((err, ...args) => {
                if (err) {
                  return reject(err);
                }
                return resolve(...args);
              });
            });
          },
          debuglog() {
            return function() {
            };
          },
          format(format2, ...args) {
            return format2.replace(/%([sdifj])/g, function(...[_unused, type]) {
              const replacement = args.shift();
              if (type === "f") {
                return replacement.toFixed(6);
              } else if (type === "j") {
                return JSON.stringify(replacement);
              } else if (type === "s" && typeof replacement === "object") {
                const ctor = replacement.constructor !== Object ? replacement.constructor.name : "";
                return `${ctor} {}`.trim();
              } else {
                return replacement.toString();
              }
            });
          },
          inspect(value) {
            switch (typeof value) {
              case "string":
                if (value.includes("'")) {
                  if (!value.includes('"')) {
                    return `"${value}"`;
                  } else if (!value.includes("`") && !value.includes("${")) {
                    return `\`${value}\``;
                  }
                }
                return `'${value}'`;
              case "number":
                if (isNaN(value)) {
                  return "NaN";
                } else if (Object.is(value, -0)) {
                  return String(value);
                }
                return value;
              case "bigint":
                return `${String(value)}n`;
              case "boolean":
              case "undefined":
                return String(value);
              case "object":
                return "{}";
            }
          },
          types: {
            isAsyncFunction(fn) {
              return fn instanceof AsyncFunction;
            },
            isArrayBufferView(arr) {
              return ArrayBuffer.isView(arr);
            }
          },
          isBlob: isBlob2,
          deprecate(fn, message) {
            return fn;
          },
          addAbortListener: __require2("events").addAbortListener || function addAbortListener(signal, listener) {
            if (signal === void 0) {
              throw new ERR_INVALID_ARG_TYPE("signal", "AbortSignal", signal);
            }
            validateAbortSignal(signal, "signal");
            validateFunction(listener, "listener");
            let removeEventListener;
            if (signal.aborted) {
              queueMicrotask(() => listener());
            } else {
              signal.addEventListener("abort", listener, {
                __proto__: null,
                once: true,
                [kResistStopPropagation]: true
              });
              removeEventListener = () => {
                signal.removeEventListener("abort", listener);
              };
            }
            return {
              __proto__: null,
              [SymbolDispose]() {
                var _removeEventListener;
                (_removeEventListener = removeEventListener) === null || _removeEventListener === void 0 ? void 0 : _removeEventListener();
              }
            };
          },
          AbortSignalAny: AbortSignal.any || function AbortSignalAny(signals) {
            if (signals.length === 1) {
              return signals[0];
            }
            const ac = new AbortController2();
            const abort2 = () => ac.abort();
            signals.forEach((signal) => {
              validateAbortSignal(signal, "signals");
              signal.addEventListener("abort", abort2, {
                once: true
              });
            });
            ac.signal.addEventListener(
              "abort",
              () => {
                signals.forEach((signal) => signal.removeEventListener("abort", abort2));
              },
              {
                once: true
              }
            );
            return ac.signal;
          }
        };
        module.exports.promisify.custom = Symbol.for("nodejs.util.promisify.custom");
      }
    });
    require_errors = __commonJS2({
      "node_modules/readable-stream/lib/ours/errors.js"(exports32, module) {
        "use strict";
        init_dirname2();
        var { format: format2, inspect: inspect2, AggregateError: CustomAggregateError } = require_util();
        var AggregateError2 = globalThis.AggregateError || CustomAggregateError;
        var kIsNodeError = Symbol("kIsNodeError");
        var kTypes = [
          "string",
          "function",
          "number",
          "object",
          // Accept 'Function' and 'Object' as alternative to the lower cased version.
          "Function",
          "Object",
          "boolean",
          "bigint",
          "symbol"
        ];
        var classRegExp = /^([A-Z][a-z0-9]*)+$/;
        var nodeInternalPrefix = "__node_internal_";
        var codes = {};
        function assert2(value, message) {
          if (!value) {
            throw new codes.ERR_INTERNAL_ASSERTION(message);
          }
        }
        function addNumericalSeparator(val2) {
          let res = "";
          let i = val2.length;
          const start = val2[0] === "-" ? 1 : 0;
          for (; i >= start + 4; i -= 3) {
            res = `_${val2.slice(i - 3, i)}${res}`;
          }
          return `${val2.slice(0, i)}${res}`;
        }
        function getMessage(key, msg, args) {
          if (typeof msg === "function") {
            assert2(
              msg.length <= args.length,
              // Default options do not count.
              `Code: ${key}; The provided arguments length (${args.length}) does not match the required ones (${msg.length}).`
            );
            return msg(...args);
          }
          const expectedLength = (msg.match(/%[dfijoOs]/g) || []).length;
          assert2(
            expectedLength === args.length,
            `Code: ${key}; The provided arguments length (${args.length}) does not match the required ones (${expectedLength}).`
          );
          if (args.length === 0) {
            return msg;
          }
          return format2(msg, ...args);
        }
        function E(code, message, Base) {
          if (!Base) {
            Base = Error;
          }
          class NodeError extends Base {
            constructor(...args) {
              super(getMessage(code, message, args));
            }
            toString() {
              return `${this.name} [${code}]: ${this.message}`;
            }
          }
          Object.defineProperties(NodeError.prototype, {
            name: {
              value: Base.name,
              writable: true,
              enumerable: false,
              configurable: true
            },
            toString: {
              value() {
                return `${this.name} [${code}]: ${this.message}`;
              },
              writable: true,
              enumerable: false,
              configurable: true
            }
          });
          NodeError.prototype.code = code;
          NodeError.prototype[kIsNodeError] = true;
          codes[code] = NodeError;
        }
        function hideStackFrames(fn) {
          const hidden = nodeInternalPrefix + fn.name;
          Object.defineProperty(fn, "name", {
            value: hidden
          });
          return fn;
        }
        function aggregateTwoErrors(innerError, outerError) {
          if (innerError && outerError && innerError !== outerError) {
            if (Array.isArray(outerError.errors)) {
              outerError.errors.push(innerError);
              return outerError;
            }
            const err = new AggregateError2([outerError, innerError], outerError.message);
            err.code = outerError.code;
            return err;
          }
          return innerError || outerError;
        }
        var AbortError = class extends Error {
          constructor(message = "The operation was aborted", options = void 0) {
            if (options !== void 0 && typeof options !== "object") {
              throw new codes.ERR_INVALID_ARG_TYPE("options", "Object", options);
            }
            super(message, options);
            this.code = "ABORT_ERR";
            this.name = "AbortError";
          }
        };
        E("ERR_ASSERTION", "%s", Error);
        E(
          "ERR_INVALID_ARG_TYPE",
          (name, expected, actual) => {
            assert2(typeof name === "string", "'name' must be a string");
            if (!Array.isArray(expected)) {
              expected = [expected];
            }
            let msg = "The ";
            if (name.endsWith(" argument")) {
              msg += `${name} `;
            } else {
              msg += `"${name}" ${name.includes(".") ? "property" : "argument"} `;
            }
            msg += "must be ";
            const types2 = [];
            const instances = [];
            const other = [];
            for (const value of expected) {
              assert2(typeof value === "string", "All expected entries have to be of type string");
              if (kTypes.includes(value)) {
                types2.push(value.toLowerCase());
              } else if (classRegExp.test(value)) {
                instances.push(value);
              } else {
                assert2(value !== "object", 'The value "object" should be written as "Object"');
                other.push(value);
              }
            }
            if (instances.length > 0) {
              const pos = types2.indexOf("object");
              if (pos !== -1) {
                types2.splice(types2, pos, 1);
                instances.push("Object");
              }
            }
            if (types2.length > 0) {
              switch (types2.length) {
                case 1:
                  msg += `of type ${types2[0]}`;
                  break;
                case 2:
                  msg += `one of type ${types2[0]} or ${types2[1]}`;
                  break;
                default: {
                  const last = types2.pop();
                  msg += `one of type ${types2.join(", ")}, or ${last}`;
                }
              }
              if (instances.length > 0 || other.length > 0) {
                msg += " or ";
              }
            }
            if (instances.length > 0) {
              switch (instances.length) {
                case 1:
                  msg += `an instance of ${instances[0]}`;
                  break;
                case 2:
                  msg += `an instance of ${instances[0]} or ${instances[1]}`;
                  break;
                default: {
                  const last = instances.pop();
                  msg += `an instance of ${instances.join(", ")}, or ${last}`;
                }
              }
              if (other.length > 0) {
                msg += " or ";
              }
            }
            switch (other.length) {
              case 0:
                break;
              case 1:
                if (other[0].toLowerCase() !== other[0]) {
                  msg += "an ";
                }
                msg += `${other[0]}`;
                break;
              case 2:
                msg += `one of ${other[0]} or ${other[1]}`;
                break;
              default: {
                const last = other.pop();
                msg += `one of ${other.join(", ")}, or ${last}`;
              }
            }
            if (actual == null) {
              msg += `. Received ${actual}`;
            } else if (typeof actual === "function" && actual.name) {
              msg += `. Received function ${actual.name}`;
            } else if (typeof actual === "object") {
              var _actual$constructor;
              if ((_actual$constructor = actual.constructor) !== null && _actual$constructor !== void 0 && _actual$constructor.name) {
                msg += `. Received an instance of ${actual.constructor.name}`;
              } else {
                const inspected = inspect2(actual, {
                  depth: -1
                });
                msg += `. Received ${inspected}`;
              }
            } else {
              let inspected = inspect2(actual, {
                colors: false
              });
              if (inspected.length > 25) {
                inspected = `${inspected.slice(0, 25)}...`;
              }
              msg += `. Received type ${typeof actual} (${inspected})`;
            }
            return msg;
          },
          TypeError
        );
        E(
          "ERR_INVALID_ARG_VALUE",
          (name, value, reason = "is invalid") => {
            let inspected = inspect2(value);
            if (inspected.length > 128) {
              inspected = inspected.slice(0, 128) + "...";
            }
            const type = name.includes(".") ? "property" : "argument";
            return `The ${type} '${name}' ${reason}. Received ${inspected}`;
          },
          TypeError
        );
        E(
          "ERR_INVALID_RETURN_VALUE",
          (input, name, value) => {
            var _value$constructor;
            const type = value !== null && value !== void 0 && (_value$constructor = value.constructor) !== null && _value$constructor !== void 0 && _value$constructor.name ? `instance of ${value.constructor.name}` : `type ${typeof value}`;
            return `Expected ${input} to be returned from the "${name}" function but got ${type}.`;
          },
          TypeError
        );
        E(
          "ERR_MISSING_ARGS",
          (...args) => {
            assert2(args.length > 0, "At least one arg needs to be specified");
            let msg;
            const len = args.length;
            args = (Array.isArray(args) ? args : [args]).map((a) => `"${a}"`).join(" or ");
            switch (len) {
              case 1:
                msg += `The ${args[0]} argument`;
                break;
              case 2:
                msg += `The ${args[0]} and ${args[1]} arguments`;
                break;
              default:
                {
                  const last = args.pop();
                  msg += `The ${args.join(", ")}, and ${last} arguments`;
                }
                break;
            }
            return `${msg} must be specified`;
          },
          TypeError
        );
        E(
          "ERR_OUT_OF_RANGE",
          (str, range, input) => {
            assert2(range, 'Missing "range" argument');
            let received;
            if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
              received = addNumericalSeparator(String(input));
            } else if (typeof input === "bigint") {
              received = String(input);
              if (input > 2n ** 32n || input < -(2n ** 32n)) {
                received = addNumericalSeparator(received);
              }
              received += "n";
            } else {
              received = inspect2(input);
            }
            return `The value of "${str}" is out of range. It must be ${range}. Received ${received}`;
          },
          RangeError
        );
        E("ERR_MULTIPLE_CALLBACK", "Callback called multiple times", Error);
        E("ERR_METHOD_NOT_IMPLEMENTED", "The %s method is not implemented", Error);
        E("ERR_STREAM_ALREADY_FINISHED", "Cannot call %s after a stream was finished", Error);
        E("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable", Error);
        E("ERR_STREAM_DESTROYED", "Cannot call %s after a stream was destroyed", Error);
        E("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
        E("ERR_STREAM_PREMATURE_CLOSE", "Premature close", Error);
        E("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF", Error);
        E("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event", Error);
        E("ERR_STREAM_WRITE_AFTER_END", "write after end", Error);
        E("ERR_UNKNOWN_ENCODING", "Unknown encoding: %s", TypeError);
        module.exports = {
          AbortError,
          aggregateTwoErrors: hideStackFrames(aggregateTwoErrors),
          hideStackFrames,
          codes
        };
      }
    });
    require_validators = __commonJS2({
      "node_modules/readable-stream/lib/internal/validators.js"(exports32, module) {
        "use strict";
        init_dirname2();
        var {
          ArrayIsArray,
          ArrayPrototypeIncludes,
          ArrayPrototypeJoin,
          ArrayPrototypeMap,
          NumberIsInteger,
          NumberIsNaN,
          NumberMAX_SAFE_INTEGER,
          NumberMIN_SAFE_INTEGER,
          NumberParseInt,
          ObjectPrototypeHasOwnProperty,
          RegExpPrototypeExec,
          String: String2,
          StringPrototypeToUpperCase,
          StringPrototypeTrim
        } = require_primordials();
        var {
          hideStackFrames,
          codes: { ERR_SOCKET_BAD_PORT, ERR_INVALID_ARG_TYPE: ERR_INVALID_ARG_TYPE2, ERR_INVALID_ARG_VALUE, ERR_OUT_OF_RANGE, ERR_UNKNOWN_SIGNAL }
        } = require_errors();
        var { normalizeEncoding } = require_util();
        var { isAsyncFunction, isArrayBufferView } = require_util().types;
        var signals = {};
        function isInt32(value) {
          return value === (value | 0);
        }
        function isUint32(value) {
          return value === value >>> 0;
        }
        var octalReg = /^[0-7]+$/;
        var modeDesc = "must be a 32-bit unsigned integer or an octal string";
        function parseFileMode(value, name, def) {
          if (typeof value === "undefined") {
            value = def;
          }
          if (typeof value === "string") {
            if (RegExpPrototypeExec(octalReg, value) === null) {
              throw new ERR_INVALID_ARG_VALUE(name, value, modeDesc);
            }
            value = NumberParseInt(value, 8);
          }
          validateUint32(value, name);
          return value;
        }
        var validateInteger = hideStackFrames((value, name, min = NumberMIN_SAFE_INTEGER, max = NumberMAX_SAFE_INTEGER) => {
          if (typeof value !== "number") throw new ERR_INVALID_ARG_TYPE2(name, "number", value);
          if (!NumberIsInteger(value)) throw new ERR_OUT_OF_RANGE(name, "an integer", value);
          if (value < min || value > max) throw new ERR_OUT_OF_RANGE(name, `>= ${min} && <= ${max}`, value);
        });
        var validateInt32 = hideStackFrames((value, name, min = -2147483648, max = 2147483647) => {
          if (typeof value !== "number") {
            throw new ERR_INVALID_ARG_TYPE2(name, "number", value);
          }
          if (!NumberIsInteger(value)) {
            throw new ERR_OUT_OF_RANGE(name, "an integer", value);
          }
          if (value < min || value > max) {
            throw new ERR_OUT_OF_RANGE(name, `>= ${min} && <= ${max}`, value);
          }
        });
        var validateUint32 = hideStackFrames((value, name, positive = false) => {
          if (typeof value !== "number") {
            throw new ERR_INVALID_ARG_TYPE2(name, "number", value);
          }
          if (!NumberIsInteger(value)) {
            throw new ERR_OUT_OF_RANGE(name, "an integer", value);
          }
          const min = positive ? 1 : 0;
          const max = 4294967295;
          if (value < min || value > max) {
            throw new ERR_OUT_OF_RANGE(name, `>= ${min} && <= ${max}`, value);
          }
        });
        function validateString(value, name) {
          if (typeof value !== "string") throw new ERR_INVALID_ARG_TYPE2(name, "string", value);
        }
        function validateNumber(value, name, min = void 0, max) {
          if (typeof value !== "number") throw new ERR_INVALID_ARG_TYPE2(name, "number", value);
          if (min != null && value < min || max != null && value > max || (min != null || max != null) && NumberIsNaN(value)) {
            throw new ERR_OUT_OF_RANGE(
              name,
              `${min != null ? `>= ${min}` : ""}${min != null && max != null ? " && " : ""}${max != null ? `<= ${max}` : ""}`,
              value
            );
          }
        }
        var validateOneOf = hideStackFrames((value, name, oneOf) => {
          if (!ArrayPrototypeIncludes(oneOf, value)) {
            const allowed = ArrayPrototypeJoin(
              ArrayPrototypeMap(oneOf, (v) => typeof v === "string" ? `'${v}'` : String2(v)),
              ", "
            );
            const reason = "must be one of: " + allowed;
            throw new ERR_INVALID_ARG_VALUE(name, value, reason);
          }
        });
        function validateBoolean(value, name) {
          if (typeof value !== "boolean") throw new ERR_INVALID_ARG_TYPE2(name, "boolean", value);
        }
        function getOwnPropertyValueOrDefault(options, key, defaultValue) {
          return options == null || !ObjectPrototypeHasOwnProperty(options, key) ? defaultValue : options[key];
        }
        var validateObject = hideStackFrames((value, name, options = null) => {
          const allowArray = getOwnPropertyValueOrDefault(options, "allowArray", false);
          const allowFunction = getOwnPropertyValueOrDefault(options, "allowFunction", false);
          const nullable = getOwnPropertyValueOrDefault(options, "nullable", false);
          if (!nullable && value === null || !allowArray && ArrayIsArray(value) || typeof value !== "object" && (!allowFunction || typeof value !== "function")) {
            throw new ERR_INVALID_ARG_TYPE2(name, "Object", value);
          }
        });
        var validateDictionary = hideStackFrames((value, name) => {
          if (value != null && typeof value !== "object" && typeof value !== "function") {
            throw new ERR_INVALID_ARG_TYPE2(name, "a dictionary", value);
          }
        });
        var validateArray = hideStackFrames((value, name, minLength = 0) => {
          if (!ArrayIsArray(value)) {
            throw new ERR_INVALID_ARG_TYPE2(name, "Array", value);
          }
          if (value.length < minLength) {
            const reason = `must be longer than ${minLength}`;
            throw new ERR_INVALID_ARG_VALUE(name, value, reason);
          }
        });
        function validateStringArray(value, name) {
          validateArray(value, name);
          for (let i = 0; i < value.length; i++) {
            validateString(value[i], `${name}[${i}]`);
          }
        }
        function validateBooleanArray(value, name) {
          validateArray(value, name);
          for (let i = 0; i < value.length; i++) {
            validateBoolean(value[i], `${name}[${i}]`);
          }
        }
        function validateAbortSignalArray(value, name) {
          validateArray(value, name);
          for (let i = 0; i < value.length; i++) {
            const signal = value[i];
            const indexedName = `${name}[${i}]`;
            if (signal == null) {
              throw new ERR_INVALID_ARG_TYPE2(indexedName, "AbortSignal", signal);
            }
            validateAbortSignal(signal, indexedName);
          }
        }
        function validateSignalName(signal, name = "signal") {
          validateString(signal, name);
          if (signals[signal] === void 0) {
            if (signals[StringPrototypeToUpperCase(signal)] !== void 0) {
              throw new ERR_UNKNOWN_SIGNAL(signal + " (signals must use all capital letters)");
            }
            throw new ERR_UNKNOWN_SIGNAL(signal);
          }
        }
        var validateBuffer = hideStackFrames((buffer, name = "buffer") => {
          if (!isArrayBufferView(buffer)) {
            throw new ERR_INVALID_ARG_TYPE2(name, ["Buffer", "TypedArray", "DataView"], buffer);
          }
        });
        function validateEncoding(data, encoding) {
          const normalizedEncoding = normalizeEncoding(encoding);
          const length = data.length;
          if (normalizedEncoding === "hex" && length % 2 !== 0) {
            throw new ERR_INVALID_ARG_VALUE("encoding", encoding, `is invalid for data of length ${length}`);
          }
        }
        function validatePort(port, name = "Port", allowZero = true) {
          if (typeof port !== "number" && typeof port !== "string" || typeof port === "string" && StringPrototypeTrim(port).length === 0 || +port !== +port >>> 0 || port > 65535 || port === 0 && !allowZero) {
            throw new ERR_SOCKET_BAD_PORT(name, port, allowZero);
          }
          return port | 0;
        }
        var validateAbortSignal = hideStackFrames((signal, name) => {
          if (signal !== void 0 && (signal === null || typeof signal !== "object" || !("aborted" in signal))) {
            throw new ERR_INVALID_ARG_TYPE2(name, "AbortSignal", signal);
          }
        });
        var validateFunction = hideStackFrames((value, name) => {
          if (typeof value !== "function") throw new ERR_INVALID_ARG_TYPE2(name, "Function", value);
        });
        var validatePlainFunction = hideStackFrames((value, name) => {
          if (typeof value !== "function" || isAsyncFunction(value)) throw new ERR_INVALID_ARG_TYPE2(name, "Function", value);
        });
        var validateUndefined = hideStackFrames((value, name) => {
          if (value !== void 0) throw new ERR_INVALID_ARG_TYPE2(name, "undefined", value);
        });
        function validateUnion(value, name, union) {
          if (!ArrayPrototypeIncludes(union, value)) {
            throw new ERR_INVALID_ARG_TYPE2(name, `('${ArrayPrototypeJoin(union, "|")}')`, value);
          }
        }
        var linkValueRegExp = /^(?:<[^>]*>)(?:\s*;\s*[^;"\s]+(?:=(")?[^;"\s]*\1)?)*$/;
        function validateLinkHeaderFormat(value, name) {
          if (typeof value === "undefined" || !RegExpPrototypeExec(linkValueRegExp, value)) {
            throw new ERR_INVALID_ARG_VALUE(
              name,
              value,
              'must be an array or string of format "</styles.css>; rel=preload; as=style"'
            );
          }
        }
        function validateLinkHeaderValue(hints) {
          if (typeof hints === "string") {
            validateLinkHeaderFormat(hints, "hints");
            return hints;
          } else if (ArrayIsArray(hints)) {
            const hintsLength = hints.length;
            let result = "";
            if (hintsLength === 0) {
              return result;
            }
            for (let i = 0; i < hintsLength; i++) {
              const link = hints[i];
              validateLinkHeaderFormat(link, "hints");
              result += link;
              if (i !== hintsLength - 1) {
                result += ", ";
              }
            }
            return result;
          }
          throw new ERR_INVALID_ARG_VALUE(
            "hints",
            hints,
            'must be an array or string of format "</styles.css>; rel=preload; as=style"'
          );
        }
        module.exports = {
          isInt32,
          isUint32,
          parseFileMode,
          validateArray,
          validateStringArray,
          validateBooleanArray,
          validateAbortSignalArray,
          validateBoolean,
          validateBuffer,
          validateDictionary,
          validateEncoding,
          validateFunction,
          validateInt32,
          validateInteger,
          validateNumber,
          validateObject,
          validateOneOf,
          validatePlainFunction,
          validatePort,
          validateSignalName,
          validateString,
          validateUint32,
          validateUndefined,
          validateUnion,
          validateAbortSignal,
          validateLinkHeaderValue
        };
      }
    });
    process_exports = {};
    __export2(process_exports, {
      process: () => process2
    });
    init_process = __esm2({
      "src/polyfills/process.js"() {
        init_dirname2();
        process2 = globalThis.process;
      }
    });
    require_utils = __commonJS2({
      "node_modules/readable-stream/lib/internal/streams/utils.js"(exports32, module) {
        "use strict";
        init_dirname2();
        var { SymbolAsyncIterator, SymbolIterator, SymbolFor } = require_primordials();
        var kIsDestroyed = SymbolFor("nodejs.stream.destroyed");
        var kIsErrored = SymbolFor("nodejs.stream.errored");
        var kIsReadable = SymbolFor("nodejs.stream.readable");
        var kIsWritable = SymbolFor("nodejs.stream.writable");
        var kIsDisturbed = SymbolFor("nodejs.stream.disturbed");
        var kIsClosedPromise = SymbolFor("nodejs.webstream.isClosedPromise");
        var kControllerErrorFunction = SymbolFor("nodejs.webstream.controllerErrorFunction");
        function isReadableNodeStream(obj, strict = false) {
          var _obj$_readableState;
          return !!(obj && typeof obj.pipe === "function" && typeof obj.on === "function" && (!strict || typeof obj.pause === "function" && typeof obj.resume === "function") && (!obj._writableState || ((_obj$_readableState = obj._readableState) === null || _obj$_readableState === void 0 ? void 0 : _obj$_readableState.readable) !== false) && // Duplex
          (!obj._writableState || obj._readableState));
        }
        function isWritableNodeStream(obj) {
          var _obj$_writableState;
          return !!(obj && typeof obj.write === "function" && typeof obj.on === "function" && (!obj._readableState || ((_obj$_writableState = obj._writableState) === null || _obj$_writableState === void 0 ? void 0 : _obj$_writableState.writable) !== false));
        }
        function isDuplexNodeStream(obj) {
          return !!(obj && typeof obj.pipe === "function" && obj._readableState && typeof obj.on === "function" && typeof obj.write === "function");
        }
        function isNodeStream(obj) {
          return obj && (obj._readableState || obj._writableState || typeof obj.write === "function" && typeof obj.on === "function" || typeof obj.pipe === "function" && typeof obj.on === "function");
        }
        function isReadableStream2(obj) {
          return !!(obj && !isNodeStream(obj) && typeof obj.pipeThrough === "function" && typeof obj.getReader === "function" && typeof obj.cancel === "function");
        }
        function isWritableStream(obj) {
          return !!(obj && !isNodeStream(obj) && typeof obj.getWriter === "function" && typeof obj.abort === "function");
        }
        function isTransformStream(obj) {
          return !!(obj && !isNodeStream(obj) && typeof obj.readable === "object" && typeof obj.writable === "object");
        }
        function isWebStream(obj) {
          return isReadableStream2(obj) || isWritableStream(obj) || isTransformStream(obj);
        }
        function isIterable(obj, isAsync) {
          if (obj == null) return false;
          if (isAsync === true) return typeof obj[SymbolAsyncIterator] === "function";
          if (isAsync === false) return typeof obj[SymbolIterator] === "function";
          return typeof obj[SymbolAsyncIterator] === "function" || typeof obj[SymbolIterator] === "function";
        }
        function isDestroyed(stream) {
          if (!isNodeStream(stream)) return null;
          const wState = stream._writableState;
          const rState = stream._readableState;
          const state3 = wState || rState;
          return !!(stream.destroyed || stream[kIsDestroyed] || state3 !== null && state3 !== void 0 && state3.destroyed);
        }
        function isWritableEnded(stream) {
          if (!isWritableNodeStream(stream)) return null;
          if (stream.writableEnded === true) return true;
          const wState = stream._writableState;
          if (wState !== null && wState !== void 0 && wState.errored) return false;
          if (typeof (wState === null || wState === void 0 ? void 0 : wState.ended) !== "boolean") return null;
          return wState.ended;
        }
        function isWritableFinished(stream, strict) {
          if (!isWritableNodeStream(stream)) return null;
          if (stream.writableFinished === true) return true;
          const wState = stream._writableState;
          if (wState !== null && wState !== void 0 && wState.errored) return false;
          if (typeof (wState === null || wState === void 0 ? void 0 : wState.finished) !== "boolean") return null;
          return !!(wState.finished || strict === false && wState.ended === true && wState.length === 0);
        }
        function isReadableEnded(stream) {
          if (!isReadableNodeStream(stream)) return null;
          if (stream.readableEnded === true) return true;
          const rState = stream._readableState;
          if (!rState || rState.errored) return false;
          if (typeof (rState === null || rState === void 0 ? void 0 : rState.ended) !== "boolean") return null;
          return rState.ended;
        }
        function isReadableFinished(stream, strict) {
          if (!isReadableNodeStream(stream)) return null;
          const rState = stream._readableState;
          if (rState !== null && rState !== void 0 && rState.errored) return false;
          if (typeof (rState === null || rState === void 0 ? void 0 : rState.endEmitted) !== "boolean") return null;
          return !!(rState.endEmitted || strict === false && rState.ended === true && rState.length === 0);
        }
        function isReadable(stream) {
          if (stream && stream[kIsReadable] != null) return stream[kIsReadable];
          if (typeof (stream === null || stream === void 0 ? void 0 : stream.readable) !== "boolean") return null;
          if (isDestroyed(stream)) return false;
          return isReadableNodeStream(stream) && stream.readable && !isReadableFinished(stream);
        }
        function isWritable(stream) {
          if (stream && stream[kIsWritable] != null) return stream[kIsWritable];
          if (typeof (stream === null || stream === void 0 ? void 0 : stream.writable) !== "boolean") return null;
          if (isDestroyed(stream)) return false;
          return isWritableNodeStream(stream) && stream.writable && !isWritableEnded(stream);
        }
        function isFinished(stream, opts) {
          if (!isNodeStream(stream)) {
            return null;
          }
          if (isDestroyed(stream)) {
            return true;
          }
          if ((opts === null || opts === void 0 ? void 0 : opts.readable) !== false && isReadable(stream)) {
            return false;
          }
          if ((opts === null || opts === void 0 ? void 0 : opts.writable) !== false && isWritable(stream)) {
            return false;
          }
          return true;
        }
        function isWritableErrored(stream) {
          var _stream$_writableStat, _stream$_writableStat2;
          if (!isNodeStream(stream)) {
            return null;
          }
          if (stream.writableErrored) {
            return stream.writableErrored;
          }
          return (_stream$_writableStat = (_stream$_writableStat2 = stream._writableState) === null || _stream$_writableStat2 === void 0 ? void 0 : _stream$_writableStat2.errored) !== null && _stream$_writableStat !== void 0 ? _stream$_writableStat : null;
        }
        function isReadableErrored(stream) {
          var _stream$_readableStat, _stream$_readableStat2;
          if (!isNodeStream(stream)) {
            return null;
          }
          if (stream.readableErrored) {
            return stream.readableErrored;
          }
          return (_stream$_readableStat = (_stream$_readableStat2 = stream._readableState) === null || _stream$_readableStat2 === void 0 ? void 0 : _stream$_readableStat2.errored) !== null && _stream$_readableStat !== void 0 ? _stream$_readableStat : null;
        }
        function isClosed(stream) {
          if (!isNodeStream(stream)) {
            return null;
          }
          if (typeof stream.closed === "boolean") {
            return stream.closed;
          }
          const wState = stream._writableState;
          const rState = stream._readableState;
          if (typeof (wState === null || wState === void 0 ? void 0 : wState.closed) === "boolean" || typeof (rState === null || rState === void 0 ? void 0 : rState.closed) === "boolean") {
            return (wState === null || wState === void 0 ? void 0 : wState.closed) || (rState === null || rState === void 0 ? void 0 : rState.closed);
          }
          if (typeof stream._closed === "boolean" && isOutgoingMessage(stream)) {
            return stream._closed;
          }
          return null;
        }
        function isOutgoingMessage(stream) {
          return typeof stream._closed === "boolean" && typeof stream._defaultKeepAlive === "boolean" && typeof stream._removedConnection === "boolean" && typeof stream._removedContLen === "boolean";
        }
        function isServerResponse(stream) {
          return typeof stream._sent100 === "boolean" && isOutgoingMessage(stream);
        }
        function isServerRequest(stream) {
          var _stream$req;
          return typeof stream._consuming === "boolean" && typeof stream._dumped === "boolean" && ((_stream$req = stream.req) === null || _stream$req === void 0 ? void 0 : _stream$req.upgradeOrConnect) === void 0;
        }
        function willEmitClose(stream) {
          if (!isNodeStream(stream)) return null;
          const wState = stream._writableState;
          const rState = stream._readableState;
          const state3 = wState || rState;
          return !state3 && isServerResponse(stream) || !!(state3 && state3.autoDestroy && state3.emitClose && state3.closed === false);
        }
        function isDisturbed(stream) {
          var _stream$kIsDisturbed;
          return !!(stream && ((_stream$kIsDisturbed = stream[kIsDisturbed]) !== null && _stream$kIsDisturbed !== void 0 ? _stream$kIsDisturbed : stream.readableDidRead || stream.readableAborted));
        }
        function isErrored(stream) {
          var _ref, _ref2, _ref3, _ref4, _ref5, _stream$kIsErrored, _stream$_readableStat3, _stream$_writableStat3, _stream$_readableStat4, _stream$_writableStat4;
          return !!(stream && ((_ref = (_ref2 = (_ref3 = (_ref4 = (_ref5 = (_stream$kIsErrored = stream[kIsErrored]) !== null && _stream$kIsErrored !== void 0 ? _stream$kIsErrored : stream.readableErrored) !== null && _ref5 !== void 0 ? _ref5 : stream.writableErrored) !== null && _ref4 !== void 0 ? _ref4 : (_stream$_readableStat3 = stream._readableState) === null || _stream$_readableStat3 === void 0 ? void 0 : _stream$_readableStat3.errorEmitted) !== null && _ref3 !== void 0 ? _ref3 : (_stream$_writableStat3 = stream._writableState) === null || _stream$_writableStat3 === void 0 ? void 0 : _stream$_writableStat3.errorEmitted) !== null && _ref2 !== void 0 ? _ref2 : (_stream$_readableStat4 = stream._readableState) === null || _stream$_readableStat4 === void 0 ? void 0 : _stream$_readableStat4.errored) !== null && _ref !== void 0 ? _ref : (_stream$_writableStat4 = stream._writableState) === null || _stream$_writableStat4 === void 0 ? void 0 : _stream$_writableStat4.errored));
        }
        module.exports = {
          isDestroyed,
          kIsDestroyed,
          isDisturbed,
          kIsDisturbed,
          isErrored,
          kIsErrored,
          isReadable,
          kIsReadable,
          kIsClosedPromise,
          kControllerErrorFunction,
          kIsWritable,
          isClosed,
          isDuplexNodeStream,
          isFinished,
          isIterable,
          isReadableNodeStream,
          isReadableStream: isReadableStream2,
          isReadableEnded,
          isReadableFinished,
          isReadableErrored,
          isNodeStream,
          isWebStream,
          isWritable,
          isWritableNodeStream,
          isWritableStream,
          isWritableEnded,
          isWritableFinished,
          isWritableErrored,
          isServerRequest,
          isServerResponse,
          willEmitClose,
          isTransformStream
        };
      }
    });
    require_end_of_stream = __commonJS2({
      "node_modules/readable-stream/lib/internal/streams/end-of-stream.js"(exports32, module) {
        init_dirname2();
        var process22 = (init_process(), __toCommonJS2(process_exports));
        var { AbortError, codes } = require_errors();
        var { ERR_INVALID_ARG_TYPE: ERR_INVALID_ARG_TYPE2, ERR_STREAM_PREMATURE_CLOSE } = codes;
        var { kEmptyObject, once: once2 } = require_util();
        var { validateAbortSignal, validateFunction, validateObject, validateBoolean } = require_validators();
        var { Promise: Promise2, PromisePrototypeThen, SymbolDispose } = require_primordials();
        var {
          isClosed,
          isReadable,
          isReadableNodeStream,
          isReadableStream: isReadableStream2,
          isReadableFinished,
          isReadableErrored,
          isWritable,
          isWritableNodeStream,
          isWritableStream,
          isWritableFinished,
          isWritableErrored,
          isNodeStream,
          willEmitClose: _willEmitClose,
          kIsClosedPromise
        } = require_utils();
        var addAbortListener;
        function isRequest(stream) {
          return stream.setHeader && typeof stream.abort === "function";
        }
        var nop = () => {
        };
        function eos(stream, options, callback) {
          var _options$readable, _options$writable;
          if (arguments.length === 2) {
            callback = options;
            options = kEmptyObject;
          } else if (options == null) {
            options = kEmptyObject;
          } else {
            validateObject(options, "options");
          }
          validateFunction(callback, "callback");
          validateAbortSignal(options.signal, "options.signal");
          callback = once2(callback);
          if (isReadableStream2(stream) || isWritableStream(stream)) {
            return eosWeb(stream, options, callback);
          }
          if (!isNodeStream(stream)) {
            throw new ERR_INVALID_ARG_TYPE2("stream", ["ReadableStream", "WritableStream", "Stream"], stream);
          }
          const readable = (_options$readable = options.readable) !== null && _options$readable !== void 0 ? _options$readable : isReadableNodeStream(stream);
          const writable = (_options$writable = options.writable) !== null && _options$writable !== void 0 ? _options$writable : isWritableNodeStream(stream);
          const wState = stream._writableState;
          const rState = stream._readableState;
          const onlegacyfinish = () => {
            if (!stream.writable) {
              onfinish();
            }
          };
          let willEmitClose = _willEmitClose(stream) && isReadableNodeStream(stream) === readable && isWritableNodeStream(stream) === writable;
          let writableFinished = isWritableFinished(stream, false);
          const onfinish = () => {
            writableFinished = true;
            if (stream.destroyed) {
              willEmitClose = false;
            }
            if (willEmitClose && (!stream.readable || readable)) {
              return;
            }
            if (!readable || readableFinished) {
              callback.call(stream);
            }
          };
          let readableFinished = isReadableFinished(stream, false);
          const onend = () => {
            readableFinished = true;
            if (stream.destroyed) {
              willEmitClose = false;
            }
            if (willEmitClose && (!stream.writable || writable)) {
              return;
            }
            if (!writable || writableFinished) {
              callback.call(stream);
            }
          };
          const onerror = (err) => {
            callback.call(stream, err);
          };
          let closed = isClosed(stream);
          const onclose = () => {
            closed = true;
            const errored = isWritableErrored(stream) || isReadableErrored(stream);
            if (errored && typeof errored !== "boolean") {
              return callback.call(stream, errored);
            }
            if (readable && !readableFinished && isReadableNodeStream(stream, true)) {
              if (!isReadableFinished(stream, false)) return callback.call(stream, new ERR_STREAM_PREMATURE_CLOSE());
            }
            if (writable && !writableFinished) {
              if (!isWritableFinished(stream, false)) return callback.call(stream, new ERR_STREAM_PREMATURE_CLOSE());
            }
            callback.call(stream);
          };
          const onclosed = () => {
            closed = true;
            const errored = isWritableErrored(stream) || isReadableErrored(stream);
            if (errored && typeof errored !== "boolean") {
              return callback.call(stream, errored);
            }
            callback.call(stream);
          };
          const onrequest = () => {
            stream.req.on("finish", onfinish);
          };
          if (isRequest(stream)) {
            stream.on("complete", onfinish);
            if (!willEmitClose) {
              stream.on("abort", onclose);
            }
            if (stream.req) {
              onrequest();
            } else {
              stream.on("request", onrequest);
            }
          } else if (writable && !wState) {
            stream.on("end", onlegacyfinish);
            stream.on("close", onlegacyfinish);
          }
          if (!willEmitClose && typeof stream.aborted === "boolean") {
            stream.on("aborted", onclose);
          }
          stream.on("end", onend);
          stream.on("finish", onfinish);
          if (options.error !== false) {
            stream.on("error", onerror);
          }
          stream.on("close", onclose);
          if (closed) {
            process22.nextTick(onclose);
          } else if (wState !== null && wState !== void 0 && wState.errorEmitted || rState !== null && rState !== void 0 && rState.errorEmitted) {
            if (!willEmitClose) {
              process22.nextTick(onclosed);
            }
          } else if (!readable && (!willEmitClose || isReadable(stream)) && (writableFinished || isWritable(stream) === false)) {
            process22.nextTick(onclosed);
          } else if (!writable && (!willEmitClose || isWritable(stream)) && (readableFinished || isReadable(stream) === false)) {
            process22.nextTick(onclosed);
          } else if (rState && stream.req && stream.aborted) {
            process22.nextTick(onclosed);
          }
          const cleanup = () => {
            callback = nop;
            stream.removeListener("aborted", onclose);
            stream.removeListener("complete", onfinish);
            stream.removeListener("abort", onclose);
            stream.removeListener("request", onrequest);
            if (stream.req) stream.req.removeListener("finish", onfinish);
            stream.removeListener("end", onlegacyfinish);
            stream.removeListener("close", onlegacyfinish);
            stream.removeListener("finish", onfinish);
            stream.removeListener("end", onend);
            stream.removeListener("error", onerror);
            stream.removeListener("close", onclose);
          };
          if (options.signal && !closed) {
            const abort2 = () => {
              const endCallback = callback;
              cleanup();
              endCallback.call(
                stream,
                new AbortError(void 0, {
                  cause: options.signal.reason
                })
              );
            };
            if (options.signal.aborted) {
              process22.nextTick(abort2);
            } else {
              addAbortListener = addAbortListener || require_util().addAbortListener;
              const disposable = addAbortListener(options.signal, abort2);
              const originalCallback = callback;
              callback = once2((...args) => {
                disposable[SymbolDispose]();
                originalCallback.apply(stream, args);
              });
            }
          }
          return cleanup;
        }
        function eosWeb(stream, options, callback) {
          let isAborted = false;
          let abort2 = nop;
          if (options.signal) {
            abort2 = () => {
              isAborted = true;
              callback.call(
                stream,
                new AbortError(void 0, {
                  cause: options.signal.reason
                })
              );
            };
            if (options.signal.aborted) {
              process22.nextTick(abort2);
            } else {
              addAbortListener = addAbortListener || require_util().addAbortListener;
              const disposable = addAbortListener(options.signal, abort2);
              const originalCallback = callback;
              callback = once2((...args) => {
                disposable[SymbolDispose]();
                originalCallback.apply(stream, args);
              });
            }
          }
          const resolverFn = (...args) => {
            if (!isAborted) {
              process22.nextTick(() => callback.apply(stream, args));
            }
          };
          PromisePrototypeThen(stream[kIsClosedPromise].promise, resolverFn, resolverFn);
          return nop;
        }
        function finished2(stream, opts) {
          var _opts;
          let autoCleanup = false;
          if (opts === null) {
            opts = kEmptyObject;
          }
          if ((_opts = opts) !== null && _opts !== void 0 && _opts.cleanup) {
            validateBoolean(opts.cleanup, "cleanup");
            autoCleanup = opts.cleanup;
          }
          return new Promise2((resolve, reject) => {
            const cleanup = eos(stream, opts, (err) => {
              if (autoCleanup) {
                cleanup();
              }
              if (err) {
                reject(err);
              } else {
                resolve();
              }
            });
          });
        }
        module.exports = eos;
        module.exports.finished = finished2;
      }
    });
    require_destroy = __commonJS2({
      "node_modules/readable-stream/lib/internal/streams/destroy.js"(exports32, module) {
        "use strict";
        init_dirname2();
        var process22 = (init_process(), __toCommonJS2(process_exports));
        var {
          aggregateTwoErrors,
          codes: { ERR_MULTIPLE_CALLBACK },
          AbortError
        } = require_errors();
        var { Symbol: Symbol2 } = require_primordials();
        var { kIsDestroyed, isDestroyed, isFinished, isServerRequest } = require_utils();
        var kDestroy = Symbol2("kDestroy");
        var kConstruct = Symbol2("kConstruct");
        function checkError(err, w, r) {
          if (err) {
            err.stack;
            if (w && !w.errored) {
              w.errored = err;
            }
            if (r && !r.errored) {
              r.errored = err;
            }
          }
        }
        function destroy(err, cb) {
          const r = this._readableState;
          const w = this._writableState;
          const s = w || r;
          if (w !== null && w !== void 0 && w.destroyed || r !== null && r !== void 0 && r.destroyed) {
            if (typeof cb === "function") {
              cb();
            }
            return this;
          }
          checkError(err, w, r);
          if (w) {
            w.destroyed = true;
          }
          if (r) {
            r.destroyed = true;
          }
          if (!s.constructed) {
            this.once(kDestroy, function(er) {
              _destroy(this, aggregateTwoErrors(er, err), cb);
            });
          } else {
            _destroy(this, err, cb);
          }
          return this;
        }
        function _destroy(self2, err, cb) {
          let called = false;
          function onDestroy(err2) {
            if (called) {
              return;
            }
            called = true;
            const r = self2._readableState;
            const w = self2._writableState;
            checkError(err2, w, r);
            if (w) {
              w.closed = true;
            }
            if (r) {
              r.closed = true;
            }
            if (typeof cb === "function") {
              cb(err2);
            }
            if (err2) {
              process22.nextTick(emitErrorCloseNT, self2, err2);
            } else {
              process22.nextTick(emitCloseNT, self2);
            }
          }
          try {
            self2._destroy(err || null, onDestroy);
          } catch (err2) {
            onDestroy(err2);
          }
        }
        function emitErrorCloseNT(self2, err) {
          emitErrorNT(self2, err);
          emitCloseNT(self2);
        }
        function emitCloseNT(self2) {
          const r = self2._readableState;
          const w = self2._writableState;
          if (w) {
            w.closeEmitted = true;
          }
          if (r) {
            r.closeEmitted = true;
          }
          if (w !== null && w !== void 0 && w.emitClose || r !== null && r !== void 0 && r.emitClose) {
            self2.emit("close");
          }
        }
        function emitErrorNT(self2, err) {
          const r = self2._readableState;
          const w = self2._writableState;
          if (w !== null && w !== void 0 && w.errorEmitted || r !== null && r !== void 0 && r.errorEmitted) {
            return;
          }
          if (w) {
            w.errorEmitted = true;
          }
          if (r) {
            r.errorEmitted = true;
          }
          self2.emit("error", err);
        }
        function undestroy() {
          const r = this._readableState;
          const w = this._writableState;
          if (r) {
            r.constructed = true;
            r.closed = false;
            r.closeEmitted = false;
            r.destroyed = false;
            r.errored = null;
            r.errorEmitted = false;
            r.reading = false;
            r.ended = r.readable === false;
            r.endEmitted = r.readable === false;
          }
          if (w) {
            w.constructed = true;
            w.destroyed = false;
            w.closed = false;
            w.closeEmitted = false;
            w.errored = null;
            w.errorEmitted = false;
            w.finalCalled = false;
            w.prefinished = false;
            w.ended = w.writable === false;
            w.ending = w.writable === false;
            w.finished = w.writable === false;
          }
        }
        function errorOrDestroy(stream, err, sync) {
          const r = stream._readableState;
          const w = stream._writableState;
          if (w !== null && w !== void 0 && w.destroyed || r !== null && r !== void 0 && r.destroyed) {
            return this;
          }
          if (r !== null && r !== void 0 && r.autoDestroy || w !== null && w !== void 0 && w.autoDestroy)
            stream.destroy(err);
          else if (err) {
            err.stack;
            if (w && !w.errored) {
              w.errored = err;
            }
            if (r && !r.errored) {
              r.errored = err;
            }
            if (sync) {
              process22.nextTick(emitErrorNT, stream, err);
            } else {
              emitErrorNT(stream, err);
            }
          }
        }
        function construct(stream, cb) {
          if (typeof stream._construct !== "function") {
            return;
          }
          const r = stream._readableState;
          const w = stream._writableState;
          if (r) {
            r.constructed = false;
          }
          if (w) {
            w.constructed = false;
          }
          stream.once(kConstruct, cb);
          if (stream.listenerCount(kConstruct) > 1) {
            return;
          }
          process22.nextTick(constructNT, stream);
        }
        function constructNT(stream) {
          let called = false;
          function onConstruct(err) {
            if (called) {
              errorOrDestroy(stream, err !== null && err !== void 0 ? err : new ERR_MULTIPLE_CALLBACK());
              return;
            }
            called = true;
            const r = stream._readableState;
            const w = stream._writableState;
            const s = w || r;
            if (r) {
              r.constructed = true;
            }
            if (w) {
              w.constructed = true;
            }
            if (s.destroyed) {
              stream.emit(kDestroy, err);
            } else if (err) {
              errorOrDestroy(stream, err, true);
            } else {
              process22.nextTick(emitConstructNT, stream);
            }
          }
          try {
            stream._construct((err) => {
              process22.nextTick(onConstruct, err);
            });
          } catch (err) {
            process22.nextTick(onConstruct, err);
          }
        }
        function emitConstructNT(stream) {
          stream.emit(kConstruct);
        }
        function isRequest(stream) {
          return (stream === null || stream === void 0 ? void 0 : stream.setHeader) && typeof stream.abort === "function";
        }
        function emitCloseLegacy(stream) {
          stream.emit("close");
        }
        function emitErrorCloseLegacy(stream, err) {
          stream.emit("error", err);
          process22.nextTick(emitCloseLegacy, stream);
        }
        function destroyer(stream, err) {
          if (!stream || isDestroyed(stream)) {
            return;
          }
          if (!err && !isFinished(stream)) {
            err = new AbortError();
          }
          if (isServerRequest(stream)) {
            stream.socket = null;
            stream.destroy(err);
          } else if (isRequest(stream)) {
            stream.abort();
          } else if (isRequest(stream.req)) {
            stream.req.abort();
          } else if (typeof stream.destroy === "function") {
            stream.destroy(err);
          } else if (typeof stream.close === "function") {
            stream.close();
          } else if (err) {
            process22.nextTick(emitErrorCloseLegacy, stream, err);
          } else {
            process22.nextTick(emitCloseLegacy, stream);
          }
          if (!stream.destroyed) {
            stream[kIsDestroyed] = true;
          }
        }
        module.exports = {
          construct,
          destroyer,
          destroy,
          undestroy,
          errorOrDestroy
        };
      }
    });
    require_legacy = __commonJS2({
      "node_modules/readable-stream/lib/internal/streams/legacy.js"(exports32, module) {
        "use strict";
        init_dirname2();
        var { ArrayIsArray, ObjectSetPrototypeOf } = require_primordials();
        var { EventEmitter: EE2 } = __require2("events");
        function Stream2(opts) {
          EE2.call(this, opts);
        }
        ObjectSetPrototypeOf(Stream2.prototype, EE2.prototype);
        ObjectSetPrototypeOf(Stream2, EE2);
        Stream2.prototype.pipe = function(dest, options) {
          const source = this;
          function ondata(chunk) {
            if (dest.writable && dest.write(chunk) === false && source.pause) {
              source.pause();
            }
          }
          source.on("data", ondata);
          function ondrain() {
            if (source.readable && source.resume) {
              source.resume();
            }
          }
          dest.on("drain", ondrain);
          if (!dest._isStdio && (!options || options.end !== false)) {
            source.on("end", onend);
            source.on("close", onclose);
          }
          let didOnEnd = false;
          function onend() {
            if (didOnEnd) return;
            didOnEnd = true;
            dest.end();
          }
          function onclose() {
            if (didOnEnd) return;
            didOnEnd = true;
            if (typeof dest.destroy === "function") dest.destroy();
          }
          function onerror(er) {
            cleanup();
            if (EE2.listenerCount(this, "error") === 0) {
              this.emit("error", er);
            }
          }
          prependListener2(source, "error", onerror);
          prependListener2(dest, "error", onerror);
          function cleanup() {
            source.removeListener("data", ondata);
            dest.removeListener("drain", ondrain);
            source.removeListener("end", onend);
            source.removeListener("close", onclose);
            source.removeListener("error", onerror);
            dest.removeListener("error", onerror);
            source.removeListener("end", cleanup);
            source.removeListener("close", cleanup);
            dest.removeListener("close", cleanup);
          }
          source.on("end", cleanup);
          source.on("close", cleanup);
          dest.on("close", cleanup);
          dest.emit("pipe", source);
          return dest;
        };
        function prependListener2(emitter, event, fn) {
          if (typeof emitter.prependListener === "function") return emitter.prependListener(event, fn);
          if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);
          else if (ArrayIsArray(emitter._events[event])) emitter._events[event].unshift(fn);
          else emitter._events[event] = [fn, emitter._events[event]];
        }
        module.exports = {
          Stream: Stream2,
          prependListener: prependListener2
        };
      }
    });
    require_add_abort_signal = __commonJS2({
      "node_modules/readable-stream/lib/internal/streams/add-abort-signal.js"(exports32, module) {
        "use strict";
        init_dirname2();
        var { SymbolDispose } = require_primordials();
        var { AbortError, codes } = require_errors();
        var { isNodeStream, isWebStream, kControllerErrorFunction } = require_utils();
        var eos = require_end_of_stream();
        var { ERR_INVALID_ARG_TYPE: ERR_INVALID_ARG_TYPE2 } = codes;
        var addAbortListener;
        var validateAbortSignal = (signal, name) => {
          if (typeof signal !== "object" || !("aborted" in signal)) {
            throw new ERR_INVALID_ARG_TYPE2(name, "AbortSignal", signal);
          }
        };
        module.exports.addAbortSignal = function addAbortSignal(signal, stream) {
          validateAbortSignal(signal, "signal");
          if (!isNodeStream(stream) && !isWebStream(stream)) {
            throw new ERR_INVALID_ARG_TYPE2("stream", ["ReadableStream", "WritableStream", "Stream"], stream);
          }
          return module.exports.addAbortSignalNoValidate(signal, stream);
        };
        module.exports.addAbortSignalNoValidate = function(signal, stream) {
          if (typeof signal !== "object" || !("aborted" in signal)) {
            return stream;
          }
          const onAbort = isNodeStream(stream) ? () => {
            stream.destroy(
              new AbortError(void 0, {
                cause: signal.reason
              })
            );
          } : () => {
            stream[kControllerErrorFunction](
              new AbortError(void 0, {
                cause: signal.reason
              })
            );
          };
          if (signal.aborted) {
            onAbort();
          } else {
            addAbortListener = addAbortListener || require_util().addAbortListener;
            const disposable = addAbortListener(signal, onAbort);
            eos(stream, disposable[SymbolDispose]);
          }
          return stream;
        };
      }
    });
    require_buffer_list = __commonJS2({
      "node_modules/readable-stream/lib/internal/streams/buffer_list.js"(exports32, module) {
        "use strict";
        init_dirname2();
        var { StringPrototypeSlice, SymbolIterator, TypedArrayPrototypeSet, Uint8Array: Uint8Array2 } = require_primordials();
        var { Buffer: Buffer2 } = __require2("buffer");
        var { inspect: inspect2 } = require_util();
        module.exports = class BufferList {
          constructor() {
            this.head = null;
            this.tail = null;
            this.length = 0;
          }
          push(v) {
            const entry = {
              data: v,
              next: null
            };
            if (this.length > 0) this.tail.next = entry;
            else this.head = entry;
            this.tail = entry;
            ++this.length;
          }
          unshift(v) {
            const entry = {
              data: v,
              next: this.head
            };
            if (this.length === 0) this.tail = entry;
            this.head = entry;
            ++this.length;
          }
          shift() {
            if (this.length === 0) return;
            const ret = this.head.data;
            if (this.length === 1) this.head = this.tail = null;
            else this.head = this.head.next;
            --this.length;
            return ret;
          }
          clear() {
            this.head = this.tail = null;
            this.length = 0;
          }
          join(s) {
            if (this.length === 0) return "";
            let p = this.head;
            let ret = "" + p.data;
            while ((p = p.next) !== null) ret += s + p.data;
            return ret;
          }
          concat(n) {
            if (this.length === 0) return Buffer2.alloc(0);
            const ret = Buffer2.allocUnsafe(n >>> 0);
            let p = this.head;
            let i = 0;
            while (p) {
              TypedArrayPrototypeSet(ret, p.data, i);
              i += p.data.length;
              p = p.next;
            }
            return ret;
          }
          // Consumes a specified amount of bytes or characters from the buffered data.
          consume(n, hasStrings) {
            const data = this.head.data;
            if (n < data.length) {
              const slice = data.slice(0, n);
              this.head.data = data.slice(n);
              return slice;
            }
            if (n === data.length) {
              return this.shift();
            }
            return hasStrings ? this._getString(n) : this._getBuffer(n);
          }
          first() {
            return this.head.data;
          }
          *[SymbolIterator]() {
            for (let p = this.head; p; p = p.next) {
              yield p.data;
            }
          }
          // Consumes a specified amount of characters from the buffered data.
          _getString(n) {
            let ret = "";
            let p = this.head;
            let c = 0;
            do {
              const str = p.data;
              if (n > str.length) {
                ret += str;
                n -= str.length;
              } else {
                if (n === str.length) {
                  ret += str;
                  ++c;
                  if (p.next) this.head = p.next;
                  else this.head = this.tail = null;
                } else {
                  ret += StringPrototypeSlice(str, 0, n);
                  this.head = p;
                  p.data = StringPrototypeSlice(str, n);
                }
                break;
              }
              ++c;
            } while ((p = p.next) !== null);
            this.length -= c;
            return ret;
          }
          // Consumes a specified amount of bytes from the buffered data.
          _getBuffer(n) {
            const ret = Buffer2.allocUnsafe(n);
            const retLen = n;
            let p = this.head;
            let c = 0;
            do {
              const buf = p.data;
              if (n > buf.length) {
                TypedArrayPrototypeSet(ret, buf, retLen - n);
                n -= buf.length;
              } else {
                if (n === buf.length) {
                  TypedArrayPrototypeSet(ret, buf, retLen - n);
                  ++c;
                  if (p.next) this.head = p.next;
                  else this.head = this.tail = null;
                } else {
                  TypedArrayPrototypeSet(ret, new Uint8Array2(buf.buffer, buf.byteOffset, n), retLen - n);
                  this.head = p;
                  p.data = buf.slice(n);
                }
                break;
              }
              ++c;
            } while ((p = p.next) !== null);
            this.length -= c;
            return ret;
          }
          // Make sure the linked list only shows the minimal necessary information.
          [Symbol.for("nodejs.util.inspect.custom")](_, options) {
            return inspect2(this, {
              ...options,
              // Only inspect one level.
              depth: 0,
              // It should not recurse.
              customInspect: false
            });
          }
        };
      }
    });
    require_state = __commonJS2({
      "node_modules/readable-stream/lib/internal/streams/state.js"(exports32, module) {
        "use strict";
        init_dirname2();
        var { MathFloor, NumberIsInteger } = require_primordials();
        var { validateInteger } = require_validators();
        var { ERR_INVALID_ARG_VALUE } = require_errors().codes;
        var defaultHighWaterMarkBytes = 16 * 1024;
        var defaultHighWaterMarkObjectMode = 16;
        function highWaterMarkFrom(options, isDuplex, duplexKey) {
          return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
        }
        function getDefaultHighWaterMark(objectMode) {
          return objectMode ? defaultHighWaterMarkObjectMode : defaultHighWaterMarkBytes;
        }
        function setDefaultHighWaterMark(objectMode, value) {
          validateInteger(value, "value", 0);
          if (objectMode) {
            defaultHighWaterMarkObjectMode = value;
          } else {
            defaultHighWaterMarkBytes = value;
          }
        }
        function getHighWaterMark(state3, options, duplexKey, isDuplex) {
          const hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
          if (hwm != null) {
            if (!NumberIsInteger(hwm) || hwm < 0) {
              const name = isDuplex ? `options.${duplexKey}` : "options.highWaterMark";
              throw new ERR_INVALID_ARG_VALUE(name, hwm);
            }
            return MathFloor(hwm);
          }
          return getDefaultHighWaterMark(state3.objectMode);
        }
        module.exports = {
          getHighWaterMark,
          getDefaultHighWaterMark,
          setDefaultHighWaterMark
        };
      }
    });
    init_chunk_DtuTasat = __esm2({
      "../../../../node_modules/@jspm/core/nodelibs/browser/chunk-DtuTasat.js"() {
        init_dirname2();
        exports$2 = {};
        _dewExec$2 = false;
        exports$1 = {};
        _dewExec$1 = false;
        exports = {};
        _dewExec = false;
      }
    });
    init_chunk_CcCWfKp1 = __esm2({
      "../../../../node_modules/@jspm/core/nodelibs/browser/chunk-CcCWfKp1.js"() {
        init_dirname2();
        init_chunk_DtuTasat();
        exports$22 = {};
        _dewExec$12 = false;
        exports$12 = {};
        _dewExec2 = false;
        exports2 = dew2();
        exports2["StringDecoder"];
        StringDecoder = exports2.StringDecoder;
      }
    });
    string_decoder_exports = {};
    __export2(string_decoder_exports, {
      StringDecoder: () => StringDecoder,
      default: () => exports2
    });
    init_string_decoder = __esm2({
      "../../../../node_modules/@jspm/core/nodelibs/browser/string_decoder.js"() {
        init_dirname2();
        init_chunk_CcCWfKp1();
        init_chunk_DtuTasat();
      }
    });
    require_from = __commonJS2({
      "node_modules/readable-stream/lib/internal/streams/from.js"(exports32, module) {
        "use strict";
        init_dirname2();
        var process22 = (init_process(), __toCommonJS2(process_exports));
        var { PromisePrototypeThen, SymbolAsyncIterator, SymbolIterator } = require_primordials();
        var { Buffer: Buffer2 } = __require2("buffer");
        var { ERR_INVALID_ARG_TYPE: ERR_INVALID_ARG_TYPE2, ERR_STREAM_NULL_VALUES } = require_errors().codes;
        function from(Readable2, iterable, opts) {
          let iterator;
          if (typeof iterable === "string" || iterable instanceof Buffer2) {
            return new Readable2({
              objectMode: true,
              ...opts,
              read() {
                this.push(iterable);
                this.push(null);
              }
            });
          }
          let isAsync;
          if (iterable && iterable[SymbolAsyncIterator]) {
            isAsync = true;
            iterator = iterable[SymbolAsyncIterator]();
          } else if (iterable && iterable[SymbolIterator]) {
            isAsync = false;
            iterator = iterable[SymbolIterator]();
          } else {
            throw new ERR_INVALID_ARG_TYPE2("iterable", ["Iterable"], iterable);
          }
          const readable = new Readable2({
            objectMode: true,
            highWaterMark: 1,
            // TODO(ronag): What options should be allowed?
            ...opts
          });
          let reading = false;
          readable._read = function() {
            if (!reading) {
              reading = true;
              next();
            }
          };
          readable._destroy = function(error, cb) {
            PromisePrototypeThen(
              close(error),
              () => process22.nextTick(cb, error),
              // nextTick is here in case cb throws
              (e) => process22.nextTick(cb, e || error)
            );
          };
          async function close(error) {
            const hadError = error !== void 0 && error !== null;
            const hasThrow = typeof iterator.throw === "function";
            if (hadError && hasThrow) {
              const { value, done } = await iterator.throw(error);
              await value;
              if (done) {
                return;
              }
            }
            if (typeof iterator.return === "function") {
              const { value } = await iterator.return();
              await value;
            }
          }
          async function next() {
            for (; ; ) {
              try {
                const { value, done } = isAsync ? await iterator.next() : iterator.next();
                if (done) {
                  readable.push(null);
                } else {
                  const res = value && typeof value.then === "function" ? await value : value;
                  if (res === null) {
                    reading = false;
                    throw new ERR_STREAM_NULL_VALUES();
                  } else if (readable.push(res)) {
                    continue;
                  } else {
                    reading = false;
                  }
                }
              } catch (err) {
                readable.destroy(err);
              }
              break;
            }
          }
          return readable;
        }
        module.exports = from;
      }
    });
    require_readable = __commonJS2({
      "node_modules/readable-stream/lib/internal/streams/readable.js"(exports32, module) {
        init_dirname2();
        var process22 = (init_process(), __toCommonJS2(process_exports));
        var {
          ArrayPrototypeIndexOf,
          NumberIsInteger,
          NumberIsNaN,
          NumberParseInt,
          ObjectDefineProperties,
          ObjectKeys,
          ObjectSetPrototypeOf,
          Promise: Promise2,
          SafeSet,
          SymbolAsyncDispose,
          SymbolAsyncIterator,
          Symbol: Symbol2
        } = require_primordials();
        module.exports = Readable2;
        Readable2.ReadableState = ReadableState;
        var { EventEmitter: EE2 } = __require2("events");
        var { Stream: Stream2, prependListener: prependListener2 } = require_legacy();
        var { Buffer: Buffer2 } = __require2("buffer");
        var { addAbortSignal } = require_add_abort_signal();
        var eos = require_end_of_stream();
        var debug = require_util().debuglog("stream", (fn) => {
          debug = fn;
        });
        var BufferList = require_buffer_list();
        var destroyImpl = require_destroy();
        var { getHighWaterMark, getDefaultHighWaterMark } = require_state();
        var {
          aggregateTwoErrors,
          codes: {
            ERR_INVALID_ARG_TYPE: ERR_INVALID_ARG_TYPE2,
            ERR_METHOD_NOT_IMPLEMENTED,
            ERR_OUT_OF_RANGE,
            ERR_STREAM_PUSH_AFTER_EOF,
            ERR_STREAM_UNSHIFT_AFTER_END_EVENT
          },
          AbortError
        } = require_errors();
        var { validateObject } = require_validators();
        var kPaused = Symbol2("kPaused");
        var { StringDecoder: StringDecoder2 } = (init_string_decoder(), __toCommonJS2(string_decoder_exports));
        var from = require_from();
        ObjectSetPrototypeOf(Readable2.prototype, Stream2.prototype);
        ObjectSetPrototypeOf(Readable2, Stream2);
        var nop = () => {
        };
        var { errorOrDestroy } = destroyImpl;
        var kObjectMode = 1 << 0;
        var kEnded = 1 << 1;
        var kEndEmitted = 1 << 2;
        var kReading = 1 << 3;
        var kConstructed = 1 << 4;
        var kSync = 1 << 5;
        var kNeedReadable = 1 << 6;
        var kEmittedReadable = 1 << 7;
        var kReadableListening = 1 << 8;
        var kResumeScheduled = 1 << 9;
        var kErrorEmitted = 1 << 10;
        var kEmitClose = 1 << 11;
        var kAutoDestroy = 1 << 12;
        var kDestroyed = 1 << 13;
        var kClosed = 1 << 14;
        var kCloseEmitted = 1 << 15;
        var kMultiAwaitDrain = 1 << 16;
        var kReadingMore = 1 << 17;
        var kDataEmitted = 1 << 18;
        function makeBitMapDescriptor(bit) {
          return {
            enumerable: false,
            get() {
              return (this.state & bit) !== 0;
            },
            set(value) {
              if (value) this.state |= bit;
              else this.state &= ~bit;
            }
          };
        }
        ObjectDefineProperties(ReadableState.prototype, {
          objectMode: makeBitMapDescriptor(kObjectMode),
          ended: makeBitMapDescriptor(kEnded),
          endEmitted: makeBitMapDescriptor(kEndEmitted),
          reading: makeBitMapDescriptor(kReading),
          // Stream is still being constructed and cannot be
          // destroyed until construction finished or failed.
          // Async construction is opt in, therefore we start as
          // constructed.
          constructed: makeBitMapDescriptor(kConstructed),
          // A flag to be able to tell if the event 'readable'/'data' is emitted
          // immediately, or on a later tick.  We set this to true at first, because
          // any actions that shouldn't happen until "later" should generally also
          // not happen before the first read call.
          sync: makeBitMapDescriptor(kSync),
          // Whenever we return null, then we set a flag to say
          // that we're awaiting a 'readable' event emission.
          needReadable: makeBitMapDescriptor(kNeedReadable),
          emittedReadable: makeBitMapDescriptor(kEmittedReadable),
          readableListening: makeBitMapDescriptor(kReadableListening),
          resumeScheduled: makeBitMapDescriptor(kResumeScheduled),
          // True if the error was already emitted and should not be thrown again.
          errorEmitted: makeBitMapDescriptor(kErrorEmitted),
          emitClose: makeBitMapDescriptor(kEmitClose),
          autoDestroy: makeBitMapDescriptor(kAutoDestroy),
          // Has it been destroyed.
          destroyed: makeBitMapDescriptor(kDestroyed),
          // Indicates whether the stream has finished destroying.
          closed: makeBitMapDescriptor(kClosed),
          // True if close has been emitted or would have been emitted
          // depending on emitClose.
          closeEmitted: makeBitMapDescriptor(kCloseEmitted),
          multiAwaitDrain: makeBitMapDescriptor(kMultiAwaitDrain),
          // If true, a maybeReadMore has been scheduled.
          readingMore: makeBitMapDescriptor(kReadingMore),
          dataEmitted: makeBitMapDescriptor(kDataEmitted)
        });
        function ReadableState(options, stream, isDuplex) {
          if (typeof isDuplex !== "boolean") isDuplex = stream instanceof require_duplex();
          this.state = kEmitClose | kAutoDestroy | kConstructed | kSync;
          if (options && options.objectMode) this.state |= kObjectMode;
          if (isDuplex && options && options.readableObjectMode) this.state |= kObjectMode;
          this.highWaterMark = options ? getHighWaterMark(this, options, "readableHighWaterMark", isDuplex) : getDefaultHighWaterMark(false);
          this.buffer = new BufferList();
          this.length = 0;
          this.pipes = [];
          this.flowing = null;
          this[kPaused] = null;
          if (options && options.emitClose === false) this.state &= ~kEmitClose;
          if (options && options.autoDestroy === false) this.state &= ~kAutoDestroy;
          this.errored = null;
          this.defaultEncoding = options && options.defaultEncoding || "utf8";
          this.awaitDrainWriters = null;
          this.decoder = null;
          this.encoding = null;
          if (options && options.encoding) {
            this.decoder = new StringDecoder2(options.encoding);
            this.encoding = options.encoding;
          }
        }
        function Readable2(options) {
          if (!(this instanceof Readable2)) return new Readable2(options);
          const isDuplex = this instanceof require_duplex();
          this._readableState = new ReadableState(options, this, isDuplex);
          if (options) {
            if (typeof options.read === "function") this._read = options.read;
            if (typeof options.destroy === "function") this._destroy = options.destroy;
            if (typeof options.construct === "function") this._construct = options.construct;
            if (options.signal && !isDuplex) addAbortSignal(options.signal, this);
          }
          Stream2.call(this, options);
          destroyImpl.construct(this, () => {
            if (this._readableState.needReadable) {
              maybeReadMore(this, this._readableState);
            }
          });
        }
        Readable2.prototype.destroy = destroyImpl.destroy;
        Readable2.prototype._undestroy = destroyImpl.undestroy;
        Readable2.prototype._destroy = function(err, cb) {
          cb(err);
        };
        Readable2.prototype[EE2.captureRejectionSymbol] = function(err) {
          this.destroy(err);
        };
        Readable2.prototype[SymbolAsyncDispose] = function() {
          let error;
          if (!this.destroyed) {
            error = this.readableEnded ? null : new AbortError();
            this.destroy(error);
          }
          return new Promise2((resolve, reject) => eos(this, (err) => err && err !== error ? reject(err) : resolve(null)));
        };
        Readable2.prototype.push = function(chunk, encoding) {
          return readableAddChunk(this, chunk, encoding, false);
        };
        Readable2.prototype.unshift = function(chunk, encoding) {
          return readableAddChunk(this, chunk, encoding, true);
        };
        function readableAddChunk(stream, chunk, encoding, addToFront) {
          debug("readableAddChunk", chunk);
          const state3 = stream._readableState;
          let err;
          if ((state3.state & kObjectMode) === 0) {
            if (typeof chunk === "string") {
              encoding = encoding || state3.defaultEncoding;
              if (state3.encoding !== encoding) {
                if (addToFront && state3.encoding) {
                  chunk = Buffer2.from(chunk, encoding).toString(state3.encoding);
                } else {
                  chunk = Buffer2.from(chunk, encoding);
                  encoding = "";
                }
              }
            } else if (chunk instanceof Buffer2) {
              encoding = "";
            } else if (Stream2._isUint8Array(chunk)) {
              chunk = Stream2._uint8ArrayToBuffer(chunk);
              encoding = "";
            } else if (chunk != null) {
              err = new ERR_INVALID_ARG_TYPE2("chunk", ["string", "Buffer", "Uint8Array"], chunk);
            }
          }
          if (err) {
            errorOrDestroy(stream, err);
          } else if (chunk === null) {
            state3.state &= ~kReading;
            onEofChunk(stream, state3);
          } else if ((state3.state & kObjectMode) !== 0 || chunk && chunk.length > 0) {
            if (addToFront) {
              if ((state3.state & kEndEmitted) !== 0) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
              else if (state3.destroyed || state3.errored) return false;
              else addChunk(stream, state3, chunk, true);
            } else if (state3.ended) {
              errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
            } else if (state3.destroyed || state3.errored) {
              return false;
            } else {
              state3.state &= ~kReading;
              if (state3.decoder && !encoding) {
                chunk = state3.decoder.write(chunk);
                if (state3.objectMode || chunk.length !== 0) addChunk(stream, state3, chunk, false);
                else maybeReadMore(stream, state3);
              } else {
                addChunk(stream, state3, chunk, false);
              }
            }
          } else if (!addToFront) {
            state3.state &= ~kReading;
            maybeReadMore(stream, state3);
          }
          return !state3.ended && (state3.length < state3.highWaterMark || state3.length === 0);
        }
        function addChunk(stream, state3, chunk, addToFront) {
          if (state3.flowing && state3.length === 0 && !state3.sync && stream.listenerCount("data") > 0) {
            if ((state3.state & kMultiAwaitDrain) !== 0) {
              state3.awaitDrainWriters.clear();
            } else {
              state3.awaitDrainWriters = null;
            }
            state3.dataEmitted = true;
            stream.emit("data", chunk);
          } else {
            state3.length += state3.objectMode ? 1 : chunk.length;
            if (addToFront) state3.buffer.unshift(chunk);
            else state3.buffer.push(chunk);
            if ((state3.state & kNeedReadable) !== 0) emitReadable(stream);
          }
          maybeReadMore(stream, state3);
        }
        Readable2.prototype.isPaused = function() {
          const state3 = this._readableState;
          return state3[kPaused] === true || state3.flowing === false;
        };
        Readable2.prototype.setEncoding = function(enc) {
          const decoder = new StringDecoder2(enc);
          this._readableState.decoder = decoder;
          this._readableState.encoding = this._readableState.decoder.encoding;
          const buffer = this._readableState.buffer;
          let content = "";
          for (const data of buffer) {
            content += decoder.write(data);
          }
          buffer.clear();
          if (content !== "") buffer.push(content);
          this._readableState.length = content.length;
          return this;
        };
        var MAX_HWM = 1073741824;
        function computeNewHighWaterMark(n) {
          if (n > MAX_HWM) {
            throw new ERR_OUT_OF_RANGE("size", "<= 1GiB", n);
          } else {
            n--;
            n |= n >>> 1;
            n |= n >>> 2;
            n |= n >>> 4;
            n |= n >>> 8;
            n |= n >>> 16;
            n++;
          }
          return n;
        }
        function howMuchToRead(n, state3) {
          if (n <= 0 || state3.length === 0 && state3.ended) return 0;
          if ((state3.state & kObjectMode) !== 0) return 1;
          if (NumberIsNaN(n)) {
            if (state3.flowing && state3.length) return state3.buffer.first().length;
            return state3.length;
          }
          if (n <= state3.length) return n;
          return state3.ended ? state3.length : 0;
        }
        Readable2.prototype.read = function(n) {
          debug("read", n);
          if (n === void 0) {
            n = NaN;
          } else if (!NumberIsInteger(n)) {
            n = NumberParseInt(n, 10);
          }
          const state3 = this._readableState;
          const nOrig = n;
          if (n > state3.highWaterMark) state3.highWaterMark = computeNewHighWaterMark(n);
          if (n !== 0) state3.state &= ~kEmittedReadable;
          if (n === 0 && state3.needReadable && ((state3.highWaterMark !== 0 ? state3.length >= state3.highWaterMark : state3.length > 0) || state3.ended)) {
            debug("read: emitReadable", state3.length, state3.ended);
            if (state3.length === 0 && state3.ended) endReadable(this);
            else emitReadable(this);
            return null;
          }
          n = howMuchToRead(n, state3);
          if (n === 0 && state3.ended) {
            if (state3.length === 0) endReadable(this);
            return null;
          }
          let doRead = (state3.state & kNeedReadable) !== 0;
          debug("need readable", doRead);
          if (state3.length === 0 || state3.length - n < state3.highWaterMark) {
            doRead = true;
            debug("length less than watermark", doRead);
          }
          if (state3.ended || state3.reading || state3.destroyed || state3.errored || !state3.constructed) {
            doRead = false;
            debug("reading, ended or constructing", doRead);
          } else if (doRead) {
            debug("do read");
            state3.state |= kReading | kSync;
            if (state3.length === 0) state3.state |= kNeedReadable;
            try {
              this._read(state3.highWaterMark);
            } catch (err) {
              errorOrDestroy(this, err);
            }
            state3.state &= ~kSync;
            if (!state3.reading) n = howMuchToRead(nOrig, state3);
          }
          let ret;
          if (n > 0) ret = fromList(n, state3);
          else ret = null;
          if (ret === null) {
            state3.needReadable = state3.length <= state3.highWaterMark;
            n = 0;
          } else {
            state3.length -= n;
            if (state3.multiAwaitDrain) {
              state3.awaitDrainWriters.clear();
            } else {
              state3.awaitDrainWriters = null;
            }
          }
          if (state3.length === 0) {
            if (!state3.ended) state3.needReadable = true;
            if (nOrig !== n && state3.ended) endReadable(this);
          }
          if (ret !== null && !state3.errorEmitted && !state3.closeEmitted) {
            state3.dataEmitted = true;
            this.emit("data", ret);
          }
          return ret;
        };
        function onEofChunk(stream, state3) {
          debug("onEofChunk");
          if (state3.ended) return;
          if (state3.decoder) {
            const chunk = state3.decoder.end();
            if (chunk && chunk.length) {
              state3.buffer.push(chunk);
              state3.length += state3.objectMode ? 1 : chunk.length;
            }
          }
          state3.ended = true;
          if (state3.sync) {
            emitReadable(stream);
          } else {
            state3.needReadable = false;
            state3.emittedReadable = true;
            emitReadable_(stream);
          }
        }
        function emitReadable(stream) {
          const state3 = stream._readableState;
          debug("emitReadable", state3.needReadable, state3.emittedReadable);
          state3.needReadable = false;
          if (!state3.emittedReadable) {
            debug("emitReadable", state3.flowing);
            state3.emittedReadable = true;
            process22.nextTick(emitReadable_, stream);
          }
        }
        function emitReadable_(stream) {
          const state3 = stream._readableState;
          debug("emitReadable_", state3.destroyed, state3.length, state3.ended);
          if (!state3.destroyed && !state3.errored && (state3.length || state3.ended)) {
            stream.emit("readable");
            state3.emittedReadable = false;
          }
          state3.needReadable = !state3.flowing && !state3.ended && state3.length <= state3.highWaterMark;
          flow(stream);
        }
        function maybeReadMore(stream, state3) {
          if (!state3.readingMore && state3.constructed) {
            state3.readingMore = true;
            process22.nextTick(maybeReadMore_, stream, state3);
          }
        }
        function maybeReadMore_(stream, state3) {
          while (!state3.reading && !state3.ended && (state3.length < state3.highWaterMark || state3.flowing && state3.length === 0)) {
            const len = state3.length;
            debug("maybeReadMore read 0");
            stream.read(0);
            if (len === state3.length)
              break;
          }
          state3.readingMore = false;
        }
        Readable2.prototype._read = function(n) {
          throw new ERR_METHOD_NOT_IMPLEMENTED("_read()");
        };
        Readable2.prototype.pipe = function(dest, pipeOpts) {
          const src = this;
          const state3 = this._readableState;
          if (state3.pipes.length === 1) {
            if (!state3.multiAwaitDrain) {
              state3.multiAwaitDrain = true;
              state3.awaitDrainWriters = new SafeSet(state3.awaitDrainWriters ? [state3.awaitDrainWriters] : []);
            }
          }
          state3.pipes.push(dest);
          debug("pipe count=%d opts=%j", state3.pipes.length, pipeOpts);
          const doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process22.stdout && dest !== process22.stderr;
          const endFn = doEnd ? onend : unpipe;
          if (state3.endEmitted) process22.nextTick(endFn);
          else src.once("end", endFn);
          dest.on("unpipe", onunpipe);
          function onunpipe(readable, unpipeInfo) {
            debug("onunpipe");
            if (readable === src) {
              if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                unpipeInfo.hasUnpiped = true;
                cleanup();
              }
            }
          }
          function onend() {
            debug("onend");
            dest.end();
          }
          let ondrain;
          let cleanedUp = false;
          function cleanup() {
            debug("cleanup");
            dest.removeListener("close", onclose);
            dest.removeListener("finish", onfinish);
            if (ondrain) {
              dest.removeListener("drain", ondrain);
            }
            dest.removeListener("error", onerror);
            dest.removeListener("unpipe", onunpipe);
            src.removeListener("end", onend);
            src.removeListener("end", unpipe);
            src.removeListener("data", ondata);
            cleanedUp = true;
            if (ondrain && state3.awaitDrainWriters && (!dest._writableState || dest._writableState.needDrain)) ondrain();
          }
          function pause() {
            if (!cleanedUp) {
              if (state3.pipes.length === 1 && state3.pipes[0] === dest) {
                debug("false write response, pause", 0);
                state3.awaitDrainWriters = dest;
                state3.multiAwaitDrain = false;
              } else if (state3.pipes.length > 1 && state3.pipes.includes(dest)) {
                debug("false write response, pause", state3.awaitDrainWriters.size);
                state3.awaitDrainWriters.add(dest);
              }
              src.pause();
            }
            if (!ondrain) {
              ondrain = pipeOnDrain(src, dest);
              dest.on("drain", ondrain);
            }
          }
          src.on("data", ondata);
          function ondata(chunk) {
            debug("ondata");
            const ret = dest.write(chunk);
            debug("dest.write", ret);
            if (ret === false) {
              pause();
            }
          }
          function onerror(er) {
            debug("onerror", er);
            unpipe();
            dest.removeListener("error", onerror);
            if (dest.listenerCount("error") === 0) {
              const s = dest._writableState || dest._readableState;
              if (s && !s.errorEmitted) {
                errorOrDestroy(dest, er);
              } else {
                dest.emit("error", er);
              }
            }
          }
          prependListener2(dest, "error", onerror);
          function onclose() {
            dest.removeListener("finish", onfinish);
            unpipe();
          }
          dest.once("close", onclose);
          function onfinish() {
            debug("onfinish");
            dest.removeListener("close", onclose);
            unpipe();
          }
          dest.once("finish", onfinish);
          function unpipe() {
            debug("unpipe");
            src.unpipe(dest);
          }
          dest.emit("pipe", src);
          if (dest.writableNeedDrain === true) {
            pause();
          } else if (!state3.flowing) {
            debug("pipe resume");
            src.resume();
          }
          return dest;
        };
        function pipeOnDrain(src, dest) {
          return function pipeOnDrainFunctionResult() {
            const state3 = src._readableState;
            if (state3.awaitDrainWriters === dest) {
              debug("pipeOnDrain", 1);
              state3.awaitDrainWriters = null;
            } else if (state3.multiAwaitDrain) {
              debug("pipeOnDrain", state3.awaitDrainWriters.size);
              state3.awaitDrainWriters.delete(dest);
            }
            if ((!state3.awaitDrainWriters || state3.awaitDrainWriters.size === 0) && src.listenerCount("data")) {
              src.resume();
            }
          };
        }
        Readable2.prototype.unpipe = function(dest) {
          const state3 = this._readableState;
          const unpipeInfo = {
            hasUnpiped: false
          };
          if (state3.pipes.length === 0) return this;
          if (!dest) {
            const dests = state3.pipes;
            state3.pipes = [];
            this.pause();
            for (let i = 0; i < dests.length; i++)
              dests[i].emit("unpipe", this, {
                hasUnpiped: false
              });
            return this;
          }
          const index = ArrayPrototypeIndexOf(state3.pipes, dest);
          if (index === -1) return this;
          state3.pipes.splice(index, 1);
          if (state3.pipes.length === 0) this.pause();
          dest.emit("unpipe", this, unpipeInfo);
          return this;
        };
        Readable2.prototype.on = function(ev, fn) {
          const res = Stream2.prototype.on.call(this, ev, fn);
          const state3 = this._readableState;
          if (ev === "data") {
            state3.readableListening = this.listenerCount("readable") > 0;
            if (state3.flowing !== false) this.resume();
          } else if (ev === "readable") {
            if (!state3.endEmitted && !state3.readableListening) {
              state3.readableListening = state3.needReadable = true;
              state3.flowing = false;
              state3.emittedReadable = false;
              debug("on readable", state3.length, state3.reading);
              if (state3.length) {
                emitReadable(this);
              } else if (!state3.reading) {
                process22.nextTick(nReadingNextTick, this);
              }
            }
          }
          return res;
        };
        Readable2.prototype.addListener = Readable2.prototype.on;
        Readable2.prototype.removeListener = function(ev, fn) {
          const res = Stream2.prototype.removeListener.call(this, ev, fn);
          if (ev === "readable") {
            process22.nextTick(updateReadableListening, this);
          }
          return res;
        };
        Readable2.prototype.off = Readable2.prototype.removeListener;
        Readable2.prototype.removeAllListeners = function(ev) {
          const res = Stream2.prototype.removeAllListeners.apply(this, arguments);
          if (ev === "readable" || ev === void 0) {
            process22.nextTick(updateReadableListening, this);
          }
          return res;
        };
        function updateReadableListening(self2) {
          const state3 = self2._readableState;
          state3.readableListening = self2.listenerCount("readable") > 0;
          if (state3.resumeScheduled && state3[kPaused] === false) {
            state3.flowing = true;
          } else if (self2.listenerCount("data") > 0) {
            self2.resume();
          } else if (!state3.readableListening) {
            state3.flowing = null;
          }
        }
        function nReadingNextTick(self2) {
          debug("readable nexttick read 0");
          self2.read(0);
        }
        Readable2.prototype.resume = function() {
          const state3 = this._readableState;
          if (!state3.flowing) {
            debug("resume");
            state3.flowing = !state3.readableListening;
            resume(this, state3);
          }
          state3[kPaused] = false;
          return this;
        };
        function resume(stream, state3) {
          if (!state3.resumeScheduled) {
            state3.resumeScheduled = true;
            process22.nextTick(resume_, stream, state3);
          }
        }
        function resume_(stream, state3) {
          debug("resume", state3.reading);
          if (!state3.reading) {
            stream.read(0);
          }
          state3.resumeScheduled = false;
          stream.emit("resume");
          flow(stream);
          if (state3.flowing && !state3.reading) stream.read(0);
        }
        Readable2.prototype.pause = function() {
          debug("call pause flowing=%j", this._readableState.flowing);
          if (this._readableState.flowing !== false) {
            debug("pause");
            this._readableState.flowing = false;
            this.emit("pause");
          }
          this._readableState[kPaused] = true;
          return this;
        };
        function flow(stream) {
          const state3 = stream._readableState;
          debug("flow", state3.flowing);
          while (state3.flowing && stream.read() !== null) ;
        }
        Readable2.prototype.wrap = function(stream) {
          let paused = false;
          stream.on("data", (chunk) => {
            if (!this.push(chunk) && stream.pause) {
              paused = true;
              stream.pause();
            }
          });
          stream.on("end", () => {
            this.push(null);
          });
          stream.on("error", (err) => {
            errorOrDestroy(this, err);
          });
          stream.on("close", () => {
            this.destroy();
          });
          stream.on("destroy", () => {
            this.destroy();
          });
          this._read = () => {
            if (paused && stream.resume) {
              paused = false;
              stream.resume();
            }
          };
          const streamKeys = ObjectKeys(stream);
          for (let j = 1; j < streamKeys.length; j++) {
            const i = streamKeys[j];
            if (this[i] === void 0 && typeof stream[i] === "function") {
              this[i] = stream[i].bind(stream);
            }
          }
          return this;
        };
        Readable2.prototype[SymbolAsyncIterator] = function() {
          return streamToAsyncIterator(this);
        };
        Readable2.prototype.iterator = function(options) {
          if (options !== void 0) {
            validateObject(options, "options");
          }
          return streamToAsyncIterator(this, options);
        };
        function streamToAsyncIterator(stream, options) {
          if (typeof stream.read !== "function") {
            stream = Readable2.wrap(stream, {
              objectMode: true
            });
          }
          const iter = createAsyncIterator(stream, options);
          iter.stream = stream;
          return iter;
        }
        async function* createAsyncIterator(stream, options) {
          let callback = nop;
          function next(resolve) {
            if (this === stream) {
              callback();
              callback = nop;
            } else {
              callback = resolve;
            }
          }
          stream.on("readable", next);
          let error;
          const cleanup = eos(
            stream,
            {
              writable: false
            },
            (err) => {
              error = err ? aggregateTwoErrors(error, err) : null;
              callback();
              callback = nop;
            }
          );
          try {
            while (true) {
              const chunk = stream.destroyed ? null : stream.read();
              if (chunk !== null) {
                yield chunk;
              } else if (error) {
                throw error;
              } else if (error === null) {
                return;
              } else {
                await new Promise2(next);
              }
            }
          } catch (err) {
            error = aggregateTwoErrors(error, err);
            throw error;
          } finally {
            if ((error || (options === null || options === void 0 ? void 0 : options.destroyOnReturn) !== false) && (error === void 0 || stream._readableState.autoDestroy)) {
              destroyImpl.destroyer(stream, null);
            } else {
              stream.off("readable", next);
              cleanup();
            }
          }
        }
        ObjectDefineProperties(Readable2.prototype, {
          readable: {
            __proto__: null,
            get() {
              const r = this._readableState;
              return !!r && r.readable !== false && !r.destroyed && !r.errorEmitted && !r.endEmitted;
            },
            set(val2) {
              if (this._readableState) {
                this._readableState.readable = !!val2;
              }
            }
          },
          readableDidRead: {
            __proto__: null,
            enumerable: false,
            get: function() {
              return this._readableState.dataEmitted;
            }
          },
          readableAborted: {
            __proto__: null,
            enumerable: false,
            get: function() {
              return !!(this._readableState.readable !== false && (this._readableState.destroyed || this._readableState.errored) && !this._readableState.endEmitted);
            }
          },
          readableHighWaterMark: {
            __proto__: null,
            enumerable: false,
            get: function() {
              return this._readableState.highWaterMark;
            }
          },
          readableBuffer: {
            __proto__: null,
            enumerable: false,
            get: function() {
              return this._readableState && this._readableState.buffer;
            }
          },
          readableFlowing: {
            __proto__: null,
            enumerable: false,
            get: function() {
              return this._readableState.flowing;
            },
            set: function(state3) {
              if (this._readableState) {
                this._readableState.flowing = state3;
              }
            }
          },
          readableLength: {
            __proto__: null,
            enumerable: false,
            get() {
              return this._readableState.length;
            }
          },
          readableObjectMode: {
            __proto__: null,
            enumerable: false,
            get() {
              return this._readableState ? this._readableState.objectMode : false;
            }
          },
          readableEncoding: {
            __proto__: null,
            enumerable: false,
            get() {
              return this._readableState ? this._readableState.encoding : null;
            }
          },
          errored: {
            __proto__: null,
            enumerable: false,
            get() {
              return this._readableState ? this._readableState.errored : null;
            }
          },
          closed: {
            __proto__: null,
            get() {
              return this._readableState ? this._readableState.closed : false;
            }
          },
          destroyed: {
            __proto__: null,
            enumerable: false,
            get() {
              return this._readableState ? this._readableState.destroyed : false;
            },
            set(value) {
              if (!this._readableState) {
                return;
              }
              this._readableState.destroyed = value;
            }
          },
          readableEnded: {
            __proto__: null,
            enumerable: false,
            get() {
              return this._readableState ? this._readableState.endEmitted : false;
            }
          }
        });
        ObjectDefineProperties(ReadableState.prototype, {
          // Legacy getter for `pipesCount`.
          pipesCount: {
            __proto__: null,
            get() {
              return this.pipes.length;
            }
          },
          // Legacy property for `paused`.
          paused: {
            __proto__: null,
            get() {
              return this[kPaused] !== false;
            },
            set(value) {
              this[kPaused] = !!value;
            }
          }
        });
        Readable2._fromList = fromList;
        function fromList(n, state3) {
          if (state3.length === 0) return null;
          let ret;
          if (state3.objectMode) ret = state3.buffer.shift();
          else if (!n || n >= state3.length) {
            if (state3.decoder) ret = state3.buffer.join("");
            else if (state3.buffer.length === 1) ret = state3.buffer.first();
            else ret = state3.buffer.concat(state3.length);
            state3.buffer.clear();
          } else {
            ret = state3.buffer.consume(n, state3.decoder);
          }
          return ret;
        }
        function endReadable(stream) {
          const state3 = stream._readableState;
          debug("endReadable", state3.endEmitted);
          if (!state3.endEmitted) {
            state3.ended = true;
            process22.nextTick(endReadableNT, state3, stream);
          }
        }
        function endReadableNT(state3, stream) {
          debug("endReadableNT", state3.endEmitted, state3.length);
          if (!state3.errored && !state3.closeEmitted && !state3.endEmitted && state3.length === 0) {
            state3.endEmitted = true;
            stream.emit("end");
            if (stream.writable && stream.allowHalfOpen === false) {
              process22.nextTick(endWritableNT, stream);
            } else if (state3.autoDestroy) {
              const wState = stream._writableState;
              const autoDestroy = !wState || wState.autoDestroy && // We don't expect the writable to ever 'finish'
              // if writable is explicitly set to false.
              (wState.finished || wState.writable === false);
              if (autoDestroy) {
                stream.destroy();
              }
            }
          }
        }
        function endWritableNT(stream) {
          const writable = stream.writable && !stream.writableEnded && !stream.destroyed;
          if (writable) {
            stream.end();
          }
        }
        Readable2.from = function(iterable, opts) {
          return from(Readable2, iterable, opts);
        };
        var webStreamsAdapters;
        function lazyWebStreams() {
          if (webStreamsAdapters === void 0) webStreamsAdapters = {};
          return webStreamsAdapters;
        }
        Readable2.fromWeb = function(readableStream, options) {
          return lazyWebStreams().newStreamReadableFromReadableStream(readableStream, options);
        };
        Readable2.toWeb = function(streamReadable, options) {
          return lazyWebStreams().newReadableStreamFromStreamReadable(streamReadable, options);
        };
        Readable2.wrap = function(src, options) {
          var _ref, _src$readableObjectMo;
          return new Readable2({
            objectMode: (_ref = (_src$readableObjectMo = src.readableObjectMode) !== null && _src$readableObjectMo !== void 0 ? _src$readableObjectMo : src.objectMode) !== null && _ref !== void 0 ? _ref : true,
            ...options,
            destroy(err, callback) {
              destroyImpl.destroyer(src, err);
              callback(err);
            }
          }).wrap(src);
        };
      }
    });
    require_writable = __commonJS2({
      "node_modules/readable-stream/lib/internal/streams/writable.js"(exports32, module) {
        init_dirname2();
        var process22 = (init_process(), __toCommonJS2(process_exports));
        var {
          ArrayPrototypeSlice,
          Error: Error2,
          FunctionPrototypeSymbolHasInstance,
          ObjectDefineProperty,
          ObjectDefineProperties,
          ObjectSetPrototypeOf,
          StringPrototypeToLowerCase,
          Symbol: Symbol2,
          SymbolHasInstance
        } = require_primordials();
        module.exports = Writable2;
        Writable2.WritableState = WritableState;
        var { EventEmitter: EE2 } = __require2("events");
        var Stream2 = require_legacy().Stream;
        var { Buffer: Buffer2 } = __require2("buffer");
        var destroyImpl = require_destroy();
        var { addAbortSignal } = require_add_abort_signal();
        var { getHighWaterMark, getDefaultHighWaterMark } = require_state();
        var {
          ERR_INVALID_ARG_TYPE: ERR_INVALID_ARG_TYPE2,
          ERR_METHOD_NOT_IMPLEMENTED,
          ERR_MULTIPLE_CALLBACK,
          ERR_STREAM_CANNOT_PIPE,
          ERR_STREAM_DESTROYED,
          ERR_STREAM_ALREADY_FINISHED,
          ERR_STREAM_NULL_VALUES,
          ERR_STREAM_WRITE_AFTER_END,
          ERR_UNKNOWN_ENCODING
        } = require_errors().codes;
        var { errorOrDestroy } = destroyImpl;
        ObjectSetPrototypeOf(Writable2.prototype, Stream2.prototype);
        ObjectSetPrototypeOf(Writable2, Stream2);
        function nop() {
        }
        var kOnFinished = Symbol2("kOnFinished");
        function WritableState(options, stream, isDuplex) {
          if (typeof isDuplex !== "boolean") isDuplex = stream instanceof require_duplex();
          this.objectMode = !!(options && options.objectMode);
          if (isDuplex) this.objectMode = this.objectMode || !!(options && options.writableObjectMode);
          this.highWaterMark = options ? getHighWaterMark(this, options, "writableHighWaterMark", isDuplex) : getDefaultHighWaterMark(false);
          this.finalCalled = false;
          this.needDrain = false;
          this.ending = false;
          this.ended = false;
          this.finished = false;
          this.destroyed = false;
          const noDecode = !!(options && options.decodeStrings === false);
          this.decodeStrings = !noDecode;
          this.defaultEncoding = options && options.defaultEncoding || "utf8";
          this.length = 0;
          this.writing = false;
          this.corked = 0;
          this.sync = true;
          this.bufferProcessing = false;
          this.onwrite = onwrite.bind(void 0, stream);
          this.writecb = null;
          this.writelen = 0;
          this.afterWriteTickInfo = null;
          resetBuffer(this);
          this.pendingcb = 0;
          this.constructed = true;
          this.prefinished = false;
          this.errorEmitted = false;
          this.emitClose = !options || options.emitClose !== false;
          this.autoDestroy = !options || options.autoDestroy !== false;
          this.errored = null;
          this.closed = false;
          this.closeEmitted = false;
          this[kOnFinished] = [];
        }
        function resetBuffer(state3) {
          state3.buffered = [];
          state3.bufferedIndex = 0;
          state3.allBuffers = true;
          state3.allNoop = true;
        }
        WritableState.prototype.getBuffer = function getBuffer() {
          return ArrayPrototypeSlice(this.buffered, this.bufferedIndex);
        };
        ObjectDefineProperty(WritableState.prototype, "bufferedRequestCount", {
          __proto__: null,
          get() {
            return this.buffered.length - this.bufferedIndex;
          }
        });
        function Writable2(options) {
          const isDuplex = this instanceof require_duplex();
          if (!isDuplex && !FunctionPrototypeSymbolHasInstance(Writable2, this)) return new Writable2(options);
          this._writableState = new WritableState(options, this, isDuplex);
          if (options) {
            if (typeof options.write === "function") this._write = options.write;
            if (typeof options.writev === "function") this._writev = options.writev;
            if (typeof options.destroy === "function") this._destroy = options.destroy;
            if (typeof options.final === "function") this._final = options.final;
            if (typeof options.construct === "function") this._construct = options.construct;
            if (options.signal) addAbortSignal(options.signal, this);
          }
          Stream2.call(this, options);
          destroyImpl.construct(this, () => {
            const state3 = this._writableState;
            if (!state3.writing) {
              clearBuffer(this, state3);
            }
            finishMaybe(this, state3);
          });
        }
        ObjectDefineProperty(Writable2, SymbolHasInstance, {
          __proto__: null,
          value: function(object) {
            if (FunctionPrototypeSymbolHasInstance(this, object)) return true;
            if (this !== Writable2) return false;
            return object && object._writableState instanceof WritableState;
          }
        });
        Writable2.prototype.pipe = function() {
          errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
        };
        function _write(stream, chunk, encoding, cb) {
          const state3 = stream._writableState;
          if (typeof encoding === "function") {
            cb = encoding;
            encoding = state3.defaultEncoding;
          } else {
            if (!encoding) encoding = state3.defaultEncoding;
            else if (encoding !== "buffer" && !Buffer2.isEncoding(encoding)) throw new ERR_UNKNOWN_ENCODING(encoding);
            if (typeof cb !== "function") cb = nop;
          }
          if (chunk === null) {
            throw new ERR_STREAM_NULL_VALUES();
          } else if (!state3.objectMode) {
            if (typeof chunk === "string") {
              if (state3.decodeStrings !== false) {
                chunk = Buffer2.from(chunk, encoding);
                encoding = "buffer";
              }
            } else if (chunk instanceof Buffer2) {
              encoding = "buffer";
            } else if (Stream2._isUint8Array(chunk)) {
              chunk = Stream2._uint8ArrayToBuffer(chunk);
              encoding = "buffer";
            } else {
              throw new ERR_INVALID_ARG_TYPE2("chunk", ["string", "Buffer", "Uint8Array"], chunk);
            }
          }
          let err;
          if (state3.ending) {
            err = new ERR_STREAM_WRITE_AFTER_END();
          } else if (state3.destroyed) {
            err = new ERR_STREAM_DESTROYED("write");
          }
          if (err) {
            process22.nextTick(cb, err);
            errorOrDestroy(stream, err, true);
            return err;
          }
          state3.pendingcb++;
          return writeOrBuffer(stream, state3, chunk, encoding, cb);
        }
        Writable2.prototype.write = function(chunk, encoding, cb) {
          return _write(this, chunk, encoding, cb) === true;
        };
        Writable2.prototype.cork = function() {
          this._writableState.corked++;
        };
        Writable2.prototype.uncork = function() {
          const state3 = this._writableState;
          if (state3.corked) {
            state3.corked--;
            if (!state3.writing) clearBuffer(this, state3);
          }
        };
        Writable2.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
          if (typeof encoding === "string") encoding = StringPrototypeToLowerCase(encoding);
          if (!Buffer2.isEncoding(encoding)) throw new ERR_UNKNOWN_ENCODING(encoding);
          this._writableState.defaultEncoding = encoding;
          return this;
        };
        function writeOrBuffer(stream, state3, chunk, encoding, callback) {
          const len = state3.objectMode ? 1 : chunk.length;
          state3.length += len;
          const ret = state3.length < state3.highWaterMark;
          if (!ret) state3.needDrain = true;
          if (state3.writing || state3.corked || state3.errored || !state3.constructed) {
            state3.buffered.push({
              chunk,
              encoding,
              callback
            });
            if (state3.allBuffers && encoding !== "buffer") {
              state3.allBuffers = false;
            }
            if (state3.allNoop && callback !== nop) {
              state3.allNoop = false;
            }
          } else {
            state3.writelen = len;
            state3.writecb = callback;
            state3.writing = true;
            state3.sync = true;
            stream._write(chunk, encoding, state3.onwrite);
            state3.sync = false;
          }
          return ret && !state3.errored && !state3.destroyed;
        }
        function doWrite(stream, state3, writev, len, chunk, encoding, cb) {
          state3.writelen = len;
          state3.writecb = cb;
          state3.writing = true;
          state3.sync = true;
          if (state3.destroyed) state3.onwrite(new ERR_STREAM_DESTROYED("write"));
          else if (writev) stream._writev(chunk, state3.onwrite);
          else stream._write(chunk, encoding, state3.onwrite);
          state3.sync = false;
        }
        function onwriteError(stream, state3, er, cb) {
          --state3.pendingcb;
          cb(er);
          errorBuffer(state3);
          errorOrDestroy(stream, er);
        }
        function onwrite(stream, er) {
          const state3 = stream._writableState;
          const sync = state3.sync;
          const cb = state3.writecb;
          if (typeof cb !== "function") {
            errorOrDestroy(stream, new ERR_MULTIPLE_CALLBACK());
            return;
          }
          state3.writing = false;
          state3.writecb = null;
          state3.length -= state3.writelen;
          state3.writelen = 0;
          if (er) {
            er.stack;
            if (!state3.errored) {
              state3.errored = er;
            }
            if (stream._readableState && !stream._readableState.errored) {
              stream._readableState.errored = er;
            }
            if (sync) {
              process22.nextTick(onwriteError, stream, state3, er, cb);
            } else {
              onwriteError(stream, state3, er, cb);
            }
          } else {
            if (state3.buffered.length > state3.bufferedIndex) {
              clearBuffer(stream, state3);
            }
            if (sync) {
              if (state3.afterWriteTickInfo !== null && state3.afterWriteTickInfo.cb === cb) {
                state3.afterWriteTickInfo.count++;
              } else {
                state3.afterWriteTickInfo = {
                  count: 1,
                  cb,
                  stream,
                  state: state3
                };
                process22.nextTick(afterWriteTick, state3.afterWriteTickInfo);
              }
            } else {
              afterWrite(stream, state3, 1, cb);
            }
          }
        }
        function afterWriteTick({ stream, state: state3, count, cb }) {
          state3.afterWriteTickInfo = null;
          return afterWrite(stream, state3, count, cb);
        }
        function afterWrite(stream, state3, count, cb) {
          const needDrain = !state3.ending && !stream.destroyed && state3.length === 0 && state3.needDrain;
          if (needDrain) {
            state3.needDrain = false;
            stream.emit("drain");
          }
          while (count-- > 0) {
            state3.pendingcb--;
            cb();
          }
          if (state3.destroyed) {
            errorBuffer(state3);
          }
          finishMaybe(stream, state3);
        }
        function errorBuffer(state3) {
          if (state3.writing) {
            return;
          }
          for (let n = state3.bufferedIndex; n < state3.buffered.length; ++n) {
            var _state$errored;
            const { chunk, callback } = state3.buffered[n];
            const len = state3.objectMode ? 1 : chunk.length;
            state3.length -= len;
            callback(
              (_state$errored = state3.errored) !== null && _state$errored !== void 0 ? _state$errored : new ERR_STREAM_DESTROYED("write")
            );
          }
          const onfinishCallbacks = state3[kOnFinished].splice(0);
          for (let i = 0; i < onfinishCallbacks.length; i++) {
            var _state$errored2;
            onfinishCallbacks[i](
              (_state$errored2 = state3.errored) !== null && _state$errored2 !== void 0 ? _state$errored2 : new ERR_STREAM_DESTROYED("end")
            );
          }
          resetBuffer(state3);
        }
        function clearBuffer(stream, state3) {
          if (state3.corked || state3.bufferProcessing || state3.destroyed || !state3.constructed) {
            return;
          }
          const { buffered, bufferedIndex, objectMode } = state3;
          const bufferedLength = buffered.length - bufferedIndex;
          if (!bufferedLength) {
            return;
          }
          let i = bufferedIndex;
          state3.bufferProcessing = true;
          if (bufferedLength > 1 && stream._writev) {
            state3.pendingcb -= bufferedLength - 1;
            const callback = state3.allNoop ? nop : (err) => {
              for (let n = i; n < buffered.length; ++n) {
                buffered[n].callback(err);
              }
            };
            const chunks = state3.allNoop && i === 0 ? buffered : ArrayPrototypeSlice(buffered, i);
            chunks.allBuffers = state3.allBuffers;
            doWrite(stream, state3, true, state3.length, chunks, "", callback);
            resetBuffer(state3);
          } else {
            do {
              const { chunk, encoding, callback } = buffered[i];
              buffered[i++] = null;
              const len = objectMode ? 1 : chunk.length;
              doWrite(stream, state3, false, len, chunk, encoding, callback);
            } while (i < buffered.length && !state3.writing);
            if (i === buffered.length) {
              resetBuffer(state3);
            } else if (i > 256) {
              buffered.splice(0, i);
              state3.bufferedIndex = 0;
            } else {
              state3.bufferedIndex = i;
            }
          }
          state3.bufferProcessing = false;
        }
        Writable2.prototype._write = function(chunk, encoding, cb) {
          if (this._writev) {
            this._writev(
              [
                {
                  chunk,
                  encoding
                }
              ],
              cb
            );
          } else {
            throw new ERR_METHOD_NOT_IMPLEMENTED("_write()");
          }
        };
        Writable2.prototype._writev = null;
        Writable2.prototype.end = function(chunk, encoding, cb) {
          const state3 = this._writableState;
          if (typeof chunk === "function") {
            cb = chunk;
            chunk = null;
            encoding = null;
          } else if (typeof encoding === "function") {
            cb = encoding;
            encoding = null;
          }
          let err;
          if (chunk !== null && chunk !== void 0) {
            const ret = _write(this, chunk, encoding);
            if (ret instanceof Error2) {
              err = ret;
            }
          }
          if (state3.corked) {
            state3.corked = 1;
            this.uncork();
          }
          if (err) {
          } else if (!state3.errored && !state3.ending) {
            state3.ending = true;
            finishMaybe(this, state3, true);
            state3.ended = true;
          } else if (state3.finished) {
            err = new ERR_STREAM_ALREADY_FINISHED("end");
          } else if (state3.destroyed) {
            err = new ERR_STREAM_DESTROYED("end");
          }
          if (typeof cb === "function") {
            if (err || state3.finished) {
              process22.nextTick(cb, err);
            } else {
              state3[kOnFinished].push(cb);
            }
          }
          return this;
        };
        function needFinish(state3) {
          return state3.ending && !state3.destroyed && state3.constructed && state3.length === 0 && !state3.errored && state3.buffered.length === 0 && !state3.finished && !state3.writing && !state3.errorEmitted && !state3.closeEmitted;
        }
        function callFinal(stream, state3) {
          let called = false;
          function onFinish(err) {
            if (called) {
              errorOrDestroy(stream, err !== null && err !== void 0 ? err : ERR_MULTIPLE_CALLBACK());
              return;
            }
            called = true;
            state3.pendingcb--;
            if (err) {
              const onfinishCallbacks = state3[kOnFinished].splice(0);
              for (let i = 0; i < onfinishCallbacks.length; i++) {
                onfinishCallbacks[i](err);
              }
              errorOrDestroy(stream, err, state3.sync);
            } else if (needFinish(state3)) {
              state3.prefinished = true;
              stream.emit("prefinish");
              state3.pendingcb++;
              process22.nextTick(finish, stream, state3);
            }
          }
          state3.sync = true;
          state3.pendingcb++;
          try {
            stream._final(onFinish);
          } catch (err) {
            onFinish(err);
          }
          state3.sync = false;
        }
        function prefinish(stream, state3) {
          if (!state3.prefinished && !state3.finalCalled) {
            if (typeof stream._final === "function" && !state3.destroyed) {
              state3.finalCalled = true;
              callFinal(stream, state3);
            } else {
              state3.prefinished = true;
              stream.emit("prefinish");
            }
          }
        }
        function finishMaybe(stream, state3, sync) {
          if (needFinish(state3)) {
            prefinish(stream, state3);
            if (state3.pendingcb === 0) {
              if (sync) {
                state3.pendingcb++;
                process22.nextTick(
                  (stream2, state22) => {
                    if (needFinish(state22)) {
                      finish(stream2, state22);
                    } else {
                      state22.pendingcb--;
                    }
                  },
                  stream,
                  state3
                );
              } else if (needFinish(state3)) {
                state3.pendingcb++;
                finish(stream, state3);
              }
            }
          }
        }
        function finish(stream, state3) {
          state3.pendingcb--;
          state3.finished = true;
          const onfinishCallbacks = state3[kOnFinished].splice(0);
          for (let i = 0; i < onfinishCallbacks.length; i++) {
            onfinishCallbacks[i]();
          }
          stream.emit("finish");
          if (state3.autoDestroy) {
            const rState = stream._readableState;
            const autoDestroy = !rState || rState.autoDestroy && // We don't expect the readable to ever 'end'
            // if readable is explicitly set to false.
            (rState.endEmitted || rState.readable === false);
            if (autoDestroy) {
              stream.destroy();
            }
          }
        }
        ObjectDefineProperties(Writable2.prototype, {
          closed: {
            __proto__: null,
            get() {
              return this._writableState ? this._writableState.closed : false;
            }
          },
          destroyed: {
            __proto__: null,
            get() {
              return this._writableState ? this._writableState.destroyed : false;
            },
            set(value) {
              if (this._writableState) {
                this._writableState.destroyed = value;
              }
            }
          },
          writable: {
            __proto__: null,
            get() {
              const w = this._writableState;
              return !!w && w.writable !== false && !w.destroyed && !w.errored && !w.ending && !w.ended;
            },
            set(val2) {
              if (this._writableState) {
                this._writableState.writable = !!val2;
              }
            }
          },
          writableFinished: {
            __proto__: null,
            get() {
              return this._writableState ? this._writableState.finished : false;
            }
          },
          writableObjectMode: {
            __proto__: null,
            get() {
              return this._writableState ? this._writableState.objectMode : false;
            }
          },
          writableBuffer: {
            __proto__: null,
            get() {
              return this._writableState && this._writableState.getBuffer();
            }
          },
          writableEnded: {
            __proto__: null,
            get() {
              return this._writableState ? this._writableState.ending : false;
            }
          },
          writableNeedDrain: {
            __proto__: null,
            get() {
              const wState = this._writableState;
              if (!wState) return false;
              return !wState.destroyed && !wState.ending && wState.needDrain;
            }
          },
          writableHighWaterMark: {
            __proto__: null,
            get() {
              return this._writableState && this._writableState.highWaterMark;
            }
          },
          writableCorked: {
            __proto__: null,
            get() {
              return this._writableState ? this._writableState.corked : 0;
            }
          },
          writableLength: {
            __proto__: null,
            get() {
              return this._writableState && this._writableState.length;
            }
          },
          errored: {
            __proto__: null,
            enumerable: false,
            get() {
              return this._writableState ? this._writableState.errored : null;
            }
          },
          writableAborted: {
            __proto__: null,
            enumerable: false,
            get: function() {
              return !!(this._writableState.writable !== false && (this._writableState.destroyed || this._writableState.errored) && !this._writableState.finished);
            }
          }
        });
        var destroy = destroyImpl.destroy;
        Writable2.prototype.destroy = function(err, cb) {
          const state3 = this._writableState;
          if (!state3.destroyed && (state3.bufferedIndex < state3.buffered.length || state3[kOnFinished].length)) {
            process22.nextTick(errorBuffer, state3);
          }
          destroy.call(this, err, cb);
          return this;
        };
        Writable2.prototype._undestroy = destroyImpl.undestroy;
        Writable2.prototype._destroy = function(err, cb) {
          cb(err);
        };
        Writable2.prototype[EE2.captureRejectionSymbol] = function(err) {
          this.destroy(err);
        };
        var webStreamsAdapters;
        function lazyWebStreams() {
          if (webStreamsAdapters === void 0) webStreamsAdapters = {};
          return webStreamsAdapters;
        }
        Writable2.fromWeb = function(writableStream, options) {
          return lazyWebStreams().newStreamWritableFromWritableStream(writableStream, options);
        };
        Writable2.toWeb = function(streamWritable) {
          return lazyWebStreams().newWritableStreamFromStreamWritable(streamWritable);
        };
      }
    });
    require_duplexify = __commonJS2({
      "node_modules/readable-stream/lib/internal/streams/duplexify.js"(exports32, module) {
        init_dirname2();
        var process22 = (init_process(), __toCommonJS2(process_exports));
        var bufferModule = __require2("buffer");
        var {
          isReadable,
          isWritable,
          isIterable,
          isNodeStream,
          isReadableNodeStream,
          isWritableNodeStream,
          isDuplexNodeStream,
          isReadableStream: isReadableStream2,
          isWritableStream
        } = require_utils();
        var eos = require_end_of_stream();
        var {
          AbortError,
          codes: { ERR_INVALID_ARG_TYPE: ERR_INVALID_ARG_TYPE2, ERR_INVALID_RETURN_VALUE }
        } = require_errors();
        var { destroyer } = require_destroy();
        var Duplex2 = require_duplex();
        var Readable2 = require_readable();
        var Writable2 = require_writable();
        var { createDeferredPromise } = require_util();
        var from = require_from();
        var Blob2 = globalThis.Blob || bufferModule.Blob;
        var isBlob2 = typeof Blob2 !== "undefined" ? function isBlob22(b) {
          return b instanceof Blob2;
        } : function isBlob22(b) {
          return false;
        };
        var AbortController2 = globalThis.AbortController || require_abort_controller().AbortController;
        var { FunctionPrototypeCall } = require_primordials();
        var Duplexify = class extends Duplex2 {
          constructor(options) {
            super(options);
            if ((options === null || options === void 0 ? void 0 : options.readable) === false) {
              this._readableState.readable = false;
              this._readableState.ended = true;
              this._readableState.endEmitted = true;
            }
            if ((options === null || options === void 0 ? void 0 : options.writable) === false) {
              this._writableState.writable = false;
              this._writableState.ending = true;
              this._writableState.ended = true;
              this._writableState.finished = true;
            }
          }
        };
        module.exports = function duplexify(body, name) {
          if (isDuplexNodeStream(body)) {
            return body;
          }
          if (isReadableNodeStream(body)) {
            return _duplexify({
              readable: body
            });
          }
          if (isWritableNodeStream(body)) {
            return _duplexify({
              writable: body
            });
          }
          if (isNodeStream(body)) {
            return _duplexify({
              writable: false,
              readable: false
            });
          }
          if (isReadableStream2(body)) {
            return _duplexify({
              readable: Readable2.fromWeb(body)
            });
          }
          if (isWritableStream(body)) {
            return _duplexify({
              writable: Writable2.fromWeb(body)
            });
          }
          if (typeof body === "function") {
            const { value, write, final, destroy } = fromAsyncGen(body);
            if (isIterable(value)) {
              return from(Duplexify, value, {
                // TODO (ronag): highWaterMark?
                objectMode: true,
                write,
                final,
                destroy
              });
            }
            const then2 = value === null || value === void 0 ? void 0 : value.then;
            if (typeof then2 === "function") {
              let d;
              const promise = FunctionPrototypeCall(
                then2,
                value,
                (val2) => {
                  if (val2 != null) {
                    throw new ERR_INVALID_RETURN_VALUE("nully", "body", val2);
                  }
                },
                (err) => {
                  destroyer(d, err);
                }
              );
              return d = new Duplexify({
                // TODO (ronag): highWaterMark?
                objectMode: true,
                readable: false,
                write,
                final(cb) {
                  final(async () => {
                    try {
                      await promise;
                      process22.nextTick(cb, null);
                    } catch (err) {
                      process22.nextTick(cb, err);
                    }
                  });
                },
                destroy
              });
            }
            throw new ERR_INVALID_RETURN_VALUE("Iterable, AsyncIterable or AsyncFunction", name, value);
          }
          if (isBlob2(body)) {
            return duplexify(body.arrayBuffer());
          }
          if (isIterable(body)) {
            return from(Duplexify, body, {
              // TODO (ronag): highWaterMark?
              objectMode: true,
              writable: false
            });
          }
          if (isReadableStream2(body === null || body === void 0 ? void 0 : body.readable) && isWritableStream(body === null || body === void 0 ? void 0 : body.writable)) {
            return Duplexify.fromWeb(body);
          }
          if (typeof (body === null || body === void 0 ? void 0 : body.writable) === "object" || typeof (body === null || body === void 0 ? void 0 : body.readable) === "object") {
            const readable = body !== null && body !== void 0 && body.readable ? isReadableNodeStream(body === null || body === void 0 ? void 0 : body.readable) ? body === null || body === void 0 ? void 0 : body.readable : duplexify(body.readable) : void 0;
            const writable = body !== null && body !== void 0 && body.writable ? isWritableNodeStream(body === null || body === void 0 ? void 0 : body.writable) ? body === null || body === void 0 ? void 0 : body.writable : duplexify(body.writable) : void 0;
            return _duplexify({
              readable,
              writable
            });
          }
          const then = body === null || body === void 0 ? void 0 : body.then;
          if (typeof then === "function") {
            let d;
            FunctionPrototypeCall(
              then,
              body,
              (val2) => {
                if (val2 != null) {
                  d.push(val2);
                }
                d.push(null);
              },
              (err) => {
                destroyer(d, err);
              }
            );
            return d = new Duplexify({
              objectMode: true,
              writable: false,
              read() {
              }
            });
          }
          throw new ERR_INVALID_ARG_TYPE2(
            name,
            [
              "Blob",
              "ReadableStream",
              "WritableStream",
              "Stream",
              "Iterable",
              "AsyncIterable",
              "Function",
              "{ readable, writable } pair",
              "Promise"
            ],
            body
          );
        };
        function fromAsyncGen(fn) {
          let { promise, resolve } = createDeferredPromise();
          const ac = new AbortController2();
          const signal = ac.signal;
          const value = fn(
            async function* () {
              while (true) {
                const _promise = promise;
                promise = null;
                const { chunk, done, cb } = await _promise;
                process22.nextTick(cb);
                if (done) return;
                if (signal.aborted)
                  throw new AbortError(void 0, {
                    cause: signal.reason
                  });
                ({ promise, resolve } = createDeferredPromise());
                yield chunk;
              }
            }(),
            {
              signal
            }
          );
          return {
            value,
            write(chunk, encoding, cb) {
              const _resolve = resolve;
              resolve = null;
              _resolve({
                chunk,
                done: false,
                cb
              });
            },
            final(cb) {
              const _resolve = resolve;
              resolve = null;
              _resolve({
                done: true,
                cb
              });
            },
            destroy(err, cb) {
              ac.abort();
              cb(err);
            }
          };
        }
        function _duplexify(pair) {
          const r = pair.readable && typeof pair.readable.read !== "function" ? Readable2.wrap(pair.readable) : pair.readable;
          const w = pair.writable;
          let readable = !!isReadable(r);
          let writable = !!isWritable(w);
          let ondrain;
          let onfinish;
          let onreadable;
          let onclose;
          let d;
          function onfinished(err) {
            const cb = onclose;
            onclose = null;
            if (cb) {
              cb(err);
            } else if (err) {
              d.destroy(err);
            }
          }
          d = new Duplexify({
            // TODO (ronag): highWaterMark?
            readableObjectMode: !!(r !== null && r !== void 0 && r.readableObjectMode),
            writableObjectMode: !!(w !== null && w !== void 0 && w.writableObjectMode),
            readable,
            writable
          });
          if (writable) {
            eos(w, (err) => {
              writable = false;
              if (err) {
                destroyer(r, err);
              }
              onfinished(err);
            });
            d._write = function(chunk, encoding, callback) {
              if (w.write(chunk, encoding)) {
                callback();
              } else {
                ondrain = callback;
              }
            };
            d._final = function(callback) {
              w.end();
              onfinish = callback;
            };
            w.on("drain", function() {
              if (ondrain) {
                const cb = ondrain;
                ondrain = null;
                cb();
              }
            });
            w.on("finish", function() {
              if (onfinish) {
                const cb = onfinish;
                onfinish = null;
                cb();
              }
            });
          }
          if (readable) {
            eos(r, (err) => {
              readable = false;
              if (err) {
                destroyer(r, err);
              }
              onfinished(err);
            });
            r.on("readable", function() {
              if (onreadable) {
                const cb = onreadable;
                onreadable = null;
                cb();
              }
            });
            r.on("end", function() {
              d.push(null);
            });
            d._read = function() {
              while (true) {
                const buf = r.read();
                if (buf === null) {
                  onreadable = d._read;
                  return;
                }
                if (!d.push(buf)) {
                  return;
                }
              }
            };
          }
          d._destroy = function(err, callback) {
            if (!err && onclose !== null) {
              err = new AbortError();
            }
            onreadable = null;
            ondrain = null;
            onfinish = null;
            if (onclose === null) {
              callback(err);
            } else {
              onclose = callback;
              destroyer(w, err);
              destroyer(r, err);
            }
          };
          return d;
        }
      }
    });
    require_duplex = __commonJS2({
      "node_modules/readable-stream/lib/internal/streams/duplex.js"(exports32, module) {
        "use strict";
        init_dirname2();
        var {
          ObjectDefineProperties,
          ObjectGetOwnPropertyDescriptor,
          ObjectKeys,
          ObjectSetPrototypeOf
        } = require_primordials();
        module.exports = Duplex2;
        var Readable2 = require_readable();
        var Writable2 = require_writable();
        ObjectSetPrototypeOf(Duplex2.prototype, Readable2.prototype);
        ObjectSetPrototypeOf(Duplex2, Readable2);
        {
          const keys = ObjectKeys(Writable2.prototype);
          for (let i = 0; i < keys.length; i++) {
            const method = keys[i];
            if (!Duplex2.prototype[method]) Duplex2.prototype[method] = Writable2.prototype[method];
          }
        }
        function Duplex2(options) {
          if (!(this instanceof Duplex2)) return new Duplex2(options);
          Readable2.call(this, options);
          Writable2.call(this, options);
          if (options) {
            this.allowHalfOpen = options.allowHalfOpen !== false;
            if (options.readable === false) {
              this._readableState.readable = false;
              this._readableState.ended = true;
              this._readableState.endEmitted = true;
            }
            if (options.writable === false) {
              this._writableState.writable = false;
              this._writableState.ending = true;
              this._writableState.ended = true;
              this._writableState.finished = true;
            }
          } else {
            this.allowHalfOpen = true;
          }
        }
        ObjectDefineProperties(Duplex2.prototype, {
          writable: {
            __proto__: null,
            ...ObjectGetOwnPropertyDescriptor(Writable2.prototype, "writable")
          },
          writableHighWaterMark: {
            __proto__: null,
            ...ObjectGetOwnPropertyDescriptor(Writable2.prototype, "writableHighWaterMark")
          },
          writableObjectMode: {
            __proto__: null,
            ...ObjectGetOwnPropertyDescriptor(Writable2.prototype, "writableObjectMode")
          },
          writableBuffer: {
            __proto__: null,
            ...ObjectGetOwnPropertyDescriptor(Writable2.prototype, "writableBuffer")
          },
          writableLength: {
            __proto__: null,
            ...ObjectGetOwnPropertyDescriptor(Writable2.prototype, "writableLength")
          },
          writableFinished: {
            __proto__: null,
            ...ObjectGetOwnPropertyDescriptor(Writable2.prototype, "writableFinished")
          },
          writableCorked: {
            __proto__: null,
            ...ObjectGetOwnPropertyDescriptor(Writable2.prototype, "writableCorked")
          },
          writableEnded: {
            __proto__: null,
            ...ObjectGetOwnPropertyDescriptor(Writable2.prototype, "writableEnded")
          },
          writableNeedDrain: {
            __proto__: null,
            ...ObjectGetOwnPropertyDescriptor(Writable2.prototype, "writableNeedDrain")
          },
          destroyed: {
            __proto__: null,
            get() {
              if (this._readableState === void 0 || this._writableState === void 0) {
                return false;
              }
              return this._readableState.destroyed && this._writableState.destroyed;
            },
            set(value) {
              if (this._readableState && this._writableState) {
                this._readableState.destroyed = value;
                this._writableState.destroyed = value;
              }
            }
          }
        });
        var webStreamsAdapters;
        function lazyWebStreams() {
          if (webStreamsAdapters === void 0) webStreamsAdapters = {};
          return webStreamsAdapters;
        }
        Duplex2.fromWeb = function(pair, options) {
          return lazyWebStreams().newStreamDuplexFromReadableWritablePair(pair, options);
        };
        Duplex2.toWeb = function(duplex) {
          return lazyWebStreams().newReadableWritablePairFromDuplex(duplex);
        };
        var duplexify;
        Duplex2.from = function(body) {
          if (!duplexify) {
            duplexify = require_duplexify();
          }
          return duplexify(body, "body");
        };
      }
    });
    require_transform = __commonJS2({
      "node_modules/readable-stream/lib/internal/streams/transform.js"(exports32, module) {
        "use strict";
        init_dirname2();
        var { ObjectSetPrototypeOf, Symbol: Symbol2 } = require_primordials();
        module.exports = Transform2;
        var { ERR_METHOD_NOT_IMPLEMENTED } = require_errors().codes;
        var Duplex2 = require_duplex();
        var { getHighWaterMark } = require_state();
        ObjectSetPrototypeOf(Transform2.prototype, Duplex2.prototype);
        ObjectSetPrototypeOf(Transform2, Duplex2);
        var kCallback = Symbol2("kCallback");
        function Transform2(options) {
          if (!(this instanceof Transform2)) return new Transform2(options);
          const readableHighWaterMark = options ? getHighWaterMark(this, options, "readableHighWaterMark", true) : null;
          if (readableHighWaterMark === 0) {
            options = {
              ...options,
              highWaterMark: null,
              readableHighWaterMark,
              // TODO (ronag): 0 is not optimal since we have
              // a "bug" where we check needDrain before calling _write and not after.
              // Refs: https://github.com/nodejs/node/pull/32887
              // Refs: https://github.com/nodejs/node/pull/35941
              writableHighWaterMark: options.writableHighWaterMark || 0
            };
          }
          Duplex2.call(this, options);
          this._readableState.sync = false;
          this[kCallback] = null;
          if (options) {
            if (typeof options.transform === "function") this._transform = options.transform;
            if (typeof options.flush === "function") this._flush = options.flush;
          }
          this.on("prefinish", prefinish);
        }
        function final(cb) {
          if (typeof this._flush === "function" && !this.destroyed) {
            this._flush((er, data) => {
              if (er) {
                if (cb) {
                  cb(er);
                } else {
                  this.destroy(er);
                }
                return;
              }
              if (data != null) {
                this.push(data);
              }
              this.push(null);
              if (cb) {
                cb();
              }
            });
          } else {
            this.push(null);
            if (cb) {
              cb();
            }
          }
        }
        function prefinish() {
          if (this._final !== final) {
            final.call(this);
          }
        }
        Transform2.prototype._final = final;
        Transform2.prototype._transform = function(chunk, encoding, callback) {
          throw new ERR_METHOD_NOT_IMPLEMENTED("_transform()");
        };
        Transform2.prototype._write = function(chunk, encoding, callback) {
          const rState = this._readableState;
          const wState = this._writableState;
          const length = rState.length;
          this._transform(chunk, encoding, (err, val2) => {
            if (err) {
              callback(err);
              return;
            }
            if (val2 != null) {
              this.push(val2);
            }
            if (wState.ended || // Backwards compat.
            length === rState.length || // Backwards compat.
            rState.length < rState.highWaterMark) {
              callback();
            } else {
              this[kCallback] = callback;
            }
          });
        };
        Transform2.prototype._read = function() {
          if (this[kCallback]) {
            const callback = this[kCallback];
            this[kCallback] = null;
            callback();
          }
        };
      }
    });
    require_passthrough = __commonJS2({
      "node_modules/readable-stream/lib/internal/streams/passthrough.js"(exports32, module) {
        "use strict";
        init_dirname2();
        var { ObjectSetPrototypeOf } = require_primordials();
        module.exports = PassThrough2;
        var Transform2 = require_transform();
        ObjectSetPrototypeOf(PassThrough2.prototype, Transform2.prototype);
        ObjectSetPrototypeOf(PassThrough2, Transform2);
        function PassThrough2(options) {
          if (!(this instanceof PassThrough2)) return new PassThrough2(options);
          Transform2.call(this, options);
        }
        PassThrough2.prototype._transform = function(chunk, encoding, cb) {
          cb(null, chunk);
        };
      }
    });
    require_pipeline = __commonJS2({
      "node_modules/readable-stream/lib/internal/streams/pipeline.js"(exports32, module) {
        init_dirname2();
        var process22 = (init_process(), __toCommonJS2(process_exports));
        var { ArrayIsArray, Promise: Promise2, SymbolAsyncIterator, SymbolDispose } = require_primordials();
        var eos = require_end_of_stream();
        var { once: once2 } = require_util();
        var destroyImpl = require_destroy();
        var Duplex2 = require_duplex();
        var {
          aggregateTwoErrors,
          codes: {
            ERR_INVALID_ARG_TYPE: ERR_INVALID_ARG_TYPE2,
            ERR_INVALID_RETURN_VALUE,
            ERR_MISSING_ARGS,
            ERR_STREAM_DESTROYED,
            ERR_STREAM_PREMATURE_CLOSE
          },
          AbortError
        } = require_errors();
        var { validateFunction, validateAbortSignal } = require_validators();
        var {
          isIterable,
          isReadable,
          isReadableNodeStream,
          isNodeStream,
          isTransformStream,
          isWebStream,
          isReadableStream: isReadableStream2,
          isReadableFinished
        } = require_utils();
        var AbortController2 = globalThis.AbortController || require_abort_controller().AbortController;
        var PassThrough2;
        var Readable2;
        var addAbortListener;
        function destroyer(stream, reading, writing) {
          let finished2 = false;
          stream.on("close", () => {
            finished2 = true;
          });
          const cleanup = eos(
            stream,
            {
              readable: reading,
              writable: writing
            },
            (err) => {
              finished2 = !err;
            }
          );
          return {
            destroy: (err) => {
              if (finished2) return;
              finished2 = true;
              destroyImpl.destroyer(stream, err || new ERR_STREAM_DESTROYED("pipe"));
            },
            cleanup
          };
        }
        function popCallback(streams) {
          validateFunction(streams[streams.length - 1], "streams[stream.length - 1]");
          return streams.pop();
        }
        function makeAsyncIterable(val2) {
          if (isIterable(val2)) {
            return val2;
          } else if (isReadableNodeStream(val2)) {
            return fromReadable(val2);
          }
          throw new ERR_INVALID_ARG_TYPE2("val", ["Readable", "Iterable", "AsyncIterable"], val2);
        }
        async function* fromReadable(val2) {
          if (!Readable2) {
            Readable2 = require_readable();
          }
          yield* Readable2.prototype[SymbolAsyncIterator].call(val2);
        }
        async function pumpToNode(iterable, writable, finish, { end }) {
          let error;
          let onresolve = null;
          const resume = (err) => {
            if (err) {
              error = err;
            }
            if (onresolve) {
              const callback = onresolve;
              onresolve = null;
              callback();
            }
          };
          const wait = () => new Promise2((resolve, reject) => {
            if (error) {
              reject(error);
            } else {
              onresolve = () => {
                if (error) {
                  reject(error);
                } else {
                  resolve();
                }
              };
            }
          });
          writable.on("drain", resume);
          const cleanup = eos(
            writable,
            {
              readable: false
            },
            resume
          );
          try {
            if (writable.writableNeedDrain) {
              await wait();
            }
            for await (const chunk of iterable) {
              if (!writable.write(chunk)) {
                await wait();
              }
            }
            if (end) {
              writable.end();
              await wait();
            }
            finish();
          } catch (err) {
            finish(error !== err ? aggregateTwoErrors(error, err) : err);
          } finally {
            cleanup();
            writable.off("drain", resume);
          }
        }
        async function pumpToWeb(readable, writable, finish, { end }) {
          if (isTransformStream(writable)) {
            writable = writable.writable;
          }
          const writer = writable.getWriter();
          try {
            for await (const chunk of readable) {
              await writer.ready;
              writer.write(chunk).catch(() => {
              });
            }
            await writer.ready;
            if (end) {
              await writer.close();
            }
            finish();
          } catch (err) {
            try {
              await writer.abort(err);
              finish(err);
            } catch (err2) {
              finish(err2);
            }
          }
        }
        function pipeline2(...streams) {
          return pipelineImpl(streams, once2(popCallback(streams)));
        }
        function pipelineImpl(streams, callback, opts) {
          if (streams.length === 1 && ArrayIsArray(streams[0])) {
            streams = streams[0];
          }
          if (streams.length < 2) {
            throw new ERR_MISSING_ARGS("streams");
          }
          const ac = new AbortController2();
          const signal = ac.signal;
          const outerSignal = opts === null || opts === void 0 ? void 0 : opts.signal;
          const lastStreamCleanup = [];
          validateAbortSignal(outerSignal, "options.signal");
          function abort2() {
            finishImpl(new AbortError());
          }
          addAbortListener = addAbortListener || require_util().addAbortListener;
          let disposable;
          if (outerSignal) {
            disposable = addAbortListener(outerSignal, abort2);
          }
          let error;
          let value;
          const destroys = [];
          let finishCount = 0;
          function finish(err) {
            finishImpl(err, --finishCount === 0);
          }
          function finishImpl(err, final) {
            var _disposable;
            if (err && (!error || error.code === "ERR_STREAM_PREMATURE_CLOSE")) {
              error = err;
            }
            if (!error && !final) {
              return;
            }
            while (destroys.length) {
              destroys.shift()(error);
            }
            ;
            (_disposable = disposable) === null || _disposable === void 0 ? void 0 : _disposable[SymbolDispose]();
            ac.abort();
            if (final) {
              if (!error) {
                lastStreamCleanup.forEach((fn) => fn());
              }
              process22.nextTick(callback, error, value);
            }
          }
          let ret;
          for (let i = 0; i < streams.length; i++) {
            const stream = streams[i];
            const reading = i < streams.length - 1;
            const writing = i > 0;
            const end = reading || (opts === null || opts === void 0 ? void 0 : opts.end) !== false;
            const isLastStream = i === streams.length - 1;
            if (isNodeStream(stream)) {
              let onError2 = function(err) {
                if (err && err.name !== "AbortError" && err.code !== "ERR_STREAM_PREMATURE_CLOSE") {
                  finish(err);
                }
              };
              var onError = onError2;
              if (end) {
                const { destroy, cleanup } = destroyer(stream, reading, writing);
                destroys.push(destroy);
                if (isReadable(stream) && isLastStream) {
                  lastStreamCleanup.push(cleanup);
                }
              }
              stream.on("error", onError2);
              if (isReadable(stream) && isLastStream) {
                lastStreamCleanup.push(() => {
                  stream.removeListener("error", onError2);
                });
              }
            }
            if (i === 0) {
              if (typeof stream === "function") {
                ret = stream({
                  signal
                });
                if (!isIterable(ret)) {
                  throw new ERR_INVALID_RETURN_VALUE("Iterable, AsyncIterable or Stream", "source", ret);
                }
              } else if (isIterable(stream) || isReadableNodeStream(stream) || isTransformStream(stream)) {
                ret = stream;
              } else {
                ret = Duplex2.from(stream);
              }
            } else if (typeof stream === "function") {
              if (isTransformStream(ret)) {
                var _ret;
                ret = makeAsyncIterable((_ret = ret) === null || _ret === void 0 ? void 0 : _ret.readable);
              } else {
                ret = makeAsyncIterable(ret);
              }
              ret = stream(ret, {
                signal
              });
              if (reading) {
                if (!isIterable(ret, true)) {
                  throw new ERR_INVALID_RETURN_VALUE("AsyncIterable", `transform[${i - 1}]`, ret);
                }
              } else {
                var _ret2;
                if (!PassThrough2) {
                  PassThrough2 = require_passthrough();
                }
                const pt = new PassThrough2({
                  objectMode: true
                });
                const then = (_ret2 = ret) === null || _ret2 === void 0 ? void 0 : _ret2.then;
                if (typeof then === "function") {
                  finishCount++;
                  then.call(
                    ret,
                    (val2) => {
                      value = val2;
                      if (val2 != null) {
                        pt.write(val2);
                      }
                      if (end) {
                        pt.end();
                      }
                      process22.nextTick(finish);
                    },
                    (err) => {
                      pt.destroy(err);
                      process22.nextTick(finish, err);
                    }
                  );
                } else if (isIterable(ret, true)) {
                  finishCount++;
                  pumpToNode(ret, pt, finish, {
                    end
                  });
                } else if (isReadableStream2(ret) || isTransformStream(ret)) {
                  const toRead = ret.readable || ret;
                  finishCount++;
                  pumpToNode(toRead, pt, finish, {
                    end
                  });
                } else {
                  throw new ERR_INVALID_RETURN_VALUE("AsyncIterable or Promise", "destination", ret);
                }
                ret = pt;
                const { destroy, cleanup } = destroyer(ret, false, true);
                destroys.push(destroy);
                if (isLastStream) {
                  lastStreamCleanup.push(cleanup);
                }
              }
            } else if (isNodeStream(stream)) {
              if (isReadableNodeStream(ret)) {
                finishCount += 2;
                const cleanup = pipe(ret, stream, finish, {
                  end
                });
                if (isReadable(stream) && isLastStream) {
                  lastStreamCleanup.push(cleanup);
                }
              } else if (isTransformStream(ret) || isReadableStream2(ret)) {
                const toRead = ret.readable || ret;
                finishCount++;
                pumpToNode(toRead, stream, finish, {
                  end
                });
              } else if (isIterable(ret)) {
                finishCount++;
                pumpToNode(ret, stream, finish, {
                  end
                });
              } else {
                throw new ERR_INVALID_ARG_TYPE2(
                  "val",
                  ["Readable", "Iterable", "AsyncIterable", "ReadableStream", "TransformStream"],
                  ret
                );
              }
              ret = stream;
            } else if (isWebStream(stream)) {
              if (isReadableNodeStream(ret)) {
                finishCount++;
                pumpToWeb(makeAsyncIterable(ret), stream, finish, {
                  end
                });
              } else if (isReadableStream2(ret) || isIterable(ret)) {
                finishCount++;
                pumpToWeb(ret, stream, finish, {
                  end
                });
              } else if (isTransformStream(ret)) {
                finishCount++;
                pumpToWeb(ret.readable, stream, finish, {
                  end
                });
              } else {
                throw new ERR_INVALID_ARG_TYPE2(
                  "val",
                  ["Readable", "Iterable", "AsyncIterable", "ReadableStream", "TransformStream"],
                  ret
                );
              }
              ret = stream;
            } else {
              ret = Duplex2.from(stream);
            }
          }
          if (signal !== null && signal !== void 0 && signal.aborted || outerSignal !== null && outerSignal !== void 0 && outerSignal.aborted) {
            process22.nextTick(abort2);
          }
          return ret;
        }
        function pipe(src, dst, finish, { end }) {
          let ended = false;
          dst.on("close", () => {
            if (!ended) {
              finish(new ERR_STREAM_PREMATURE_CLOSE());
            }
          });
          src.pipe(dst, {
            end: false
          });
          if (end) {
            let endFn2 = function() {
              ended = true;
              dst.end();
            };
            var endFn = endFn2;
            if (isReadableFinished(src)) {
              process22.nextTick(endFn2);
            } else {
              src.once("end", endFn2);
            }
          } else {
            finish();
          }
          eos(
            src,
            {
              readable: true,
              writable: false
            },
            (err) => {
              const rState = src._readableState;
              if (err && err.code === "ERR_STREAM_PREMATURE_CLOSE" && rState && rState.ended && !rState.errored && !rState.errorEmitted) {
                src.once("end", finish).once("error", finish);
              } else {
                finish(err);
              }
            }
          );
          return eos(
            dst,
            {
              readable: false,
              writable: true
            },
            finish
          );
        }
        module.exports = {
          pipelineImpl,
          pipeline: pipeline2
        };
      }
    });
    require_compose = __commonJS2({
      "node_modules/readable-stream/lib/internal/streams/compose.js"(exports32, module) {
        "use strict";
        init_dirname2();
        var { pipeline: pipeline2 } = require_pipeline();
        var Duplex2 = require_duplex();
        var { destroyer } = require_destroy();
        var {
          isNodeStream,
          isReadable,
          isWritable,
          isWebStream,
          isTransformStream,
          isWritableStream,
          isReadableStream: isReadableStream2
        } = require_utils();
        var {
          AbortError,
          codes: { ERR_INVALID_ARG_VALUE, ERR_MISSING_ARGS }
        } = require_errors();
        var eos = require_end_of_stream();
        module.exports = function compose(...streams) {
          if (streams.length === 0) {
            throw new ERR_MISSING_ARGS("streams");
          }
          if (streams.length === 1) {
            return Duplex2.from(streams[0]);
          }
          const orgStreams = [...streams];
          if (typeof streams[0] === "function") {
            streams[0] = Duplex2.from(streams[0]);
          }
          if (typeof streams[streams.length - 1] === "function") {
            const idx = streams.length - 1;
            streams[idx] = Duplex2.from(streams[idx]);
          }
          for (let n = 0; n < streams.length; ++n) {
            if (!isNodeStream(streams[n]) && !isWebStream(streams[n])) {
              continue;
            }
            if (n < streams.length - 1 && !(isReadable(streams[n]) || isReadableStream2(streams[n]) || isTransformStream(streams[n]))) {
              throw new ERR_INVALID_ARG_VALUE(`streams[${n}]`, orgStreams[n], "must be readable");
            }
            if (n > 0 && !(isWritable(streams[n]) || isWritableStream(streams[n]) || isTransformStream(streams[n]))) {
              throw new ERR_INVALID_ARG_VALUE(`streams[${n}]`, orgStreams[n], "must be writable");
            }
          }
          let ondrain;
          let onfinish;
          let onreadable;
          let onclose;
          let d;
          function onfinished(err) {
            const cb = onclose;
            onclose = null;
            if (cb) {
              cb(err);
            } else if (err) {
              d.destroy(err);
            } else if (!readable && !writable) {
              d.destroy();
            }
          }
          const head = streams[0];
          const tail = pipeline2(streams, onfinished);
          const writable = !!(isWritable(head) || isWritableStream(head) || isTransformStream(head));
          const readable = !!(isReadable(tail) || isReadableStream2(tail) || isTransformStream(tail));
          d = new Duplex2({
            // TODO (ronag): highWaterMark?
            writableObjectMode: !!(head !== null && head !== void 0 && head.writableObjectMode),
            readableObjectMode: !!(tail !== null && tail !== void 0 && tail.readableObjectMode),
            writable,
            readable
          });
          if (writable) {
            if (isNodeStream(head)) {
              d._write = function(chunk, encoding, callback) {
                if (head.write(chunk, encoding)) {
                  callback();
                } else {
                  ondrain = callback;
                }
              };
              d._final = function(callback) {
                head.end();
                onfinish = callback;
              };
              head.on("drain", function() {
                if (ondrain) {
                  const cb = ondrain;
                  ondrain = null;
                  cb();
                }
              });
            } else if (isWebStream(head)) {
              const writable2 = isTransformStream(head) ? head.writable : head;
              const writer = writable2.getWriter();
              d._write = async function(chunk, encoding, callback) {
                try {
                  await writer.ready;
                  writer.write(chunk).catch(() => {
                  });
                  callback();
                } catch (err) {
                  callback(err);
                }
              };
              d._final = async function(callback) {
                try {
                  await writer.ready;
                  writer.close().catch(() => {
                  });
                  onfinish = callback;
                } catch (err) {
                  callback(err);
                }
              };
            }
            const toRead = isTransformStream(tail) ? tail.readable : tail;
            eos(toRead, () => {
              if (onfinish) {
                const cb = onfinish;
                onfinish = null;
                cb();
              }
            });
          }
          if (readable) {
            if (isNodeStream(tail)) {
              tail.on("readable", function() {
                if (onreadable) {
                  const cb = onreadable;
                  onreadable = null;
                  cb();
                }
              });
              tail.on("end", function() {
                d.push(null);
              });
              d._read = function() {
                while (true) {
                  const buf = tail.read();
                  if (buf === null) {
                    onreadable = d._read;
                    return;
                  }
                  if (!d.push(buf)) {
                    return;
                  }
                }
              };
            } else if (isWebStream(tail)) {
              const readable2 = isTransformStream(tail) ? tail.readable : tail;
              const reader = readable2.getReader();
              d._read = async function() {
                while (true) {
                  try {
                    const { value, done } = await reader.read();
                    if (!d.push(value)) {
                      return;
                    }
                    if (done) {
                      d.push(null);
                      return;
                    }
                  } catch {
                    return;
                  }
                }
              };
            }
          }
          d._destroy = function(err, callback) {
            if (!err && onclose !== null) {
              err = new AbortError();
            }
            onreadable = null;
            ondrain = null;
            onfinish = null;
            if (onclose === null) {
              callback(err);
            } else {
              onclose = callback;
              if (isNodeStream(tail)) {
                destroyer(tail, err);
              }
            }
          };
          return d;
        };
      }
    });
    require_operators = __commonJS2({
      "node_modules/readable-stream/lib/internal/streams/operators.js"(exports32, module) {
        "use strict";
        init_dirname2();
        var AbortController2 = globalThis.AbortController || require_abort_controller().AbortController;
        var {
          codes: { ERR_INVALID_ARG_VALUE, ERR_INVALID_ARG_TYPE: ERR_INVALID_ARG_TYPE2, ERR_MISSING_ARGS, ERR_OUT_OF_RANGE },
          AbortError
        } = require_errors();
        var { validateAbortSignal, validateInteger, validateObject } = require_validators();
        var kWeakHandler = require_primordials().Symbol("kWeak");
        var kResistStopPropagation = require_primordials().Symbol("kResistStopPropagation");
        var { finished: finished2 } = require_end_of_stream();
        var staticCompose = require_compose();
        var { addAbortSignalNoValidate } = require_add_abort_signal();
        var { isWritable, isNodeStream } = require_utils();
        var { deprecate: deprecate2 } = require_util();
        var {
          ArrayPrototypePush,
          Boolean: Boolean2,
          MathFloor,
          Number: Number2,
          NumberIsNaN,
          Promise: Promise2,
          PromiseReject,
          PromiseResolve,
          PromisePrototypeThen,
          Symbol: Symbol2
        } = require_primordials();
        var kEmpty = Symbol2("kEmpty");
        var kEof = Symbol2("kEof");
        function compose(stream, options) {
          if (options != null) {
            validateObject(options, "options");
          }
          if ((options === null || options === void 0 ? void 0 : options.signal) != null) {
            validateAbortSignal(options.signal, "options.signal");
          }
          if (isNodeStream(stream) && !isWritable(stream)) {
            throw new ERR_INVALID_ARG_VALUE("stream", stream, "must be writable");
          }
          const composedStream = staticCompose(this, stream);
          if (options !== null && options !== void 0 && options.signal) {
            addAbortSignalNoValidate(options.signal, composedStream);
          }
          return composedStream;
        }
        function map(fn, options) {
          if (typeof fn !== "function") {
            throw new ERR_INVALID_ARG_TYPE2("fn", ["Function", "AsyncFunction"], fn);
          }
          if (options != null) {
            validateObject(options, "options");
          }
          if ((options === null || options === void 0 ? void 0 : options.signal) != null) {
            validateAbortSignal(options.signal, "options.signal");
          }
          let concurrency = 1;
          if ((options === null || options === void 0 ? void 0 : options.concurrency) != null) {
            concurrency = MathFloor(options.concurrency);
          }
          let highWaterMark = concurrency - 1;
          if ((options === null || options === void 0 ? void 0 : options.highWaterMark) != null) {
            highWaterMark = MathFloor(options.highWaterMark);
          }
          validateInteger(concurrency, "options.concurrency", 1);
          validateInteger(highWaterMark, "options.highWaterMark", 0);
          highWaterMark += concurrency;
          return async function* map2() {
            const signal = require_util().AbortSignalAny(
              [options === null || options === void 0 ? void 0 : options.signal].filter(Boolean2)
            );
            const stream = this;
            const queue2 = [];
            const signalOpt = {
              signal
            };
            let next;
            let resume;
            let done = false;
            let cnt = 0;
            function onCatch() {
              done = true;
              afterItemProcessed();
            }
            function afterItemProcessed() {
              cnt -= 1;
              maybeResume();
            }
            function maybeResume() {
              if (resume && !done && cnt < concurrency && queue2.length < highWaterMark) {
                resume();
                resume = null;
              }
            }
            async function pump() {
              try {
                for await (let val2 of stream) {
                  if (done) {
                    return;
                  }
                  if (signal.aborted) {
                    throw new AbortError();
                  }
                  try {
                    val2 = fn(val2, signalOpt);
                    if (val2 === kEmpty) {
                      continue;
                    }
                    val2 = PromiseResolve(val2);
                  } catch (err) {
                    val2 = PromiseReject(err);
                  }
                  cnt += 1;
                  PromisePrototypeThen(val2, afterItemProcessed, onCatch);
                  queue2.push(val2);
                  if (next) {
                    next();
                    next = null;
                  }
                  if (!done && (queue2.length >= highWaterMark || cnt >= concurrency)) {
                    await new Promise2((resolve) => {
                      resume = resolve;
                    });
                  }
                }
                queue2.push(kEof);
              } catch (err) {
                const val2 = PromiseReject(err);
                PromisePrototypeThen(val2, afterItemProcessed, onCatch);
                queue2.push(val2);
              } finally {
                done = true;
                if (next) {
                  next();
                  next = null;
                }
              }
            }
            pump();
            try {
              while (true) {
                while (queue2.length > 0) {
                  const val2 = await queue2[0];
                  if (val2 === kEof) {
                    return;
                  }
                  if (signal.aborted) {
                    throw new AbortError();
                  }
                  if (val2 !== kEmpty) {
                    yield val2;
                  }
                  queue2.shift();
                  maybeResume();
                }
                await new Promise2((resolve) => {
                  next = resolve;
                });
              }
            } finally {
              done = true;
              if (resume) {
                resume();
                resume = null;
              }
            }
          }.call(this);
        }
        function asIndexedPairs(options = void 0) {
          if (options != null) {
            validateObject(options, "options");
          }
          if ((options === null || options === void 0 ? void 0 : options.signal) != null) {
            validateAbortSignal(options.signal, "options.signal");
          }
          return async function* asIndexedPairs2() {
            let index = 0;
            for await (const val2 of this) {
              var _options$signal;
              if (options !== null && options !== void 0 && (_options$signal = options.signal) !== null && _options$signal !== void 0 && _options$signal.aborted) {
                throw new AbortError({
                  cause: options.signal.reason
                });
              }
              yield [index++, val2];
            }
          }.call(this);
        }
        async function some(fn, options = void 0) {
          for await (const unused of filter.call(this, fn, options)) {
            return true;
          }
          return false;
        }
        async function every(fn, options = void 0) {
          if (typeof fn !== "function") {
            throw new ERR_INVALID_ARG_TYPE2("fn", ["Function", "AsyncFunction"], fn);
          }
          return !await some.call(
            this,
            async (...args) => {
              return !await fn(...args);
            },
            options
          );
        }
        async function find(fn, options) {
          for await (const result of filter.call(this, fn, options)) {
            return result;
          }
          return void 0;
        }
        async function forEach(fn, options) {
          if (typeof fn !== "function") {
            throw new ERR_INVALID_ARG_TYPE2("fn", ["Function", "AsyncFunction"], fn);
          }
          async function forEachFn(value, options2) {
            await fn(value, options2);
            return kEmpty;
          }
          for await (const unused of map.call(this, forEachFn, options)) ;
        }
        function filter(fn, options) {
          if (typeof fn !== "function") {
            throw new ERR_INVALID_ARG_TYPE2("fn", ["Function", "AsyncFunction"], fn);
          }
          async function filterFn(value, options2) {
            if (await fn(value, options2)) {
              return value;
            }
            return kEmpty;
          }
          return map.call(this, filterFn, options);
        }
        var ReduceAwareErrMissingArgs = class extends ERR_MISSING_ARGS {
          constructor() {
            super("reduce");
            this.message = "Reduce of an empty stream requires an initial value";
          }
        };
        async function reduce(reducer, initialValue, options) {
          var _options$signal2;
          if (typeof reducer !== "function") {
            throw new ERR_INVALID_ARG_TYPE2("reducer", ["Function", "AsyncFunction"], reducer);
          }
          if (options != null) {
            validateObject(options, "options");
          }
          if ((options === null || options === void 0 ? void 0 : options.signal) != null) {
            validateAbortSignal(options.signal, "options.signal");
          }
          let hasInitialValue = arguments.length > 1;
          if (options !== null && options !== void 0 && (_options$signal2 = options.signal) !== null && _options$signal2 !== void 0 && _options$signal2.aborted) {
            const err = new AbortError(void 0, {
              cause: options.signal.reason
            });
            this.once("error", () => {
            });
            await finished2(this.destroy(err));
            throw err;
          }
          const ac = new AbortController2();
          const signal = ac.signal;
          if (options !== null && options !== void 0 && options.signal) {
            const opts = {
              once: true,
              [kWeakHandler]: this,
              [kResistStopPropagation]: true
            };
            options.signal.addEventListener("abort", () => ac.abort(), opts);
          }
          let gotAnyItemFromStream = false;
          try {
            for await (const value of this) {
              var _options$signal3;
              gotAnyItemFromStream = true;
              if (options !== null && options !== void 0 && (_options$signal3 = options.signal) !== null && _options$signal3 !== void 0 && _options$signal3.aborted) {
                throw new AbortError();
              }
              if (!hasInitialValue) {
                initialValue = value;
                hasInitialValue = true;
              } else {
                initialValue = await reducer(initialValue, value, {
                  signal
                });
              }
            }
            if (!gotAnyItemFromStream && !hasInitialValue) {
              throw new ReduceAwareErrMissingArgs();
            }
          } finally {
            ac.abort();
          }
          return initialValue;
        }
        async function toArray(options) {
          if (options != null) {
            validateObject(options, "options");
          }
          if ((options === null || options === void 0 ? void 0 : options.signal) != null) {
            validateAbortSignal(options.signal, "options.signal");
          }
          const result = [];
          for await (const val2 of this) {
            var _options$signal4;
            if (options !== null && options !== void 0 && (_options$signal4 = options.signal) !== null && _options$signal4 !== void 0 && _options$signal4.aborted) {
              throw new AbortError(void 0, {
                cause: options.signal.reason
              });
            }
            ArrayPrototypePush(result, val2);
          }
          return result;
        }
        function flatMap(fn, options) {
          const values = map.call(this, fn, options);
          return async function* flatMap2() {
            for await (const val2 of values) {
              yield* val2;
            }
          }.call(this);
        }
        function toIntegerOrInfinity(number) {
          number = Number2(number);
          if (NumberIsNaN(number)) {
            return 0;
          }
          if (number < 0) {
            throw new ERR_OUT_OF_RANGE("number", ">= 0", number);
          }
          return number;
        }
        function drop(number, options = void 0) {
          if (options != null) {
            validateObject(options, "options");
          }
          if ((options === null || options === void 0 ? void 0 : options.signal) != null) {
            validateAbortSignal(options.signal, "options.signal");
          }
          number = toIntegerOrInfinity(number);
          return async function* drop2() {
            var _options$signal5;
            if (options !== null && options !== void 0 && (_options$signal5 = options.signal) !== null && _options$signal5 !== void 0 && _options$signal5.aborted) {
              throw new AbortError();
            }
            for await (const val2 of this) {
              var _options$signal6;
              if (options !== null && options !== void 0 && (_options$signal6 = options.signal) !== null && _options$signal6 !== void 0 && _options$signal6.aborted) {
                throw new AbortError();
              }
              if (number-- <= 0) {
                yield val2;
              }
            }
          }.call(this);
        }
        function take(number, options = void 0) {
          if (options != null) {
            validateObject(options, "options");
          }
          if ((options === null || options === void 0 ? void 0 : options.signal) != null) {
            validateAbortSignal(options.signal, "options.signal");
          }
          number = toIntegerOrInfinity(number);
          return async function* take2() {
            var _options$signal7;
            if (options !== null && options !== void 0 && (_options$signal7 = options.signal) !== null && _options$signal7 !== void 0 && _options$signal7.aborted) {
              throw new AbortError();
            }
            for await (const val2 of this) {
              var _options$signal8;
              if (options !== null && options !== void 0 && (_options$signal8 = options.signal) !== null && _options$signal8 !== void 0 && _options$signal8.aborted) {
                throw new AbortError();
              }
              if (number-- > 0) {
                yield val2;
              }
              if (number <= 0) {
                return;
              }
            }
          }.call(this);
        }
        module.exports.streamReturningOperators = {
          asIndexedPairs: deprecate2(asIndexedPairs, "readable.asIndexedPairs will be removed in a future version."),
          drop,
          filter,
          flatMap,
          map,
          take,
          compose
        };
        module.exports.promiseReturningOperators = {
          every,
          forEach,
          reduce,
          toArray,
          some,
          find
        };
      }
    });
    require_promises = __commonJS2({
      "node_modules/readable-stream/lib/stream/promises.js"(exports32, module) {
        "use strict";
        init_dirname2();
        var { ArrayPrototypePop, Promise: Promise2 } = require_primordials();
        var { isIterable, isNodeStream, isWebStream } = require_utils();
        var { pipelineImpl: pl } = require_pipeline();
        var { finished: finished2 } = require_end_of_stream();
        require_stream();
        function pipeline2(...streams) {
          return new Promise2((resolve, reject) => {
            let signal;
            let end;
            const lastArg = streams[streams.length - 1];
            if (lastArg && typeof lastArg === "object" && !isNodeStream(lastArg) && !isIterable(lastArg) && !isWebStream(lastArg)) {
              const options = ArrayPrototypePop(streams);
              signal = options.signal;
              end = options.end;
            }
            pl(
              streams,
              (err, value) => {
                if (err) {
                  reject(err);
                } else {
                  resolve(value);
                }
              },
              {
                signal,
                end
              }
            );
          });
        }
        module.exports = {
          finished: finished2,
          pipeline: pipeline2
        };
      }
    });
    require_stream = __commonJS2({
      "node_modules/readable-stream/lib/stream.js"(exports32, module) {
        init_dirname2();
        var { Buffer: Buffer2 } = __require2("buffer");
        var { ObjectDefineProperty, ObjectKeys, ReflectApply } = require_primordials();
        var {
          promisify: { custom: customPromisify }
        } = require_util();
        var { streamReturningOperators, promiseReturningOperators } = require_operators();
        var {
          codes: { ERR_ILLEGAL_CONSTRUCTOR }
        } = require_errors();
        var compose = require_compose();
        var { setDefaultHighWaterMark, getDefaultHighWaterMark } = require_state();
        var { pipeline: pipeline2 } = require_pipeline();
        var { destroyer } = require_destroy();
        var eos = require_end_of_stream();
        var promises = require_promises();
        var utils = require_utils();
        var Stream2 = module.exports = require_legacy().Stream;
        Stream2.isDestroyed = utils.isDestroyed;
        Stream2.isDisturbed = utils.isDisturbed;
        Stream2.isErrored = utils.isErrored;
        Stream2.isReadable = utils.isReadable;
        Stream2.isWritable = utils.isWritable;
        Stream2.Readable = require_readable();
        for (const key of ObjectKeys(streamReturningOperators)) {
          let fn2 = function(...args) {
            if (new.target) {
              throw ERR_ILLEGAL_CONSTRUCTOR();
            }
            return Stream2.Readable.from(ReflectApply(op, this, args));
          };
          fn = fn2;
          const op = streamReturningOperators[key];
          ObjectDefineProperty(fn2, "name", {
            __proto__: null,
            value: op.name
          });
          ObjectDefineProperty(fn2, "length", {
            __proto__: null,
            value: op.length
          });
          ObjectDefineProperty(Stream2.Readable.prototype, key, {
            __proto__: null,
            value: fn2,
            enumerable: false,
            configurable: true,
            writable: true
          });
        }
        var fn;
        for (const key of ObjectKeys(promiseReturningOperators)) {
          let fn2 = function(...args) {
            if (new.target) {
              throw ERR_ILLEGAL_CONSTRUCTOR();
            }
            return ReflectApply(op, this, args);
          };
          fn = fn2;
          const op = promiseReturningOperators[key];
          ObjectDefineProperty(fn2, "name", {
            __proto__: null,
            value: op.name
          });
          ObjectDefineProperty(fn2, "length", {
            __proto__: null,
            value: op.length
          });
          ObjectDefineProperty(Stream2.Readable.prototype, key, {
            __proto__: null,
            value: fn2,
            enumerable: false,
            configurable: true,
            writable: true
          });
        }
        var fn;
        Stream2.Writable = require_writable();
        Stream2.Duplex = require_duplex();
        Stream2.Transform = require_transform();
        Stream2.PassThrough = require_passthrough();
        Stream2.pipeline = pipeline2;
        var { addAbortSignal } = require_add_abort_signal();
        Stream2.addAbortSignal = addAbortSignal;
        Stream2.finished = eos;
        Stream2.destroy = destroyer;
        Stream2.compose = compose;
        Stream2.setDefaultHighWaterMark = setDefaultHighWaterMark;
        Stream2.getDefaultHighWaterMark = getDefaultHighWaterMark;
        ObjectDefineProperty(Stream2, "promises", {
          __proto__: null,
          configurable: true,
          enumerable: true,
          get() {
            return promises;
          }
        });
        ObjectDefineProperty(pipeline2, customPromisify, {
          __proto__: null,
          enumerable: true,
          get() {
            return promises.pipeline;
          }
        });
        ObjectDefineProperty(eos, customPromisify, {
          __proto__: null,
          enumerable: true,
          get() {
            return promises.finished;
          }
        });
        Stream2.Stream = Stream2;
        Stream2._isUint8Array = function isUint8Array(value) {
          return value instanceof Uint8Array;
        };
        Stream2._uint8ArrayToBuffer = function _uint8ArrayToBuffer(chunk) {
          return Buffer2.from(chunk.buffer, chunk.byteOffset, chunk.byteLength);
        };
      }
    });
    require_stream_readable = __commonJS2({
      "node_modules/readable-stream/lib/_stream_readable.js"(exports32, module) {
        "use strict";
        init_dirname2();
        module.exports = require_stream().Readable;
      }
    });
    require_stream_writable = __commonJS2({
      "node_modules/readable-stream/lib/_stream_writable.js"(exports32, module) {
        "use strict";
        init_dirname2();
        module.exports = require_stream().Writable;
      }
    });
    require_stream_duplex = __commonJS2({
      "node_modules/readable-stream/lib/_stream_duplex.js"(exports32, module) {
        "use strict";
        init_dirname2();
        module.exports = require_stream().Duplex;
      }
    });
    require_stream_transform = __commonJS2({
      "node_modules/readable-stream/lib/_stream_transform.js"(exports32, module) {
        "use strict";
        init_dirname2();
        module.exports = require_stream().Transform;
      }
    });
    require_stream_passthrough = __commonJS2({
      "node_modules/readable-stream/lib/_stream_passthrough.js"(exports32, module) {
        "use strict";
        init_dirname2();
        module.exports = require_stream().PassThrough;
      }
    });
    init_dirname2();
    import_stream_readable = __toESM2(require_stream_readable(), 1);
    import_stream_writable = __toESM2(require_stream_writable(), 1);
    import_stream_duplex = __toESM2(require_stream_duplex(), 1);
    import_stream_transform = __toESM2(require_stream_transform(), 1);
    import_stream_passthrough = __toESM2(require_stream_passthrough(), 1);
    import_end_of_stream = __toESM2(require_end_of_stream(), 1);
    import_pipeline = __toESM2(require_pipeline(), 1);
    inherits(Stream, EE);
    Stream.Readable = import_stream_readable.Readable;
    Stream.Writable = import_stream_writable.Writable;
    Stream.Duplex = import_stream_duplex.Duplex;
    Stream.Transform = import_stream_transform.Transform;
    Stream.PassThrough = import_stream_passthrough.PassThrough;
    Stream.finished = import_end_of_stream.finished;
    Stream.pipeline = import_pipeline.pipeline;
    Stream.Stream = Stream;
    Stream.prototype.pipe = function(dest, options) {
      var source = this;
      function ondata(chunk) {
        if (dest.writable) {
          if (false === dest.write(chunk) && source.pause) {
            source.pause();
          }
        }
      }
      source.on("data", ondata);
      function ondrain() {
        if (source.readable && source.resume) {
          source.resume();
        }
      }
      dest.on("drain", ondrain);
      if (!dest._isStdio && (!options || options.end !== false)) {
        source.on("end", onend);
        source.on("close", onclose);
      }
      var didOnEnd = false;
      function onend() {
        if (didOnEnd) return;
        didOnEnd = true;
        dest.end();
      }
      function onclose() {
        if (didOnEnd) return;
        didOnEnd = true;
        if (typeof dest.destroy === "function") dest.destroy();
      }
      function onerror(er) {
        cleanup();
        if (source.listenerCount("error") === 0) {
          throw er;
        }
      }
      source.on("error", onerror);
      dest.on("error", onerror);
      function cleanup() {
        source.removeListener("data", ondata);
        dest.removeListener("drain", ondrain);
        source.removeListener("end", onend);
        source.removeListener("close", onclose);
        source.removeListener("error", onerror);
        dest.removeListener("error", onerror);
        source.removeListener("end", cleanup);
        source.removeListener("close", cleanup);
        dest.removeListener("close", cleanup);
      }
      source.on("end", cleanup);
      source.on("close", cleanup);
      dest.on("close", cleanup);
      dest.emit("pipe", source);
      return dest;
    };
    stream_default = Stream;
    export_Duplex = import_stream_duplex.Duplex;
    export_PassThrough = import_stream_passthrough.PassThrough;
    export_Readable = import_stream_readable.Readable;
    export_Transform = import_stream_transform.Transform;
    export_Writable = import_stream_writable.Writable;
    export_finished = import_end_of_stream.finished;
    export_pipeline = import_pipeline.pipeline;
  }
});

// node_modules/@smithy/util-stream/dist-cjs/getAwsChunkedEncodingStream.js
var require_getAwsChunkedEncodingStream = __commonJS({
  "node_modules/@smithy/util-stream/dist-cjs/getAwsChunkedEncodingStream.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.getAwsChunkedEncodingStream = void 0;
    var stream_1 = (init_stream(), __toCommonJS(stream_exports));
    var getAwsChunkedEncodingStream2 = (readableStream, options) => {
      const { base64Encoder, bodyLengthChecker, checksumAlgorithmFn, checksumLocationName, streamHasher } = options;
      const checksumRequired = base64Encoder !== void 0 && checksumAlgorithmFn !== void 0 && checksumLocationName !== void 0 && streamHasher !== void 0;
      const digest = checksumRequired ? streamHasher(checksumAlgorithmFn, readableStream) : void 0;
      const awsChunkedEncodingStream = new stream_1.Readable({ read: () => {
      } });
      readableStream.on("data", (data) => {
        const length = bodyLengthChecker(data) || 0;
        awsChunkedEncodingStream.push(`${length.toString(16)}\r
`);
        awsChunkedEncodingStream.push(data);
        awsChunkedEncodingStream.push("\r\n");
      });
      readableStream.on("end", async () => {
        awsChunkedEncodingStream.push(`0\r
`);
        if (checksumRequired) {
          const checksum = base64Encoder(await digest);
          awsChunkedEncodingStream.push(`${checksumLocationName}:${checksum}\r
`);
          awsChunkedEncodingStream.push(`\r
`);
        }
        awsChunkedEncodingStream.push(null);
      });
      return awsChunkedEncodingStream;
    };
    exports6.getAwsChunkedEncodingStream = getAwsChunkedEncodingStream2;
  }
});

// node_modules/@smithy/util-uri-escape/dist-cjs/index.js
var require_dist_cjs12 = __commonJS({
  "node_modules/@smithy/util-uri-escape/dist-cjs/index.js"(exports6, module) {
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      escapeUri: () => escapeUri,
      escapeUriPath: () => escapeUriPath
    });
    module.exports = __toCommonJS3(src_exports);
    var escapeUri = /* @__PURE__ */ __name((uri) => (
      // AWS percent-encodes some extra non-standard characters in a URI
      encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode)
    ), "escapeUri");
    var hexEncode = /* @__PURE__ */ __name((c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`, "hexEncode");
    var escapeUriPath = /* @__PURE__ */ __name((uri) => uri.split("/").map(escapeUri).join("/"), "escapeUriPath");
  }
});

// node_modules/@smithy/querystring-builder/dist-cjs/index.js
var require_dist_cjs13 = __commonJS({
  "node_modules/@smithy/querystring-builder/dist-cjs/index.js"(exports6, module) {
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      buildQueryString: () => buildQueryString
    });
    module.exports = __toCommonJS3(src_exports);
    var import_util_uri_escape = require_dist_cjs12();
    function buildQueryString(query) {
      const parts = [];
      for (let key of Object.keys(query).sort()) {
        const value = query[key];
        key = (0, import_util_uri_escape.escapeUri)(key);
        if (Array.isArray(value)) {
          for (let i = 0, iLen = value.length; i < iLen; i++) {
            parts.push(`${key}=${(0, import_util_uri_escape.escapeUri)(value[i])}`);
          }
        } else {
          let qsEntry = key;
          if (value || typeof value === "string") {
            qsEntry += `=${(0, import_util_uri_escape.escapeUri)(value)}`;
          }
          parts.push(qsEntry);
        }
      }
      return parts.join("&");
    }
    __name(buildQueryString, "buildQueryString");
  }
});

// ../../../../node_modules/esbuild-plugin-polyfill-node/polyfills/empty.js
var empty_exports = {};
__export(empty_exports, {
  default: () => empty_default
});
var empty_default;
var init_empty = __esm({
  "../../../../node_modules/esbuild-plugin-polyfill-node/polyfills/empty.js"() {
    init_dirname();
    empty_default = {};
  }
});

// ../../../../node_modules/@jspm/core/nodelibs/browser/http2.js
var http2_exports = {};
__export(http2_exports, {
  ClientHttp2Session: () => ClientHttp2Session,
  ClientHttp2Stream: () => ClientHttp2Stream,
  Http2SecureServer: () => Http2SecureServer,
  Http2Server: () => Http2Server,
  Http2ServerRequest: () => Http2ServerRequest,
  Http2ServerResponse: () => Http2ServerResponse,
  Http2Session: () => Http2Session,
  Http2Stream: () => Http2Stream,
  ServerHttp2Session: () => ServerHttp2Session,
  ServerHttp2Stream: () => ServerHttp2Stream,
  connect: () => connect,
  constants: () => constants,
  createSecureServer: () => createSecureServer,
  createServer: () => createServer,
  default: () => http2,
  getDefaultSettings: () => getDefaultSettings,
  getPackedSettings: () => getPackedSettings,
  getUnpackedSettings: () => getUnpackedSettings,
  sensitiveHeaders: () => sensitiveHeaders
});
function unimplemented(name) {
  throw new Error(
    `Node.js HTTP/2 ${name} is not currently supported by JSPM core in Deno`
  );
}
function createServer() {
}
function createSecureServer() {
}
function connect() {
}
function getDefaultSettings() {
}
function getPackedSettings() {
}
function getUnpackedSettings() {
}
var Http2Session, ServerHttp2Session, ClientHttp2Session, Http2Stream, ClientHttp2Stream, ServerHttp2Stream, Http2Server, Http2SecureServer, constants, sensitiveHeaders, Http2ServerRequest, Http2ServerResponse, http2;
var init_http2 = __esm({
  "../../../../node_modules/@jspm/core/nodelibs/browser/http2.js"() {
    init_dirname();
    Http2Session = class {
      constructor() {
        unimplemented(this.constructor.name);
      }
    };
    ServerHttp2Session = class {
      constructor() {
        unimplemented(this.constructor.name);
      }
    };
    ClientHttp2Session = class {
      constructor() {
        unimplemented(this.constructor.name);
      }
    };
    Http2Stream = class {
      constructor() {
        unimplemented(this.constructor.name);
      }
    };
    ClientHttp2Stream = class {
      constructor() {
        unimplemented(this.constructor.name);
      }
    };
    ServerHttp2Stream = class {
      constructor() {
        unimplemented(this.constructor.name);
      }
    };
    Http2Server = class {
      constructor() {
        unimplemented(this.constructor.name);
      }
    };
    Http2SecureServer = class {
      constructor() {
        unimplemented(this.constructor.name);
      }
    };
    constants = {};
    sensitiveHeaders = Symbol("nodejs.http2.sensitiveHeaders");
    Http2ServerRequest = class {
      constructor() {
        unimplemented(this.constructor.name);
      }
    };
    Http2ServerResponse = class {
      constructor() {
        unimplemented(this.constructor.name);
      }
    };
    http2 = {
      Http2Session,
      ServerHttp2Session,
      ClientHttp2Session,
      Http2Stream,
      ClientHttp2Stream,
      ServerHttp2Stream,
      Http2Server,
      Http2SecureServer,
      createServer,
      createSecureServer,
      connect,
      constants,
      getDefaultSettings,
      getPackedSettings,
      getUnpackedSettings,
      sensitiveHeaders,
      Http2ServerRequest,
      Http2ServerResponse
    };
  }
});

// node_modules/@smithy/node-http-handler/dist-cjs/index.js
var require_dist_cjs14 = __commonJS({
  "node_modules/@smithy/node-http-handler/dist-cjs/index.js"(exports6, module) {
    init_dirname();
    var __create3 = Object.create;
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __getProtoOf3 = Object.getPrototypeOf;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM3 = (mod, isNodeMode, target) => (target = mod != null ? __create3(__getProtoOf3(mod)) : {}, __copyProps3(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp3(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      DEFAULT_REQUEST_TIMEOUT: () => DEFAULT_REQUEST_TIMEOUT,
      NodeHttp2Handler: () => NodeHttp2Handler,
      NodeHttpHandler: () => NodeHttpHandler,
      streamCollector: () => streamCollector2
    });
    module.exports = __toCommonJS3(src_exports);
    var import_protocol_http11 = require_dist_cjs2();
    var import_querystring_builder = require_dist_cjs13();
    var import_http = (init_empty(), __toCommonJS(empty_exports));
    var import_https = (init_empty(), __toCommonJS(empty_exports));
    var NODEJS_TIMEOUT_ERROR_CODES = ["ECONNRESET", "EPIPE", "ETIMEDOUT"];
    var getTransformedHeaders = /* @__PURE__ */ __name((headers) => {
      const transformedHeaders = {};
      for (const name of Object.keys(headers)) {
        const headerValues = headers[name];
        transformedHeaders[name] = Array.isArray(headerValues) ? headerValues.join(",") : headerValues;
      }
      return transformedHeaders;
    }, "getTransformedHeaders");
    var timing = {
      setTimeout: (cb, ms) => setTimeout(cb, ms),
      clearTimeout: (timeoutId) => clearTimeout(timeoutId)
    };
    var DEFER_EVENT_LISTENER_TIME = 1e3;
    var setConnectionTimeout = /* @__PURE__ */ __name((request, reject, timeoutInMs = 0) => {
      if (!timeoutInMs) {
        return -1;
      }
      const registerTimeout = /* @__PURE__ */ __name((offset) => {
        const timeoutId = timing.setTimeout(() => {
          request.destroy();
          reject(
            Object.assign(new Error(`Socket timed out without establishing a connection within ${timeoutInMs} ms`), {
              name: "TimeoutError"
            })
          );
        }, timeoutInMs - offset);
        const doWithSocket = /* @__PURE__ */ __name((socket) => {
          if (socket == null ? void 0 : socket.connecting) {
            socket.on("connect", () => {
              timing.clearTimeout(timeoutId);
            });
          } else {
            timing.clearTimeout(timeoutId);
          }
        }, "doWithSocket");
        if (request.socket) {
          doWithSocket(request.socket);
        } else {
          request.on("socket", doWithSocket);
        }
      }, "registerTimeout");
      if (timeoutInMs < 2e3) {
        registerTimeout(0);
        return 0;
      }
      return timing.setTimeout(registerTimeout.bind(null, DEFER_EVENT_LISTENER_TIME), DEFER_EVENT_LISTENER_TIME);
    }, "setConnectionTimeout");
    var DEFER_EVENT_LISTENER_TIME2 = 3e3;
    var setSocketKeepAlive = /* @__PURE__ */ __name((request, { keepAlive, keepAliveMsecs }, deferTimeMs = DEFER_EVENT_LISTENER_TIME2) => {
      if (keepAlive !== true) {
        return -1;
      }
      const registerListener = /* @__PURE__ */ __name(() => {
        if (request.socket) {
          request.socket.setKeepAlive(keepAlive, keepAliveMsecs || 0);
        } else {
          request.on("socket", (socket) => {
            socket.setKeepAlive(keepAlive, keepAliveMsecs || 0);
          });
        }
      }, "registerListener");
      if (deferTimeMs === 0) {
        registerListener();
        return 0;
      }
      return timing.setTimeout(registerListener, deferTimeMs);
    }, "setSocketKeepAlive");
    var DEFER_EVENT_LISTENER_TIME3 = 3e3;
    var setSocketTimeout = /* @__PURE__ */ __name((request, reject, timeoutInMs = 0) => {
      const registerTimeout = /* @__PURE__ */ __name((offset) => {
        request.setTimeout(timeoutInMs - offset, () => {
          request.destroy();
          reject(Object.assign(new Error(`Connection timed out after ${timeoutInMs} ms`), { name: "TimeoutError" }));
        });
      }, "registerTimeout");
      if (0 < timeoutInMs && timeoutInMs < 6e3) {
        registerTimeout(0);
        return 0;
      }
      return timing.setTimeout(
        registerTimeout.bind(null, timeoutInMs === 0 ? 0 : DEFER_EVENT_LISTENER_TIME3),
        DEFER_EVENT_LISTENER_TIME3
      );
    }, "setSocketTimeout");
    var import_stream = (init_stream(), __toCommonJS(stream_exports));
    var MIN_WAIT_TIME = 1e3;
    async function writeRequestBody(httpRequest, request, maxContinueTimeoutMs = MIN_WAIT_TIME) {
      const headers = request.headers ?? {};
      const expect = headers["Expect"] || headers["expect"];
      let timeoutId = -1;
      let sendBody = true;
      if (expect === "100-continue") {
        sendBody = await Promise.race([
          new Promise((resolve) => {
            timeoutId = Number(timing.setTimeout(resolve, Math.max(MIN_WAIT_TIME, maxContinueTimeoutMs)));
          }),
          new Promise((resolve) => {
            httpRequest.on("continue", () => {
              timing.clearTimeout(timeoutId);
              resolve(true);
            });
            httpRequest.on("response", () => {
              timing.clearTimeout(timeoutId);
              resolve(false);
            });
            httpRequest.on("error", () => {
              timing.clearTimeout(timeoutId);
              resolve(false);
            });
          })
        ]);
      }
      if (sendBody) {
        writeBody(httpRequest, request.body);
      }
    }
    __name(writeRequestBody, "writeRequestBody");
    function writeBody(httpRequest, body) {
      if (body instanceof import_stream.Readable) {
        body.pipe(httpRequest);
        return;
      }
      if (body) {
        if (Buffer.isBuffer(body) || typeof body === "string") {
          httpRequest.end(body);
          return;
        }
        const uint8 = body;
        if (typeof uint8 === "object" && uint8.buffer && typeof uint8.byteOffset === "number" && typeof uint8.byteLength === "number") {
          httpRequest.end(Buffer.from(uint8.buffer, uint8.byteOffset, uint8.byteLength));
          return;
        }
        httpRequest.end(Buffer.from(body));
        return;
      }
      httpRequest.end();
    }
    __name(writeBody, "writeBody");
    var DEFAULT_REQUEST_TIMEOUT = 0;
    var _NodeHttpHandler = class _NodeHttpHandler2 {
      constructor(options) {
        this.socketWarningTimestamp = 0;
        this.metadata = { handlerProtocol: "http/1.1" };
        this.configProvider = new Promise((resolve, reject) => {
          if (typeof options === "function") {
            options().then((_options) => {
              resolve(this.resolveDefaultConfig(_options));
            }).catch(reject);
          } else {
            resolve(this.resolveDefaultConfig(options));
          }
        });
      }
      /**
       * @returns the input if it is an HttpHandler of any class,
       * or instantiates a new instance of this handler.
       */
      static create(instanceOrOptions) {
        if (typeof (instanceOrOptions == null ? void 0 : instanceOrOptions.handle) === "function") {
          return instanceOrOptions;
        }
        return new _NodeHttpHandler2(instanceOrOptions);
      }
      /**
       * @internal
       *
       * @param agent - http(s) agent in use by the NodeHttpHandler instance.
       * @param socketWarningTimestamp - last socket usage check timestamp.
       * @param logger - channel for the warning.
       * @returns timestamp of last emitted warning.
       */
      static checkSocketUsage(agent, socketWarningTimestamp, logger = console) {
        var _a, _b, _c;
        const { sockets, requests, maxSockets } = agent;
        if (typeof maxSockets !== "number" || maxSockets === Infinity) {
          return socketWarningTimestamp;
        }
        const interval = 15e3;
        if (Date.now() - interval < socketWarningTimestamp) {
          return socketWarningTimestamp;
        }
        if (sockets && requests) {
          for (const origin in sockets) {
            const socketsInUse = ((_a = sockets[origin]) == null ? void 0 : _a.length) ?? 0;
            const requestsEnqueued = ((_b = requests[origin]) == null ? void 0 : _b.length) ?? 0;
            if (socketsInUse >= maxSockets && requestsEnqueued >= 2 * maxSockets) {
              (_c = logger == null ? void 0 : logger.warn) == null ? void 0 : _c.call(
                logger,
                `@smithy/node-http-handler:WARN - socket usage at capacity=${socketsInUse} and ${requestsEnqueued} additional requests are enqueued.
See https://docs.aws.amazon.com/sdk-for-javascript/v3/developer-guide/node-configuring-maxsockets.html
or increase socketAcquisitionWarningTimeout=(millis) in the NodeHttpHandler config.`
              );
              return Date.now();
            }
          }
        }
        return socketWarningTimestamp;
      }
      resolveDefaultConfig(options) {
        const { requestTimeout, connectionTimeout, socketTimeout, httpAgent, httpsAgent } = options || {};
        const keepAlive = true;
        const maxSockets = 50;
        return {
          connectionTimeout,
          requestTimeout: requestTimeout ?? socketTimeout,
          httpAgent: (() => {
            if (httpAgent instanceof import_http.Agent || typeof (httpAgent == null ? void 0 : httpAgent.destroy) === "function") {
              return httpAgent;
            }
            return new import_http.Agent({ keepAlive, maxSockets, ...httpAgent });
          })(),
          httpsAgent: (() => {
            if (httpsAgent instanceof import_https.Agent || typeof (httpsAgent == null ? void 0 : httpsAgent.destroy) === "function") {
              return httpsAgent;
            }
            return new import_https.Agent({ keepAlive, maxSockets, ...httpsAgent });
          })(),
          logger: console
        };
      }
      destroy() {
        var _a, _b, _c, _d;
        (_b = (_a = this.config) == null ? void 0 : _a.httpAgent) == null ? void 0 : _b.destroy();
        (_d = (_c = this.config) == null ? void 0 : _c.httpsAgent) == null ? void 0 : _d.destroy();
      }
      async handle(request, { abortSignal } = {}) {
        if (!this.config) {
          this.config = await this.configProvider;
        }
        return new Promise((_resolve, _reject) => {
          let writeRequestBodyPromise = void 0;
          const timeouts = [];
          const resolve = /* @__PURE__ */ __name(async (arg) => {
            await writeRequestBodyPromise;
            timeouts.forEach(timing.clearTimeout);
            _resolve(arg);
          }, "resolve");
          const reject = /* @__PURE__ */ __name(async (arg) => {
            await writeRequestBodyPromise;
            timeouts.forEach(timing.clearTimeout);
            _reject(arg);
          }, "reject");
          if (!this.config) {
            throw new Error("Node HTTP request handler config is not resolved");
          }
          if (abortSignal == null ? void 0 : abortSignal.aborted) {
            const abortError = new Error("Request aborted");
            abortError.name = "AbortError";
            reject(abortError);
            return;
          }
          const isSSL = request.protocol === "https:";
          const agent = isSSL ? this.config.httpsAgent : this.config.httpAgent;
          timeouts.push(
            timing.setTimeout(
              () => {
                this.socketWarningTimestamp = _NodeHttpHandler2.checkSocketUsage(
                  agent,
                  this.socketWarningTimestamp,
                  this.config.logger
                );
              },
              this.config.socketAcquisitionWarningTimeout ?? (this.config.requestTimeout ?? 2e3) + (this.config.connectionTimeout ?? 1e3)
            )
          );
          const queryString = (0, import_querystring_builder.buildQueryString)(request.query || {});
          let auth = void 0;
          if (request.username != null || request.password != null) {
            const username = request.username ?? "";
            const password = request.password ?? "";
            auth = `${username}:${password}`;
          }
          let path = request.path;
          if (queryString) {
            path += `?${queryString}`;
          }
          if (request.fragment) {
            path += `#${request.fragment}`;
          }
          let hostname = request.hostname ?? "";
          if (hostname[0] === "[" && hostname.endsWith("]")) {
            hostname = request.hostname.slice(1, -1);
          } else {
            hostname = request.hostname;
          }
          const nodeHttpsOptions = {
            headers: request.headers,
            host: hostname,
            method: request.method,
            path,
            port: request.port,
            agent,
            auth
          };
          const requestFunc = isSSL ? import_https.request : import_http.request;
          const req = requestFunc(nodeHttpsOptions, (res) => {
            const httpResponse = new import_protocol_http11.HttpResponse({
              statusCode: res.statusCode || -1,
              reason: res.statusMessage,
              headers: getTransformedHeaders(res.headers),
              body: res
            });
            resolve({ response: httpResponse });
          });
          req.on("error", (err) => {
            if (NODEJS_TIMEOUT_ERROR_CODES.includes(err.code)) {
              reject(Object.assign(err, { name: "TimeoutError" }));
            } else {
              reject(err);
            }
          });
          if (abortSignal) {
            const onAbort = /* @__PURE__ */ __name(() => {
              req.destroy();
              const abortError = new Error("Request aborted");
              abortError.name = "AbortError";
              reject(abortError);
            }, "onAbort");
            if (typeof abortSignal.addEventListener === "function") {
              const signal = abortSignal;
              signal.addEventListener("abort", onAbort, { once: true });
              req.once("close", () => signal.removeEventListener("abort", onAbort));
            } else {
              abortSignal.onabort = onAbort;
            }
          }
          timeouts.push(setConnectionTimeout(req, reject, this.config.connectionTimeout));
          timeouts.push(setSocketTimeout(req, reject, this.config.requestTimeout));
          const httpAgent = nodeHttpsOptions.agent;
          if (typeof httpAgent === "object" && "keepAlive" in httpAgent) {
            timeouts.push(
              setSocketKeepAlive(req, {
                // @ts-expect-error keepAlive is not public on httpAgent.
                keepAlive: httpAgent.keepAlive,
                // @ts-expect-error keepAliveMsecs is not public on httpAgent.
                keepAliveMsecs: httpAgent.keepAliveMsecs
              })
            );
          }
          writeRequestBodyPromise = writeRequestBody(req, request, this.config.requestTimeout).catch((e) => {
            timeouts.forEach(timing.clearTimeout);
            return _reject(e);
          });
        });
      }
      updateHttpClientConfig(key, value) {
        this.config = void 0;
        this.configProvider = this.configProvider.then((config2) => {
          return {
            ...config2,
            [key]: value
          };
        });
      }
      httpHandlerConfigs() {
        return this.config ?? {};
      }
    };
    __name(_NodeHttpHandler, "NodeHttpHandler");
    var NodeHttpHandler = _NodeHttpHandler;
    var import_http22 = (init_http2(), __toCommonJS(http2_exports));
    var import_http2 = __toESM3((init_http2(), __toCommonJS(http2_exports)));
    var _NodeHttp2ConnectionPool = class _NodeHttp2ConnectionPool {
      constructor(sessions) {
        this.sessions = [];
        this.sessions = sessions ?? [];
      }
      poll() {
        if (this.sessions.length > 0) {
          return this.sessions.shift();
        }
      }
      offerLast(session) {
        this.sessions.push(session);
      }
      contains(session) {
        return this.sessions.includes(session);
      }
      remove(session) {
        this.sessions = this.sessions.filter((s) => s !== session);
      }
      [Symbol.iterator]() {
        return this.sessions[Symbol.iterator]();
      }
      destroy(connection) {
        for (const session of this.sessions) {
          if (session === connection) {
            if (!session.destroyed) {
              session.destroy();
            }
          }
        }
      }
    };
    __name(_NodeHttp2ConnectionPool, "NodeHttp2ConnectionPool");
    var NodeHttp2ConnectionPool = _NodeHttp2ConnectionPool;
    var _NodeHttp2ConnectionManager = class _NodeHttp2ConnectionManager {
      constructor(config2) {
        this.sessionCache = /* @__PURE__ */ new Map();
        this.config = config2;
        if (this.config.maxConcurrency && this.config.maxConcurrency <= 0) {
          throw new RangeError("maxConcurrency must be greater than zero.");
        }
      }
      lease(requestContext, connectionConfiguration) {
        const url = this.getUrlString(requestContext);
        const existingPool = this.sessionCache.get(url);
        if (existingPool) {
          const existingSession = existingPool.poll();
          if (existingSession && !this.config.disableConcurrency) {
            return existingSession;
          }
        }
        const session = import_http2.default.connect(url);
        if (this.config.maxConcurrency) {
          session.settings({ maxConcurrentStreams: this.config.maxConcurrency }, (err) => {
            if (err) {
              throw new Error(
                "Fail to set maxConcurrentStreams to " + this.config.maxConcurrency + "when creating new session for " + requestContext.destination.toString()
              );
            }
          });
        }
        session.unref();
        const destroySessionCb = /* @__PURE__ */ __name(() => {
          session.destroy();
          this.deleteSession(url, session);
        }, "destroySessionCb");
        session.on("goaway", destroySessionCb);
        session.on("error", destroySessionCb);
        session.on("frameError", destroySessionCb);
        session.on("close", () => this.deleteSession(url, session));
        if (connectionConfiguration.requestTimeout) {
          session.setTimeout(connectionConfiguration.requestTimeout, destroySessionCb);
        }
        const connectionPool = this.sessionCache.get(url) || new NodeHttp2ConnectionPool();
        connectionPool.offerLast(session);
        this.sessionCache.set(url, connectionPool);
        return session;
      }
      /**
       * Delete a session from the connection pool.
       * @param authority The authority of the session to delete.
       * @param session The session to delete.
       */
      deleteSession(authority, session) {
        const existingConnectionPool = this.sessionCache.get(authority);
        if (!existingConnectionPool) {
          return;
        }
        if (!existingConnectionPool.contains(session)) {
          return;
        }
        existingConnectionPool.remove(session);
        this.sessionCache.set(authority, existingConnectionPool);
      }
      release(requestContext, session) {
        var _a;
        const cacheKey = this.getUrlString(requestContext);
        (_a = this.sessionCache.get(cacheKey)) == null ? void 0 : _a.offerLast(session);
      }
      destroy() {
        for (const [key, connectionPool] of this.sessionCache) {
          for (const session of connectionPool) {
            if (!session.destroyed) {
              session.destroy();
            }
            connectionPool.remove(session);
          }
          this.sessionCache.delete(key);
        }
      }
      setMaxConcurrentStreams(maxConcurrentStreams) {
        if (maxConcurrentStreams && maxConcurrentStreams <= 0) {
          throw new RangeError("maxConcurrentStreams must be greater than zero.");
        }
        this.config.maxConcurrency = maxConcurrentStreams;
      }
      setDisableConcurrentStreams(disableConcurrentStreams) {
        this.config.disableConcurrency = disableConcurrentStreams;
      }
      getUrlString(request) {
        return request.destination.toString();
      }
    };
    __name(_NodeHttp2ConnectionManager, "NodeHttp2ConnectionManager");
    var NodeHttp2ConnectionManager = _NodeHttp2ConnectionManager;
    var _NodeHttp2Handler = class _NodeHttp2Handler2 {
      constructor(options) {
        this.metadata = { handlerProtocol: "h2" };
        this.connectionManager = new NodeHttp2ConnectionManager({});
        this.configProvider = new Promise((resolve, reject) => {
          if (typeof options === "function") {
            options().then((opts) => {
              resolve(opts || {});
            }).catch(reject);
          } else {
            resolve(options || {});
          }
        });
      }
      /**
       * @returns the input if it is an HttpHandler of any class,
       * or instantiates a new instance of this handler.
       */
      static create(instanceOrOptions) {
        if (typeof (instanceOrOptions == null ? void 0 : instanceOrOptions.handle) === "function") {
          return instanceOrOptions;
        }
        return new _NodeHttp2Handler2(instanceOrOptions);
      }
      destroy() {
        this.connectionManager.destroy();
      }
      async handle(request, { abortSignal } = {}) {
        if (!this.config) {
          this.config = await this.configProvider;
          this.connectionManager.setDisableConcurrentStreams(this.config.disableConcurrentStreams || false);
          if (this.config.maxConcurrentStreams) {
            this.connectionManager.setMaxConcurrentStreams(this.config.maxConcurrentStreams);
          }
        }
        const { requestTimeout, disableConcurrentStreams } = this.config;
        return new Promise((_resolve, _reject) => {
          var _a;
          let fulfilled = false;
          let writeRequestBodyPromise = void 0;
          const resolve = /* @__PURE__ */ __name(async (arg) => {
            await writeRequestBodyPromise;
            _resolve(arg);
          }, "resolve");
          const reject = /* @__PURE__ */ __name(async (arg) => {
            await writeRequestBodyPromise;
            _reject(arg);
          }, "reject");
          if (abortSignal == null ? void 0 : abortSignal.aborted) {
            fulfilled = true;
            const abortError = new Error("Request aborted");
            abortError.name = "AbortError";
            reject(abortError);
            return;
          }
          const { hostname, method, port, protocol, query } = request;
          let auth = "";
          if (request.username != null || request.password != null) {
            const username = request.username ?? "";
            const password = request.password ?? "";
            auth = `${username}:${password}@`;
          }
          const authority = `${protocol}//${auth}${hostname}${port ? `:${port}` : ""}`;
          const requestContext = { destination: new URL(authority) };
          const session = this.connectionManager.lease(requestContext, {
            requestTimeout: (_a = this.config) == null ? void 0 : _a.sessionTimeout,
            disableConcurrentStreams: disableConcurrentStreams || false
          });
          const rejectWithDestroy = /* @__PURE__ */ __name((err) => {
            if (disableConcurrentStreams) {
              this.destroySession(session);
            }
            fulfilled = true;
            reject(err);
          }, "rejectWithDestroy");
          const queryString = (0, import_querystring_builder.buildQueryString)(query || {});
          let path = request.path;
          if (queryString) {
            path += `?${queryString}`;
          }
          if (request.fragment) {
            path += `#${request.fragment}`;
          }
          const req = session.request({
            ...request.headers,
            [import_http22.constants.HTTP2_HEADER_PATH]: path,
            [import_http22.constants.HTTP2_HEADER_METHOD]: method
          });
          session.ref();
          req.on("response", (headers) => {
            const httpResponse = new import_protocol_http11.HttpResponse({
              statusCode: headers[":status"] || -1,
              headers: getTransformedHeaders(headers),
              body: req
            });
            fulfilled = true;
            resolve({ response: httpResponse });
            if (disableConcurrentStreams) {
              session.close();
              this.connectionManager.deleteSession(authority, session);
            }
          });
          if (requestTimeout) {
            req.setTimeout(requestTimeout, () => {
              req.close();
              const timeoutError = new Error(`Stream timed out because of no activity for ${requestTimeout} ms`);
              timeoutError.name = "TimeoutError";
              rejectWithDestroy(timeoutError);
            });
          }
          if (abortSignal) {
            const onAbort = /* @__PURE__ */ __name(() => {
              req.close();
              const abortError = new Error("Request aborted");
              abortError.name = "AbortError";
              rejectWithDestroy(abortError);
            }, "onAbort");
            if (typeof abortSignal.addEventListener === "function") {
              const signal = abortSignal;
              signal.addEventListener("abort", onAbort, { once: true });
              req.once("close", () => signal.removeEventListener("abort", onAbort));
            } else {
              abortSignal.onabort = onAbort;
            }
          }
          req.on("frameError", (type, code, id) => {
            rejectWithDestroy(new Error(`Frame type id ${type} in stream id ${id} has failed with code ${code}.`));
          });
          req.on("error", rejectWithDestroy);
          req.on("aborted", () => {
            rejectWithDestroy(
              new Error(`HTTP/2 stream is abnormally aborted in mid-communication with result code ${req.rstCode}.`)
            );
          });
          req.on("close", () => {
            session.unref();
            if (disableConcurrentStreams) {
              session.destroy();
            }
            if (!fulfilled) {
              rejectWithDestroy(new Error("Unexpected error: http2 request did not get a response"));
            }
          });
          writeRequestBodyPromise = writeRequestBody(req, request, requestTimeout);
        });
      }
      updateHttpClientConfig(key, value) {
        this.config = void 0;
        this.configProvider = this.configProvider.then((config2) => {
          return {
            ...config2,
            [key]: value
          };
        });
      }
      httpHandlerConfigs() {
        return this.config ?? {};
      }
      /**
       * Destroys a session.
       * @param session The session to destroy.
       */
      destroySession(session) {
        if (!session.destroyed) {
          session.destroy();
        }
      }
    };
    __name(_NodeHttp2Handler, "NodeHttp2Handler");
    var NodeHttp2Handler = _NodeHttp2Handler;
    var _Collector = class _Collector extends import_stream.Writable {
      constructor() {
        super(...arguments);
        this.bufferedBytes = [];
      }
      _write(chunk, encoding, callback) {
        this.bufferedBytes.push(chunk);
        callback();
      }
    };
    __name(_Collector, "Collector");
    var Collector = _Collector;
    var streamCollector2 = /* @__PURE__ */ __name((stream) => {
      if (isReadableStreamInstance(stream)) {
        return collectReadableStream(stream);
      }
      return new Promise((resolve, reject) => {
        const collector = new Collector();
        stream.pipe(collector);
        stream.on("error", (err) => {
          collector.end();
          reject(err);
        });
        collector.on("error", reject);
        collector.on("finish", function() {
          const bytes = new Uint8Array(Buffer.concat(this.bufferedBytes));
          resolve(bytes);
        });
      });
    }, "streamCollector");
    var isReadableStreamInstance = /* @__PURE__ */ __name((stream) => typeof ReadableStream === "function" && stream instanceof ReadableStream, "isReadableStreamInstance");
    async function collectReadableStream(stream) {
      const chunks = [];
      const reader = stream.getReader();
      let isDone = false;
      let length = 0;
      while (!isDone) {
        const { done, value } = await reader.read();
        if (value) {
          chunks.push(value);
          length += value.length;
        }
        isDone = done;
      }
      const collected = new Uint8Array(length);
      let offset = 0;
      for (const chunk of chunks) {
        collected.set(chunk, offset);
        offset += chunk.length;
      }
      return collected;
    }
    __name(collectReadableStream, "collectReadableStream");
  }
});

// node_modules/@smithy/fetch-http-handler/dist-cjs/index.js
var require_dist_cjs15 = __commonJS({
  "node_modules/@smithy/fetch-http-handler/dist-cjs/index.js"(exports6, module) {
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      FetchHttpHandler: () => FetchHttpHandler2,
      keepAliveSupport: () => keepAliveSupport,
      streamCollector: () => streamCollector2
    });
    module.exports = __toCommonJS3(src_exports);
    var import_protocol_http11 = require_dist_cjs2();
    var import_querystring_builder = require_dist_cjs13();
    function createRequest(url, requestOptions) {
      return new Request(url, requestOptions);
    }
    __name(createRequest, "createRequest");
    function requestTimeout(timeoutInMs = 0) {
      return new Promise((resolve, reject) => {
        if (timeoutInMs) {
          setTimeout(() => {
            const timeoutError = new Error(`Request did not complete within ${timeoutInMs} ms`);
            timeoutError.name = "TimeoutError";
            reject(timeoutError);
          }, timeoutInMs);
        }
      });
    }
    __name(requestTimeout, "requestTimeout");
    var keepAliveSupport = {
      supported: void 0
    };
    var _FetchHttpHandler = class _FetchHttpHandler2 {
      /**
       * @returns the input if it is an HttpHandler of any class,
       * or instantiates a new instance of this handler.
       */
      static create(instanceOrOptions) {
        if (typeof (instanceOrOptions == null ? void 0 : instanceOrOptions.handle) === "function") {
          return instanceOrOptions;
        }
        return new _FetchHttpHandler2(instanceOrOptions);
      }
      constructor(options) {
        if (typeof options === "function") {
          this.configProvider = options().then((opts) => opts || {});
        } else {
          this.config = options ?? {};
          this.configProvider = Promise.resolve(this.config);
        }
        if (keepAliveSupport.supported === void 0) {
          keepAliveSupport.supported = Boolean(
            typeof Request !== "undefined" && "keepalive" in createRequest("https://[::1]")
          );
        }
      }
      destroy() {
      }
      async handle(request, { abortSignal } = {}) {
        var _a;
        if (!this.config) {
          this.config = await this.configProvider;
        }
        const requestTimeoutInMs = this.config.requestTimeout;
        const keepAlive = this.config.keepAlive === true;
        const credentials = this.config.credentials;
        if (abortSignal == null ? void 0 : abortSignal.aborted) {
          const abortError = new Error("Request aborted");
          abortError.name = "AbortError";
          return Promise.reject(abortError);
        }
        let path = request.path;
        const queryString = (0, import_querystring_builder.buildQueryString)(request.query || {});
        if (queryString) {
          path += `?${queryString}`;
        }
        if (request.fragment) {
          path += `#${request.fragment}`;
        }
        let auth = "";
        if (request.username != null || request.password != null) {
          const username = request.username ?? "";
          const password = request.password ?? "";
          auth = `${username}:${password}@`;
        }
        const { port, method } = request;
        const url = `${request.protocol}//${auth}${request.hostname}${port ? `:${port}` : ""}${path}`;
        const body = method === "GET" || method === "HEAD" ? void 0 : request.body;
        const requestOptions = {
          body,
          headers: new Headers(request.headers),
          method,
          credentials
        };
        if ((_a = this.config) == null ? void 0 : _a.cache) {
          requestOptions.cache = this.config.cache;
        }
        if (body) {
          requestOptions.duplex = "half";
        }
        if (typeof AbortController !== "undefined") {
          requestOptions.signal = abortSignal;
        }
        if (keepAliveSupport.supported) {
          requestOptions.keepalive = keepAlive;
        }
        if (typeof this.config.requestInit === "function") {
          Object.assign(requestOptions, this.config.requestInit(request));
        }
        let removeSignalEventListener = /* @__PURE__ */ __name(() => {
        }, "removeSignalEventListener");
        const fetchRequest = createRequest(url, requestOptions);
        const raceOfPromises = [
          fetch(fetchRequest).then((response) => {
            const fetchHeaders = response.headers;
            const transformedHeaders = {};
            for (const pair of fetchHeaders.entries()) {
              transformedHeaders[pair[0]] = pair[1];
            }
            const hasReadableStream = response.body != void 0;
            if (!hasReadableStream) {
              return response.blob().then((body2) => ({
                response: new import_protocol_http11.HttpResponse({
                  headers: transformedHeaders,
                  reason: response.statusText,
                  statusCode: response.status,
                  body: body2
                })
              }));
            }
            return {
              response: new import_protocol_http11.HttpResponse({
                headers: transformedHeaders,
                reason: response.statusText,
                statusCode: response.status,
                body: response.body
              })
            };
          }),
          requestTimeout(requestTimeoutInMs)
        ];
        if (abortSignal) {
          raceOfPromises.push(
            new Promise((resolve, reject) => {
              const onAbort = /* @__PURE__ */ __name(() => {
                const abortError = new Error("Request aborted");
                abortError.name = "AbortError";
                reject(abortError);
              }, "onAbort");
              if (typeof abortSignal.addEventListener === "function") {
                const signal = abortSignal;
                signal.addEventListener("abort", onAbort, { once: true });
                removeSignalEventListener = /* @__PURE__ */ __name(() => signal.removeEventListener("abort", onAbort), "removeSignalEventListener");
              } else {
                abortSignal.onabort = onAbort;
              }
            })
          );
        }
        return Promise.race(raceOfPromises).finally(removeSignalEventListener);
      }
      updateHttpClientConfig(key, value) {
        this.config = void 0;
        this.configProvider = this.configProvider.then((config2) => {
          config2[key] = value;
          return config2;
        });
      }
      httpHandlerConfigs() {
        return this.config ?? {};
      }
    };
    __name(_FetchHttpHandler, "FetchHttpHandler");
    var FetchHttpHandler2 = _FetchHttpHandler;
    var streamCollector2 = /* @__PURE__ */ __name(async (stream) => {
      var _a;
      if (typeof Blob === "function" && stream instanceof Blob || ((_a = stream.constructor) == null ? void 0 : _a.name) === "Blob") {
        return new Uint8Array(await stream.arrayBuffer());
      }
      return collectStream(stream);
    }, "streamCollector");
    async function collectStream(stream) {
      const chunks = [];
      const reader = stream.getReader();
      let isDone = false;
      let length = 0;
      while (!isDone) {
        const { done, value } = await reader.read();
        if (value) {
          chunks.push(value);
          length += value.length;
        }
        isDone = done;
      }
      const collected = new Uint8Array(length);
      let offset = 0;
      for (const chunk of chunks) {
        collected.set(chunk, offset);
        offset += chunk.length;
      }
      return collected;
    }
    __name(collectStream, "collectStream");
  }
});

// node_modules/@smithy/util-hex-encoding/dist-cjs/index.js
var require_dist_cjs16 = __commonJS({
  "node_modules/@smithy/util-hex-encoding/dist-cjs/index.js"(exports6, module) {
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      fromHex: () => fromHex,
      toHex: () => toHex
    });
    module.exports = __toCommonJS3(src_exports);
    var SHORT_TO_HEX = {};
    var HEX_TO_SHORT = {};
    for (let i = 0; i < 256; i++) {
      let encodedByte = i.toString(16).toLowerCase();
      if (encodedByte.length === 1) {
        encodedByte = `0${encodedByte}`;
      }
      SHORT_TO_HEX[i] = encodedByte;
      HEX_TO_SHORT[encodedByte] = i;
    }
    function fromHex(encoded) {
      if (encoded.length % 2 !== 0) {
        throw new Error("Hex encoded strings must have an even number length");
      }
      const out = new Uint8Array(encoded.length / 2);
      for (let i = 0; i < encoded.length; i += 2) {
        const encodedByte = encoded.slice(i, i + 2).toLowerCase();
        if (encodedByte in HEX_TO_SHORT) {
          out[i / 2] = HEX_TO_SHORT[encodedByte];
        } else {
          throw new Error(`Cannot decode unrecognized sequence ${encodedByte} as hexadecimal`);
        }
      }
      return out;
    }
    __name(fromHex, "fromHex");
    function toHex(bytes) {
      let out = "";
      for (let i = 0; i < bytes.byteLength; i++) {
        out += SHORT_TO_HEX[bytes[i]];
      }
      return out;
    }
    __name(toHex, "toHex");
  }
});

// node_modules/@smithy/util-stream/dist-cjs/stream-type-check.js
var require_stream_type_check = __commonJS({
  "node_modules/@smithy/util-stream/dist-cjs/stream-type-check.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.isBlob = exports6.isReadableStream = void 0;
    var isReadableStream2 = (stream) => {
      var _a;
      return typeof ReadableStream === "function" && (((_a = stream === null || stream === void 0 ? void 0 : stream.constructor) === null || _a === void 0 ? void 0 : _a.name) === ReadableStream.name || stream instanceof ReadableStream);
    };
    exports6.isReadableStream = isReadableStream2;
    var isBlob2 = (blob) => {
      var _a;
      return typeof Blob === "function" && (((_a = blob === null || blob === void 0 ? void 0 : blob.constructor) === null || _a === void 0 ? void 0 : _a.name) === Blob.name || blob instanceof Blob);
    };
    exports6.isBlob = isBlob2;
  }
});

// node_modules/@smithy/util-stream/dist-cjs/sdk-stream-mixin.browser.js
var require_sdk_stream_mixin_browser = __commonJS({
  "node_modules/@smithy/util-stream/dist-cjs/sdk-stream-mixin.browser.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.sdkStreamMixin = void 0;
    var fetch_http_handler_1 = require_dist_cjs15();
    var util_base64_1 = require_dist_cjs11();
    var util_hex_encoding_1 = require_dist_cjs16();
    var util_utf8_1 = require_dist_cjs10();
    var stream_type_check_1 = require_stream_type_check();
    var ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED = "The stream has already been transformed.";
    var sdkStreamMixin2 = (stream) => {
      var _a, _b;
      if (!isBlobInstance(stream) && !(0, stream_type_check_1.isReadableStream)(stream)) {
        const name = ((_b = (_a = stream === null || stream === void 0 ? void 0 : stream.__proto__) === null || _a === void 0 ? void 0 : _a.constructor) === null || _b === void 0 ? void 0 : _b.name) || stream;
        throw new Error(`Unexpected stream implementation, expect Blob or ReadableStream, got ${name}`);
      }
      let transformed = false;
      const transformToByteArray = async () => {
        if (transformed) {
          throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
        }
        transformed = true;
        return await (0, fetch_http_handler_1.streamCollector)(stream);
      };
      const blobToWebStream = (blob) => {
        if (typeof blob.stream !== "function") {
          throw new Error("Cannot transform payload Blob to web stream. Please make sure the Blob.stream() is polyfilled.\nIf you are using React Native, this API is not yet supported, see: https://react-native.canny.io/feature-requests/p/fetch-streaming-body");
        }
        return blob.stream();
      };
      return Object.assign(stream, {
        transformToByteArray,
        transformToString: async (encoding) => {
          const buf = await transformToByteArray();
          if (encoding === "base64") {
            return (0, util_base64_1.toBase64)(buf);
          } else if (encoding === "hex") {
            return (0, util_hex_encoding_1.toHex)(buf);
          } else if (encoding === void 0 || encoding === "utf8" || encoding === "utf-8") {
            return (0, util_utf8_1.toUtf8)(buf);
          } else if (typeof TextDecoder === "function") {
            return new TextDecoder(encoding).decode(buf);
          } else {
            throw new Error("TextDecoder is not available, please make sure polyfill is provided.");
          }
        },
        transformToWebStream: () => {
          if (transformed) {
            throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
          }
          transformed = true;
          if (isBlobInstance(stream)) {
            return blobToWebStream(stream);
          } else if ((0, stream_type_check_1.isReadableStream)(stream)) {
            return stream;
          } else {
            throw new Error(`Cannot transform payload to web stream, got ${stream}`);
          }
        }
      });
    };
    exports6.sdkStreamMixin = sdkStreamMixin2;
    var isBlobInstance = (stream) => typeof Blob === "function" && stream instanceof Blob;
  }
});

// node_modules/@smithy/util-stream/dist-cjs/sdk-stream-mixin.js
var require_sdk_stream_mixin = __commonJS({
  "node_modules/@smithy/util-stream/dist-cjs/sdk-stream-mixin.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.sdkStreamMixin = void 0;
    var node_http_handler_1 = require_dist_cjs14();
    var util_buffer_from_1 = require_dist_cjs9();
    var stream_1 = (init_stream(), __toCommonJS(stream_exports));
    var sdk_stream_mixin_browser_1 = require_sdk_stream_mixin_browser();
    var ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED = "The stream has already been transformed.";
    var sdkStreamMixin2 = (stream) => {
      var _a, _b;
      if (!(stream instanceof stream_1.Readable)) {
        try {
          return (0, sdk_stream_mixin_browser_1.sdkStreamMixin)(stream);
        } catch (e) {
          const name = ((_b = (_a = stream === null || stream === void 0 ? void 0 : stream.__proto__) === null || _a === void 0 ? void 0 : _a.constructor) === null || _b === void 0 ? void 0 : _b.name) || stream;
          throw new Error(`Unexpected stream implementation, expect Stream.Readable instance, got ${name}`);
        }
      }
      let transformed = false;
      const transformToByteArray = async () => {
        if (transformed) {
          throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
        }
        transformed = true;
        return await (0, node_http_handler_1.streamCollector)(stream);
      };
      return Object.assign(stream, {
        transformToByteArray,
        transformToString: async (encoding) => {
          const buf = await transformToByteArray();
          if (encoding === void 0 || Buffer.isEncoding(encoding)) {
            return (0, util_buffer_from_1.fromArrayBuffer)(buf.buffer, buf.byteOffset, buf.byteLength).toString(encoding);
          } else {
            const decoder = new TextDecoder(encoding);
            return decoder.decode(buf);
          }
        },
        transformToWebStream: () => {
          if (transformed) {
            throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
          }
          if (stream.readableFlowing !== null) {
            throw new Error("The stream has been consumed by other callbacks.");
          }
          if (typeof stream_1.Readable.toWeb !== "function") {
            throw new Error("Readable.toWeb() is not supported. Please make sure you are using Node.js >= 17.0.0, or polyfill is available.");
          }
          transformed = true;
          return stream_1.Readable.toWeb(stream);
        }
      });
    };
    exports6.sdkStreamMixin = sdkStreamMixin2;
  }
});

// node_modules/@smithy/util-stream/dist-cjs/splitStream.browser.js
var require_splitStream_browser = __commonJS({
  "node_modules/@smithy/util-stream/dist-cjs/splitStream.browser.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.splitStream = void 0;
    async function splitStream2(stream) {
      if (typeof stream.stream === "function") {
        stream = stream.stream();
      }
      const readableStream = stream;
      return readableStream.tee();
    }
    exports6.splitStream = splitStream2;
  }
});

// node_modules/@smithy/util-stream/dist-cjs/splitStream.js
var require_splitStream = __commonJS({
  "node_modules/@smithy/util-stream/dist-cjs/splitStream.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.splitStream = void 0;
    var stream_1 = (init_stream(), __toCommonJS(stream_exports));
    var splitStream_browser_1 = require_splitStream_browser();
    var stream_type_check_1 = require_stream_type_check();
    async function splitStream2(stream) {
      if ((0, stream_type_check_1.isReadableStream)(stream) || (0, stream_type_check_1.isBlob)(stream)) {
        return (0, splitStream_browser_1.splitStream)(stream);
      }
      const stream1 = new stream_1.PassThrough();
      const stream2 = new stream_1.PassThrough();
      stream.pipe(stream1);
      stream.pipe(stream2);
      return [stream1, stream2];
    }
    exports6.splitStream = splitStream2;
  }
});

// node_modules/@smithy/util-stream/dist-cjs/headStream.browser.js
var require_headStream_browser = __commonJS({
  "node_modules/@smithy/util-stream/dist-cjs/headStream.browser.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.headStream = void 0;
    async function headStream2(stream, bytes) {
      var _a;
      let byteLengthCounter = 0;
      const chunks = [];
      const reader = stream.getReader();
      let isDone = false;
      while (!isDone) {
        const { done, value } = await reader.read();
        if (value) {
          chunks.push(value);
          byteLengthCounter += (_a = value === null || value === void 0 ? void 0 : value.byteLength) !== null && _a !== void 0 ? _a : 0;
        }
        if (byteLengthCounter >= bytes) {
          break;
        }
        isDone = done;
      }
      reader.releaseLock();
      const collected = new Uint8Array(Math.min(bytes, byteLengthCounter));
      let offset = 0;
      for (const chunk of chunks) {
        if (chunk.byteLength > collected.byteLength - offset) {
          collected.set(chunk.subarray(0, collected.byteLength - offset), offset);
          break;
        } else {
          collected.set(chunk, offset);
        }
        offset += chunk.length;
      }
      return collected;
    }
    exports6.headStream = headStream2;
  }
});

// node_modules/@smithy/util-stream/dist-cjs/headStream.js
var require_headStream = __commonJS({
  "node_modules/@smithy/util-stream/dist-cjs/headStream.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.headStream = void 0;
    var stream_1 = (init_stream(), __toCommonJS(stream_exports));
    var headStream_browser_1 = require_headStream_browser();
    var stream_type_check_1 = require_stream_type_check();
    var headStream2 = (stream, bytes) => {
      if ((0, stream_type_check_1.isReadableStream)(stream)) {
        return (0, headStream_browser_1.headStream)(stream, bytes);
      }
      return new Promise((resolve, reject) => {
        const collector = new Collector();
        collector.limit = bytes;
        stream.pipe(collector);
        stream.on("error", (err) => {
          collector.end();
          reject(err);
        });
        collector.on("error", reject);
        collector.on("finish", function() {
          const bytes2 = new Uint8Array(Buffer.concat(this.buffers));
          resolve(bytes2);
        });
      });
    };
    exports6.headStream = headStream2;
    var Collector = class extends stream_1.Writable {
      constructor() {
        super(...arguments);
        this.buffers = [];
        this.limit = Infinity;
        this.bytesBuffered = 0;
      }
      _write(chunk, encoding, callback) {
        var _a;
        this.buffers.push(chunk);
        this.bytesBuffered += (_a = chunk.byteLength) !== null && _a !== void 0 ? _a : 0;
        if (this.bytesBuffered >= this.limit) {
          const excess = this.bytesBuffered - this.limit;
          const tailBuffer = this.buffers[this.buffers.length - 1];
          this.buffers[this.buffers.length - 1] = tailBuffer.subarray(0, tailBuffer.byteLength - excess);
          this.emit("finish");
        }
        callback();
      }
    };
  }
});

// node_modules/@smithy/util-stream/dist-cjs/checksum/ChecksumStream.js
var require_ChecksumStream = __commonJS({
  "node_modules/@smithy/util-stream/dist-cjs/checksum/ChecksumStream.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.ChecksumStream = void 0;
    var util_base64_1 = require_dist_cjs11();
    var stream_1 = (init_stream(), __toCommonJS(stream_exports));
    var ChecksumStream2 = class extends stream_1.Duplex {
      constructor({ expectedChecksum, checksum, source, checksumSourceLocation, base64Encoder }) {
        var _a, _b;
        super();
        if (typeof source.pipe === "function") {
          this.source = source;
        } else {
          throw new Error(`@smithy/util-stream: unsupported source type ${(_b = (_a = source === null || source === void 0 ? void 0 : source.constructor) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : source} in ChecksumStream.`);
        }
        this.base64Encoder = base64Encoder !== null && base64Encoder !== void 0 ? base64Encoder : util_base64_1.toBase64;
        this.expectedChecksum = expectedChecksum;
        this.checksum = checksum;
        this.checksumSourceLocation = checksumSourceLocation;
        this.source.pipe(this);
      }
      _read(size) {
      }
      _write(chunk, encoding, callback) {
        try {
          this.checksum.update(chunk);
          this.push(chunk);
        } catch (e) {
          return callback(e);
        }
        return callback();
      }
      async _final(callback) {
        try {
          const digest = await this.checksum.digest();
          const received = this.base64Encoder(digest);
          if (this.expectedChecksum !== received) {
            return callback(new Error(`Checksum mismatch: expected "${this.expectedChecksum}" but received "${received}" in response header "${this.checksumSourceLocation}".`));
          }
        } catch (e) {
          return callback(e);
        }
        this.push(null);
        return callback();
      }
    };
    exports6.ChecksumStream = ChecksumStream2;
  }
});

// node_modules/@smithy/util-stream/dist-cjs/checksum/ChecksumStream.browser.js
var require_ChecksumStream_browser = __commonJS({
  "node_modules/@smithy/util-stream/dist-cjs/checksum/ChecksumStream.browser.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.ChecksumStream = void 0;
    var ReadableStreamRef = typeof ReadableStream === "function" ? ReadableStream : function() {
    };
    var ChecksumStream2 = class extends ReadableStreamRef {
    };
    exports6.ChecksumStream = ChecksumStream2;
  }
});

// node_modules/@smithy/util-stream/dist-cjs/checksum/createChecksumStream.browser.js
var require_createChecksumStream_browser = __commonJS({
  "node_modules/@smithy/util-stream/dist-cjs/checksum/createChecksumStream.browser.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.createChecksumStream = void 0;
    var util_base64_1 = require_dist_cjs11();
    var stream_type_check_1 = require_stream_type_check();
    var ChecksumStream_browser_1 = require_ChecksumStream_browser();
    var createChecksumStream2 = ({ expectedChecksum, checksum, source, checksumSourceLocation, base64Encoder }) => {
      var _a, _b;
      if (!(0, stream_type_check_1.isReadableStream)(source)) {
        throw new Error(`@smithy/util-stream: unsupported source type ${(_b = (_a = source === null || source === void 0 ? void 0 : source.constructor) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : source} in ChecksumStream.`);
      }
      const encoder = base64Encoder !== null && base64Encoder !== void 0 ? base64Encoder : util_base64_1.toBase64;
      if (typeof TransformStream !== "function") {
        throw new Error("@smithy/util-stream: unable to instantiate ChecksumStream because API unavailable: ReadableStream/TransformStream.");
      }
      const transform = new TransformStream({
        start() {
        },
        async transform(chunk, controller) {
          checksum.update(chunk);
          controller.enqueue(chunk);
        },
        async flush(controller) {
          const digest = await checksum.digest();
          const received = encoder(digest);
          if (expectedChecksum !== received) {
            const error = new Error(`Checksum mismatch: expected "${expectedChecksum}" but received "${received}" in response header "${checksumSourceLocation}".`);
            controller.error(error);
          } else {
            controller.terminate();
          }
        }
      });
      source.pipeThrough(transform);
      const readable = transform.readable;
      Object.setPrototypeOf(readable, ChecksumStream_browser_1.ChecksumStream.prototype);
      return readable;
    };
    exports6.createChecksumStream = createChecksumStream2;
  }
});

// node_modules/@smithy/util-stream/dist-cjs/checksum/createChecksumStream.js
var require_createChecksumStream = __commonJS({
  "node_modules/@smithy/util-stream/dist-cjs/checksum/createChecksumStream.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.createChecksumStream = void 0;
    var stream_type_check_1 = require_stream_type_check();
    var ChecksumStream_1 = require_ChecksumStream();
    var createChecksumStream_browser_1 = require_createChecksumStream_browser();
    function createChecksumStream2(init) {
      if (typeof ReadableStream === "function" && (0, stream_type_check_1.isReadableStream)(init.source)) {
        return (0, createChecksumStream_browser_1.createChecksumStream)(init);
      }
      return new ChecksumStream_1.ChecksumStream(init);
    }
    exports6.createChecksumStream = createChecksumStream2;
  }
});

// node_modules/@smithy/util-stream/dist-cjs/index.js
var require_dist_cjs17 = __commonJS({
  "node_modules/@smithy/util-stream/dist-cjs/index.js"(exports6, module) {
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __reExport = (target, mod, secondTarget) => (__copyProps3(target, mod, "default"), secondTarget && __copyProps3(secondTarget, mod, "default"));
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      Uint8ArrayBlobAdapter: () => Uint8ArrayBlobAdapter2
    });
    module.exports = __toCommonJS3(src_exports);
    var import_util_base64 = require_dist_cjs11();
    var import_util_utf8 = require_dist_cjs10();
    function transformToString(payload, encoding = "utf-8") {
      if (encoding === "base64") {
        return (0, import_util_base64.toBase64)(payload);
      }
      return (0, import_util_utf8.toUtf8)(payload);
    }
    __name(transformToString, "transformToString");
    function transformFromString(str, encoding) {
      if (encoding === "base64") {
        return Uint8ArrayBlobAdapter2.mutate((0, import_util_base64.fromBase64)(str));
      }
      return Uint8ArrayBlobAdapter2.mutate((0, import_util_utf8.fromUtf8)(str));
    }
    __name(transformFromString, "transformFromString");
    var _Uint8ArrayBlobAdapter = class _Uint8ArrayBlobAdapter2 extends Uint8Array {
      /**
       * @param source - such as a string or Stream.
       * @returns a new Uint8ArrayBlobAdapter extending Uint8Array.
       */
      static fromString(source, encoding = "utf-8") {
        switch (typeof source) {
          case "string":
            return transformFromString(source, encoding);
          default:
            throw new Error(`Unsupported conversion from ${typeof source} to Uint8ArrayBlobAdapter.`);
        }
      }
      /**
       * @param source - Uint8Array to be mutated.
       * @returns the same Uint8Array but with prototype switched to Uint8ArrayBlobAdapter.
       */
      static mutate(source) {
        Object.setPrototypeOf(source, _Uint8ArrayBlobAdapter2.prototype);
        return source;
      }
      /**
       * @param encoding - default 'utf-8'.
       * @returns the blob as string.
       */
      transformToString(encoding = "utf-8") {
        return transformToString(this, encoding);
      }
    };
    __name(_Uint8ArrayBlobAdapter, "Uint8ArrayBlobAdapter");
    var Uint8ArrayBlobAdapter2 = _Uint8ArrayBlobAdapter;
    __reExport(src_exports, require_getAwsChunkedEncodingStream(), module.exports);
    __reExport(src_exports, require_sdk_stream_mixin(), module.exports);
    __reExport(src_exports, require_splitStream(), module.exports);
    __reExport(src_exports, require_headStream(), module.exports);
    __reExport(src_exports, require_stream_type_check(), module.exports);
    __reExport(src_exports, require_createChecksumStream(), module.exports);
    __reExport(src_exports, require_ChecksumStream(), module.exports);
  }
});

// node_modules/@smithy/core/dist-es/submodules/protocols/collect-stream-body.js
var import_util_stream, collectBody2;
var init_collect_stream_body = __esm({
  "node_modules/@smithy/core/dist-es/submodules/protocols/collect-stream-body.js"() {
    init_dirname();
    import_util_stream = __toESM(require_dist_cjs17());
    collectBody2 = async (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return import_util_stream.Uint8ArrayBlobAdapter.mutate(streamBody);
      }
      if (!streamBody) {
        return import_util_stream.Uint8ArrayBlobAdapter.mutate(new Uint8Array());
      }
      const fromContext = context.streamCollector(streamBody);
      return import_util_stream.Uint8ArrayBlobAdapter.mutate(await fromContext);
    };
  }
});

// node_modules/@smithy/core/dist-es/submodules/protocols/extended-encode-uri-component.js
function extendedEncodeURIComponent2(str) {
  return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {
    return "%" + c.charCodeAt(0).toString(16).toUpperCase();
  });
}
var init_extended_encode_uri_component = __esm({
  "node_modules/@smithy/core/dist-es/submodules/protocols/extended-encode-uri-component.js"() {
    init_dirname();
  }
});

// node_modules/@smithy/core/dist-es/submodules/protocols/resolve-path.js
var resolvedPath2;
var init_resolve_path = __esm({
  "node_modules/@smithy/core/dist-es/submodules/protocols/resolve-path.js"() {
    init_dirname();
    init_extended_encode_uri_component();
    resolvedPath2 = (resolvedPath3, input, memberName, labelValueProvider, uriLabel, isGreedyLabel) => {
      if (input != null && input[memberName] !== void 0) {
        const labelValue = labelValueProvider();
        if (labelValue.length <= 0) {
          throw new Error("Empty value provided for input HTTP label: " + memberName + ".");
        }
        resolvedPath3 = resolvedPath3.replace(uriLabel, isGreedyLabel ? labelValue.split("/").map((segment) => extendedEncodeURIComponent2(segment)).join("/") : extendedEncodeURIComponent2(labelValue));
      } else {
        throw new Error("No value provided for input HTTP label: " + memberName + ".");
      }
      return resolvedPath3;
    };
  }
});

// node_modules/@smithy/core/dist-es/submodules/protocols/requestBuilder.js
function requestBuilder(input, context) {
  return new RequestBuilder(input, context);
}
var import_protocol_http2, RequestBuilder;
var init_requestBuilder = __esm({
  "node_modules/@smithy/core/dist-es/submodules/protocols/requestBuilder.js"() {
    init_dirname();
    import_protocol_http2 = __toESM(require_dist_cjs2());
    init_resolve_path();
    RequestBuilder = class {
      constructor(input, context) {
        this.input = input;
        this.context = context;
        this.query = {};
        this.method = "";
        this.headers = {};
        this.path = "";
        this.body = null;
        this.hostname = "";
        this.resolvePathStack = [];
      }
      async build() {
        const { hostname, protocol = "https", port, path: basePath } = await this.context.endpoint();
        this.path = basePath;
        for (const resolvePath of this.resolvePathStack) {
          resolvePath(this.path);
        }
        return new import_protocol_http2.HttpRequest({
          protocol,
          hostname: this.hostname || hostname,
          port,
          method: this.method,
          path: this.path,
          query: this.query,
          body: this.body,
          headers: this.headers
        });
      }
      hn(hostname) {
        this.hostname = hostname;
        return this;
      }
      bp(uriLabel) {
        this.resolvePathStack.push((basePath) => {
          this.path = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + uriLabel;
        });
        return this;
      }
      p(memberName, labelValueProvider, uriLabel, isGreedyLabel) {
        this.resolvePathStack.push((path) => {
          this.path = resolvedPath2(path, this.input, memberName, labelValueProvider, uriLabel, isGreedyLabel);
        });
        return this;
      }
      h(headers) {
        this.headers = headers;
        return this;
      }
      q(query) {
        this.query = query;
        return this;
      }
      b(body) {
        this.body = body;
        return this;
      }
      m(method) {
        this.method = method;
        return this;
      }
    };
  }
});

// node_modules/@smithy/core/dist-es/submodules/protocols/index.js
var protocols_exports = {};
__export(protocols_exports, {
  RequestBuilder: () => RequestBuilder,
  collectBody: () => collectBody2,
  extendedEncodeURIComponent: () => extendedEncodeURIComponent2,
  requestBuilder: () => requestBuilder,
  resolvedPath: () => resolvedPath2
});
var init_protocols = __esm({
  "node_modules/@smithy/core/dist-es/submodules/protocols/index.js"() {
    init_dirname();
    init_collect_stream_body();
    init_extended_encode_uri_component();
    init_requestBuilder();
    init_resolve_path();
  }
});

// node_modules/@smithy/core/dist-es/protocols/requestBuilder.js
var init_requestBuilder2 = __esm({
  "node_modules/@smithy/core/dist-es/protocols/requestBuilder.js"() {
    init_dirname();
    init_protocols();
  }
});

// node_modules/@smithy/core/dist-es/setFeature.js
function setFeature(context, feature, value) {
  if (!context.__smithy_context) {
    context.__smithy_context = {
      features: {}
    };
  } else if (!context.__smithy_context.features) {
    context.__smithy_context.features = {};
  }
  context.__smithy_context.features[feature] = value;
}
var init_setFeature = __esm({
  "node_modules/@smithy/core/dist-es/setFeature.js"() {
    init_dirname();
  }
});

// node_modules/@smithy/core/dist-es/util-identity-and-auth/DefaultIdentityProviderConfig.js
var DefaultIdentityProviderConfig;
var init_DefaultIdentityProviderConfig = __esm({
  "node_modules/@smithy/core/dist-es/util-identity-and-auth/DefaultIdentityProviderConfig.js"() {
    init_dirname();
    DefaultIdentityProviderConfig = class {
      constructor(config2) {
        this.authSchemes = /* @__PURE__ */ new Map();
        for (const [key, value] of Object.entries(config2)) {
          if (value !== void 0) {
            this.authSchemes.set(key, value);
          }
        }
      }
      getIdentityProvider(schemeId) {
        return this.authSchemes.get(schemeId);
      }
    };
  }
});

// node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/httpApiKeyAuth.js
var import_protocol_http3, import_types4, HttpApiKeyAuthSigner;
var init_httpApiKeyAuth = __esm({
  "node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/httpApiKeyAuth.js"() {
    init_dirname();
    import_protocol_http3 = __toESM(require_dist_cjs2());
    import_types4 = __toESM(require_dist_cjs());
    HttpApiKeyAuthSigner = class {
      async sign(httpRequest, identity, signingProperties) {
        if (!signingProperties) {
          throw new Error("request could not be signed with `apiKey` since the `name` and `in` signer properties are missing");
        }
        if (!signingProperties.name) {
          throw new Error("request could not be signed with `apiKey` since the `name` signer property is missing");
        }
        if (!signingProperties.in) {
          throw new Error("request could not be signed with `apiKey` since the `in` signer property is missing");
        }
        if (!identity.apiKey) {
          throw new Error("request could not be signed with `apiKey` since the `apiKey` is not defined");
        }
        const clonedRequest = import_protocol_http3.HttpRequest.clone(httpRequest);
        if (signingProperties.in === import_types4.HttpApiKeyAuthLocation.QUERY) {
          clonedRequest.query[signingProperties.name] = identity.apiKey;
        } else if (signingProperties.in === import_types4.HttpApiKeyAuthLocation.HEADER) {
          clonedRequest.headers[signingProperties.name] = signingProperties.scheme ? `${signingProperties.scheme} ${identity.apiKey}` : identity.apiKey;
        } else {
          throw new Error("request can only be signed with `apiKey` locations `query` or `header`, but found: `" + signingProperties.in + "`");
        }
        return clonedRequest;
      }
    };
  }
});

// node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/httpBearerAuth.js
var import_protocol_http4, HttpBearerAuthSigner;
var init_httpBearerAuth = __esm({
  "node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/httpBearerAuth.js"() {
    init_dirname();
    import_protocol_http4 = __toESM(require_dist_cjs2());
    HttpBearerAuthSigner = class {
      async sign(httpRequest, identity, signingProperties) {
        const clonedRequest = import_protocol_http4.HttpRequest.clone(httpRequest);
        if (!identity.token) {
          throw new Error("request could not be signed with `token` since the `token` is not defined");
        }
        clonedRequest.headers["Authorization"] = `Bearer ${identity.token}`;
        return clonedRequest;
      }
    };
  }
});

// node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/noAuth.js
var NoAuthSigner;
var init_noAuth = __esm({
  "node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/noAuth.js"() {
    init_dirname();
    NoAuthSigner = class {
      async sign(httpRequest, identity, signingProperties) {
        return httpRequest;
      }
    };
  }
});

// node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/index.js
var init_httpAuthSchemes = __esm({
  "node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/index.js"() {
    init_dirname();
    init_httpApiKeyAuth();
    init_httpBearerAuth();
    init_noAuth();
  }
});

// node_modules/@smithy/core/dist-es/util-identity-and-auth/memoizeIdentityProvider.js
var createIsIdentityExpiredFunction, EXPIRATION_MS, isIdentityExpired, doesIdentityRequireRefresh, memoizeIdentityProvider;
var init_memoizeIdentityProvider = __esm({
  "node_modules/@smithy/core/dist-es/util-identity-and-auth/memoizeIdentityProvider.js"() {
    init_dirname();
    createIsIdentityExpiredFunction = (expirationMs) => (identity) => doesIdentityRequireRefresh(identity) && identity.expiration.getTime() - Date.now() < expirationMs;
    EXPIRATION_MS = 3e5;
    isIdentityExpired = createIsIdentityExpiredFunction(EXPIRATION_MS);
    doesIdentityRequireRefresh = (identity) => identity.expiration !== void 0;
    memoizeIdentityProvider = (provider, isExpired, requiresRefresh) => {
      if (provider === void 0) {
        return void 0;
      }
      const normalizedProvider = typeof provider !== "function" ? async () => Promise.resolve(provider) : provider;
      let resolved;
      let pending;
      let hasResult;
      let isConstant = false;
      const coalesceProvider = async (options) => {
        if (!pending) {
          pending = normalizedProvider(options);
        }
        try {
          resolved = await pending;
          hasResult = true;
          isConstant = false;
        } finally {
          pending = void 0;
        }
        return resolved;
      };
      if (isExpired === void 0) {
        return async (options) => {
          if (!hasResult || options?.forceRefresh) {
            resolved = await coalesceProvider(options);
          }
          return resolved;
        };
      }
      return async (options) => {
        if (!hasResult || options?.forceRefresh) {
          resolved = await coalesceProvider(options);
        }
        if (isConstant) {
          return resolved;
        }
        if (!requiresRefresh(resolved)) {
          isConstant = true;
          return resolved;
        }
        if (isExpired(resolved)) {
          await coalesceProvider(options);
          return resolved;
        }
        return resolved;
      };
    };
  }
});

// node_modules/@smithy/core/dist-es/util-identity-and-auth/index.js
var init_util_identity_and_auth = __esm({
  "node_modules/@smithy/core/dist-es/util-identity-and-auth/index.js"() {
    init_dirname();
    init_DefaultIdentityProviderConfig();
    init_httpAuthSchemes();
    init_memoizeIdentityProvider();
  }
});

// node_modules/@smithy/core/dist-es/index.js
var dist_es_exports = {};
__export(dist_es_exports, {
  DefaultIdentityProviderConfig: () => DefaultIdentityProviderConfig,
  EXPIRATION_MS: () => EXPIRATION_MS,
  HttpApiKeyAuthSigner: () => HttpApiKeyAuthSigner,
  HttpBearerAuthSigner: () => HttpBearerAuthSigner,
  NoAuthSigner: () => NoAuthSigner,
  createIsIdentityExpiredFunction: () => createIsIdentityExpiredFunction,
  createPaginator: () => createPaginator,
  doesIdentityRequireRefresh: () => doesIdentityRequireRefresh,
  getHttpAuthSchemeEndpointRuleSetPlugin: () => getHttpAuthSchemeEndpointRuleSetPlugin,
  getHttpAuthSchemePlugin: () => getHttpAuthSchemePlugin,
  getHttpSigningPlugin: () => getHttpSigningPlugin,
  getSmithyContext: () => getSmithyContext,
  httpAuthSchemeEndpointRuleSetMiddlewareOptions: () => httpAuthSchemeEndpointRuleSetMiddlewareOptions,
  httpAuthSchemeMiddleware: () => httpAuthSchemeMiddleware,
  httpAuthSchemeMiddlewareOptions: () => httpAuthSchemeMiddlewareOptions,
  httpSigningMiddleware: () => httpSigningMiddleware,
  httpSigningMiddlewareOptions: () => httpSigningMiddlewareOptions,
  isIdentityExpired: () => isIdentityExpired,
  memoizeIdentityProvider: () => memoizeIdentityProvider,
  normalizeProvider: () => normalizeProvider,
  requestBuilder: () => requestBuilder,
  setFeature: () => setFeature
});
var init_dist_es = __esm({
  "node_modules/@smithy/core/dist-es/index.js"() {
    init_dirname();
    init_getSmithyContext();
    init_middleware_http_auth_scheme();
    init_middleware_http_signing();
    init_normalizeProvider();
    init_createPaginator();
    init_requestBuilder2();
    init_setFeature();
    init_util_identity_and_auth();
  }
});

// node_modules/@smithy/util-endpoints/dist-cjs/index.js
var require_dist_cjs18 = __commonJS({
  "node_modules/@smithy/util-endpoints/dist-cjs/index.js"(exports6, module) {
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      EndpointCache: () => EndpointCache,
      EndpointError: () => EndpointError2,
      customEndpointFunctions: () => customEndpointFunctions,
      isIpAddress: () => isIpAddress2,
      isValidHostLabel: () => isValidHostLabel,
      resolveEndpoint: () => resolveEndpoint2
    });
    module.exports = __toCommonJS3(src_exports);
    var _EndpointCache = class _EndpointCache {
      /**
       * @param [size] - desired average maximum capacity. A buffer of 10 additional keys will be allowed
       *                 before keys are dropped.
       * @param [params] - list of params to consider as part of the cache key.
       *
       * If the params list is not populated, no caching will happen.
       * This may be out of order depending on how the object is created and arrives to this class.
       */
      constructor({ size, params }) {
        this.data = /* @__PURE__ */ new Map();
        this.parameters = [];
        this.capacity = size ?? 50;
        if (params) {
          this.parameters = params;
        }
      }
      /**
       * @param endpointParams - query for endpoint.
       * @param resolver - provider of the value if not present.
       * @returns endpoint corresponding to the query.
       */
      get(endpointParams, resolver) {
        const key = this.hash(endpointParams);
        if (key === false) {
          return resolver();
        }
        if (!this.data.has(key)) {
          if (this.data.size > this.capacity + 10) {
            const keys = this.data.keys();
            let i = 0;
            while (true) {
              const { value, done } = keys.next();
              this.data.delete(value);
              if (done || ++i > 10) {
                break;
              }
            }
          }
          this.data.set(key, resolver());
        }
        return this.data.get(key);
      }
      size() {
        return this.data.size;
      }
      /**
       * @returns cache key or false if not cachable.
       */
      hash(endpointParams) {
        let buffer = "";
        const { parameters } = this;
        if (parameters.length === 0) {
          return false;
        }
        for (const param of parameters) {
          const val2 = String(endpointParams[param] ?? "");
          if (val2.includes("|;")) {
            return false;
          }
          buffer += val2 + "|;";
        }
        return buffer;
      }
    };
    __name(_EndpointCache, "EndpointCache");
    var EndpointCache = _EndpointCache;
    var IP_V4_REGEX = new RegExp(
      `^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}$`
    );
    var isIpAddress2 = /* @__PURE__ */ __name((value) => IP_V4_REGEX.test(value) || value.startsWith("[") && value.endsWith("]"), "isIpAddress");
    var VALID_HOST_LABEL_REGEX = new RegExp(`^(?!.*-$)(?!-)[a-zA-Z0-9-]{1,63}$`);
    var isValidHostLabel = /* @__PURE__ */ __name((value, allowSubDomains = false) => {
      if (!allowSubDomains) {
        return VALID_HOST_LABEL_REGEX.test(value);
      }
      const labels = value.split(".");
      for (const label of labels) {
        if (!isValidHostLabel(label)) {
          return false;
        }
      }
      return true;
    }, "isValidHostLabel");
    var customEndpointFunctions = {};
    var debugId = "endpoints";
    function toDebugString(input) {
      if (typeof input !== "object" || input == null) {
        return input;
      }
      if ("ref" in input) {
        return `$${toDebugString(input.ref)}`;
      }
      if ("fn" in input) {
        return `${input.fn}(${(input.argv || []).map(toDebugString).join(", ")})`;
      }
      return JSON.stringify(input, null, 2);
    }
    __name(toDebugString, "toDebugString");
    var _EndpointError = class _EndpointError extends Error {
      constructor(message) {
        super(message);
        this.name = "EndpointError";
      }
    };
    __name(_EndpointError, "EndpointError");
    var EndpointError2 = _EndpointError;
    var booleanEquals = /* @__PURE__ */ __name((value1, value2) => value1 === value2, "booleanEquals");
    var getAttrPathList = /* @__PURE__ */ __name((path) => {
      const parts = path.split(".");
      const pathList = [];
      for (const part of parts) {
        const squareBracketIndex = part.indexOf("[");
        if (squareBracketIndex !== -1) {
          if (part.indexOf("]") !== part.length - 1) {
            throw new EndpointError2(`Path: '${path}' does not end with ']'`);
          }
          const arrayIndex = part.slice(squareBracketIndex + 1, -1);
          if (Number.isNaN(parseInt(arrayIndex))) {
            throw new EndpointError2(`Invalid array index: '${arrayIndex}' in path: '${path}'`);
          }
          if (squareBracketIndex !== 0) {
            pathList.push(part.slice(0, squareBracketIndex));
          }
          pathList.push(arrayIndex);
        } else {
          pathList.push(part);
        }
      }
      return pathList;
    }, "getAttrPathList");
    var getAttr = /* @__PURE__ */ __name((value, path) => getAttrPathList(path).reduce((acc, index) => {
      if (typeof acc !== "object") {
        throw new EndpointError2(`Index '${index}' in '${path}' not found in '${JSON.stringify(value)}'`);
      } else if (Array.isArray(acc)) {
        return acc[parseInt(index)];
      }
      return acc[index];
    }, value), "getAttr");
    var isSet = /* @__PURE__ */ __name((value) => value != null, "isSet");
    var not = /* @__PURE__ */ __name((value) => !value, "not");
    var import_types32 = require_dist_cjs();
    var DEFAULT_PORTS = {
      [import_types32.EndpointURLScheme.HTTP]: 80,
      [import_types32.EndpointURLScheme.HTTPS]: 443
    };
    var parseURL = /* @__PURE__ */ __name((value) => {
      const whatwgURL = (() => {
        try {
          if (value instanceof URL) {
            return value;
          }
          if (typeof value === "object" && "hostname" in value) {
            const { hostname: hostname2, port, protocol: protocol2 = "", path = "", query = {} } = value;
            const url = new URL(`${protocol2}//${hostname2}${port ? `:${port}` : ""}${path}`);
            url.search = Object.entries(query).map(([k, v]) => `${k}=${v}`).join("&");
            return url;
          }
          return new URL(value);
        } catch (error) {
          return null;
        }
      })();
      if (!whatwgURL) {
        console.error(`Unable to parse ${JSON.stringify(value)} as a whatwg URL.`);
        return null;
      }
      const urlString = whatwgURL.href;
      const { host, hostname, pathname, protocol, search } = whatwgURL;
      if (search) {
        return null;
      }
      const scheme = protocol.slice(0, -1);
      if (!Object.values(import_types32.EndpointURLScheme).includes(scheme)) {
        return null;
      }
      const isIp = isIpAddress2(hostname);
      const inputContainsDefaultPort = urlString.includes(`${host}:${DEFAULT_PORTS[scheme]}`) || typeof value === "string" && value.includes(`${host}:${DEFAULT_PORTS[scheme]}`);
      const authority = `${host}${inputContainsDefaultPort ? `:${DEFAULT_PORTS[scheme]}` : ``}`;
      return {
        scheme,
        authority,
        path: pathname,
        normalizedPath: pathname.endsWith("/") ? pathname : `${pathname}/`,
        isIp
      };
    }, "parseURL");
    var stringEquals = /* @__PURE__ */ __name((value1, value2) => value1 === value2, "stringEquals");
    var substring = /* @__PURE__ */ __name((input, start, stop, reverse) => {
      if (start >= stop || input.length < stop) {
        return null;
      }
      if (!reverse) {
        return input.substring(start, stop);
      }
      return input.substring(input.length - stop, input.length - start);
    }, "substring");
    var uriEncode = /* @__PURE__ */ __name((value) => encodeURIComponent(value).replace(/[!*'()]/g, (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`), "uriEncode");
    var endpointFunctions = {
      booleanEquals,
      getAttr,
      isSet,
      isValidHostLabel,
      not,
      parseURL,
      stringEquals,
      substring,
      uriEncode
    };
    var evaluateTemplate = /* @__PURE__ */ __name((template, options) => {
      const evaluatedTemplateArr = [];
      const templateContext = {
        ...options.endpointParams,
        ...options.referenceRecord
      };
      let currentIndex = 0;
      while (currentIndex < template.length) {
        const openingBraceIndex = template.indexOf("{", currentIndex);
        if (openingBraceIndex === -1) {
          evaluatedTemplateArr.push(template.slice(currentIndex));
          break;
        }
        evaluatedTemplateArr.push(template.slice(currentIndex, openingBraceIndex));
        const closingBraceIndex = template.indexOf("}", openingBraceIndex);
        if (closingBraceIndex === -1) {
          evaluatedTemplateArr.push(template.slice(openingBraceIndex));
          break;
        }
        if (template[openingBraceIndex + 1] === "{" && template[closingBraceIndex + 1] === "}") {
          evaluatedTemplateArr.push(template.slice(openingBraceIndex + 1, closingBraceIndex));
          currentIndex = closingBraceIndex + 2;
        }
        const parameterName = template.substring(openingBraceIndex + 1, closingBraceIndex);
        if (parameterName.includes("#")) {
          const [refName, attrName] = parameterName.split("#");
          evaluatedTemplateArr.push(getAttr(templateContext[refName], attrName));
        } else {
          evaluatedTemplateArr.push(templateContext[parameterName]);
        }
        currentIndex = closingBraceIndex + 1;
      }
      return evaluatedTemplateArr.join("");
    }, "evaluateTemplate");
    var getReferenceValue = /* @__PURE__ */ __name(({ ref }, options) => {
      const referenceRecord = {
        ...options.endpointParams,
        ...options.referenceRecord
      };
      return referenceRecord[ref];
    }, "getReferenceValue");
    var evaluateExpression = /* @__PURE__ */ __name((obj, keyName, options) => {
      if (typeof obj === "string") {
        return evaluateTemplate(obj, options);
      } else if (obj["fn"]) {
        return callFunction(obj, options);
      } else if (obj["ref"]) {
        return getReferenceValue(obj, options);
      }
      throw new EndpointError2(`'${keyName}': ${String(obj)} is not a string, function or reference.`);
    }, "evaluateExpression");
    var callFunction = /* @__PURE__ */ __name(({ fn, argv: argv2 }, options) => {
      const evaluatedArgs = argv2.map(
        (arg) => ["boolean", "number"].includes(typeof arg) ? arg : evaluateExpression(arg, "arg", options)
      );
      const fnSegments = fn.split(".");
      if (fnSegments[0] in customEndpointFunctions && fnSegments[1] != null) {
        return customEndpointFunctions[fnSegments[0]][fnSegments[1]](...evaluatedArgs);
      }
      return endpointFunctions[fn](...evaluatedArgs);
    }, "callFunction");
    var evaluateCondition = /* @__PURE__ */ __name(({ assign, ...fnArgs }, options) => {
      var _a, _b;
      if (assign && assign in options.referenceRecord) {
        throw new EndpointError2(`'${assign}' is already defined in Reference Record.`);
      }
      const value = callFunction(fnArgs, options);
      (_b = (_a = options.logger) == null ? void 0 : _a.debug) == null ? void 0 : _b.call(_a, `${debugId} evaluateCondition: ${toDebugString(fnArgs)} = ${toDebugString(value)}`);
      return {
        result: value === "" ? true : !!value,
        ...assign != null && { toAssign: { name: assign, value } }
      };
    }, "evaluateCondition");
    var evaluateConditions = /* @__PURE__ */ __name((conditions = [], options) => {
      var _a, _b;
      const conditionsReferenceRecord = {};
      for (const condition of conditions) {
        const { result, toAssign } = evaluateCondition(condition, {
          ...options,
          referenceRecord: {
            ...options.referenceRecord,
            ...conditionsReferenceRecord
          }
        });
        if (!result) {
          return { result };
        }
        if (toAssign) {
          conditionsReferenceRecord[toAssign.name] = toAssign.value;
          (_b = (_a = options.logger) == null ? void 0 : _a.debug) == null ? void 0 : _b.call(_a, `${debugId} assign: ${toAssign.name} := ${toDebugString(toAssign.value)}`);
        }
      }
      return { result: true, referenceRecord: conditionsReferenceRecord };
    }, "evaluateConditions");
    var getEndpointHeaders = /* @__PURE__ */ __name((headers, options) => Object.entries(headers).reduce(
      (acc, [headerKey, headerVal]) => ({
        ...acc,
        [headerKey]: headerVal.map((headerValEntry) => {
          const processedExpr = evaluateExpression(headerValEntry, "Header value entry", options);
          if (typeof processedExpr !== "string") {
            throw new EndpointError2(`Header '${headerKey}' value '${processedExpr}' is not a string`);
          }
          return processedExpr;
        })
      }),
      {}
    ), "getEndpointHeaders");
    var getEndpointProperty = /* @__PURE__ */ __name((property, options) => {
      if (Array.isArray(property)) {
        return property.map((propertyEntry) => getEndpointProperty(propertyEntry, options));
      }
      switch (typeof property) {
        case "string":
          return evaluateTemplate(property, options);
        case "object":
          if (property === null) {
            throw new EndpointError2(`Unexpected endpoint property: ${property}`);
          }
          return getEndpointProperties(property, options);
        case "boolean":
          return property;
        default:
          throw new EndpointError2(`Unexpected endpoint property type: ${typeof property}`);
      }
    }, "getEndpointProperty");
    var getEndpointProperties = /* @__PURE__ */ __name((properties, options) => Object.entries(properties).reduce(
      (acc, [propertyKey, propertyVal]) => ({
        ...acc,
        [propertyKey]: getEndpointProperty(propertyVal, options)
      }),
      {}
    ), "getEndpointProperties");
    var getEndpointUrl = /* @__PURE__ */ __name((endpointUrl, options) => {
      const expression = evaluateExpression(endpointUrl, "Endpoint URL", options);
      if (typeof expression === "string") {
        try {
          return new URL(expression);
        } catch (error) {
          console.error(`Failed to construct URL with ${expression}`, error);
          throw error;
        }
      }
      throw new EndpointError2(`Endpoint URL must be a string, got ${typeof expression}`);
    }, "getEndpointUrl");
    var evaluateEndpointRule = /* @__PURE__ */ __name((endpointRule, options) => {
      var _a, _b;
      const { conditions, endpoint } = endpointRule;
      const { result, referenceRecord } = evaluateConditions(conditions, options);
      if (!result) {
        return;
      }
      const endpointRuleOptions = {
        ...options,
        referenceRecord: { ...options.referenceRecord, ...referenceRecord }
      };
      const { url, properties, headers } = endpoint;
      (_b = (_a = options.logger) == null ? void 0 : _a.debug) == null ? void 0 : _b.call(_a, `${debugId} Resolving endpoint from template: ${toDebugString(endpoint)}`);
      return {
        ...headers != void 0 && {
          headers: getEndpointHeaders(headers, endpointRuleOptions)
        },
        ...properties != void 0 && {
          properties: getEndpointProperties(properties, endpointRuleOptions)
        },
        url: getEndpointUrl(url, endpointRuleOptions)
      };
    }, "evaluateEndpointRule");
    var evaluateErrorRule = /* @__PURE__ */ __name((errorRule, options) => {
      const { conditions, error } = errorRule;
      const { result, referenceRecord } = evaluateConditions(conditions, options);
      if (!result) {
        return;
      }
      throw new EndpointError2(
        evaluateExpression(error, "Error", {
          ...options,
          referenceRecord: { ...options.referenceRecord, ...referenceRecord }
        })
      );
    }, "evaluateErrorRule");
    var evaluateTreeRule = /* @__PURE__ */ __name((treeRule, options) => {
      const { conditions, rules } = treeRule;
      const { result, referenceRecord } = evaluateConditions(conditions, options);
      if (!result) {
        return;
      }
      return evaluateRules(rules, {
        ...options,
        referenceRecord: { ...options.referenceRecord, ...referenceRecord }
      });
    }, "evaluateTreeRule");
    var evaluateRules = /* @__PURE__ */ __name((rules, options) => {
      for (const rule of rules) {
        if (rule.type === "endpoint") {
          const endpointOrUndefined = evaluateEndpointRule(rule, options);
          if (endpointOrUndefined) {
            return endpointOrUndefined;
          }
        } else if (rule.type === "error") {
          evaluateErrorRule(rule, options);
        } else if (rule.type === "tree") {
          const endpointOrUndefined = evaluateTreeRule(rule, options);
          if (endpointOrUndefined) {
            return endpointOrUndefined;
          }
        } else {
          throw new EndpointError2(`Unknown endpoint rule: ${rule}`);
        }
      }
      throw new EndpointError2(`Rules evaluation failed`);
    }, "evaluateRules");
    var resolveEndpoint2 = /* @__PURE__ */ __name((ruleSetObject, options) => {
      var _a, _b, _c, _d;
      const { endpointParams, logger } = options;
      const { parameters, rules } = ruleSetObject;
      (_b = (_a = options.logger) == null ? void 0 : _a.debug) == null ? void 0 : _b.call(_a, `${debugId} Initial EndpointParams: ${toDebugString(endpointParams)}`);
      const paramsWithDefault = Object.entries(parameters).filter(([, v]) => v.default != null).map(([k, v]) => [k, v.default]);
      if (paramsWithDefault.length > 0) {
        for (const [paramKey, paramDefaultValue] of paramsWithDefault) {
          endpointParams[paramKey] = endpointParams[paramKey] ?? paramDefaultValue;
        }
      }
      const requiredParams = Object.entries(parameters).filter(([, v]) => v.required).map(([k]) => k);
      for (const requiredParam of requiredParams) {
        if (endpointParams[requiredParam] == null) {
          throw new EndpointError2(`Missing required parameter: '${requiredParam}'`);
        }
      }
      const endpoint = evaluateRules(rules, { endpointParams, logger, referenceRecord: {} });
      (_d = (_c = options.logger) == null ? void 0 : _c.debug) == null ? void 0 : _d.call(_c, `${debugId} Resolved endpoint: ${toDebugString(endpoint)}`);
      return endpoint;
    }, "resolveEndpoint");
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/index.js
var require_dist_cjs19 = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/index.js"(exports6, module) {
    "use strict";
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      ConditionObject: () => import_util_endpoints.ConditionObject,
      DeprecatedObject: () => import_util_endpoints.DeprecatedObject,
      EndpointError: () => import_util_endpoints.EndpointError,
      EndpointObject: () => import_util_endpoints.EndpointObject,
      EndpointObjectHeaders: () => import_util_endpoints.EndpointObjectHeaders,
      EndpointObjectProperties: () => import_util_endpoints.EndpointObjectProperties,
      EndpointParams: () => import_util_endpoints.EndpointParams,
      EndpointResolverOptions: () => import_util_endpoints.EndpointResolverOptions,
      EndpointRuleObject: () => import_util_endpoints.EndpointRuleObject,
      ErrorRuleObject: () => import_util_endpoints.ErrorRuleObject,
      EvaluateOptions: () => import_util_endpoints.EvaluateOptions,
      Expression: () => import_util_endpoints.Expression,
      FunctionArgv: () => import_util_endpoints.FunctionArgv,
      FunctionObject: () => import_util_endpoints.FunctionObject,
      FunctionReturn: () => import_util_endpoints.FunctionReturn,
      ParameterObject: () => import_util_endpoints.ParameterObject,
      ReferenceObject: () => import_util_endpoints.ReferenceObject,
      ReferenceRecord: () => import_util_endpoints.ReferenceRecord,
      RuleSetObject: () => import_util_endpoints.RuleSetObject,
      RuleSetRules: () => import_util_endpoints.RuleSetRules,
      TreeRuleObject: () => import_util_endpoints.TreeRuleObject,
      awsEndpointFunctions: () => awsEndpointFunctions,
      getUserAgentPrefix: () => getUserAgentPrefix,
      isIpAddress: () => import_util_endpoints.isIpAddress,
      partition: () => partition,
      resolveEndpoint: () => import_util_endpoints.resolveEndpoint,
      setPartitionInfo: () => setPartitionInfo,
      useDefaultPartitionInfo: () => useDefaultPartitionInfo
    });
    module.exports = __toCommonJS3(src_exports);
    var import_util_endpoints = require_dist_cjs18();
    var isVirtualHostableS3Bucket = /* @__PURE__ */ __name((value, allowSubDomains = false) => {
      if (allowSubDomains) {
        for (const label of value.split(".")) {
          if (!isVirtualHostableS3Bucket(label)) {
            return false;
          }
        }
        return true;
      }
      if (!(0, import_util_endpoints.isValidHostLabel)(value)) {
        return false;
      }
      if (value.length < 3 || value.length > 63) {
        return false;
      }
      if (value !== value.toLowerCase()) {
        return false;
      }
      if ((0, import_util_endpoints.isIpAddress)(value)) {
        return false;
      }
      return true;
    }, "isVirtualHostableS3Bucket");
    var ARN_DELIMITER = ":";
    var RESOURCE_DELIMITER = "/";
    var parseArn = /* @__PURE__ */ __name((value) => {
      const segments = value.split(ARN_DELIMITER);
      if (segments.length < 6)
        return null;
      const [arn, partition2, service, region, accountId, ...resourcePath] = segments;
      if (arn !== "arn" || partition2 === "" || service === "" || resourcePath.join(ARN_DELIMITER) === "")
        return null;
      const resourceId = resourcePath.map((resource) => resource.split(RESOURCE_DELIMITER)).flat();
      return {
        partition: partition2,
        service,
        region,
        accountId,
        resourceId
      };
    }, "parseArn");
    var partitions_default = {
      partitions: [{
        id: "aws",
        outputs: {
          dnsSuffix: "amazonaws.com",
          dualStackDnsSuffix: "api.aws",
          implicitGlobalRegion: "us-east-1",
          name: "aws",
          supportsDualStack: true,
          supportsFIPS: true
        },
        regionRegex: "^(us|eu|ap|sa|ca|me|af|il|mx)\\-\\w+\\-\\d+$",
        regions: {
          "af-south-1": {
            description: "Africa (Cape Town)"
          },
          "ap-east-1": {
            description: "Asia Pacific (Hong Kong)"
          },
          "ap-northeast-1": {
            description: "Asia Pacific (Tokyo)"
          },
          "ap-northeast-2": {
            description: "Asia Pacific (Seoul)"
          },
          "ap-northeast-3": {
            description: "Asia Pacific (Osaka)"
          },
          "ap-south-1": {
            description: "Asia Pacific (Mumbai)"
          },
          "ap-south-2": {
            description: "Asia Pacific (Hyderabad)"
          },
          "ap-southeast-1": {
            description: "Asia Pacific (Singapore)"
          },
          "ap-southeast-2": {
            description: "Asia Pacific (Sydney)"
          },
          "ap-southeast-3": {
            description: "Asia Pacific (Jakarta)"
          },
          "ap-southeast-4": {
            description: "Asia Pacific (Melbourne)"
          },
          "ap-southeast-5": {
            description: "Asia Pacific (Malaysia)"
          },
          "aws-global": {
            description: "AWS Standard global region"
          },
          "ca-central-1": {
            description: "Canada (Central)"
          },
          "ca-west-1": {
            description: "Canada West (Calgary)"
          },
          "eu-central-1": {
            description: "Europe (Frankfurt)"
          },
          "eu-central-2": {
            description: "Europe (Zurich)"
          },
          "eu-north-1": {
            description: "Europe (Stockholm)"
          },
          "eu-south-1": {
            description: "Europe (Milan)"
          },
          "eu-south-2": {
            description: "Europe (Spain)"
          },
          "eu-west-1": {
            description: "Europe (Ireland)"
          },
          "eu-west-2": {
            description: "Europe (London)"
          },
          "eu-west-3": {
            description: "Europe (Paris)"
          },
          "il-central-1": {
            description: "Israel (Tel Aviv)"
          },
          "me-central-1": {
            description: "Middle East (UAE)"
          },
          "me-south-1": {
            description: "Middle East (Bahrain)"
          },
          "sa-east-1": {
            description: "South America (Sao Paulo)"
          },
          "us-east-1": {
            description: "US East (N. Virginia)"
          },
          "us-east-2": {
            description: "US East (Ohio)"
          },
          "us-west-1": {
            description: "US West (N. California)"
          },
          "us-west-2": {
            description: "US West (Oregon)"
          }
        }
      }, {
        id: "aws-cn",
        outputs: {
          dnsSuffix: "amazonaws.com.cn",
          dualStackDnsSuffix: "api.amazonwebservices.com.cn",
          implicitGlobalRegion: "cn-northwest-1",
          name: "aws-cn",
          supportsDualStack: true,
          supportsFIPS: true
        },
        regionRegex: "^cn\\-\\w+\\-\\d+$",
        regions: {
          "aws-cn-global": {
            description: "AWS China global region"
          },
          "cn-north-1": {
            description: "China (Beijing)"
          },
          "cn-northwest-1": {
            description: "China (Ningxia)"
          }
        }
      }, {
        id: "aws-us-gov",
        outputs: {
          dnsSuffix: "amazonaws.com",
          dualStackDnsSuffix: "api.aws",
          implicitGlobalRegion: "us-gov-west-1",
          name: "aws-us-gov",
          supportsDualStack: true,
          supportsFIPS: true
        },
        regionRegex: "^us\\-gov\\-\\w+\\-\\d+$",
        regions: {
          "aws-us-gov-global": {
            description: "AWS GovCloud (US) global region"
          },
          "us-gov-east-1": {
            description: "AWS GovCloud (US-East)"
          },
          "us-gov-west-1": {
            description: "AWS GovCloud (US-West)"
          }
        }
      }, {
        id: "aws-iso",
        outputs: {
          dnsSuffix: "c2s.ic.gov",
          dualStackDnsSuffix: "c2s.ic.gov",
          implicitGlobalRegion: "us-iso-east-1",
          name: "aws-iso",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^us\\-iso\\-\\w+\\-\\d+$",
        regions: {
          "aws-iso-global": {
            description: "AWS ISO (US) global region"
          },
          "us-iso-east-1": {
            description: "US ISO East"
          },
          "us-iso-west-1": {
            description: "US ISO WEST"
          }
        }
      }, {
        id: "aws-iso-b",
        outputs: {
          dnsSuffix: "sc2s.sgov.gov",
          dualStackDnsSuffix: "sc2s.sgov.gov",
          implicitGlobalRegion: "us-isob-east-1",
          name: "aws-iso-b",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^us\\-isob\\-\\w+\\-\\d+$",
        regions: {
          "aws-iso-b-global": {
            description: "AWS ISOB (US) global region"
          },
          "us-isob-east-1": {
            description: "US ISOB East (Ohio)"
          }
        }
      }, {
        id: "aws-iso-e",
        outputs: {
          dnsSuffix: "cloud.adc-e.uk",
          dualStackDnsSuffix: "cloud.adc-e.uk",
          implicitGlobalRegion: "eu-isoe-west-1",
          name: "aws-iso-e",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^eu\\-isoe\\-\\w+\\-\\d+$",
        regions: {
          "eu-isoe-west-1": {
            description: "EU ISOE West"
          }
        }
      }, {
        id: "aws-iso-f",
        outputs: {
          dnsSuffix: "csp.hci.ic.gov",
          dualStackDnsSuffix: "csp.hci.ic.gov",
          implicitGlobalRegion: "us-isof-south-1",
          name: "aws-iso-f",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^us\\-isof\\-\\w+\\-\\d+$",
        regions: {}
      }],
      version: "1.1"
    };
    var selectedPartitionsInfo = partitions_default;
    var selectedUserAgentPrefix = "";
    var partition = /* @__PURE__ */ __name((value) => {
      const { partitions } = selectedPartitionsInfo;
      for (const partition2 of partitions) {
        const { regions, outputs } = partition2;
        for (const [region, regionData] of Object.entries(regions)) {
          if (region === value) {
            return {
              ...outputs,
              ...regionData
            };
          }
        }
      }
      for (const partition2 of partitions) {
        const { regionRegex, outputs } = partition2;
        if (new RegExp(regionRegex).test(value)) {
          return {
            ...outputs
          };
        }
      }
      const DEFAULT_PARTITION = partitions.find((partition2) => partition2.id === "aws");
      if (!DEFAULT_PARTITION) {
        throw new Error(
          "Provided region was not found in the partition array or regex, and default partition with id 'aws' doesn't exist."
        );
      }
      return {
        ...DEFAULT_PARTITION.outputs
      };
    }, "partition");
    var setPartitionInfo = /* @__PURE__ */ __name((partitionsInfo, userAgentPrefix = "") => {
      selectedPartitionsInfo = partitionsInfo;
      selectedUserAgentPrefix = userAgentPrefix;
    }, "setPartitionInfo");
    var useDefaultPartitionInfo = /* @__PURE__ */ __name(() => {
      setPartitionInfo(partitions_default, "");
    }, "useDefaultPartitionInfo");
    var getUserAgentPrefix = /* @__PURE__ */ __name(() => selectedUserAgentPrefix, "getUserAgentPrefix");
    var awsEndpointFunctions = {
      isVirtualHostableS3Bucket,
      parseArn,
      partition
    };
    import_util_endpoints.customEndpointFunctions.aws = awsEndpointFunctions;
  }
});

// node_modules/@aws-sdk/core/dist-es/submodules/client/emitWarningIfUnsupportedVersion.js
var state, emitWarningIfUnsupportedVersion;
var init_emitWarningIfUnsupportedVersion = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/client/emitWarningIfUnsupportedVersion.js"() {
    init_dirname();
    state = {
      warningEmitted: false
    };
    emitWarningIfUnsupportedVersion = (version3) => {
      if (version3 && !state.warningEmitted && parseInt(version3.substring(1, version3.indexOf("."))) < 18) {
        state.warningEmitted = true;
        process.emitWarning(`NodeDeprecationWarning: The AWS SDK for JavaScript (v3) will
no longer support Node.js 16.x on January 6, 2025.

To continue receiving updates to AWS services, bug fixes, and security
updates please upgrade to a supported Node.js LTS version.

More information can be found at: https://a.co/74kJMmI`);
      }
    };
  }
});

// node_modules/@aws-sdk/core/dist-es/submodules/client/setCredentialFeature.js
function setCredentialFeature(credentials, feature, value) {
  if (!credentials.$source) {
    credentials.$source = {};
  }
  credentials.$source[feature] = value;
  return credentials;
}
var init_setCredentialFeature = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/client/setCredentialFeature.js"() {
    init_dirname();
  }
});

// node_modules/@aws-sdk/core/dist-es/submodules/client/setFeature.js
function setFeature2(context, feature, value) {
  if (!context.__aws_sdk_context) {
    context.__aws_sdk_context = {
      features: {}
    };
  } else if (!context.__aws_sdk_context.features) {
    context.__aws_sdk_context.features = {};
  }
  context.__aws_sdk_context.features[feature] = value;
}
var init_setFeature2 = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/client/setFeature.js"() {
    init_dirname();
  }
});

// node_modules/@aws-sdk/core/dist-es/submodules/client/index.js
var client_exports = {};
__export(client_exports, {
  emitWarningIfUnsupportedVersion: () => emitWarningIfUnsupportedVersion,
  setCredentialFeature: () => setCredentialFeature,
  setFeature: () => setFeature2,
  state: () => state
});
var init_client = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/client/index.js"() {
    init_dirname();
    init_emitWarningIfUnsupportedVersion();
    init_setCredentialFeature();
    init_setFeature2();
  }
});

// node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getDateHeader.js
var import_protocol_http5, getDateHeader;
var init_getDateHeader = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getDateHeader.js"() {
    init_dirname();
    import_protocol_http5 = __toESM(require_dist_cjs2());
    getDateHeader = (response) => import_protocol_http5.HttpResponse.isInstance(response) ? response.headers?.date ?? response.headers?.Date : void 0;
  }
});

// node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getSkewCorrectedDate.js
var getSkewCorrectedDate;
var init_getSkewCorrectedDate = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getSkewCorrectedDate.js"() {
    init_dirname();
    getSkewCorrectedDate = (systemClockOffset) => new Date(Date.now() + systemClockOffset);
  }
});

// node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/isClockSkewed.js
var isClockSkewed;
var init_isClockSkewed = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/isClockSkewed.js"() {
    init_dirname();
    init_getSkewCorrectedDate();
    isClockSkewed = (clockTime, systemClockOffset) => Math.abs(getSkewCorrectedDate(systemClockOffset).getTime() - clockTime) >= 3e5;
  }
});

// node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getUpdatedSystemClockOffset.js
var getUpdatedSystemClockOffset;
var init_getUpdatedSystemClockOffset = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getUpdatedSystemClockOffset.js"() {
    init_dirname();
    init_isClockSkewed();
    getUpdatedSystemClockOffset = (clockTime, currentSystemClockOffset) => {
      const clockTimeInMs = Date.parse(clockTime);
      if (isClockSkewed(clockTimeInMs, currentSystemClockOffset)) {
        return clockTimeInMs - Date.now();
      }
      return currentSystemClockOffset;
    };
  }
});

// node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/index.js
var init_utils = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/index.js"() {
    init_dirname();
    init_getDateHeader();
    init_getSkewCorrectedDate();
    init_getUpdatedSystemClockOffset();
  }
});

// node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/AwsSdkSigV4Signer.js
var import_protocol_http6, throwSigningPropertyError, validateSigningProperties, AwsSdkSigV4Signer, AWSSDKSigV4Signer;
var init_AwsSdkSigV4Signer = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/AwsSdkSigV4Signer.js"() {
    init_dirname();
    import_protocol_http6 = __toESM(require_dist_cjs2());
    init_utils();
    throwSigningPropertyError = (name, property) => {
      if (!property) {
        throw new Error(`Property \`${name}\` is not resolved for AWS SDK SigV4Auth`);
      }
      return property;
    };
    validateSigningProperties = async (signingProperties) => {
      const context = throwSigningPropertyError("context", signingProperties.context);
      const config2 = throwSigningPropertyError("config", signingProperties.config);
      const authScheme = context.endpointV2?.properties?.authSchemes?.[0];
      const signerFunction = throwSigningPropertyError("signer", config2.signer);
      const signer = await signerFunction(authScheme);
      const signingRegion = signingProperties?.signingRegion;
      const signingRegionSet = signingProperties?.signingRegionSet;
      const signingName = signingProperties?.signingName;
      return {
        config: config2,
        signer,
        signingRegion,
        signingRegionSet,
        signingName
      };
    };
    AwsSdkSigV4Signer = class {
      async sign(httpRequest, identity, signingProperties) {
        if (!import_protocol_http6.HttpRequest.isInstance(httpRequest)) {
          throw new Error("The request is not an instance of `HttpRequest` and cannot be signed");
        }
        const validatedProps = await validateSigningProperties(signingProperties);
        const { config: config2, signer } = validatedProps;
        let { signingRegion, signingName } = validatedProps;
        const handlerExecutionContext = signingProperties.context;
        if (handlerExecutionContext?.authSchemes?.length ?? 0 > 1) {
          const [first, second] = handlerExecutionContext.authSchemes;
          if (first?.name === "sigv4a" && second?.name === "sigv4") {
            signingRegion = second?.signingRegion ?? signingRegion;
            signingName = second?.signingName ?? signingName;
          }
        }
        const signedRequest = await signer.sign(httpRequest, {
          signingDate: getSkewCorrectedDate(config2.systemClockOffset),
          signingRegion,
          signingService: signingName
        });
        return signedRequest;
      }
      errorHandler(signingProperties) {
        return (error) => {
          const serverTime = error.ServerTime ?? getDateHeader(error.$response);
          if (serverTime) {
            const config2 = throwSigningPropertyError("config", signingProperties.config);
            const initialSystemClockOffset = config2.systemClockOffset;
            config2.systemClockOffset = getUpdatedSystemClockOffset(serverTime, config2.systemClockOffset);
            const clockSkewCorrected = config2.systemClockOffset !== initialSystemClockOffset;
            if (clockSkewCorrected && error.$metadata) {
              error.$metadata.clockSkewCorrected = true;
            }
          }
          throw error;
        };
      }
      successHandler(httpResponse, signingProperties) {
        const dateHeader = getDateHeader(httpResponse);
        if (dateHeader) {
          const config2 = throwSigningPropertyError("config", signingProperties.config);
          config2.systemClockOffset = getUpdatedSystemClockOffset(dateHeader, config2.systemClockOffset);
        }
      }
    };
    AWSSDKSigV4Signer = AwsSdkSigV4Signer;
  }
});

// node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/AwsSdkSigV4ASigner.js
var import_protocol_http7, AwsSdkSigV4ASigner;
var init_AwsSdkSigV4ASigner = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/AwsSdkSigV4ASigner.js"() {
    init_dirname();
    import_protocol_http7 = __toESM(require_dist_cjs2());
    init_utils();
    init_AwsSdkSigV4Signer();
    AwsSdkSigV4ASigner = class extends AwsSdkSigV4Signer {
      async sign(httpRequest, identity, signingProperties) {
        if (!import_protocol_http7.HttpRequest.isInstance(httpRequest)) {
          throw new Error("The request is not an instance of `HttpRequest` and cannot be signed");
        }
        const { config: config2, signer, signingRegion, signingRegionSet, signingName } = await validateSigningProperties(signingProperties);
        const configResolvedSigningRegionSet = await config2.sigv4aSigningRegionSet?.();
        const multiRegionOverride = (configResolvedSigningRegionSet ?? signingRegionSet ?? [signingRegion]).join(",");
        const signedRequest = await signer.sign(httpRequest, {
          signingDate: getSkewCorrectedDate(config2.systemClockOffset),
          signingRegion: multiRegionOverride,
          signingService: signingName
        });
        return signedRequest;
      }
    };
  }
});

// node_modules/@smithy/property-provider/dist-cjs/index.js
var require_dist_cjs20 = __commonJS({
  "node_modules/@smithy/property-provider/dist-cjs/index.js"(exports6, module) {
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      CredentialsProviderError: () => CredentialsProviderError,
      ProviderError: () => ProviderError3,
      TokenProviderError: () => TokenProviderError,
      chain: () => chain,
      fromStatic: () => fromStatic,
      memoize: () => memoize
    });
    module.exports = __toCommonJS3(src_exports);
    var _ProviderError = class _ProviderError2 extends Error {
      constructor(message, options = true) {
        var _a;
        let logger;
        let tryNextLink = true;
        if (typeof options === "boolean") {
          logger = void 0;
          tryNextLink = options;
        } else if (options != null && typeof options === "object") {
          logger = options.logger;
          tryNextLink = options.tryNextLink ?? true;
        }
        super(message);
        this.name = "ProviderError";
        this.tryNextLink = tryNextLink;
        Object.setPrototypeOf(this, _ProviderError2.prototype);
        (_a = logger == null ? void 0 : logger.debug) == null ? void 0 : _a.call(logger, `@smithy/property-provider ${tryNextLink ? "->" : "(!)"} ${message}`);
      }
      /**
       * @deprecated use new operator.
       */
      static from(error, options = true) {
        return Object.assign(new this(error.message, options), error);
      }
    };
    __name(_ProviderError, "ProviderError");
    var ProviderError3 = _ProviderError;
    var _CredentialsProviderError = class _CredentialsProviderError2 extends ProviderError3 {
      /**
       * @override
       */
      constructor(message, options = true) {
        super(message, options);
        this.name = "CredentialsProviderError";
        Object.setPrototypeOf(this, _CredentialsProviderError2.prototype);
      }
    };
    __name(_CredentialsProviderError, "CredentialsProviderError");
    var CredentialsProviderError = _CredentialsProviderError;
    var _TokenProviderError = class _TokenProviderError2 extends ProviderError3 {
      /**
       * @override
       */
      constructor(message, options = true) {
        super(message, options);
        this.name = "TokenProviderError";
        Object.setPrototypeOf(this, _TokenProviderError2.prototype);
      }
    };
    __name(_TokenProviderError, "TokenProviderError");
    var TokenProviderError = _TokenProviderError;
    var chain = /* @__PURE__ */ __name((...providers) => async () => {
      if (providers.length === 0) {
        throw new ProviderError3("No providers in chain");
      }
      let lastProviderError;
      for (const provider of providers) {
        try {
          const credentials = await provider();
          return credentials;
        } catch (err) {
          lastProviderError = err;
          if (err == null ? void 0 : err.tryNextLink) {
            continue;
          }
          throw err;
        }
      }
      throw lastProviderError;
    }, "chain");
    var fromStatic = /* @__PURE__ */ __name((staticValue) => () => Promise.resolve(staticValue), "fromStatic");
    var memoize = /* @__PURE__ */ __name((provider, isExpired, requiresRefresh) => {
      let resolved;
      let pending;
      let hasResult;
      let isConstant = false;
      const coalesceProvider = /* @__PURE__ */ __name(async () => {
        if (!pending) {
          pending = provider();
        }
        try {
          resolved = await pending;
          hasResult = true;
          isConstant = false;
        } finally {
          pending = void 0;
        }
        return resolved;
      }, "coalesceProvider");
      if (isExpired === void 0) {
        return async (options) => {
          if (!hasResult || (options == null ? void 0 : options.forceRefresh)) {
            resolved = await coalesceProvider();
          }
          return resolved;
        };
      }
      return async (options) => {
        if (!hasResult || (options == null ? void 0 : options.forceRefresh)) {
          resolved = await coalesceProvider();
        }
        if (isConstant) {
          return resolved;
        }
        if (requiresRefresh && !requiresRefresh(resolved)) {
          isConstant = true;
          return resolved;
        }
        if (isExpired(resolved)) {
          await coalesceProvider();
          return resolved;
        }
        return resolved;
      };
    }, "memoize");
  }
});

// node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/resolveAwsSdkSigV4AConfig.js
var import_property_provider, resolveAwsSdkSigV4AConfig, NODE_SIGV4A_CONFIG_OPTIONS;
var init_resolveAwsSdkSigV4AConfig = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/resolveAwsSdkSigV4AConfig.js"() {
    init_dirname();
    init_dist_es();
    import_property_provider = __toESM(require_dist_cjs20());
    resolveAwsSdkSigV4AConfig = (config2) => {
      config2.sigv4aSigningRegionSet = normalizeProvider(config2.sigv4aSigningRegionSet);
      return config2;
    };
    NODE_SIGV4A_CONFIG_OPTIONS = {
      environmentVariableSelector(env2) {
        if (env2.AWS_SIGV4A_SIGNING_REGION_SET) {
          return env2.AWS_SIGV4A_SIGNING_REGION_SET.split(",").map((_) => _.trim());
        }
        throw new import_property_provider.ProviderError("AWS_SIGV4A_SIGNING_REGION_SET not set in env.", {
          tryNextLink: true
        });
      },
      configFileSelector(profile) {
        if (profile.sigv4a_signing_region_set) {
          return (profile.sigv4a_signing_region_set ?? "").split(",").map((_) => _.trim());
        }
        throw new import_property_provider.ProviderError("sigv4a_signing_region_set not set in profile.", {
          tryNextLink: true
        });
      },
      default: void 0
    };
  }
});

// node_modules/@smithy/signature-v4/dist-cjs/index.js
var require_dist_cjs21 = __commonJS({
  "node_modules/@smithy/signature-v4/dist-cjs/index.js"(exports6, module) {
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      SignatureV4: () => SignatureV43,
      clearCredentialCache: () => clearCredentialCache,
      createScope: () => createScope,
      getCanonicalHeaders: () => getCanonicalHeaders,
      getCanonicalQuery: () => getCanonicalQuery,
      getPayloadHash: () => getPayloadHash,
      getSigningKey: () => getSigningKey,
      moveHeadersToQuery: () => moveHeadersToQuery,
      prepareRequest: () => prepareRequest
    });
    module.exports = __toCommonJS3(src_exports);
    var import_util_middleware3 = require_dist_cjs6();
    var import_util_utf84 = require_dist_cjs10();
    var ALGORITHM_QUERY_PARAM = "X-Amz-Algorithm";
    var CREDENTIAL_QUERY_PARAM = "X-Amz-Credential";
    var AMZ_DATE_QUERY_PARAM = "X-Amz-Date";
    var SIGNED_HEADERS_QUERY_PARAM = "X-Amz-SignedHeaders";
    var EXPIRES_QUERY_PARAM = "X-Amz-Expires";
    var SIGNATURE_QUERY_PARAM = "X-Amz-Signature";
    var TOKEN_QUERY_PARAM = "X-Amz-Security-Token";
    var AUTH_HEADER = "authorization";
    var AMZ_DATE_HEADER = AMZ_DATE_QUERY_PARAM.toLowerCase();
    var DATE_HEADER = "date";
    var GENERATED_HEADERS = [AUTH_HEADER, AMZ_DATE_HEADER, DATE_HEADER];
    var SIGNATURE_HEADER = SIGNATURE_QUERY_PARAM.toLowerCase();
    var SHA256_HEADER = "x-amz-content-sha256";
    var TOKEN_HEADER = TOKEN_QUERY_PARAM.toLowerCase();
    var ALWAYS_UNSIGNABLE_HEADERS = {
      authorization: true,
      "cache-control": true,
      connection: true,
      expect: true,
      from: true,
      "keep-alive": true,
      "max-forwards": true,
      pragma: true,
      referer: true,
      te: true,
      trailer: true,
      "transfer-encoding": true,
      upgrade: true,
      "user-agent": true,
      "x-amzn-trace-id": true
    };
    var PROXY_HEADER_PATTERN = /^proxy-/;
    var SEC_HEADER_PATTERN = /^sec-/;
    var ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256";
    var EVENT_ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256-PAYLOAD";
    var UNSIGNED_PAYLOAD = "UNSIGNED-PAYLOAD";
    var MAX_CACHE_SIZE = 50;
    var KEY_TYPE_IDENTIFIER = "aws4_request";
    var MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7;
    var import_util_hex_encoding = require_dist_cjs16();
    var import_util_utf8 = require_dist_cjs10();
    var signingKeyCache = {};
    var cacheQueue = [];
    var createScope = /* @__PURE__ */ __name((shortDate, region, service) => `${shortDate}/${region}/${service}/${KEY_TYPE_IDENTIFIER}`, "createScope");
    var getSigningKey = /* @__PURE__ */ __name(async (sha256Constructor, credentials, shortDate, region, service) => {
      const credsHash = await hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId);
      const cacheKey = `${shortDate}:${region}:${service}:${(0, import_util_hex_encoding.toHex)(credsHash)}:${credentials.sessionToken}`;
      if (cacheKey in signingKeyCache) {
        return signingKeyCache[cacheKey];
      }
      cacheQueue.push(cacheKey);
      while (cacheQueue.length > MAX_CACHE_SIZE) {
        delete signingKeyCache[cacheQueue.shift()];
      }
      let key = `AWS4${credentials.secretAccessKey}`;
      for (const signable of [shortDate, region, service, KEY_TYPE_IDENTIFIER]) {
        key = await hmac(sha256Constructor, key, signable);
      }
      return signingKeyCache[cacheKey] = key;
    }, "getSigningKey");
    var clearCredentialCache = /* @__PURE__ */ __name(() => {
      cacheQueue.length = 0;
      Object.keys(signingKeyCache).forEach((cacheKey) => {
        delete signingKeyCache[cacheKey];
      });
    }, "clearCredentialCache");
    var hmac = /* @__PURE__ */ __name((ctor, secret, data) => {
      const hash = new ctor(secret);
      hash.update((0, import_util_utf8.toUint8Array)(data));
      return hash.digest();
    }, "hmac");
    var getCanonicalHeaders = /* @__PURE__ */ __name(({ headers }, unsignableHeaders, signableHeaders) => {
      const canonical = {};
      for (const headerName of Object.keys(headers).sort()) {
        if (headers[headerName] == void 0) {
          continue;
        }
        const canonicalHeaderName = headerName.toLowerCase();
        if (canonicalHeaderName in ALWAYS_UNSIGNABLE_HEADERS || (unsignableHeaders == null ? void 0 : unsignableHeaders.has(canonicalHeaderName)) || PROXY_HEADER_PATTERN.test(canonicalHeaderName) || SEC_HEADER_PATTERN.test(canonicalHeaderName)) {
          if (!signableHeaders || signableHeaders && !signableHeaders.has(canonicalHeaderName)) {
            continue;
          }
        }
        canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\s+/g, " ");
      }
      return canonical;
    }, "getCanonicalHeaders");
    var import_util_uri_escape = require_dist_cjs12();
    var getCanonicalQuery = /* @__PURE__ */ __name(({ query = {} }) => {
      const keys = [];
      const serialized = {};
      for (const key of Object.keys(query)) {
        if (key.toLowerCase() === SIGNATURE_HEADER) {
          continue;
        }
        const encodedKey = (0, import_util_uri_escape.escapeUri)(key);
        keys.push(encodedKey);
        const value = query[key];
        if (typeof value === "string") {
          serialized[encodedKey] = `${encodedKey}=${(0, import_util_uri_escape.escapeUri)(value)}`;
        } else if (Array.isArray(value)) {
          serialized[encodedKey] = value.slice(0).reduce((encoded, value2) => encoded.concat([`${encodedKey}=${(0, import_util_uri_escape.escapeUri)(value2)}`]), []).sort().join("&");
        }
      }
      return keys.sort().map((key) => serialized[key]).filter((serialized2) => serialized2).join("&");
    }, "getCanonicalQuery");
    var import_is_array_buffer = require_dist_cjs8();
    var import_util_utf82 = require_dist_cjs10();
    var getPayloadHash = /* @__PURE__ */ __name(async ({ headers, body }, hashConstructor) => {
      for (const headerName of Object.keys(headers)) {
        if (headerName.toLowerCase() === SHA256_HEADER) {
          return headers[headerName];
        }
      }
      if (body == void 0) {
        return "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
      } else if (typeof body === "string" || ArrayBuffer.isView(body) || (0, import_is_array_buffer.isArrayBuffer)(body)) {
        const hashCtor = new hashConstructor();
        hashCtor.update((0, import_util_utf82.toUint8Array)(body));
        return (0, import_util_hex_encoding.toHex)(await hashCtor.digest());
      }
      return UNSIGNED_PAYLOAD;
    }, "getPayloadHash");
    var import_util_utf83 = require_dist_cjs10();
    var _HeaderFormatter = class _HeaderFormatter {
      format(headers) {
        const chunks = [];
        for (const headerName of Object.keys(headers)) {
          const bytes = (0, import_util_utf83.fromUtf8)(headerName);
          chunks.push(Uint8Array.from([bytes.byteLength]), bytes, this.formatHeaderValue(headers[headerName]));
        }
        const out = new Uint8Array(chunks.reduce((carry, bytes) => carry + bytes.byteLength, 0));
        let position = 0;
        for (const chunk of chunks) {
          out.set(chunk, position);
          position += chunk.byteLength;
        }
        return out;
      }
      formatHeaderValue(header) {
        switch (header.type) {
          case "boolean":
            return Uint8Array.from([
              header.value ? 0 : 1
              /* boolFalse */
            ]);
          case "byte":
            return Uint8Array.from([2, header.value]);
          case "short":
            const shortView = new DataView(new ArrayBuffer(3));
            shortView.setUint8(
              0,
              3
              /* short */
            );
            shortView.setInt16(1, header.value, false);
            return new Uint8Array(shortView.buffer);
          case "integer":
            const intView = new DataView(new ArrayBuffer(5));
            intView.setUint8(
              0,
              4
              /* integer */
            );
            intView.setInt32(1, header.value, false);
            return new Uint8Array(intView.buffer);
          case "long":
            const longBytes = new Uint8Array(9);
            longBytes[0] = 5;
            longBytes.set(header.value.bytes, 1);
            return longBytes;
          case "binary":
            const binView = new DataView(new ArrayBuffer(3 + header.value.byteLength));
            binView.setUint8(
              0,
              6
              /* byteArray */
            );
            binView.setUint16(1, header.value.byteLength, false);
            const binBytes = new Uint8Array(binView.buffer);
            binBytes.set(header.value, 3);
            return binBytes;
          case "string":
            const utf8Bytes = (0, import_util_utf83.fromUtf8)(header.value);
            const strView = new DataView(new ArrayBuffer(3 + utf8Bytes.byteLength));
            strView.setUint8(
              0,
              7
              /* string */
            );
            strView.setUint16(1, utf8Bytes.byteLength, false);
            const strBytes = new Uint8Array(strView.buffer);
            strBytes.set(utf8Bytes, 3);
            return strBytes;
          case "timestamp":
            const tsBytes = new Uint8Array(9);
            tsBytes[0] = 8;
            tsBytes.set(Int64.fromNumber(header.value.valueOf()).bytes, 1);
            return tsBytes;
          case "uuid":
            if (!UUID_PATTERN.test(header.value)) {
              throw new Error(`Invalid UUID received: ${header.value}`);
            }
            const uuidBytes = new Uint8Array(17);
            uuidBytes[0] = 9;
            uuidBytes.set((0, import_util_hex_encoding.fromHex)(header.value.replace(/\-/g, "")), 1);
            return uuidBytes;
        }
      }
    };
    __name(_HeaderFormatter, "HeaderFormatter");
    var HeaderFormatter = _HeaderFormatter;
    var UUID_PATTERN = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;
    var _Int64 = class _Int642 {
      constructor(bytes) {
        this.bytes = bytes;
        if (bytes.byteLength !== 8) {
          throw new Error("Int64 buffers must be exactly 8 bytes");
        }
      }
      static fromNumber(number) {
        if (number > 9223372036854776e3 || number < -9223372036854776e3) {
          throw new Error(`${number} is too large (or, if negative, too small) to represent as an Int64`);
        }
        const bytes = new Uint8Array(8);
        for (let i = 7, remaining = Math.abs(Math.round(number)); i > -1 && remaining > 0; i--, remaining /= 256) {
          bytes[i] = remaining;
        }
        if (number < 0) {
          negate(bytes);
        }
        return new _Int642(bytes);
      }
      /**
       * Called implicitly by infix arithmetic operators.
       */
      valueOf() {
        const bytes = this.bytes.slice(0);
        const negative = bytes[0] & 128;
        if (negative) {
          negate(bytes);
        }
        return parseInt((0, import_util_hex_encoding.toHex)(bytes), 16) * (negative ? -1 : 1);
      }
      toString() {
        return String(this.valueOf());
      }
    };
    __name(_Int64, "Int64");
    var Int64 = _Int64;
    function negate(bytes) {
      for (let i = 0; i < 8; i++) {
        bytes[i] ^= 255;
      }
      for (let i = 7; i > -1; i--) {
        bytes[i]++;
        if (bytes[i] !== 0)
          break;
      }
    }
    __name(negate, "negate");
    var hasHeader = /* @__PURE__ */ __name((soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          return true;
        }
      }
      return false;
    }, "hasHeader");
    var import_protocol_http11 = require_dist_cjs2();
    var moveHeadersToQuery = /* @__PURE__ */ __name((request, options = {}) => {
      var _a, _b;
      const { headers, query = {} } = import_protocol_http11.HttpRequest.clone(request);
      for (const name of Object.keys(headers)) {
        const lname = name.toLowerCase();
        if (lname.slice(0, 6) === "x-amz-" && !((_a = options.unhoistableHeaders) == null ? void 0 : _a.has(lname)) || ((_b = options.hoistableHeaders) == null ? void 0 : _b.has(lname))) {
          query[name] = headers[name];
          delete headers[name];
        }
      }
      return {
        ...request,
        headers,
        query
      };
    }, "moveHeadersToQuery");
    var prepareRequest = /* @__PURE__ */ __name((request) => {
      request = import_protocol_http11.HttpRequest.clone(request);
      for (const headerName of Object.keys(request.headers)) {
        if (GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {
          delete request.headers[headerName];
        }
      }
      return request;
    }, "prepareRequest");
    var iso8601 = /* @__PURE__ */ __name((time) => toDate(time).toISOString().replace(/\.\d{3}Z$/, "Z"), "iso8601");
    var toDate = /* @__PURE__ */ __name((time) => {
      if (typeof time === "number") {
        return new Date(time * 1e3);
      }
      if (typeof time === "string") {
        if (Number(time)) {
          return new Date(Number(time) * 1e3);
        }
        return new Date(time);
      }
      return time;
    }, "toDate");
    var _SignatureV4 = class _SignatureV4 {
      constructor({
        applyChecksum,
        credentials,
        region,
        service,
        sha256,
        uriEscapePath = true
      }) {
        this.headerFormatter = new HeaderFormatter();
        this.service = service;
        this.sha256 = sha256;
        this.uriEscapePath = uriEscapePath;
        this.applyChecksum = typeof applyChecksum === "boolean" ? applyChecksum : true;
        this.regionProvider = (0, import_util_middleware3.normalizeProvider)(region);
        this.credentialProvider = (0, import_util_middleware3.normalizeProvider)(credentials);
      }
      async presign(originalRequest, options = {}) {
        const {
          signingDate = /* @__PURE__ */ new Date(),
          expiresIn = 3600,
          unsignableHeaders,
          unhoistableHeaders,
          signableHeaders,
          hoistableHeaders,
          signingRegion,
          signingService
        } = options;
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion ?? await this.regionProvider();
        const { longDate, shortDate } = formatDate(signingDate);
        if (expiresIn > MAX_PRESIGNED_TTL) {
          return Promise.reject(
            "Signature version 4 presigned URLs must have an expiration date less than one week in the future"
          );
        }
        const scope = createScope(shortDate, region, signingService ?? this.service);
        const request = moveHeadersToQuery(prepareRequest(originalRequest), { unhoistableHeaders, hoistableHeaders });
        if (credentials.sessionToken) {
          request.query[TOKEN_QUERY_PARAM] = credentials.sessionToken;
        }
        request.query[ALGORITHM_QUERY_PARAM] = ALGORITHM_IDENTIFIER;
        request.query[CREDENTIAL_QUERY_PARAM] = `${credentials.accessKeyId}/${scope}`;
        request.query[AMZ_DATE_QUERY_PARAM] = longDate;
        request.query[EXPIRES_QUERY_PARAM] = expiresIn.toString(10);
        const canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);
        request.query[SIGNED_HEADERS_QUERY_PARAM] = getCanonicalHeaderList(canonicalHeaders);
        request.query[SIGNATURE_QUERY_PARAM] = await this.getSignature(
          longDate,
          scope,
          this.getSigningKey(credentials, region, shortDate, signingService),
          this.createCanonicalRequest(request, canonicalHeaders, await getPayloadHash(originalRequest, this.sha256))
        );
        return request;
      }
      async sign(toSign, options) {
        if (typeof toSign === "string") {
          return this.signString(toSign, options);
        } else if (toSign.headers && toSign.payload) {
          return this.signEvent(toSign, options);
        } else if (toSign.message) {
          return this.signMessage(toSign, options);
        } else {
          return this.signRequest(toSign, options);
        }
      }
      async signEvent({ headers, payload }, { signingDate = /* @__PURE__ */ new Date(), priorSignature, signingRegion, signingService }) {
        const region = signingRegion ?? await this.regionProvider();
        const { shortDate, longDate } = formatDate(signingDate);
        const scope = createScope(shortDate, region, signingService ?? this.service);
        const hashedPayload = await getPayloadHash({ headers: {}, body: payload }, this.sha256);
        const hash = new this.sha256();
        hash.update(headers);
        const hashedHeaders = (0, import_util_hex_encoding.toHex)(await hash.digest());
        const stringToSign = [
          EVENT_ALGORITHM_IDENTIFIER,
          longDate,
          scope,
          priorSignature,
          hashedHeaders,
          hashedPayload
        ].join("\n");
        return this.signString(stringToSign, { signingDate, signingRegion: region, signingService });
      }
      async signMessage(signableMessage, { signingDate = /* @__PURE__ */ new Date(), signingRegion, signingService }) {
        const promise = this.signEvent(
          {
            headers: this.headerFormatter.format(signableMessage.message.headers),
            payload: signableMessage.message.body
          },
          {
            signingDate,
            signingRegion,
            signingService,
            priorSignature: signableMessage.priorSignature
          }
        );
        return promise.then((signature) => {
          return { message: signableMessage.message, signature };
        });
      }
      async signString(stringToSign, { signingDate = /* @__PURE__ */ new Date(), signingRegion, signingService } = {}) {
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion ?? await this.regionProvider();
        const { shortDate } = formatDate(signingDate);
        const hash = new this.sha256(await this.getSigningKey(credentials, region, shortDate, signingService));
        hash.update((0, import_util_utf84.toUint8Array)(stringToSign));
        return (0, import_util_hex_encoding.toHex)(await hash.digest());
      }
      async signRequest(requestToSign, {
        signingDate = /* @__PURE__ */ new Date(),
        signableHeaders,
        unsignableHeaders,
        signingRegion,
        signingService
      } = {}) {
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion ?? await this.regionProvider();
        const request = prepareRequest(requestToSign);
        const { longDate, shortDate } = formatDate(signingDate);
        const scope = createScope(shortDate, region, signingService ?? this.service);
        request.headers[AMZ_DATE_HEADER] = longDate;
        if (credentials.sessionToken) {
          request.headers[TOKEN_HEADER] = credentials.sessionToken;
        }
        const payloadHash = await getPayloadHash(request, this.sha256);
        if (!hasHeader(SHA256_HEADER, request.headers) && this.applyChecksum) {
          request.headers[SHA256_HEADER] = payloadHash;
        }
        const canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);
        const signature = await this.getSignature(
          longDate,
          scope,
          this.getSigningKey(credentials, region, shortDate, signingService),
          this.createCanonicalRequest(request, canonicalHeaders, payloadHash)
        );
        request.headers[AUTH_HEADER] = `${ALGORITHM_IDENTIFIER} Credential=${credentials.accessKeyId}/${scope}, SignedHeaders=${getCanonicalHeaderList(canonicalHeaders)}, Signature=${signature}`;
        return request;
      }
      createCanonicalRequest(request, canonicalHeaders, payloadHash) {
        const sortedHeaders = Object.keys(canonicalHeaders).sort();
        return `${request.method}
${this.getCanonicalPath(request)}
${getCanonicalQuery(request)}
${sortedHeaders.map((name) => `${name}:${canonicalHeaders[name]}`).join("\n")}

${sortedHeaders.join(";")}
${payloadHash}`;
      }
      async createStringToSign(longDate, credentialScope, canonicalRequest) {
        const hash = new this.sha256();
        hash.update((0, import_util_utf84.toUint8Array)(canonicalRequest));
        const hashedRequest = await hash.digest();
        return `${ALGORITHM_IDENTIFIER}
${longDate}
${credentialScope}
${(0, import_util_hex_encoding.toHex)(hashedRequest)}`;
      }
      getCanonicalPath({ path }) {
        if (this.uriEscapePath) {
          const normalizedPathSegments = [];
          for (const pathSegment of path.split("/")) {
            if ((pathSegment == null ? void 0 : pathSegment.length) === 0)
              continue;
            if (pathSegment === ".")
              continue;
            if (pathSegment === "..") {
              normalizedPathSegments.pop();
            } else {
              normalizedPathSegments.push(pathSegment);
            }
          }
          const normalizedPath = `${(path == null ? void 0 : path.startsWith("/")) ? "/" : ""}${normalizedPathSegments.join("/")}${normalizedPathSegments.length > 0 && (path == null ? void 0 : path.endsWith("/")) ? "/" : ""}`;
          const doubleEncoded = (0, import_util_uri_escape.escapeUri)(normalizedPath);
          return doubleEncoded.replace(/%2F/g, "/");
        }
        return path;
      }
      async getSignature(longDate, credentialScope, keyPromise, canonicalRequest) {
        const stringToSign = await this.createStringToSign(longDate, credentialScope, canonicalRequest);
        const hash = new this.sha256(await keyPromise);
        hash.update((0, import_util_utf84.toUint8Array)(stringToSign));
        return (0, import_util_hex_encoding.toHex)(await hash.digest());
      }
      getSigningKey(credentials, region, shortDate, service) {
        return getSigningKey(this.sha256, credentials, shortDate, region, service || this.service);
      }
      validateResolvedCredentials(credentials) {
        if (typeof credentials !== "object" || // @ts-expect-error: Property 'accessKeyId' does not exist on type 'object'.ts(2339)
        typeof credentials.accessKeyId !== "string" || // @ts-expect-error: Property 'secretAccessKey' does not exist on type 'object'.ts(2339)
        typeof credentials.secretAccessKey !== "string") {
          throw new Error("Resolved credential object is not valid");
        }
      }
    };
    __name(_SignatureV4, "SignatureV4");
    var SignatureV43 = _SignatureV4;
    var formatDate = /* @__PURE__ */ __name((now) => {
      const longDate = iso8601(now).replace(/[\-:]/g, "");
      return {
        longDate,
        shortDate: longDate.slice(0, 8)
      };
    }, "formatDate");
    var getCanonicalHeaderList = /* @__PURE__ */ __name((headers) => Object.keys(headers).sort().join(";"), "getCanonicalHeaderList");
  }
});

// node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/resolveAwsSdkSigV4Config.js
var import_signature_v4, resolveAwsSdkSigV4Config, resolveAWSSDKSigV4Config;
var init_resolveAwsSdkSigV4Config = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/resolveAwsSdkSigV4Config.js"() {
    init_dirname();
    init_client();
    init_dist_es();
    import_signature_v4 = __toESM(require_dist_cjs21());
    resolveAwsSdkSigV4Config = (config2) => {
      let isUserSupplied = false;
      let normalizedCreds;
      if (config2.credentials) {
        isUserSupplied = true;
        normalizedCreds = memoizeIdentityProvider(config2.credentials, isIdentityExpired, doesIdentityRequireRefresh);
      }
      if (!normalizedCreds) {
        if (config2.credentialDefaultProvider) {
          normalizedCreds = normalizeProvider(config2.credentialDefaultProvider(Object.assign({}, config2, {
            parentClientConfig: config2
          })));
        } else {
          normalizedCreds = async () => {
            throw new Error("`credentials` is missing");
          };
        }
      }
      const { signingEscapePath = true, systemClockOffset = config2.systemClockOffset || 0, sha256 } = config2;
      let signer;
      if (config2.signer) {
        signer = normalizeProvider(config2.signer);
      } else if (config2.regionInfoProvider) {
        signer = () => normalizeProvider(config2.region)().then(async (region) => [
          await config2.regionInfoProvider(region, {
            useFipsEndpoint: await config2.useFipsEndpoint(),
            useDualstackEndpoint: await config2.useDualstackEndpoint()
          }) || {},
          region
        ]).then(([regionInfo, region]) => {
          const { signingRegion, signingService } = regionInfo;
          config2.signingRegion = config2.signingRegion || signingRegion || region;
          config2.signingName = config2.signingName || signingService || config2.serviceId;
          const params = {
            ...config2,
            credentials: normalizedCreds,
            region: config2.signingRegion,
            service: config2.signingName,
            sha256,
            uriEscapePath: signingEscapePath
          };
          const SignerCtor = config2.signerConstructor || import_signature_v4.SignatureV4;
          return new SignerCtor(params);
        });
      } else {
        signer = async (authScheme) => {
          authScheme = Object.assign({}, {
            name: "sigv4",
            signingName: config2.signingName || config2.defaultSigningName,
            signingRegion: await normalizeProvider(config2.region)(),
            properties: {}
          }, authScheme);
          const signingRegion = authScheme.signingRegion;
          const signingService = authScheme.signingName;
          config2.signingRegion = config2.signingRegion || signingRegion;
          config2.signingName = config2.signingName || signingService || config2.serviceId;
          const params = {
            ...config2,
            credentials: normalizedCreds,
            region: config2.signingRegion,
            service: config2.signingName,
            sha256,
            uriEscapePath: signingEscapePath
          };
          const SignerCtor = config2.signerConstructor || import_signature_v4.SignatureV4;
          return new SignerCtor(params);
        };
      }
      return {
        ...config2,
        systemClockOffset,
        signingEscapePath,
        credentials: isUserSupplied ? async () => normalizedCreds().then((creds) => setCredentialFeature(creds, "CREDENTIALS_CODE", "e")) : normalizedCreds,
        signer
      };
    };
    resolveAWSSDKSigV4Config = resolveAwsSdkSigV4Config;
  }
});

// node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/index.js
var init_aws_sdk = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/index.js"() {
    init_dirname();
    init_AwsSdkSigV4Signer();
    init_AwsSdkSigV4ASigner();
    init_resolveAwsSdkSigV4AConfig();
    init_resolveAwsSdkSigV4Config();
  }
});

// node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/index.js
var init_httpAuthSchemes2 = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/index.js"() {
    init_dirname();
    init_aws_sdk();
  }
});

// node_modules/@aws-sdk/core/dist-es/submodules/protocols/coercing-serializers.js
var _toStr, _toBool, _toNum;
var init_coercing_serializers = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/protocols/coercing-serializers.js"() {
    init_dirname();
    _toStr = (val2) => {
      if (val2 == null) {
        return val2;
      }
      if (typeof val2 === "number" || typeof val2 === "bigint") {
        const warning = new Error(`Received number ${val2} where a string was expected.`);
        warning.name = "Warning";
        console.warn(warning);
        return String(val2);
      }
      if (typeof val2 === "boolean") {
        const warning = new Error(`Received boolean ${val2} where a string was expected.`);
        warning.name = "Warning";
        console.warn(warning);
        return String(val2);
      }
      return val2;
    };
    _toBool = (val2) => {
      if (val2 == null) {
        return val2;
      }
      if (typeof val2 === "number") {
      }
      if (typeof val2 === "string") {
        const lowercase = val2.toLowerCase();
        if (val2 !== "" && lowercase !== "false" && lowercase !== "true") {
          const warning = new Error(`Received string "${val2}" where a boolean was expected.`);
          warning.name = "Warning";
          console.warn(warning);
        }
        return val2 !== "" && lowercase !== "false";
      }
      return val2;
    };
    _toNum = (val2) => {
      if (val2 == null) {
        return val2;
      }
      if (typeof val2 === "boolean") {
      }
      if (typeof val2 === "string") {
        const num = Number(val2);
        if (num.toString() !== val2) {
          const warning = new Error(`Received string "${val2}" where a number was expected.`);
          warning.name = "Warning";
          console.warn(warning);
          return val2;
        }
        return num;
      }
      return val2;
    };
  }
});

// node_modules/@smithy/middleware-stack/dist-cjs/index.js
var require_dist_cjs22 = __commonJS({
  "node_modules/@smithy/middleware-stack/dist-cjs/index.js"(exports6, module) {
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      constructStack: () => constructStack
    });
    module.exports = __toCommonJS3(src_exports);
    var getAllAliases = /* @__PURE__ */ __name((name, aliases) => {
      const _aliases = [];
      if (name) {
        _aliases.push(name);
      }
      if (aliases) {
        for (const alias of aliases) {
          _aliases.push(alias);
        }
      }
      return _aliases;
    }, "getAllAliases");
    var getMiddlewareNameWithAliases = /* @__PURE__ */ __name((name, aliases) => {
      return `${name || "anonymous"}${aliases && aliases.length > 0 ? ` (a.k.a. ${aliases.join(",")})` : ""}`;
    }, "getMiddlewareNameWithAliases");
    var constructStack = /* @__PURE__ */ __name(() => {
      let absoluteEntries = [];
      let relativeEntries = [];
      let identifyOnResolve = false;
      const entriesNameSet = /* @__PURE__ */ new Set();
      const sort = /* @__PURE__ */ __name((entries) => entries.sort(
        (a, b) => stepWeights[b.step] - stepWeights[a.step] || priorityWeights[b.priority || "normal"] - priorityWeights[a.priority || "normal"]
      ), "sort");
      const removeByName = /* @__PURE__ */ __name((toRemove) => {
        let isRemoved = false;
        const filterCb = /* @__PURE__ */ __name((entry) => {
          const aliases = getAllAliases(entry.name, entry.aliases);
          if (aliases.includes(toRemove)) {
            isRemoved = true;
            for (const alias of aliases) {
              entriesNameSet.delete(alias);
            }
            return false;
          }
          return true;
        }, "filterCb");
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
      }, "removeByName");
      const removeByReference = /* @__PURE__ */ __name((toRemove) => {
        let isRemoved = false;
        const filterCb = /* @__PURE__ */ __name((entry) => {
          if (entry.middleware === toRemove) {
            isRemoved = true;
            for (const alias of getAllAliases(entry.name, entry.aliases)) {
              entriesNameSet.delete(alias);
            }
            return false;
          }
          return true;
        }, "filterCb");
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
      }, "removeByReference");
      const cloneTo = /* @__PURE__ */ __name((toStack) => {
        var _a;
        absoluteEntries.forEach((entry) => {
          toStack.add(entry.middleware, { ...entry });
        });
        relativeEntries.forEach((entry) => {
          toStack.addRelativeTo(entry.middleware, { ...entry });
        });
        (_a = toStack.identifyOnResolve) == null ? void 0 : _a.call(toStack, stack.identifyOnResolve());
        return toStack;
      }, "cloneTo");
      const expandRelativeMiddlewareList = /* @__PURE__ */ __name((from) => {
        const expandedMiddlewareList = [];
        from.before.forEach((entry) => {
          if (entry.before.length === 0 && entry.after.length === 0) {
            expandedMiddlewareList.push(entry);
          } else {
            expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
          }
        });
        expandedMiddlewareList.push(from);
        from.after.reverse().forEach((entry) => {
          if (entry.before.length === 0 && entry.after.length === 0) {
            expandedMiddlewareList.push(entry);
          } else {
            expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
          }
        });
        return expandedMiddlewareList;
      }, "expandRelativeMiddlewareList");
      const getMiddlewareList = /* @__PURE__ */ __name((debug = false) => {
        const normalizedAbsoluteEntries = [];
        const normalizedRelativeEntries = [];
        const normalizedEntriesNameMap = {};
        absoluteEntries.forEach((entry) => {
          const normalizedEntry = {
            ...entry,
            before: [],
            after: []
          };
          for (const alias of getAllAliases(normalizedEntry.name, normalizedEntry.aliases)) {
            normalizedEntriesNameMap[alias] = normalizedEntry;
          }
          normalizedAbsoluteEntries.push(normalizedEntry);
        });
        relativeEntries.forEach((entry) => {
          const normalizedEntry = {
            ...entry,
            before: [],
            after: []
          };
          for (const alias of getAllAliases(normalizedEntry.name, normalizedEntry.aliases)) {
            normalizedEntriesNameMap[alias] = normalizedEntry;
          }
          normalizedRelativeEntries.push(normalizedEntry);
        });
        normalizedRelativeEntries.forEach((entry) => {
          if (entry.toMiddleware) {
            const toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];
            if (toMiddleware === void 0) {
              if (debug) {
                return;
              }
              throw new Error(
                `${entry.toMiddleware} is not found when adding ${getMiddlewareNameWithAliases(entry.name, entry.aliases)} middleware ${entry.relation} ${entry.toMiddleware}`
              );
            }
            if (entry.relation === "after") {
              toMiddleware.after.push(entry);
            }
            if (entry.relation === "before") {
              toMiddleware.before.push(entry);
            }
          }
        });
        const mainChain = sort(normalizedAbsoluteEntries).map(expandRelativeMiddlewareList).reduce(
          (wholeList, expandedMiddlewareList) => {
            wholeList.push(...expandedMiddlewareList);
            return wholeList;
          },
          []
        );
        return mainChain;
      }, "getMiddlewareList");
      const stack = {
        add: (middleware, options = {}) => {
          const { name, override, aliases: _aliases } = options;
          const entry = {
            step: "initialize",
            priority: "normal",
            middleware,
            ...options
          };
          const aliases = getAllAliases(name, _aliases);
          if (aliases.length > 0) {
            if (aliases.some((alias) => entriesNameSet.has(alias))) {
              if (!override)
                throw new Error(`Duplicate middleware name '${getMiddlewareNameWithAliases(name, _aliases)}'`);
              for (const alias of aliases) {
                const toOverrideIndex = absoluteEntries.findIndex(
                  (entry2) => {
                    var _a;
                    return entry2.name === alias || ((_a = entry2.aliases) == null ? void 0 : _a.some((a) => a === alias));
                  }
                );
                if (toOverrideIndex === -1) {
                  continue;
                }
                const toOverride = absoluteEntries[toOverrideIndex];
                if (toOverride.step !== entry.step || entry.priority !== toOverride.priority) {
                  throw new Error(
                    `"${getMiddlewareNameWithAliases(toOverride.name, toOverride.aliases)}" middleware with ${toOverride.priority} priority in ${toOverride.step} step cannot be overridden by "${getMiddlewareNameWithAliases(name, _aliases)}" middleware with ${entry.priority} priority in ${entry.step} step.`
                  );
                }
                absoluteEntries.splice(toOverrideIndex, 1);
              }
            }
            for (const alias of aliases) {
              entriesNameSet.add(alias);
            }
          }
          absoluteEntries.push(entry);
        },
        addRelativeTo: (middleware, options) => {
          const { name, override, aliases: _aliases } = options;
          const entry = {
            middleware,
            ...options
          };
          const aliases = getAllAliases(name, _aliases);
          if (aliases.length > 0) {
            if (aliases.some((alias) => entriesNameSet.has(alias))) {
              if (!override)
                throw new Error(`Duplicate middleware name '${getMiddlewareNameWithAliases(name, _aliases)}'`);
              for (const alias of aliases) {
                const toOverrideIndex = relativeEntries.findIndex(
                  (entry2) => {
                    var _a;
                    return entry2.name === alias || ((_a = entry2.aliases) == null ? void 0 : _a.some((a) => a === alias));
                  }
                );
                if (toOverrideIndex === -1) {
                  continue;
                }
                const toOverride = relativeEntries[toOverrideIndex];
                if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {
                  throw new Error(
                    `"${getMiddlewareNameWithAliases(toOverride.name, toOverride.aliases)}" middleware ${toOverride.relation} "${toOverride.toMiddleware}" middleware cannot be overridden by "${getMiddlewareNameWithAliases(name, _aliases)}" middleware ${entry.relation} "${entry.toMiddleware}" middleware.`
                  );
                }
                relativeEntries.splice(toOverrideIndex, 1);
              }
            }
            for (const alias of aliases) {
              entriesNameSet.add(alias);
            }
          }
          relativeEntries.push(entry);
        },
        clone: () => cloneTo(constructStack()),
        use: (plugin2) => {
          plugin2.applyToStack(stack);
        },
        remove: (toRemove) => {
          if (typeof toRemove === "string")
            return removeByName(toRemove);
          else
            return removeByReference(toRemove);
        },
        removeByTag: (toRemove) => {
          let isRemoved = false;
          const filterCb = /* @__PURE__ */ __name((entry) => {
            const { tags, name, aliases: _aliases } = entry;
            if (tags && tags.includes(toRemove)) {
              const aliases = getAllAliases(name, _aliases);
              for (const alias of aliases) {
                entriesNameSet.delete(alias);
              }
              isRemoved = true;
              return false;
            }
            return true;
          }, "filterCb");
          absoluteEntries = absoluteEntries.filter(filterCb);
          relativeEntries = relativeEntries.filter(filterCb);
          return isRemoved;
        },
        concat: (from) => {
          var _a;
          const cloned = cloneTo(constructStack());
          cloned.use(from);
          cloned.identifyOnResolve(
            identifyOnResolve || cloned.identifyOnResolve() || (((_a = from.identifyOnResolve) == null ? void 0 : _a.call(from)) ?? false)
          );
          return cloned;
        },
        applyToStack: cloneTo,
        identify: () => {
          return getMiddlewareList(true).map((mw) => {
            const step = mw.step ?? mw.relation + " " + mw.toMiddleware;
            return getMiddlewareNameWithAliases(mw.name, mw.aliases) + " - " + step;
          });
        },
        identifyOnResolve(toggle) {
          if (typeof toggle === "boolean")
            identifyOnResolve = toggle;
          return identifyOnResolve;
        },
        resolve: (handler, context) => {
          for (const middleware of getMiddlewareList().map((entry) => entry.middleware).reverse()) {
            handler = middleware(handler, context);
          }
          if (identifyOnResolve) {
            console.log(stack.identify());
          }
          return handler;
        }
      };
      return stack;
    }, "constructStack");
    var stepWeights = {
      initialize: 5,
      serialize: 4,
      build: 3,
      finalizeRequest: 2,
      deserialize: 1
    };
    var priorityWeights = {
      high: 3,
      normal: 2,
      low: 1
    };
  }
});

// node_modules/@smithy/smithy-client/dist-cjs/index.js
var require_dist_cjs23 = __commonJS({
  "node_modules/@smithy/smithy-client/dist-cjs/index.js"(exports6, module) {
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      Client: () => Client,
      Command: () => Command,
      LazyJsonString: () => LazyJsonString,
      NoOpLogger: () => NoOpLogger,
      SENSITIVE_STRING: () => SENSITIVE_STRING,
      ServiceException: () => ServiceException,
      _json: () => _json,
      collectBody: () => import_protocols2.collectBody,
      convertMap: () => convertMap,
      createAggregatedClient: () => createAggregatedClient,
      dateToUtcString: () => dateToUtcString,
      decorateServiceException: () => decorateServiceException,
      emitWarningIfUnsupportedVersion: () => emitWarningIfUnsupportedVersion3,
      expectBoolean: () => expectBoolean,
      expectByte: () => expectByte,
      expectFloat32: () => expectFloat32,
      expectInt: () => expectInt,
      expectInt32: () => expectInt32,
      expectLong: () => expectLong,
      expectNonNull: () => expectNonNull,
      expectNumber: () => expectNumber,
      expectObject: () => expectObject,
      expectShort: () => expectShort,
      expectString: () => expectString,
      expectUnion: () => expectUnion3,
      extendedEncodeURIComponent: () => import_protocols2.extendedEncodeURIComponent,
      getArrayIfSingleItem: () => getArrayIfSingleItem,
      getDefaultClientConfiguration: () => getDefaultClientConfiguration,
      getDefaultExtensionConfiguration: () => getDefaultExtensionConfiguration,
      getValueFromTextNode: () => getValueFromTextNode3,
      handleFloat: () => handleFloat,
      isSerializableHeaderValue: () => isSerializableHeaderValue,
      limitedParseDouble: () => limitedParseDouble,
      limitedParseFloat: () => limitedParseFloat,
      limitedParseFloat32: () => limitedParseFloat32,
      loadConfigsForDefaultMode: () => loadConfigsForDefaultMode,
      logger: () => logger,
      map: () => map,
      parseBoolean: () => parseBoolean,
      parseEpochTimestamp: () => parseEpochTimestamp,
      parseRfc3339DateTime: () => parseRfc3339DateTime,
      parseRfc3339DateTimeWithOffset: () => parseRfc3339DateTimeWithOffset,
      parseRfc7231DateTime: () => parseRfc7231DateTime,
      quoteHeader: () => quoteHeader,
      resolveDefaultRuntimeConfig: () => resolveDefaultRuntimeConfig,
      resolvedPath: () => import_protocols2.resolvedPath,
      serializeDateTime: () => serializeDateTime,
      serializeFloat: () => serializeFloat,
      splitEvery: () => splitEvery,
      splitHeader: () => splitHeader,
      strictParseByte: () => strictParseByte,
      strictParseDouble: () => strictParseDouble,
      strictParseFloat: () => strictParseFloat,
      strictParseFloat32: () => strictParseFloat32,
      strictParseInt: () => strictParseInt,
      strictParseInt32: () => strictParseInt32,
      strictParseLong: () => strictParseLong,
      strictParseShort: () => strictParseShort,
      take: () => take,
      throwDefaultError: () => throwDefaultError,
      withBaseException: () => withBaseException
    });
    module.exports = __toCommonJS3(src_exports);
    var import_middleware_stack = require_dist_cjs22();
    var _Client = class _Client {
      constructor(config2) {
        this.config = config2;
        this.middlewareStack = (0, import_middleware_stack.constructStack)();
      }
      send(command, optionsOrCb, cb) {
        const options = typeof optionsOrCb !== "function" ? optionsOrCb : void 0;
        const callback = typeof optionsOrCb === "function" ? optionsOrCb : cb;
        const useHandlerCache = options === void 0 && this.config.cacheMiddleware === true;
        let handler;
        if (useHandlerCache) {
          if (!this.handlers) {
            this.handlers = /* @__PURE__ */ new WeakMap();
          }
          const handlers = this.handlers;
          if (handlers.has(command.constructor)) {
            handler = handlers.get(command.constructor);
          } else {
            handler = command.resolveMiddleware(this.middlewareStack, this.config, options);
            handlers.set(command.constructor, handler);
          }
        } else {
          delete this.handlers;
          handler = command.resolveMiddleware(this.middlewareStack, this.config, options);
        }
        if (callback) {
          handler(command).then(
            (result) => callback(null, result.output),
            (err) => callback(err)
          ).catch(
            // prevent any errors thrown in the callback from triggering an
            // unhandled promise rejection
            () => {
            }
          );
        } else {
          return handler(command).then((result) => result.output);
        }
      }
      destroy() {
        var _a, _b, _c;
        (_c = (_b = (_a = this.config) == null ? void 0 : _a.requestHandler) == null ? void 0 : _b.destroy) == null ? void 0 : _c.call(_b);
        delete this.handlers;
      }
    };
    __name(_Client, "Client");
    var Client = _Client;
    var import_protocols2 = (init_protocols(), __toCommonJS(protocols_exports));
    var import_types5 = require_dist_cjs();
    var _Command = class _Command {
      constructor() {
        this.middlewareStack = (0, import_middleware_stack.constructStack)();
      }
      /**
       * Factory for Command ClassBuilder.
       * @internal
       */
      static classBuilder() {
        return new ClassBuilder();
      }
      /**
       * @internal
       */
      resolveMiddlewareWithContext(clientStack, configuration, options, {
        middlewareFn,
        clientName,
        commandName,
        inputFilterSensitiveLog,
        outputFilterSensitiveLog,
        smithyContext,
        additionalContext,
        CommandCtor
      }) {
        for (const mw of middlewareFn.bind(this)(CommandCtor, clientStack, configuration, options)) {
          this.middlewareStack.use(mw);
        }
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog,
          outputFilterSensitiveLog,
          [import_types5.SMITHY_CONTEXT_KEY]: {
            commandInstance: this,
            ...smithyContext
          },
          ...additionalContext
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
    };
    __name(_Command, "Command");
    var Command = _Command;
    var _ClassBuilder = class _ClassBuilder {
      constructor() {
        this._init = () => {
        };
        this._ep = {};
        this._middlewareFn = () => [];
        this._commandName = "";
        this._clientName = "";
        this._additionalContext = {};
        this._smithyContext = {};
        this._inputFilterSensitiveLog = (_) => _;
        this._outputFilterSensitiveLog = (_) => _;
        this._serializer = null;
        this._deserializer = null;
      }
      /**
       * Optional init callback.
       */
      init(cb) {
        this._init = cb;
      }
      /**
       * Set the endpoint parameter instructions.
       */
      ep(endpointParameterInstructions) {
        this._ep = endpointParameterInstructions;
        return this;
      }
      /**
       * Add any number of middleware.
       */
      m(middlewareSupplier) {
        this._middlewareFn = middlewareSupplier;
        return this;
      }
      /**
       * Set the initial handler execution context Smithy field.
       */
      s(service, operation, smithyContext = {}) {
        this._smithyContext = {
          service,
          operation,
          ...smithyContext
        };
        return this;
      }
      /**
       * Set the initial handler execution context.
       */
      c(additionalContext = {}) {
        this._additionalContext = additionalContext;
        return this;
      }
      /**
       * Set constant string identifiers for the operation.
       */
      n(clientName, commandName) {
        this._clientName = clientName;
        this._commandName = commandName;
        return this;
      }
      /**
       * Set the input and output sensistive log filters.
       */
      f(inputFilter = (_) => _, outputFilter = (_) => _) {
        this._inputFilterSensitiveLog = inputFilter;
        this._outputFilterSensitiveLog = outputFilter;
        return this;
      }
      /**
       * Sets the serializer.
       */
      ser(serializer) {
        this._serializer = serializer;
        return this;
      }
      /**
       * Sets the deserializer.
       */
      de(deserializer) {
        this._deserializer = deserializer;
        return this;
      }
      /**
       * @returns a Command class with the classBuilder properties.
       */
      build() {
        var _a;
        const closure = this;
        let CommandRef;
        return CommandRef = (_a = class extends Command {
          /**
           * @public
           */
          constructor(...[input]) {
            super();
            this.serialize = closure._serializer;
            this.deserialize = closure._deserializer;
            this.input = input ?? {};
            closure._init(this);
          }
          /**
           * @public
           */
          static getEndpointParameterInstructions() {
            return closure._ep;
          }
          /**
           * @internal
           */
          resolveMiddleware(stack, configuration, options) {
            return this.resolveMiddlewareWithContext(stack, configuration, options, {
              CommandCtor: CommandRef,
              middlewareFn: closure._middlewareFn,
              clientName: closure._clientName,
              commandName: closure._commandName,
              inputFilterSensitiveLog: closure._inputFilterSensitiveLog,
              outputFilterSensitiveLog: closure._outputFilterSensitiveLog,
              smithyContext: closure._smithyContext,
              additionalContext: closure._additionalContext
            });
          }
        }, __name(_a, "CommandRef"), _a);
      }
    };
    __name(_ClassBuilder, "ClassBuilder");
    var ClassBuilder = _ClassBuilder;
    var SENSITIVE_STRING = "***SensitiveInformation***";
    var createAggregatedClient = /* @__PURE__ */ __name((commands, Client2) => {
      for (const command of Object.keys(commands)) {
        const CommandCtor = commands[command];
        const methodImpl = /* @__PURE__ */ __name(async function(args, optionsOrCb, cb) {
          const command2 = new CommandCtor(args);
          if (typeof optionsOrCb === "function") {
            this.send(command2, optionsOrCb);
          } else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
              throw new Error(`Expected http options but got ${typeof optionsOrCb}`);
            this.send(command2, optionsOrCb || {}, cb);
          } else {
            return this.send(command2, optionsOrCb);
          }
        }, "methodImpl");
        const methodName = (command[0].toLowerCase() + command.slice(1)).replace(/Command$/, "");
        Client2.prototype[methodName] = methodImpl;
      }
    }, "createAggregatedClient");
    var parseBoolean = /* @__PURE__ */ __name((value) => {
      switch (value) {
        case "true":
          return true;
        case "false":
          return false;
        default:
          throw new Error(`Unable to parse boolean value "${value}"`);
      }
    }, "parseBoolean");
    var expectBoolean = /* @__PURE__ */ __name((value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "number") {
        if (value === 0 || value === 1) {
          logger.warn(stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`));
        }
        if (value === 0) {
          return false;
        }
        if (value === 1) {
          return true;
        }
      }
      if (typeof value === "string") {
        const lower = value.toLowerCase();
        if (lower === "false" || lower === "true") {
          logger.warn(stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`));
        }
        if (lower === "false") {
          return false;
        }
        if (lower === "true") {
          return true;
        }
      }
      if (typeof value === "boolean") {
        return value;
      }
      throw new TypeError(`Expected boolean, got ${typeof value}: ${value}`);
    }, "expectBoolean");
    var expectNumber = /* @__PURE__ */ __name((value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "string") {
        const parsed = parseFloat(value);
        if (!Number.isNaN(parsed)) {
          if (String(parsed) !== String(value)) {
            logger.warn(stackTraceWarning(`Expected number but observed string: ${value}`));
          }
          return parsed;
        }
      }
      if (typeof value === "number") {
        return value;
      }
      throw new TypeError(`Expected number, got ${typeof value}: ${value}`);
    }, "expectNumber");
    var MAX_FLOAT = Math.ceil(2 ** 127 * (2 - 2 ** -23));
    var expectFloat32 = /* @__PURE__ */ __name((value) => {
      const expected = expectNumber(value);
      if (expected !== void 0 && !Number.isNaN(expected) && expected !== Infinity && expected !== -Infinity) {
        if (Math.abs(expected) > MAX_FLOAT) {
          throw new TypeError(`Expected 32-bit float, got ${value}`);
        }
      }
      return expected;
    }, "expectFloat32");
    var expectLong = /* @__PURE__ */ __name((value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (Number.isInteger(value) && !Number.isNaN(value)) {
        return value;
      }
      throw new TypeError(`Expected integer, got ${typeof value}: ${value}`);
    }, "expectLong");
    var expectInt = expectLong;
    var expectInt32 = /* @__PURE__ */ __name((value) => expectSizedInt(value, 32), "expectInt32");
    var expectShort = /* @__PURE__ */ __name((value) => expectSizedInt(value, 16), "expectShort");
    var expectByte = /* @__PURE__ */ __name((value) => expectSizedInt(value, 8), "expectByte");
    var expectSizedInt = /* @__PURE__ */ __name((value, size) => {
      const expected = expectLong(value);
      if (expected !== void 0 && castInt(expected, size) !== expected) {
        throw new TypeError(`Expected ${size}-bit integer, got ${value}`);
      }
      return expected;
    }, "expectSizedInt");
    var castInt = /* @__PURE__ */ __name((value, size) => {
      switch (size) {
        case 32:
          return Int32Array.of(value)[0];
        case 16:
          return Int16Array.of(value)[0];
        case 8:
          return Int8Array.of(value)[0];
      }
    }, "castInt");
    var expectNonNull = /* @__PURE__ */ __name((value, location) => {
      if (value === null || value === void 0) {
        if (location) {
          throw new TypeError(`Expected a non-null value for ${location}`);
        }
        throw new TypeError("Expected a non-null value");
      }
      return value;
    }, "expectNonNull");
    var expectObject = /* @__PURE__ */ __name((value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "object" && !Array.isArray(value)) {
        return value;
      }
      const receivedType = Array.isArray(value) ? "array" : typeof value;
      throw new TypeError(`Expected object, got ${receivedType}: ${value}`);
    }, "expectObject");
    var expectString = /* @__PURE__ */ __name((value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "string") {
        return value;
      }
      if (["boolean", "number", "bigint"].includes(typeof value)) {
        logger.warn(stackTraceWarning(`Expected string, got ${typeof value}: ${value}`));
        return String(value);
      }
      throw new TypeError(`Expected string, got ${typeof value}: ${value}`);
    }, "expectString");
    var expectUnion3 = /* @__PURE__ */ __name((value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      const asObject = expectObject(value);
      const setKeys = Object.entries(asObject).filter(([, v]) => v != null).map(([k]) => k);
      if (setKeys.length === 0) {
        throw new TypeError(`Unions must have exactly one non-null member. None were found.`);
      }
      if (setKeys.length > 1) {
        throw new TypeError(`Unions must have exactly one non-null member. Keys ${setKeys} were not null.`);
      }
      return asObject;
    }, "expectUnion");
    var strictParseDouble = /* @__PURE__ */ __name((value) => {
      if (typeof value == "string") {
        return expectNumber(parseNumber(value));
      }
      return expectNumber(value);
    }, "strictParseDouble");
    var strictParseFloat = strictParseDouble;
    var strictParseFloat32 = /* @__PURE__ */ __name((value) => {
      if (typeof value == "string") {
        return expectFloat32(parseNumber(value));
      }
      return expectFloat32(value);
    }, "strictParseFloat32");
    var NUMBER_REGEX = /(-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?)|(-?Infinity)|(NaN)/g;
    var parseNumber = /* @__PURE__ */ __name((value) => {
      const matches = value.match(NUMBER_REGEX);
      if (matches === null || matches[0].length !== value.length) {
        throw new TypeError(`Expected real number, got implicit NaN`);
      }
      return parseFloat(value);
    }, "parseNumber");
    var limitedParseDouble = /* @__PURE__ */ __name((value) => {
      if (typeof value == "string") {
        return parseFloatString(value);
      }
      return expectNumber(value);
    }, "limitedParseDouble");
    var handleFloat = limitedParseDouble;
    var limitedParseFloat = limitedParseDouble;
    var limitedParseFloat32 = /* @__PURE__ */ __name((value) => {
      if (typeof value == "string") {
        return parseFloatString(value);
      }
      return expectFloat32(value);
    }, "limitedParseFloat32");
    var parseFloatString = /* @__PURE__ */ __name((value) => {
      switch (value) {
        case "NaN":
          return NaN;
        case "Infinity":
          return Infinity;
        case "-Infinity":
          return -Infinity;
        default:
          throw new Error(`Unable to parse float value: ${value}`);
      }
    }, "parseFloatString");
    var strictParseLong = /* @__PURE__ */ __name((value) => {
      if (typeof value === "string") {
        return expectLong(parseNumber(value));
      }
      return expectLong(value);
    }, "strictParseLong");
    var strictParseInt = strictParseLong;
    var strictParseInt32 = /* @__PURE__ */ __name((value) => {
      if (typeof value === "string") {
        return expectInt32(parseNumber(value));
      }
      return expectInt32(value);
    }, "strictParseInt32");
    var strictParseShort = /* @__PURE__ */ __name((value) => {
      if (typeof value === "string") {
        return expectShort(parseNumber(value));
      }
      return expectShort(value);
    }, "strictParseShort");
    var strictParseByte = /* @__PURE__ */ __name((value) => {
      if (typeof value === "string") {
        return expectByte(parseNumber(value));
      }
      return expectByte(value);
    }, "strictParseByte");
    var stackTraceWarning = /* @__PURE__ */ __name((message) => {
      return String(new TypeError(message).stack || message).split("\n").slice(0, 5).filter((s) => !s.includes("stackTraceWarning")).join("\n");
    }, "stackTraceWarning");
    var logger = {
      warn: console.warn
    };
    var DAYS = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
    var MONTHS = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
    function dateToUtcString(date) {
      const year = date.getUTCFullYear();
      const month = date.getUTCMonth();
      const dayOfWeek = date.getUTCDay();
      const dayOfMonthInt = date.getUTCDate();
      const hoursInt = date.getUTCHours();
      const minutesInt = date.getUTCMinutes();
      const secondsInt = date.getUTCSeconds();
      const dayOfMonthString = dayOfMonthInt < 10 ? `0${dayOfMonthInt}` : `${dayOfMonthInt}`;
      const hoursString = hoursInt < 10 ? `0${hoursInt}` : `${hoursInt}`;
      const minutesString = minutesInt < 10 ? `0${minutesInt}` : `${minutesInt}`;
      const secondsString = secondsInt < 10 ? `0${secondsInt}` : `${secondsInt}`;
      return `${DAYS[dayOfWeek]}, ${dayOfMonthString} ${MONTHS[month]} ${year} ${hoursString}:${minutesString}:${secondsString} GMT`;
    }
    __name(dateToUtcString, "dateToUtcString");
    var RFC3339 = new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?[zZ]$/);
    var parseRfc3339DateTime = /* @__PURE__ */ __name((value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== "string") {
        throw new TypeError("RFC-3339 date-times must be expressed as strings");
      }
      const match = RFC3339.exec(value);
      if (!match) {
        throw new TypeError("Invalid RFC-3339 date-time value");
      }
      const [_, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds] = match;
      const year = strictParseShort(stripLeadingZeroes(yearStr));
      const month = parseDateValue(monthStr, "month", 1, 12);
      const day = parseDateValue(dayStr, "day", 1, 31);
      return buildDate(year, month, day, { hours, minutes, seconds, fractionalMilliseconds });
    }, "parseRfc3339DateTime");
    var RFC3339_WITH_OFFSET = new RegExp(
      /^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?(([-+]\d{2}\:\d{2})|[zZ])$/
    );
    var parseRfc3339DateTimeWithOffset = /* @__PURE__ */ __name((value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== "string") {
        throw new TypeError("RFC-3339 date-times must be expressed as strings");
      }
      const match = RFC3339_WITH_OFFSET.exec(value);
      if (!match) {
        throw new TypeError("Invalid RFC-3339 date-time value");
      }
      const [_, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, offsetStr] = match;
      const year = strictParseShort(stripLeadingZeroes(yearStr));
      const month = parseDateValue(monthStr, "month", 1, 12);
      const day = parseDateValue(dayStr, "day", 1, 31);
      const date = buildDate(year, month, day, { hours, minutes, seconds, fractionalMilliseconds });
      if (offsetStr.toUpperCase() != "Z") {
        date.setTime(date.getTime() - parseOffsetToMilliseconds(offsetStr));
      }
      return date;
    }, "parseRfc3339DateTimeWithOffset");
    var IMF_FIXDATE = new RegExp(
      /^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d{2}) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/
    );
    var RFC_850_DATE = new RegExp(
      /^(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d{2})-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/
    );
    var ASC_TIME = new RegExp(
      /^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( [1-9]|\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? (\d{4})$/
    );
    var parseRfc7231DateTime = /* @__PURE__ */ __name((value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== "string") {
        throw new TypeError("RFC-7231 date-times must be expressed as strings");
      }
      let match = IMF_FIXDATE.exec(value);
      if (match) {
        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
        return buildDate(
          strictParseShort(stripLeadingZeroes(yearStr)),
          parseMonthByShortName(monthStr),
          parseDateValue(dayStr, "day", 1, 31),
          { hours, minutes, seconds, fractionalMilliseconds }
        );
      }
      match = RFC_850_DATE.exec(value);
      if (match) {
        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
        return adjustRfc850Year(
          buildDate(parseTwoDigitYear(yearStr), parseMonthByShortName(monthStr), parseDateValue(dayStr, "day", 1, 31), {
            hours,
            minutes,
            seconds,
            fractionalMilliseconds
          })
        );
      }
      match = ASC_TIME.exec(value);
      if (match) {
        const [_, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, yearStr] = match;
        return buildDate(
          strictParseShort(stripLeadingZeroes(yearStr)),
          parseMonthByShortName(monthStr),
          parseDateValue(dayStr.trimLeft(), "day", 1, 31),
          { hours, minutes, seconds, fractionalMilliseconds }
        );
      }
      throw new TypeError("Invalid RFC-7231 date-time value");
    }, "parseRfc7231DateTime");
    var parseEpochTimestamp = /* @__PURE__ */ __name((value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      let valueAsDouble;
      if (typeof value === "number") {
        valueAsDouble = value;
      } else if (typeof value === "string") {
        valueAsDouble = strictParseDouble(value);
      } else if (typeof value === "object" && value.tag === 1) {
        valueAsDouble = value.value;
      } else {
        throw new TypeError("Epoch timestamps must be expressed as floating point numbers or their string representation");
      }
      if (Number.isNaN(valueAsDouble) || valueAsDouble === Infinity || valueAsDouble === -Infinity) {
        throw new TypeError("Epoch timestamps must be valid, non-Infinite, non-NaN numerics");
      }
      return new Date(Math.round(valueAsDouble * 1e3));
    }, "parseEpochTimestamp");
    var buildDate = /* @__PURE__ */ __name((year, month, day, time) => {
      const adjustedMonth = month - 1;
      validateDayOfMonth(year, adjustedMonth, day);
      return new Date(
        Date.UTC(
          year,
          adjustedMonth,
          day,
          parseDateValue(time.hours, "hour", 0, 23),
          parseDateValue(time.minutes, "minute", 0, 59),
          // seconds can go up to 60 for leap seconds
          parseDateValue(time.seconds, "seconds", 0, 60),
          parseMilliseconds(time.fractionalMilliseconds)
        )
      );
    }, "buildDate");
    var parseTwoDigitYear = /* @__PURE__ */ __name((value) => {
      const thisYear = (/* @__PURE__ */ new Date()).getUTCFullYear();
      const valueInThisCentury = Math.floor(thisYear / 100) * 100 + strictParseShort(stripLeadingZeroes(value));
      if (valueInThisCentury < thisYear) {
        return valueInThisCentury + 100;
      }
      return valueInThisCentury;
    }, "parseTwoDigitYear");
    var FIFTY_YEARS_IN_MILLIS = 50 * 365 * 24 * 60 * 60 * 1e3;
    var adjustRfc850Year = /* @__PURE__ */ __name((input) => {
      if (input.getTime() - (/* @__PURE__ */ new Date()).getTime() > FIFTY_YEARS_IN_MILLIS) {
        return new Date(
          Date.UTC(
            input.getUTCFullYear() - 100,
            input.getUTCMonth(),
            input.getUTCDate(),
            input.getUTCHours(),
            input.getUTCMinutes(),
            input.getUTCSeconds(),
            input.getUTCMilliseconds()
          )
        );
      }
      return input;
    }, "adjustRfc850Year");
    var parseMonthByShortName = /* @__PURE__ */ __name((value) => {
      const monthIdx = MONTHS.indexOf(value);
      if (monthIdx < 0) {
        throw new TypeError(`Invalid month: ${value}`);
      }
      return monthIdx + 1;
    }, "parseMonthByShortName");
    var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    var validateDayOfMonth = /* @__PURE__ */ __name((year, month, day) => {
      let maxDays = DAYS_IN_MONTH[month];
      if (month === 1 && isLeapYear(year)) {
        maxDays = 29;
      }
      if (day > maxDays) {
        throw new TypeError(`Invalid day for ${MONTHS[month]} in ${year}: ${day}`);
      }
    }, "validateDayOfMonth");
    var isLeapYear = /* @__PURE__ */ __name((year) => {
      return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
    }, "isLeapYear");
    var parseDateValue = /* @__PURE__ */ __name((value, type, lower, upper) => {
      const dateVal = strictParseByte(stripLeadingZeroes(value));
      if (dateVal < lower || dateVal > upper) {
        throw new TypeError(`${type} must be between ${lower} and ${upper}, inclusive`);
      }
      return dateVal;
    }, "parseDateValue");
    var parseMilliseconds = /* @__PURE__ */ __name((value) => {
      if (value === null || value === void 0) {
        return 0;
      }
      return strictParseFloat32("0." + value) * 1e3;
    }, "parseMilliseconds");
    var parseOffsetToMilliseconds = /* @__PURE__ */ __name((value) => {
      const directionStr = value[0];
      let direction = 1;
      if (directionStr == "+") {
        direction = 1;
      } else if (directionStr == "-") {
        direction = -1;
      } else {
        throw new TypeError(`Offset direction, ${directionStr}, must be "+" or "-"`);
      }
      const hour = Number(value.substring(1, 3));
      const minute = Number(value.substring(4, 6));
      return direction * (hour * 60 + minute) * 60 * 1e3;
    }, "parseOffsetToMilliseconds");
    var stripLeadingZeroes = /* @__PURE__ */ __name((value) => {
      let idx = 0;
      while (idx < value.length - 1 && value.charAt(idx) === "0") {
        idx++;
      }
      if (idx === 0) {
        return value;
      }
      return value.slice(idx);
    }, "stripLeadingZeroes");
    var _ServiceException = class _ServiceException2 extends Error {
      constructor(options) {
        super(options.message);
        Object.setPrototypeOf(this, _ServiceException2.prototype);
        this.name = options.name;
        this.$fault = options.$fault;
        this.$metadata = options.$metadata;
      }
    };
    __name(_ServiceException, "ServiceException");
    var ServiceException = _ServiceException;
    var decorateServiceException = /* @__PURE__ */ __name((exception, additions = {}) => {
      Object.entries(additions).filter(([, v]) => v !== void 0).forEach(([k, v]) => {
        if (exception[k] == void 0 || exception[k] === "") {
          exception[k] = v;
        }
      });
      const message = exception.message || exception.Message || "UnknownError";
      exception.message = message;
      delete exception.Message;
      return exception;
    }, "decorateServiceException");
    var throwDefaultError = /* @__PURE__ */ __name(({ output, parsedBody, exceptionCtor, errorCode }) => {
      const $metadata = deserializeMetadata(output);
      const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
      const response = new exceptionCtor({
        name: (parsedBody == null ? void 0 : parsedBody.code) || (parsedBody == null ? void 0 : parsedBody.Code) || errorCode || statusCode || "UnknownError",
        $fault: "client",
        $metadata
      });
      throw decorateServiceException(response, parsedBody);
    }, "throwDefaultError");
    var withBaseException = /* @__PURE__ */ __name((ExceptionCtor) => {
      return ({ output, parsedBody, errorCode }) => {
        throwDefaultError({ output, parsedBody, exceptionCtor: ExceptionCtor, errorCode });
      };
    }, "withBaseException");
    var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    }), "deserializeMetadata");
    var loadConfigsForDefaultMode = /* @__PURE__ */ __name((mode) => {
      switch (mode) {
        case "standard":
          return {
            retryMode: "standard",
            connectionTimeout: 3100
          };
        case "in-region":
          return {
            retryMode: "standard",
            connectionTimeout: 1100
          };
        case "cross-region":
          return {
            retryMode: "standard",
            connectionTimeout: 3100
          };
        case "mobile":
          return {
            retryMode: "standard",
            connectionTimeout: 3e4
          };
        default:
          return {};
      }
    }, "loadConfigsForDefaultMode");
    var warningEmitted = false;
    var emitWarningIfUnsupportedVersion3 = /* @__PURE__ */ __name((version3) => {
      if (version3 && !warningEmitted && parseInt(version3.substring(1, version3.indexOf("."))) < 16) {
        warningEmitted = true;
      }
    }, "emitWarningIfUnsupportedVersion");
    var getChecksumConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
      const checksumAlgorithms = [];
      for (const id in import_types5.AlgorithmId) {
        const algorithmId = import_types5.AlgorithmId[id];
        if (runtimeConfig[algorithmId] === void 0) {
          continue;
        }
        checksumAlgorithms.push({
          algorithmId: () => algorithmId,
          checksumConstructor: () => runtimeConfig[algorithmId]
        });
      }
      return {
        _checksumAlgorithms: checksumAlgorithms,
        addChecksumAlgorithm(algo) {
          this._checksumAlgorithms.push(algo);
        },
        checksumAlgorithms() {
          return this._checksumAlgorithms;
        }
      };
    }, "getChecksumConfiguration");
    var resolveChecksumRuntimeConfig = /* @__PURE__ */ __name((clientConfig) => {
      const runtimeConfig = {};
      clientConfig.checksumAlgorithms().forEach((checksumAlgorithm) => {
        runtimeConfig[checksumAlgorithm.algorithmId()] = checksumAlgorithm.checksumConstructor();
      });
      return runtimeConfig;
    }, "resolveChecksumRuntimeConfig");
    var getRetryConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
      let _retryStrategy = runtimeConfig.retryStrategy;
      return {
        setRetryStrategy(retryStrategy) {
          _retryStrategy = retryStrategy;
        },
        retryStrategy() {
          return _retryStrategy;
        }
      };
    }, "getRetryConfiguration");
    var resolveRetryRuntimeConfig = /* @__PURE__ */ __name((retryStrategyConfiguration) => {
      const runtimeConfig = {};
      runtimeConfig.retryStrategy = retryStrategyConfiguration.retryStrategy();
      return runtimeConfig;
    }, "resolveRetryRuntimeConfig");
    var getDefaultExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
      return {
        ...getChecksumConfiguration(runtimeConfig),
        ...getRetryConfiguration(runtimeConfig)
      };
    }, "getDefaultExtensionConfiguration");
    var getDefaultClientConfiguration = getDefaultExtensionConfiguration;
    var resolveDefaultRuntimeConfig = /* @__PURE__ */ __name((config2) => {
      return {
        ...resolveChecksumRuntimeConfig(config2),
        ...resolveRetryRuntimeConfig(config2)
      };
    }, "resolveDefaultRuntimeConfig");
    var getArrayIfSingleItem = /* @__PURE__ */ __name((mayBeArray) => Array.isArray(mayBeArray) ? mayBeArray : [mayBeArray], "getArrayIfSingleItem");
    var getValueFromTextNode3 = /* @__PURE__ */ __name((obj) => {
      const textNodeName = "#text";
      for (const key in obj) {
        if (obj.hasOwnProperty(key) && obj[key][textNodeName] !== void 0) {
          obj[key] = obj[key][textNodeName];
        } else if (typeof obj[key] === "object" && obj[key] !== null) {
          obj[key] = getValueFromTextNode3(obj[key]);
        }
      }
      return obj;
    }, "getValueFromTextNode");
    var isSerializableHeaderValue = /* @__PURE__ */ __name((value) => {
      return value != null;
    }, "isSerializableHeaderValue");
    var LazyJsonString = /* @__PURE__ */ __name(function LazyJsonString2(val2) {
      const str = Object.assign(new String(val2), {
        deserializeJSON() {
          return JSON.parse(String(val2));
        },
        toString() {
          return String(val2);
        },
        toJSON() {
          return String(val2);
        }
      });
      return str;
    }, "LazyJsonString");
    LazyJsonString.from = (object) => {
      if (object && typeof object === "object" && (object instanceof LazyJsonString || "deserializeJSON" in object)) {
        return object;
      } else if (typeof object === "string" || Object.getPrototypeOf(object) === String.prototype) {
        return LazyJsonString(String(object));
      }
      return LazyJsonString(JSON.stringify(object));
    };
    LazyJsonString.fromObject = LazyJsonString.from;
    var _NoOpLogger = class _NoOpLogger {
      trace() {
      }
      debug() {
      }
      info() {
      }
      warn() {
      }
      error() {
      }
    };
    __name(_NoOpLogger, "NoOpLogger");
    var NoOpLogger = _NoOpLogger;
    function map(arg0, arg1, arg2) {
      let target;
      let filter;
      let instructions;
      if (typeof arg1 === "undefined" && typeof arg2 === "undefined") {
        target = {};
        instructions = arg0;
      } else {
        target = arg0;
        if (typeof arg1 === "function") {
          filter = arg1;
          instructions = arg2;
          return mapWithFilter(target, filter, instructions);
        } else {
          instructions = arg1;
        }
      }
      for (const key of Object.keys(instructions)) {
        if (!Array.isArray(instructions[key])) {
          target[key] = instructions[key];
          continue;
        }
        applyInstruction(target, null, instructions, key);
      }
      return target;
    }
    __name(map, "map");
    var convertMap = /* @__PURE__ */ __name((target) => {
      const output = {};
      for (const [k, v] of Object.entries(target || {})) {
        output[k] = [, v];
      }
      return output;
    }, "convertMap");
    var take = /* @__PURE__ */ __name((source, instructions) => {
      const out = {};
      for (const key in instructions) {
        applyInstruction(out, source, instructions, key);
      }
      return out;
    }, "take");
    var mapWithFilter = /* @__PURE__ */ __name((target, filter, instructions) => {
      return map(
        target,
        Object.entries(instructions).reduce(
          (_instructions, [key, value]) => {
            if (Array.isArray(value)) {
              _instructions[key] = value;
            } else {
              if (typeof value === "function") {
                _instructions[key] = [filter, value()];
              } else {
                _instructions[key] = [filter, value];
              }
            }
            return _instructions;
          },
          {}
        )
      );
    }, "mapWithFilter");
    var applyInstruction = /* @__PURE__ */ __name((target, source, instructions, targetKey) => {
      if (source !== null) {
        let instruction = instructions[targetKey];
        if (typeof instruction === "function") {
          instruction = [, instruction];
        }
        const [filter2 = nonNullish, valueFn = pass, sourceKey = targetKey] = instruction;
        if (typeof filter2 === "function" && filter2(source[sourceKey]) || typeof filter2 !== "function" && !!filter2) {
          target[targetKey] = valueFn(source[sourceKey]);
        }
        return;
      }
      let [filter, value] = instructions[targetKey];
      if (typeof value === "function") {
        let _value;
        const defaultFilterPassed = filter === void 0 && (_value = value()) != null;
        const customFilterPassed = typeof filter === "function" && !!filter(void 0) || typeof filter !== "function" && !!filter;
        if (defaultFilterPassed) {
          target[targetKey] = _value;
        } else if (customFilterPassed) {
          target[targetKey] = value();
        }
      } else {
        const defaultFilterPassed = filter === void 0 && value != null;
        const customFilterPassed = typeof filter === "function" && !!filter(value) || typeof filter !== "function" && !!filter;
        if (defaultFilterPassed || customFilterPassed) {
          target[targetKey] = value;
        }
      }
    }, "applyInstruction");
    var nonNullish = /* @__PURE__ */ __name((_) => _ != null, "nonNullish");
    var pass = /* @__PURE__ */ __name((_) => _, "pass");
    function quoteHeader(part) {
      if (part.includes(",") || part.includes('"')) {
        part = `"${part.replace(/"/g, '\\"')}"`;
      }
      return part;
    }
    __name(quoteHeader, "quoteHeader");
    var serializeFloat = /* @__PURE__ */ __name((value) => {
      if (value !== value) {
        return "NaN";
      }
      switch (value) {
        case Infinity:
          return "Infinity";
        case -Infinity:
          return "-Infinity";
        default:
          return value;
      }
    }, "serializeFloat");
    var serializeDateTime = /* @__PURE__ */ __name((date) => date.toISOString().replace(".000Z", "Z"), "serializeDateTime");
    var _json = /* @__PURE__ */ __name((obj) => {
      if (obj == null) {
        return {};
      }
      if (Array.isArray(obj)) {
        return obj.filter((_) => _ != null).map(_json);
      }
      if (typeof obj === "object") {
        const target = {};
        for (const key of Object.keys(obj)) {
          if (obj[key] == null) {
            continue;
          }
          target[key] = _json(obj[key]);
        }
        return target;
      }
      return obj;
    }, "_json");
    function splitEvery(value, delimiter, numDelimiters) {
      if (numDelimiters <= 0 || !Number.isInteger(numDelimiters)) {
        throw new Error("Invalid number of delimiters (" + numDelimiters + ") for splitEvery.");
      }
      const segments = value.split(delimiter);
      if (numDelimiters === 1) {
        return segments;
      }
      const compoundSegments = [];
      let currentSegment = "";
      for (let i = 0; i < segments.length; i++) {
        if (currentSegment === "") {
          currentSegment = segments[i];
        } else {
          currentSegment += delimiter + segments[i];
        }
        if ((i + 1) % numDelimiters === 0) {
          compoundSegments.push(currentSegment);
          currentSegment = "";
        }
      }
      if (currentSegment !== "") {
        compoundSegments.push(currentSegment);
      }
      return compoundSegments;
    }
    __name(splitEvery, "splitEvery");
    var splitHeader = /* @__PURE__ */ __name((value) => {
      const z = value.length;
      const values = [];
      let withinQuotes = false;
      let prevChar = void 0;
      let anchor = 0;
      for (let i = 0; i < z; ++i) {
        const char = value[i];
        switch (char) {
          case `"`:
            if (prevChar !== "\\") {
              withinQuotes = !withinQuotes;
            }
            break;
          case ",":
            if (!withinQuotes) {
              values.push(value.slice(anchor, i));
              anchor = i + 1;
            }
            break;
          default:
        }
        prevChar = char;
      }
      values.push(value.slice(anchor));
      return values.map((v) => {
        v = v.trim();
        const z2 = v.length;
        if (z2 < 2) {
          return v;
        }
        if (v[0] === `"` && v[z2 - 1] === `"`) {
          v = v.slice(1, z2 - 1);
        }
        return v.replace(/\\"/g, '"');
      });
    }, "splitHeader");
  }
});

// node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/awsExpectUnion.js
var import_smithy_client, awsExpectUnion;
var init_awsExpectUnion = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/awsExpectUnion.js"() {
    init_dirname();
    import_smithy_client = __toESM(require_dist_cjs23());
    awsExpectUnion = (value) => {
      if (value == null) {
        return void 0;
      }
      if (typeof value === "object" && "__type" in value) {
        delete value.__type;
      }
      return (0, import_smithy_client.expectUnion)(value);
    };
  }
});

// node_modules/@aws-sdk/core/dist-es/submodules/protocols/common.js
var import_smithy_client2, collectBodyString;
var init_common = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/protocols/common.js"() {
    init_dirname();
    import_smithy_client2 = __toESM(require_dist_cjs23());
    collectBodyString = (streamBody, context) => (0, import_smithy_client2.collectBody)(streamBody, context).then((body) => context.utf8Encoder(body));
  }
});

// node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/parseJsonBody.js
var parseJsonBody, parseJsonErrorBody, loadRestJsonErrorCode;
var init_parseJsonBody = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/parseJsonBody.js"() {
    init_dirname();
    init_common();
    parseJsonBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        try {
          return JSON.parse(encoded);
        } catch (e) {
          if (e?.name === "SyntaxError") {
            Object.defineProperty(e, "$responseBodyText", {
              value: encoded
            });
          }
          throw e;
        }
      }
      return {};
    });
    parseJsonErrorBody = async (errorBody, context) => {
      const value = await parseJsonBody(errorBody, context);
      value.message = value.message ?? value.Message;
      return value;
    };
    loadRestJsonErrorCode = (output, data) => {
      const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
      const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
          cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
          cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
          cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
          cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
      };
      const headerKey = findKey(output.headers, "x-amzn-errortype");
      if (headerKey !== void 0) {
        return sanitizeErrorCode(output.headers[headerKey]);
      }
      if (data.code !== void 0) {
        return sanitizeErrorCode(data.code);
      }
      if (data["__type"] !== void 0) {
        return sanitizeErrorCode(data["__type"]);
      }
    };
  }
});

// node_modules/fast-xml-parser/src/util.js
var require_util2 = __commonJS({
  "node_modules/fast-xml-parser/src/util.js"(exports6) {
    "use strict";
    init_dirname();
    var nameStartChar = ":A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
    var nameChar = nameStartChar + "\\-.\\d\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
    var nameRegexp = "[" + nameStartChar + "][" + nameChar + "]*";
    var regexName = new RegExp("^" + nameRegexp + "$");
    var getAllMatches = function(string, regex) {
      const matches = [];
      let match = regex.exec(string);
      while (match) {
        const allmatches = [];
        allmatches.startIndex = regex.lastIndex - match[0].length;
        const len = match.length;
        for (let index = 0; index < len; index++) {
          allmatches.push(match[index]);
        }
        matches.push(allmatches);
        match = regex.exec(string);
      }
      return matches;
    };
    var isName = function(string) {
      const match = regexName.exec(string);
      return !(match === null || typeof match === "undefined");
    };
    exports6.isExist = function(v) {
      return typeof v !== "undefined";
    };
    exports6.isEmptyObject = function(obj) {
      return Object.keys(obj).length === 0;
    };
    exports6.merge = function(target, a, arrayMode) {
      if (a) {
        const keys = Object.keys(a);
        const len = keys.length;
        for (let i = 0; i < len; i++) {
          if (arrayMode === "strict") {
            target[keys[i]] = [a[keys[i]]];
          } else {
            target[keys[i]] = a[keys[i]];
          }
        }
      }
    };
    exports6.getValue = function(v) {
      if (exports6.isExist(v)) {
        return v;
      } else {
        return "";
      }
    };
    exports6.isName = isName;
    exports6.getAllMatches = getAllMatches;
    exports6.nameRegexp = nameRegexp;
  }
});

// node_modules/fast-xml-parser/src/validator.js
var require_validator = __commonJS({
  "node_modules/fast-xml-parser/src/validator.js"(exports6) {
    "use strict";
    init_dirname();
    var util = require_util2();
    var defaultOptions = {
      allowBooleanAttributes: false,
      //A tag can have attributes without any value
      unpairedTags: []
    };
    exports6.validate = function(xmlData, options) {
      options = Object.assign({}, defaultOptions, options);
      const tags = [];
      let tagFound = false;
      let reachedRoot = false;
      if (xmlData[0] === "\uFEFF") {
        xmlData = xmlData.substr(1);
      }
      for (let i = 0; i < xmlData.length; i++) {
        if (xmlData[i] === "<" && xmlData[i + 1] === "?") {
          i += 2;
          i = readPI(xmlData, i);
          if (i.err) return i;
        } else if (xmlData[i] === "<") {
          let tagStartPos = i;
          i++;
          if (xmlData[i] === "!") {
            i = readCommentAndCDATA(xmlData, i);
            continue;
          } else {
            let closingTag = false;
            if (xmlData[i] === "/") {
              closingTag = true;
              i++;
            }
            let tagName = "";
            for (; i < xmlData.length && xmlData[i] !== ">" && xmlData[i] !== " " && xmlData[i] !== "	" && xmlData[i] !== "\n" && xmlData[i] !== "\r"; i++) {
              tagName += xmlData[i];
            }
            tagName = tagName.trim();
            if (tagName[tagName.length - 1] === "/") {
              tagName = tagName.substring(0, tagName.length - 1);
              i--;
            }
            if (!validateTagName(tagName)) {
              let msg;
              if (tagName.trim().length === 0) {
                msg = "Invalid space after '<'.";
              } else {
                msg = "Tag '" + tagName + "' is an invalid name.";
              }
              return getErrorObject("InvalidTag", msg, getLineNumberForPosition(xmlData, i));
            }
            const result = readAttributeStr(xmlData, i);
            if (result === false) {
              return getErrorObject("InvalidAttr", "Attributes for '" + tagName + "' have open quote.", getLineNumberForPosition(xmlData, i));
            }
            let attrStr = result.value;
            i = result.index;
            if (attrStr[attrStr.length - 1] === "/") {
              const attrStrStart = i - attrStr.length;
              attrStr = attrStr.substring(0, attrStr.length - 1);
              const isValid = validateAttributeString(attrStr, options);
              if (isValid === true) {
                tagFound = true;
              } else {
                return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));
              }
            } else if (closingTag) {
              if (!result.tagClosed) {
                return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' doesn't have proper closing.", getLineNumberForPosition(xmlData, i));
              } else if (attrStr.trim().length > 0) {
                return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' can't have attributes or invalid starting.", getLineNumberForPosition(xmlData, tagStartPos));
              } else if (tags.length === 0) {
                return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' has not been opened.", getLineNumberForPosition(xmlData, tagStartPos));
              } else {
                const otg = tags.pop();
                if (tagName !== otg.tagName) {
                  let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);
                  return getErrorObject(
                    "InvalidTag",
                    "Expected closing tag '" + otg.tagName + "' (opened in line " + openPos.line + ", col " + openPos.col + ") instead of closing tag '" + tagName + "'.",
                    getLineNumberForPosition(xmlData, tagStartPos)
                  );
                }
                if (tags.length == 0) {
                  reachedRoot = true;
                }
              }
            } else {
              const isValid = validateAttributeString(attrStr, options);
              if (isValid !== true) {
                return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));
              }
              if (reachedRoot === true) {
                return getErrorObject("InvalidXml", "Multiple possible root nodes found.", getLineNumberForPosition(xmlData, i));
              } else if (options.unpairedTags.indexOf(tagName) !== -1) {
              } else {
                tags.push({ tagName, tagStartPos });
              }
              tagFound = true;
            }
            for (i++; i < xmlData.length; i++) {
              if (xmlData[i] === "<") {
                if (xmlData[i + 1] === "!") {
                  i++;
                  i = readCommentAndCDATA(xmlData, i);
                  continue;
                } else if (xmlData[i + 1] === "?") {
                  i = readPI(xmlData, ++i);
                  if (i.err) return i;
                } else {
                  break;
                }
              } else if (xmlData[i] === "&") {
                const afterAmp = validateAmpersand(xmlData, i);
                if (afterAmp == -1)
                  return getErrorObject("InvalidChar", "char '&' is not expected.", getLineNumberForPosition(xmlData, i));
                i = afterAmp;
              } else {
                if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {
                  return getErrorObject("InvalidXml", "Extra text at the end", getLineNumberForPosition(xmlData, i));
                }
              }
            }
            if (xmlData[i] === "<") {
              i--;
            }
          }
        } else {
          if (isWhiteSpace(xmlData[i])) {
            continue;
          }
          return getErrorObject("InvalidChar", "char '" + xmlData[i] + "' is not expected.", getLineNumberForPosition(xmlData, i));
        }
      }
      if (!tagFound) {
        return getErrorObject("InvalidXml", "Start tag expected.", 1);
      } else if (tags.length == 1) {
        return getErrorObject("InvalidTag", "Unclosed tag '" + tags[0].tagName + "'.", getLineNumberForPosition(xmlData, tags[0].tagStartPos));
      } else if (tags.length > 0) {
        return getErrorObject("InvalidXml", "Invalid '" + JSON.stringify(tags.map((t) => t.tagName), null, 4).replace(/\r?\n/g, "") + "' found.", { line: 1, col: 1 });
      }
      return true;
    };
    function isWhiteSpace(char) {
      return char === " " || char === "	" || char === "\n" || char === "\r";
    }
    function readPI(xmlData, i) {
      const start = i;
      for (; i < xmlData.length; i++) {
        if (xmlData[i] == "?" || xmlData[i] == " ") {
          const tagname = xmlData.substr(start, i - start);
          if (i > 5 && tagname === "xml") {
            return getErrorObject("InvalidXml", "XML declaration allowed only at the start of the document.", getLineNumberForPosition(xmlData, i));
          } else if (xmlData[i] == "?" && xmlData[i + 1] == ">") {
            i++;
            break;
          } else {
            continue;
          }
        }
      }
      return i;
    }
    function readCommentAndCDATA(xmlData, i) {
      if (xmlData.length > i + 5 && xmlData[i + 1] === "-" && xmlData[i + 2] === "-") {
        for (i += 3; i < xmlData.length; i++) {
          if (xmlData[i] === "-" && xmlData[i + 1] === "-" && xmlData[i + 2] === ">") {
            i += 2;
            break;
          }
        }
      } else if (xmlData.length > i + 8 && xmlData[i + 1] === "D" && xmlData[i + 2] === "O" && xmlData[i + 3] === "C" && xmlData[i + 4] === "T" && xmlData[i + 5] === "Y" && xmlData[i + 6] === "P" && xmlData[i + 7] === "E") {
        let angleBracketsCount = 1;
        for (i += 8; i < xmlData.length; i++) {
          if (xmlData[i] === "<") {
            angleBracketsCount++;
          } else if (xmlData[i] === ">") {
            angleBracketsCount--;
            if (angleBracketsCount === 0) {
              break;
            }
          }
        }
      } else if (xmlData.length > i + 9 && xmlData[i + 1] === "[" && xmlData[i + 2] === "C" && xmlData[i + 3] === "D" && xmlData[i + 4] === "A" && xmlData[i + 5] === "T" && xmlData[i + 6] === "A" && xmlData[i + 7] === "[") {
        for (i += 8; i < xmlData.length; i++) {
          if (xmlData[i] === "]" && xmlData[i + 1] === "]" && xmlData[i + 2] === ">") {
            i += 2;
            break;
          }
        }
      }
      return i;
    }
    var doubleQuote = '"';
    var singleQuote = "'";
    function readAttributeStr(xmlData, i) {
      let attrStr = "";
      let startChar = "";
      let tagClosed = false;
      for (; i < xmlData.length; i++) {
        if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {
          if (startChar === "") {
            startChar = xmlData[i];
          } else if (startChar !== xmlData[i]) {
          } else {
            startChar = "";
          }
        } else if (xmlData[i] === ">") {
          if (startChar === "") {
            tagClosed = true;
            break;
          }
        }
        attrStr += xmlData[i];
      }
      if (startChar !== "") {
        return false;
      }
      return {
        value: attrStr,
        index: i,
        tagClosed
      };
    }
    var validAttrStrRegxp = new RegExp(`(\\s*)([^\\s=]+)(\\s*=)?(\\s*(['"])(([\\s\\S])*?)\\5)?`, "g");
    function validateAttributeString(attrStr, options) {
      const matches = util.getAllMatches(attrStr, validAttrStrRegxp);
      const attrNames = {};
      for (let i = 0; i < matches.length; i++) {
        if (matches[i][1].length === 0) {
          return getErrorObject("InvalidAttr", "Attribute '" + matches[i][2] + "' has no space in starting.", getPositionFromMatch(matches[i]));
        } else if (matches[i][3] !== void 0 && matches[i][4] === void 0) {
          return getErrorObject("InvalidAttr", "Attribute '" + matches[i][2] + "' is without value.", getPositionFromMatch(matches[i]));
        } else if (matches[i][3] === void 0 && !options.allowBooleanAttributes) {
          return getErrorObject("InvalidAttr", "boolean attribute '" + matches[i][2] + "' is not allowed.", getPositionFromMatch(matches[i]));
        }
        const attrName = matches[i][2];
        if (!validateAttrName(attrName)) {
          return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is an invalid name.", getPositionFromMatch(matches[i]));
        }
        if (!attrNames.hasOwnProperty(attrName)) {
          attrNames[attrName] = 1;
        } else {
          return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is repeated.", getPositionFromMatch(matches[i]));
        }
      }
      return true;
    }
    function validateNumberAmpersand(xmlData, i) {
      let re = /\d/;
      if (xmlData[i] === "x") {
        i++;
        re = /[\da-fA-F]/;
      }
      for (; i < xmlData.length; i++) {
        if (xmlData[i] === ";")
          return i;
        if (!xmlData[i].match(re))
          break;
      }
      return -1;
    }
    function validateAmpersand(xmlData, i) {
      i++;
      if (xmlData[i] === ";")
        return -1;
      if (xmlData[i] === "#") {
        i++;
        return validateNumberAmpersand(xmlData, i);
      }
      let count = 0;
      for (; i < xmlData.length; i++, count++) {
        if (xmlData[i].match(/\w/) && count < 20)
          continue;
        if (xmlData[i] === ";")
          break;
        return -1;
      }
      return i;
    }
    function getErrorObject(code, message, lineNumber) {
      return {
        err: {
          code,
          msg: message,
          line: lineNumber.line || lineNumber,
          col: lineNumber.col
        }
      };
    }
    function validateAttrName(attrName) {
      return util.isName(attrName);
    }
    function validateTagName(tagname) {
      return util.isName(tagname);
    }
    function getLineNumberForPosition(xmlData, index) {
      const lines = xmlData.substring(0, index).split(/\r?\n/);
      return {
        line: lines.length,
        // column number is last line's length + 1, because column numbering starts at 1:
        col: lines[lines.length - 1].length + 1
      };
    }
    function getPositionFromMatch(match) {
      return match.startIndex + match[1].length;
    }
  }
});

// node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js
var require_OptionsBuilder = __commonJS({
  "node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js"(exports6) {
    init_dirname();
    var defaultOptions = {
      preserveOrder: false,
      attributeNamePrefix: "@_",
      attributesGroupName: false,
      textNodeName: "#text",
      ignoreAttributes: true,
      removeNSPrefix: false,
      // remove NS from tag name or attribute name if true
      allowBooleanAttributes: false,
      //a tag can have attributes without any value
      //ignoreRootElement : false,
      parseTagValue: true,
      parseAttributeValue: false,
      trimValues: true,
      //Trim string values of tag and attributes
      cdataPropName: false,
      numberParseOptions: {
        hex: true,
        leadingZeros: true,
        eNotation: true
      },
      tagValueProcessor: function(tagName, val2) {
        return val2;
      },
      attributeValueProcessor: function(attrName, val2) {
        return val2;
      },
      stopNodes: [],
      //nested tags will not be parsed even for errors
      alwaysCreateTextNode: false,
      isArray: () => false,
      commentPropName: false,
      unpairedTags: [],
      processEntities: true,
      htmlEntities: false,
      ignoreDeclaration: false,
      ignorePiTags: false,
      transformTagName: false,
      transformAttributeName: false,
      updateTag: function(tagName, jPath, attrs) {
        return tagName;
      }
      // skipEmptyListItem: false
    };
    var buildOptions = function(options) {
      return Object.assign({}, defaultOptions, options);
    };
    exports6.buildOptions = buildOptions;
    exports6.defaultOptions = defaultOptions;
  }
});

// node_modules/fast-xml-parser/src/xmlparser/xmlNode.js
var require_xmlNode = __commonJS({
  "node_modules/fast-xml-parser/src/xmlparser/xmlNode.js"(exports6, module) {
    "use strict";
    init_dirname();
    var XmlNode = class {
      constructor(tagname) {
        this.tagname = tagname;
        this.child = [];
        this[":@"] = {};
      }
      add(key, val2) {
        if (key === "__proto__") key = "#__proto__";
        this.child.push({ [key]: val2 });
      }
      addChild(node) {
        if (node.tagname === "__proto__") node.tagname = "#__proto__";
        if (node[":@"] && Object.keys(node[":@"]).length > 0) {
          this.child.push({ [node.tagname]: node.child, [":@"]: node[":@"] });
        } else {
          this.child.push({ [node.tagname]: node.child });
        }
      }
    };
    module.exports = XmlNode;
  }
});

// node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js
var require_DocTypeReader = __commonJS({
  "node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js"(exports6, module) {
    init_dirname();
    var util = require_util2();
    function readDocType(xmlData, i) {
      const entities = {};
      if (xmlData[i + 3] === "O" && xmlData[i + 4] === "C" && xmlData[i + 5] === "T" && xmlData[i + 6] === "Y" && xmlData[i + 7] === "P" && xmlData[i + 8] === "E") {
        i = i + 9;
        let angleBracketsCount = 1;
        let hasBody = false, comment = false;
        let exp = "";
        for (; i < xmlData.length; i++) {
          if (xmlData[i] === "<" && !comment) {
            if (hasBody && isEntity(xmlData, i)) {
              i += 7;
              [entityName, val, i] = readEntityExp(xmlData, i + 1);
              if (val.indexOf("&") === -1)
                entities[validateEntityName(entityName)] = {
                  regx: RegExp(`&${entityName};`, "g"),
                  val
                };
            } else if (hasBody && isElement(xmlData, i)) i += 8;
            else if (hasBody && isAttlist(xmlData, i)) i += 8;
            else if (hasBody && isNotation(xmlData, i)) i += 9;
            else if (isComment) comment = true;
            else throw new Error("Invalid DOCTYPE");
            angleBracketsCount++;
            exp = "";
          } else if (xmlData[i] === ">") {
            if (comment) {
              if (xmlData[i - 1] === "-" && xmlData[i - 2] === "-") {
                comment = false;
                angleBracketsCount--;
              }
            } else {
              angleBracketsCount--;
            }
            if (angleBracketsCount === 0) {
              break;
            }
          } else if (xmlData[i] === "[") {
            hasBody = true;
          } else {
            exp += xmlData[i];
          }
        }
        if (angleBracketsCount !== 0) {
          throw new Error(`Unclosed DOCTYPE`);
        }
      } else {
        throw new Error(`Invalid Tag instead of DOCTYPE`);
      }
      return { entities, i };
    }
    function readEntityExp(xmlData, i) {
      let entityName2 = "";
      for (; i < xmlData.length && (xmlData[i] !== "'" && xmlData[i] !== '"'); i++) {
        entityName2 += xmlData[i];
      }
      entityName2 = entityName2.trim();
      if (entityName2.indexOf(" ") !== -1) throw new Error("External entites are not supported");
      const startChar = xmlData[i++];
      let val2 = "";
      for (; i < xmlData.length && xmlData[i] !== startChar; i++) {
        val2 += xmlData[i];
      }
      return [entityName2, val2, i];
    }
    function isComment(xmlData, i) {
      if (xmlData[i + 1] === "!" && xmlData[i + 2] === "-" && xmlData[i + 3] === "-") return true;
      return false;
    }
    function isEntity(xmlData, i) {
      if (xmlData[i + 1] === "!" && xmlData[i + 2] === "E" && xmlData[i + 3] === "N" && xmlData[i + 4] === "T" && xmlData[i + 5] === "I" && xmlData[i + 6] === "T" && xmlData[i + 7] === "Y") return true;
      return false;
    }
    function isElement(xmlData, i) {
      if (xmlData[i + 1] === "!" && xmlData[i + 2] === "E" && xmlData[i + 3] === "L" && xmlData[i + 4] === "E" && xmlData[i + 5] === "M" && xmlData[i + 6] === "E" && xmlData[i + 7] === "N" && xmlData[i + 8] === "T") return true;
      return false;
    }
    function isAttlist(xmlData, i) {
      if (xmlData[i + 1] === "!" && xmlData[i + 2] === "A" && xmlData[i + 3] === "T" && xmlData[i + 4] === "T" && xmlData[i + 5] === "L" && xmlData[i + 6] === "I" && xmlData[i + 7] === "S" && xmlData[i + 8] === "T") return true;
      return false;
    }
    function isNotation(xmlData, i) {
      if (xmlData[i + 1] === "!" && xmlData[i + 2] === "N" && xmlData[i + 3] === "O" && xmlData[i + 4] === "T" && xmlData[i + 5] === "A" && xmlData[i + 6] === "T" && xmlData[i + 7] === "I" && xmlData[i + 8] === "O" && xmlData[i + 9] === "N") return true;
      return false;
    }
    function validateEntityName(name) {
      if (util.isName(name))
        return name;
      else
        throw new Error(`Invalid entity name ${name}`);
    }
    module.exports = readDocType;
  }
});

// node_modules/strnum/strnum.js
var require_strnum = __commonJS({
  "node_modules/strnum/strnum.js"(exports6, module) {
    init_dirname();
    var hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;
    var numRegex = /^([\-\+])?(0*)(\.[0-9]+([eE]\-?[0-9]+)?|[0-9]+(\.[0-9]+([eE]\-?[0-9]+)?)?)$/;
    if (!Number.parseInt && window.parseInt) {
      Number.parseInt = window.parseInt;
    }
    if (!Number.parseFloat && window.parseFloat) {
      Number.parseFloat = window.parseFloat;
    }
    var consider = {
      hex: true,
      leadingZeros: true,
      decimalPoint: ".",
      eNotation: true
      //skipLike: /regex/
    };
    function toNumber(str, options = {}) {
      options = Object.assign({}, consider, options);
      if (!str || typeof str !== "string") return str;
      let trimmedStr = str.trim();
      if (options.skipLike !== void 0 && options.skipLike.test(trimmedStr)) return str;
      else if (options.hex && hexRegex.test(trimmedStr)) {
        return Number.parseInt(trimmedStr, 16);
      } else {
        const match = numRegex.exec(trimmedStr);
        if (match) {
          const sign = match[1];
          const leadingZeros = match[2];
          let numTrimmedByZeros = trimZeros(match[3]);
          const eNotation = match[4] || match[6];
          if (!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== ".") return str;
          else if (!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== ".") return str;
          else {
            const num = Number(trimmedStr);
            const numStr = "" + num;
            if (numStr.search(/[eE]/) !== -1) {
              if (options.eNotation) return num;
              else return str;
            } else if (eNotation) {
              if (options.eNotation) return num;
              else return str;
            } else if (trimmedStr.indexOf(".") !== -1) {
              if (numStr === "0" && numTrimmedByZeros === "") return num;
              else if (numStr === numTrimmedByZeros) return num;
              else if (sign && numStr === "-" + numTrimmedByZeros) return num;
              else return str;
            }
            if (leadingZeros) {
              if (numTrimmedByZeros === numStr) return num;
              else if (sign + numTrimmedByZeros === numStr) return num;
              else return str;
            }
            if (trimmedStr === numStr) return num;
            else if (trimmedStr === sign + numStr) return num;
            return str;
          }
        } else {
          return str;
        }
      }
    }
    function trimZeros(numStr) {
      if (numStr && numStr.indexOf(".") !== -1) {
        numStr = numStr.replace(/0+$/, "");
        if (numStr === ".") numStr = "0";
        else if (numStr[0] === ".") numStr = "0" + numStr;
        else if (numStr[numStr.length - 1] === ".") numStr = numStr.substr(0, numStr.length - 1);
        return numStr;
      }
      return numStr;
    }
    module.exports = toNumber;
  }
});

// node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js
var require_OrderedObjParser = __commonJS({
  "node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js"(exports6, module) {
    "use strict";
    init_dirname();
    var util = require_util2();
    var xmlNode = require_xmlNode();
    var readDocType = require_DocTypeReader();
    var toNumber = require_strnum();
    var OrderedObjParser = class {
      constructor(options) {
        this.options = options;
        this.currentNode = null;
        this.tagsNodeStack = [];
        this.docTypeEntities = {};
        this.lastEntities = {
          "apos": { regex: /&(apos|#39|#x27);/g, val: "'" },
          "gt": { regex: /&(gt|#62|#x3E);/g, val: ">" },
          "lt": { regex: /&(lt|#60|#x3C);/g, val: "<" },
          "quot": { regex: /&(quot|#34|#x22);/g, val: '"' }
        };
        this.ampEntity = { regex: /&(amp|#38|#x26);/g, val: "&" };
        this.htmlEntities = {
          "space": { regex: /&(nbsp|#160);/g, val: " " },
          // "lt" : { regex: /&(lt|#60);/g, val: "<" },
          // "gt" : { regex: /&(gt|#62);/g, val: ">" },
          // "amp" : { regex: /&(amp|#38);/g, val: "&" },
          // "quot" : { regex: /&(quot|#34);/g, val: "\"" },
          // "apos" : { regex: /&(apos|#39);/g, val: "'" },
          "cent": { regex: /&(cent|#162);/g, val: "\xA2" },
          "pound": { regex: /&(pound|#163);/g, val: "\xA3" },
          "yen": { regex: /&(yen|#165);/g, val: "\xA5" },
          "euro": { regex: /&(euro|#8364);/g, val: "\u20AC" },
          "copyright": { regex: /&(copy|#169);/g, val: "\xA9" },
          "reg": { regex: /&(reg|#174);/g, val: "\xAE" },
          "inr": { regex: /&(inr|#8377);/g, val: "\u20B9" },
          "num_dec": { regex: /&#([0-9]{1,7});/g, val: (_, str) => String.fromCharCode(Number.parseInt(str, 10)) },
          "num_hex": { regex: /&#x([0-9a-fA-F]{1,6});/g, val: (_, str) => String.fromCharCode(Number.parseInt(str, 16)) }
        };
        this.addExternalEntities = addExternalEntities;
        this.parseXml = parseXml;
        this.parseTextData = parseTextData;
        this.resolveNameSpace = resolveNameSpace;
        this.buildAttributesMap = buildAttributesMap;
        this.isItStopNode = isItStopNode;
        this.replaceEntitiesValue = replaceEntitiesValue;
        this.readStopNodeData = readStopNodeData;
        this.saveTextToParentTag = saveTextToParentTag;
        this.addChild = addChild;
      }
    };
    function addExternalEntities(externalEntities) {
      const entKeys = Object.keys(externalEntities);
      for (let i = 0; i < entKeys.length; i++) {
        const ent = entKeys[i];
        this.lastEntities[ent] = {
          regex: new RegExp("&" + ent + ";", "g"),
          val: externalEntities[ent]
        };
      }
    }
    function parseTextData(val2, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {
      if (val2 !== void 0) {
        if (this.options.trimValues && !dontTrim) {
          val2 = val2.trim();
        }
        if (val2.length > 0) {
          if (!escapeEntities) val2 = this.replaceEntitiesValue(val2);
          const newval = this.options.tagValueProcessor(tagName, val2, jPath, hasAttributes, isLeafNode);
          if (newval === null || newval === void 0) {
            return val2;
          } else if (typeof newval !== typeof val2 || newval !== val2) {
            return newval;
          } else if (this.options.trimValues) {
            return parseValue(val2, this.options.parseTagValue, this.options.numberParseOptions);
          } else {
            const trimmedVal = val2.trim();
            if (trimmedVal === val2) {
              return parseValue(val2, this.options.parseTagValue, this.options.numberParseOptions);
            } else {
              return val2;
            }
          }
        }
      }
    }
    function resolveNameSpace(tagname) {
      if (this.options.removeNSPrefix) {
        const tags = tagname.split(":");
        const prefix = tagname.charAt(0) === "/" ? "/" : "";
        if (tags[0] === "xmlns") {
          return "";
        }
        if (tags.length === 2) {
          tagname = prefix + tags[1];
        }
      }
      return tagname;
    }
    var attrsRegx = new RegExp(`([^\\s=]+)\\s*(=\\s*(['"])([\\s\\S]*?)\\3)?`, "gm");
    function buildAttributesMap(attrStr, jPath, tagName) {
      if (!this.options.ignoreAttributes && typeof attrStr === "string") {
        const matches = util.getAllMatches(attrStr, attrsRegx);
        const len = matches.length;
        const attrs = {};
        for (let i = 0; i < len; i++) {
          const attrName = this.resolveNameSpace(matches[i][1]);
          let oldVal = matches[i][4];
          let aName = this.options.attributeNamePrefix + attrName;
          if (attrName.length) {
            if (this.options.transformAttributeName) {
              aName = this.options.transformAttributeName(aName);
            }
            if (aName === "__proto__") aName = "#__proto__";
            if (oldVal !== void 0) {
              if (this.options.trimValues) {
                oldVal = oldVal.trim();
              }
              oldVal = this.replaceEntitiesValue(oldVal);
              const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);
              if (newVal === null || newVal === void 0) {
                attrs[aName] = oldVal;
              } else if (typeof newVal !== typeof oldVal || newVal !== oldVal) {
                attrs[aName] = newVal;
              } else {
                attrs[aName] = parseValue(
                  oldVal,
                  this.options.parseAttributeValue,
                  this.options.numberParseOptions
                );
              }
            } else if (this.options.allowBooleanAttributes) {
              attrs[aName] = true;
            }
          }
        }
        if (!Object.keys(attrs).length) {
          return;
        }
        if (this.options.attributesGroupName) {
          const attrCollection = {};
          attrCollection[this.options.attributesGroupName] = attrs;
          return attrCollection;
        }
        return attrs;
      }
    }
    var parseXml = function(xmlData) {
      xmlData = xmlData.replace(/\r\n?/g, "\n");
      const xmlObj = new xmlNode("!xml");
      let currentNode = xmlObj;
      let textData = "";
      let jPath = "";
      for (let i = 0; i < xmlData.length; i++) {
        const ch = xmlData[i];
        if (ch === "<") {
          if (xmlData[i + 1] === "/") {
            const closeIndex = findClosingIndex(xmlData, ">", i, "Closing Tag is not closed.");
            let tagName = xmlData.substring(i + 2, closeIndex).trim();
            if (this.options.removeNSPrefix) {
              const colonIndex = tagName.indexOf(":");
              if (colonIndex !== -1) {
                tagName = tagName.substr(colonIndex + 1);
              }
            }
            if (this.options.transformTagName) {
              tagName = this.options.transformTagName(tagName);
            }
            if (currentNode) {
              textData = this.saveTextToParentTag(textData, currentNode, jPath);
            }
            const lastTagName = jPath.substring(jPath.lastIndexOf(".") + 1);
            if (tagName && this.options.unpairedTags.indexOf(tagName) !== -1) {
              throw new Error(`Unpaired tag can not be used as closing tag: </${tagName}>`);
            }
            let propIndex = 0;
            if (lastTagName && this.options.unpairedTags.indexOf(lastTagName) !== -1) {
              propIndex = jPath.lastIndexOf(".", jPath.lastIndexOf(".") - 1);
              this.tagsNodeStack.pop();
            } else {
              propIndex = jPath.lastIndexOf(".");
            }
            jPath = jPath.substring(0, propIndex);
            currentNode = this.tagsNodeStack.pop();
            textData = "";
            i = closeIndex;
          } else if (xmlData[i + 1] === "?") {
            let tagData = readTagExp(xmlData, i, false, "?>");
            if (!tagData) throw new Error("Pi Tag is not closed.");
            textData = this.saveTextToParentTag(textData, currentNode, jPath);
            if (this.options.ignoreDeclaration && tagData.tagName === "?xml" || this.options.ignorePiTags) {
            } else {
              const childNode = new xmlNode(tagData.tagName);
              childNode.add(this.options.textNodeName, "");
              if (tagData.tagName !== tagData.tagExp && tagData.attrExpPresent) {
                childNode[":@"] = this.buildAttributesMap(tagData.tagExp, jPath, tagData.tagName);
              }
              this.addChild(currentNode, childNode, jPath);
            }
            i = tagData.closeIndex + 1;
          } else if (xmlData.substr(i + 1, 3) === "!--") {
            const endIndex = findClosingIndex(xmlData, "-->", i + 4, "Comment is not closed.");
            if (this.options.commentPropName) {
              const comment = xmlData.substring(i + 4, endIndex - 2);
              textData = this.saveTextToParentTag(textData, currentNode, jPath);
              currentNode.add(this.options.commentPropName, [{ [this.options.textNodeName]: comment }]);
            }
            i = endIndex;
          } else if (xmlData.substr(i + 1, 2) === "!D") {
            const result = readDocType(xmlData, i);
            this.docTypeEntities = result.entities;
            i = result.i;
          } else if (xmlData.substr(i + 1, 2) === "![") {
            const closeIndex = findClosingIndex(xmlData, "]]>", i, "CDATA is not closed.") - 2;
            const tagExp = xmlData.substring(i + 9, closeIndex);
            textData = this.saveTextToParentTag(textData, currentNode, jPath);
            let val2 = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true, true);
            if (val2 == void 0) val2 = "";
            if (this.options.cdataPropName) {
              currentNode.add(this.options.cdataPropName, [{ [this.options.textNodeName]: tagExp }]);
            } else {
              currentNode.add(this.options.textNodeName, val2);
            }
            i = closeIndex + 2;
          } else {
            let result = readTagExp(xmlData, i, this.options.removeNSPrefix);
            let tagName = result.tagName;
            const rawTagName = result.rawTagName;
            let tagExp = result.tagExp;
            let attrExpPresent = result.attrExpPresent;
            let closeIndex = result.closeIndex;
            if (this.options.transformTagName) {
              tagName = this.options.transformTagName(tagName);
            }
            if (currentNode && textData) {
              if (currentNode.tagname !== "!xml") {
                textData = this.saveTextToParentTag(textData, currentNode, jPath, false);
              }
            }
            const lastTag = currentNode;
            if (lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1) {
              currentNode = this.tagsNodeStack.pop();
              jPath = jPath.substring(0, jPath.lastIndexOf("."));
            }
            if (tagName !== xmlObj.tagname) {
              jPath += jPath ? "." + tagName : tagName;
            }
            if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) {
              let tagContent = "";
              if (tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1) {
                if (tagName[tagName.length - 1] === "/") {
                  tagName = tagName.substr(0, tagName.length - 1);
                  jPath = jPath.substr(0, jPath.length - 1);
                  tagExp = tagName;
                } else {
                  tagExp = tagExp.substr(0, tagExp.length - 1);
                }
                i = result.closeIndex;
              } else if (this.options.unpairedTags.indexOf(tagName) !== -1) {
                i = result.closeIndex;
              } else {
                const result2 = this.readStopNodeData(xmlData, rawTagName, closeIndex + 1);
                if (!result2) throw new Error(`Unexpected end of ${rawTagName}`);
                i = result2.i;
                tagContent = result2.tagContent;
              }
              const childNode = new xmlNode(tagName);
              if (tagName !== tagExp && attrExpPresent) {
                childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName);
              }
              if (tagContent) {
                tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);
              }
              jPath = jPath.substr(0, jPath.lastIndexOf("."));
              childNode.add(this.options.textNodeName, tagContent);
              this.addChild(currentNode, childNode, jPath);
            } else {
              if (tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1) {
                if (tagName[tagName.length - 1] === "/") {
                  tagName = tagName.substr(0, tagName.length - 1);
                  jPath = jPath.substr(0, jPath.length - 1);
                  tagExp = tagName;
                } else {
                  tagExp = tagExp.substr(0, tagExp.length - 1);
                }
                if (this.options.transformTagName) {
                  tagName = this.options.transformTagName(tagName);
                }
                const childNode = new xmlNode(tagName);
                if (tagName !== tagExp && attrExpPresent) {
                  childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName);
                }
                this.addChild(currentNode, childNode, jPath);
                jPath = jPath.substr(0, jPath.lastIndexOf("."));
              } else {
                const childNode = new xmlNode(tagName);
                this.tagsNodeStack.push(currentNode);
                if (tagName !== tagExp && attrExpPresent) {
                  childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName);
                }
                this.addChild(currentNode, childNode, jPath);
                currentNode = childNode;
              }
              textData = "";
              i = closeIndex;
            }
          }
        } else {
          textData += xmlData[i];
        }
      }
      return xmlObj.child;
    };
    function addChild(currentNode, childNode, jPath) {
      const result = this.options.updateTag(childNode.tagname, jPath, childNode[":@"]);
      if (result === false) {
      } else if (typeof result === "string") {
        childNode.tagname = result;
        currentNode.addChild(childNode);
      } else {
        currentNode.addChild(childNode);
      }
    }
    var replaceEntitiesValue = function(val2) {
      if (this.options.processEntities) {
        for (let entityName2 in this.docTypeEntities) {
          const entity = this.docTypeEntities[entityName2];
          val2 = val2.replace(entity.regx, entity.val);
        }
        for (let entityName2 in this.lastEntities) {
          const entity = this.lastEntities[entityName2];
          val2 = val2.replace(entity.regex, entity.val);
        }
        if (this.options.htmlEntities) {
          for (let entityName2 in this.htmlEntities) {
            const entity = this.htmlEntities[entityName2];
            val2 = val2.replace(entity.regex, entity.val);
          }
        }
        val2 = val2.replace(this.ampEntity.regex, this.ampEntity.val);
      }
      return val2;
    };
    function saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {
      if (textData) {
        if (isLeafNode === void 0) isLeafNode = Object.keys(currentNode.child).length === 0;
        textData = this.parseTextData(
          textData,
          currentNode.tagname,
          jPath,
          false,
          currentNode[":@"] ? Object.keys(currentNode[":@"]).length !== 0 : false,
          isLeafNode
        );
        if (textData !== void 0 && textData !== "")
          currentNode.add(this.options.textNodeName, textData);
        textData = "";
      }
      return textData;
    }
    function isItStopNode(stopNodes, jPath, currentTagName) {
      const allNodesExp = "*." + currentTagName;
      for (const stopNodePath in stopNodes) {
        const stopNodeExp = stopNodes[stopNodePath];
        if (allNodesExp === stopNodeExp || jPath === stopNodeExp) return true;
      }
      return false;
    }
    function tagExpWithClosingIndex(xmlData, i, closingChar = ">") {
      let attrBoundary;
      let tagExp = "";
      for (let index = i; index < xmlData.length; index++) {
        let ch = xmlData[index];
        if (attrBoundary) {
          if (ch === attrBoundary) attrBoundary = "";
        } else if (ch === '"' || ch === "'") {
          attrBoundary = ch;
        } else if (ch === closingChar[0]) {
          if (closingChar[1]) {
            if (xmlData[index + 1] === closingChar[1]) {
              return {
                data: tagExp,
                index
              };
            }
          } else {
            return {
              data: tagExp,
              index
            };
          }
        } else if (ch === "	") {
          ch = " ";
        }
        tagExp += ch;
      }
    }
    function findClosingIndex(xmlData, str, i, errMsg) {
      const closingIndex = xmlData.indexOf(str, i);
      if (closingIndex === -1) {
        throw new Error(errMsg);
      } else {
        return closingIndex + str.length - 1;
      }
    }
    function readTagExp(xmlData, i, removeNSPrefix, closingChar = ">") {
      const result = tagExpWithClosingIndex(xmlData, i + 1, closingChar);
      if (!result) return;
      let tagExp = result.data;
      const closeIndex = result.index;
      const separatorIndex = tagExp.search(/\s/);
      let tagName = tagExp;
      let attrExpPresent = true;
      if (separatorIndex !== -1) {
        tagName = tagExp.substring(0, separatorIndex);
        tagExp = tagExp.substring(separatorIndex + 1).trimStart();
      }
      const rawTagName = tagName;
      if (removeNSPrefix) {
        const colonIndex = tagName.indexOf(":");
        if (colonIndex !== -1) {
          tagName = tagName.substr(colonIndex + 1);
          attrExpPresent = tagName !== result.data.substr(colonIndex + 1);
        }
      }
      return {
        tagName,
        tagExp,
        closeIndex,
        attrExpPresent,
        rawTagName
      };
    }
    function readStopNodeData(xmlData, tagName, i) {
      const startIndex = i;
      let openTagCount = 1;
      for (; i < xmlData.length; i++) {
        if (xmlData[i] === "<") {
          if (xmlData[i + 1] === "/") {
            const closeIndex = findClosingIndex(xmlData, ">", i, `${tagName} is not closed`);
            let closeTagName = xmlData.substring(i + 2, closeIndex).trim();
            if (closeTagName === tagName) {
              openTagCount--;
              if (openTagCount === 0) {
                return {
                  tagContent: xmlData.substring(startIndex, i),
                  i: closeIndex
                };
              }
            }
            i = closeIndex;
          } else if (xmlData[i + 1] === "?") {
            const closeIndex = findClosingIndex(xmlData, "?>", i + 1, "StopNode is not closed.");
            i = closeIndex;
          } else if (xmlData.substr(i + 1, 3) === "!--") {
            const closeIndex = findClosingIndex(xmlData, "-->", i + 3, "StopNode is not closed.");
            i = closeIndex;
          } else if (xmlData.substr(i + 1, 2) === "![") {
            const closeIndex = findClosingIndex(xmlData, "]]>", i, "StopNode is not closed.") - 2;
            i = closeIndex;
          } else {
            const tagData = readTagExp(xmlData, i, ">");
            if (tagData) {
              const openTagName = tagData && tagData.tagName;
              if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length - 1] !== "/") {
                openTagCount++;
              }
              i = tagData.closeIndex;
            }
          }
        }
      }
    }
    function parseValue(val2, shouldParse, options) {
      if (shouldParse && typeof val2 === "string") {
        const newval = val2.trim();
        if (newval === "true") return true;
        else if (newval === "false") return false;
        else return toNumber(val2, options);
      } else {
        if (util.isExist(val2)) {
          return val2;
        } else {
          return "";
        }
      }
    }
    module.exports = OrderedObjParser;
  }
});

// node_modules/fast-xml-parser/src/xmlparser/node2json.js
var require_node2json = __commonJS({
  "node_modules/fast-xml-parser/src/xmlparser/node2json.js"(exports6) {
    "use strict";
    init_dirname();
    function prettify(node, options) {
      return compress(node, options);
    }
    function compress(arr, options, jPath) {
      let text;
      const compressedObj = {};
      for (let i = 0; i < arr.length; i++) {
        const tagObj = arr[i];
        const property = propName(tagObj);
        let newJpath = "";
        if (jPath === void 0) newJpath = property;
        else newJpath = jPath + "." + property;
        if (property === options.textNodeName) {
          if (text === void 0) text = tagObj[property];
          else text += "" + tagObj[property];
        } else if (property === void 0) {
          continue;
        } else if (tagObj[property]) {
          let val2 = compress(tagObj[property], options, newJpath);
          const isLeaf = isLeafTag(val2, options);
          if (tagObj[":@"]) {
            assignAttributes(val2, tagObj[":@"], newJpath, options);
          } else if (Object.keys(val2).length === 1 && val2[options.textNodeName] !== void 0 && !options.alwaysCreateTextNode) {
            val2 = val2[options.textNodeName];
          } else if (Object.keys(val2).length === 0) {
            if (options.alwaysCreateTextNode) val2[options.textNodeName] = "";
            else val2 = "";
          }
          if (compressedObj[property] !== void 0 && compressedObj.hasOwnProperty(property)) {
            if (!Array.isArray(compressedObj[property])) {
              compressedObj[property] = [compressedObj[property]];
            }
            compressedObj[property].push(val2);
          } else {
            if (options.isArray(property, newJpath, isLeaf)) {
              compressedObj[property] = [val2];
            } else {
              compressedObj[property] = val2;
            }
          }
        }
      }
      if (typeof text === "string") {
        if (text.length > 0) compressedObj[options.textNodeName] = text;
      } else if (text !== void 0) compressedObj[options.textNodeName] = text;
      return compressedObj;
    }
    function propName(obj) {
      const keys = Object.keys(obj);
      for (let i = 0; i < keys.length; i++) {
        const key = keys[i];
        if (key !== ":@") return key;
      }
    }
    function assignAttributes(obj, attrMap, jpath, options) {
      if (attrMap) {
        const keys = Object.keys(attrMap);
        const len = keys.length;
        for (let i = 0; i < len; i++) {
          const atrrName = keys[i];
          if (options.isArray(atrrName, jpath + "." + atrrName, true, true)) {
            obj[atrrName] = [attrMap[atrrName]];
          } else {
            obj[atrrName] = attrMap[atrrName];
          }
        }
      }
    }
    function isLeafTag(obj, options) {
      const { textNodeName } = options;
      const propCount = Object.keys(obj).length;
      if (propCount === 0) {
        return true;
      }
      if (propCount === 1 && (obj[textNodeName] || typeof obj[textNodeName] === "boolean" || obj[textNodeName] === 0)) {
        return true;
      }
      return false;
    }
    exports6.prettify = prettify;
  }
});

// node_modules/fast-xml-parser/src/xmlparser/XMLParser.js
var require_XMLParser = __commonJS({
  "node_modules/fast-xml-parser/src/xmlparser/XMLParser.js"(exports6, module) {
    init_dirname();
    var { buildOptions } = require_OptionsBuilder();
    var OrderedObjParser = require_OrderedObjParser();
    var { prettify } = require_node2json();
    var validator = require_validator();
    var XMLParser3 = class {
      constructor(options) {
        this.externalEntities = {};
        this.options = buildOptions(options);
      }
      /**
       * Parse XML dats to JS object 
       * @param {string|Buffer} xmlData 
       * @param {boolean|Object} validationOption 
       */
      parse(xmlData, validationOption) {
        if (typeof xmlData === "string") {
        } else if (xmlData.toString) {
          xmlData = xmlData.toString();
        } else {
          throw new Error("XML data is accepted in String or Bytes[] form.");
        }
        if (validationOption) {
          if (validationOption === true) validationOption = {};
          const result = validator.validate(xmlData, validationOption);
          if (result !== true) {
            throw Error(`${result.err.msg}:${result.err.line}:${result.err.col}`);
          }
        }
        const orderedObjParser = new OrderedObjParser(this.options);
        orderedObjParser.addExternalEntities(this.externalEntities);
        const orderedResult = orderedObjParser.parseXml(xmlData);
        if (this.options.preserveOrder || orderedResult === void 0) return orderedResult;
        else return prettify(orderedResult, this.options);
      }
      /**
       * Add Entity which is not by default supported by this library
       * @param {string} key 
       * @param {string} value 
       */
      addEntity(key, value) {
        if (value.indexOf("&") !== -1) {
          throw new Error("Entity value can't have '&'");
        } else if (key.indexOf("&") !== -1 || key.indexOf(";") !== -1) {
          throw new Error("An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'");
        } else if (value === "&") {
          throw new Error("An entity with value '&' is not permitted");
        } else {
          this.externalEntities[key] = value;
        }
      }
    };
    module.exports = XMLParser3;
  }
});

// node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js
var require_orderedJs2Xml = __commonJS({
  "node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js"(exports6, module) {
    init_dirname();
    var EOL = "\n";
    function toXml(jArray, options) {
      let indentation = "";
      if (options.format && options.indentBy.length > 0) {
        indentation = EOL;
      }
      return arrToStr(jArray, options, "", indentation);
    }
    function arrToStr(arr, options, jPath, indentation) {
      let xmlStr = "";
      let isPreviousElementTag = false;
      for (let i = 0; i < arr.length; i++) {
        const tagObj = arr[i];
        const tagName = propName(tagObj);
        if (tagName === void 0) continue;
        let newJPath = "";
        if (jPath.length === 0) newJPath = tagName;
        else newJPath = `${jPath}.${tagName}`;
        if (tagName === options.textNodeName) {
          let tagText = tagObj[tagName];
          if (!isStopNode(newJPath, options)) {
            tagText = options.tagValueProcessor(tagName, tagText);
            tagText = replaceEntitiesValue(tagText, options);
          }
          if (isPreviousElementTag) {
            xmlStr += indentation;
          }
          xmlStr += tagText;
          isPreviousElementTag = false;
          continue;
        } else if (tagName === options.cdataPropName) {
          if (isPreviousElementTag) {
            xmlStr += indentation;
          }
          xmlStr += `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;
          isPreviousElementTag = false;
          continue;
        } else if (tagName === options.commentPropName) {
          xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;
          isPreviousElementTag = true;
          continue;
        } else if (tagName[0] === "?") {
          const attStr2 = attr_to_str(tagObj[":@"], options);
          const tempInd = tagName === "?xml" ? "" : indentation;
          let piTextNodeName = tagObj[tagName][0][options.textNodeName];
          piTextNodeName = piTextNodeName.length !== 0 ? " " + piTextNodeName : "";
          xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr2}?>`;
          isPreviousElementTag = true;
          continue;
        }
        let newIdentation = indentation;
        if (newIdentation !== "") {
          newIdentation += options.indentBy;
        }
        const attStr = attr_to_str(tagObj[":@"], options);
        const tagStart = indentation + `<${tagName}${attStr}`;
        const tagValue = arrToStr(tagObj[tagName], options, newJPath, newIdentation);
        if (options.unpairedTags.indexOf(tagName) !== -1) {
          if (options.suppressUnpairedNode) xmlStr += tagStart + ">";
          else xmlStr += tagStart + "/>";
        } else if ((!tagValue || tagValue.length === 0) && options.suppressEmptyNode) {
          xmlStr += tagStart + "/>";
        } else if (tagValue && tagValue.endsWith(">")) {
          xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>`;
        } else {
          xmlStr += tagStart + ">";
          if (tagValue && indentation !== "" && (tagValue.includes("/>") || tagValue.includes("</"))) {
            xmlStr += indentation + options.indentBy + tagValue + indentation;
          } else {
            xmlStr += tagValue;
          }
          xmlStr += `</${tagName}>`;
        }
        isPreviousElementTag = true;
      }
      return xmlStr;
    }
    function propName(obj) {
      const keys = Object.keys(obj);
      for (let i = 0; i < keys.length; i++) {
        const key = keys[i];
        if (!obj.hasOwnProperty(key)) continue;
        if (key !== ":@") return key;
      }
    }
    function attr_to_str(attrMap, options) {
      let attrStr = "";
      if (attrMap && !options.ignoreAttributes) {
        for (let attr in attrMap) {
          if (!attrMap.hasOwnProperty(attr)) continue;
          let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);
          attrVal = replaceEntitiesValue(attrVal, options);
          if (attrVal === true && options.suppressBooleanAttributes) {
            attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}`;
          } else {
            attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}="${attrVal}"`;
          }
        }
      }
      return attrStr;
    }
    function isStopNode(jPath, options) {
      jPath = jPath.substr(0, jPath.length - options.textNodeName.length - 1);
      let tagName = jPath.substr(jPath.lastIndexOf(".") + 1);
      for (let index in options.stopNodes) {
        if (options.stopNodes[index] === jPath || options.stopNodes[index] === "*." + tagName) return true;
      }
      return false;
    }
    function replaceEntitiesValue(textValue, options) {
      if (textValue && textValue.length > 0 && options.processEntities) {
        for (let i = 0; i < options.entities.length; i++) {
          const entity = options.entities[i];
          textValue = textValue.replace(entity.regex, entity.val);
        }
      }
      return textValue;
    }
    module.exports = toXml;
  }
});

// node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js
var require_json2xml = __commonJS({
  "node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js"(exports6, module) {
    "use strict";
    init_dirname();
    var buildFromOrderedJs = require_orderedJs2Xml();
    var defaultOptions = {
      attributeNamePrefix: "@_",
      attributesGroupName: false,
      textNodeName: "#text",
      ignoreAttributes: true,
      cdataPropName: false,
      format: false,
      indentBy: "  ",
      suppressEmptyNode: false,
      suppressUnpairedNode: true,
      suppressBooleanAttributes: true,
      tagValueProcessor: function(key, a) {
        return a;
      },
      attributeValueProcessor: function(attrName, a) {
        return a;
      },
      preserveOrder: false,
      commentPropName: false,
      unpairedTags: [],
      entities: [
        { regex: new RegExp("&", "g"), val: "&amp;" },
        //it must be on top
        { regex: new RegExp(">", "g"), val: "&gt;" },
        { regex: new RegExp("<", "g"), val: "&lt;" },
        { regex: new RegExp("'", "g"), val: "&apos;" },
        { regex: new RegExp('"', "g"), val: "&quot;" }
      ],
      processEntities: true,
      stopNodes: [],
      // transformTagName: false,
      // transformAttributeName: false,
      oneListGroup: false
    };
    function Builder(options) {
      this.options = Object.assign({}, defaultOptions, options);
      if (this.options.ignoreAttributes || this.options.attributesGroupName) {
        this.isAttribute = function() {
          return false;
        };
      } else {
        this.attrPrefixLen = this.options.attributeNamePrefix.length;
        this.isAttribute = isAttribute;
      }
      this.processTextOrObjNode = processTextOrObjNode;
      if (this.options.format) {
        this.indentate = indentate;
        this.tagEndChar = ">\n";
        this.newLine = "\n";
      } else {
        this.indentate = function() {
          return "";
        };
        this.tagEndChar = ">";
        this.newLine = "";
      }
    }
    Builder.prototype.build = function(jObj) {
      if (this.options.preserveOrder) {
        return buildFromOrderedJs(jObj, this.options);
      } else {
        if (Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1) {
          jObj = {
            [this.options.arrayNodeName]: jObj
          };
        }
        return this.j2x(jObj, 0).val;
      }
    };
    Builder.prototype.j2x = function(jObj, level) {
      let attrStr = "";
      let val2 = "";
      for (let key in jObj) {
        if (!Object.prototype.hasOwnProperty.call(jObj, key)) continue;
        if (typeof jObj[key] === "undefined") {
          if (this.isAttribute(key)) {
            val2 += "";
          }
        } else if (jObj[key] === null) {
          if (this.isAttribute(key)) {
            val2 += "";
          } else if (key[0] === "?") {
            val2 += this.indentate(level) + "<" + key + "?" + this.tagEndChar;
          } else {
            val2 += this.indentate(level) + "<" + key + "/" + this.tagEndChar;
          }
        } else if (jObj[key] instanceof Date) {
          val2 += this.buildTextValNode(jObj[key], key, "", level);
        } else if (typeof jObj[key] !== "object") {
          const attr = this.isAttribute(key);
          if (attr) {
            attrStr += this.buildAttrPairStr(attr, "" + jObj[key]);
          } else {
            if (key === this.options.textNodeName) {
              let newval = this.options.tagValueProcessor(key, "" + jObj[key]);
              val2 += this.replaceEntitiesValue(newval);
            } else {
              val2 += this.buildTextValNode(jObj[key], key, "", level);
            }
          }
        } else if (Array.isArray(jObj[key])) {
          const arrLen = jObj[key].length;
          let listTagVal = "";
          let listTagAttr = "";
          for (let j = 0; j < arrLen; j++) {
            const item = jObj[key][j];
            if (typeof item === "undefined") {
            } else if (item === null) {
              if (key[0] === "?") val2 += this.indentate(level) + "<" + key + "?" + this.tagEndChar;
              else val2 += this.indentate(level) + "<" + key + "/" + this.tagEndChar;
            } else if (typeof item === "object") {
              if (this.options.oneListGroup) {
                const result = this.j2x(item, level + 1);
                listTagVal += result.val;
                if (this.options.attributesGroupName && item.hasOwnProperty(this.options.attributesGroupName)) {
                  listTagAttr += result.attrStr;
                }
              } else {
                listTagVal += this.processTextOrObjNode(item, key, level);
              }
            } else {
              if (this.options.oneListGroup) {
                let textValue = this.options.tagValueProcessor(key, item);
                textValue = this.replaceEntitiesValue(textValue);
                listTagVal += textValue;
              } else {
                listTagVal += this.buildTextValNode(item, key, "", level);
              }
            }
          }
          if (this.options.oneListGroup) {
            listTagVal = this.buildObjectNode(listTagVal, key, listTagAttr, level);
          }
          val2 += listTagVal;
        } else {
          if (this.options.attributesGroupName && key === this.options.attributesGroupName) {
            const Ks = Object.keys(jObj[key]);
            const L = Ks.length;
            for (let j = 0; j < L; j++) {
              attrStr += this.buildAttrPairStr(Ks[j], "" + jObj[key][Ks[j]]);
            }
          } else {
            val2 += this.processTextOrObjNode(jObj[key], key, level);
          }
        }
      }
      return { attrStr, val: val2 };
    };
    Builder.prototype.buildAttrPairStr = function(attrName, val2) {
      val2 = this.options.attributeValueProcessor(attrName, "" + val2);
      val2 = this.replaceEntitiesValue(val2);
      if (this.options.suppressBooleanAttributes && val2 === "true") {
        return " " + attrName;
      } else return " " + attrName + '="' + val2 + '"';
    };
    function processTextOrObjNode(object, key, level) {
      const result = this.j2x(object, level + 1);
      if (object[this.options.textNodeName] !== void 0 && Object.keys(object).length === 1) {
        return this.buildTextValNode(object[this.options.textNodeName], key, result.attrStr, level);
      } else {
        return this.buildObjectNode(result.val, key, result.attrStr, level);
      }
    }
    Builder.prototype.buildObjectNode = function(val2, key, attrStr, level) {
      if (val2 === "") {
        if (key[0] === "?") return this.indentate(level) + "<" + key + attrStr + "?" + this.tagEndChar;
        else {
          return this.indentate(level) + "<" + key + attrStr + this.closeTag(key) + this.tagEndChar;
        }
      } else {
        let tagEndExp = "</" + key + this.tagEndChar;
        let piClosingChar = "";
        if (key[0] === "?") {
          piClosingChar = "?";
          tagEndExp = "";
        }
        if ((attrStr || attrStr === "") && val2.indexOf("<") === -1) {
          return this.indentate(level) + "<" + key + attrStr + piClosingChar + ">" + val2 + tagEndExp;
        } else if (this.options.commentPropName !== false && key === this.options.commentPropName && piClosingChar.length === 0) {
          return this.indentate(level) + `<!--${val2}-->` + this.newLine;
        } else {
          return this.indentate(level) + "<" + key + attrStr + piClosingChar + this.tagEndChar + val2 + this.indentate(level) + tagEndExp;
        }
      }
    };
    Builder.prototype.closeTag = function(key) {
      let closeTag = "";
      if (this.options.unpairedTags.indexOf(key) !== -1) {
        if (!this.options.suppressUnpairedNode) closeTag = "/";
      } else if (this.options.suppressEmptyNode) {
        closeTag = "/";
      } else {
        closeTag = `></${key}`;
      }
      return closeTag;
    };
    Builder.prototype.buildTextValNode = function(val2, key, attrStr, level) {
      if (this.options.cdataPropName !== false && key === this.options.cdataPropName) {
        return this.indentate(level) + `<![CDATA[${val2}]]>` + this.newLine;
      } else if (this.options.commentPropName !== false && key === this.options.commentPropName) {
        return this.indentate(level) + `<!--${val2}-->` + this.newLine;
      } else if (key[0] === "?") {
        return this.indentate(level) + "<" + key + attrStr + "?" + this.tagEndChar;
      } else {
        let textValue = this.options.tagValueProcessor(key, val2);
        textValue = this.replaceEntitiesValue(textValue);
        if (textValue === "") {
          return this.indentate(level) + "<" + key + attrStr + this.closeTag(key) + this.tagEndChar;
        } else {
          return this.indentate(level) + "<" + key + attrStr + ">" + textValue + "</" + key + this.tagEndChar;
        }
      }
    };
    Builder.prototype.replaceEntitiesValue = function(textValue) {
      if (textValue && textValue.length > 0 && this.options.processEntities) {
        for (let i = 0; i < this.options.entities.length; i++) {
          const entity = this.options.entities[i];
          textValue = textValue.replace(entity.regex, entity.val);
        }
      }
      return textValue;
    };
    function indentate(level) {
      return this.options.indentBy.repeat(level);
    }
    function isAttribute(name) {
      if (name.startsWith(this.options.attributeNamePrefix) && name !== this.options.textNodeName) {
        return name.substr(this.attrPrefixLen);
      } else {
        return false;
      }
    }
    module.exports = Builder;
  }
});

// node_modules/fast-xml-parser/src/fxp.js
var require_fxp = __commonJS({
  "node_modules/fast-xml-parser/src/fxp.js"(exports6, module) {
    "use strict";
    init_dirname();
    var validator = require_validator();
    var XMLParser3 = require_XMLParser();
    var XMLBuilder = require_json2xml();
    module.exports = {
      XMLParser: XMLParser3,
      XMLValidator: validator,
      XMLBuilder
    };
  }
});

// node_modules/@aws-sdk/core/dist-es/submodules/protocols/xml/parseXmlBody.js
var import_smithy_client3, import_fast_xml_parser, parseXmlBody, parseXmlErrorBody, loadRestXmlErrorCode;
var init_parseXmlBody = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/protocols/xml/parseXmlBody.js"() {
    init_dirname();
    import_smithy_client3 = __toESM(require_dist_cjs23());
    import_fast_xml_parser = __toESM(require_fxp());
    init_common();
    parseXmlBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        const parser = new import_fast_xml_parser.XMLParser({
          attributeNamePrefix: "",
          htmlEntities: true,
          ignoreAttributes: false,
          ignoreDeclaration: true,
          parseTagValue: false,
          trimValues: false,
          tagValueProcessor: (_, val2) => val2.trim() === "" && val2.includes("\n") ? "" : void 0
        });
        parser.addEntity("#xD", "\r");
        parser.addEntity("#10", "\n");
        let parsedObj;
        try {
          parsedObj = parser.parse(encoded, true);
        } catch (e) {
          if (e && typeof e === "object") {
            Object.defineProperty(e, "$responseBodyText", {
              value: encoded
            });
          }
          throw e;
        }
        const textNodeName = "#text";
        const key = Object.keys(parsedObj)[0];
        const parsedObjToReturn = parsedObj[key];
        if (parsedObjToReturn[textNodeName]) {
          parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
          delete parsedObjToReturn[textNodeName];
        }
        return (0, import_smithy_client3.getValueFromTextNode)(parsedObjToReturn);
      }
      return {};
    });
    parseXmlErrorBody = async (errorBody, context) => {
      const value = await parseXmlBody(errorBody, context);
      if (value.Error) {
        value.Error.message = value.Error.message ?? value.Error.Message;
      }
      return value;
    };
    loadRestXmlErrorCode = (output, data) => {
      if (data?.Error?.Code !== void 0) {
        return data.Error.Code;
      }
      if (data?.Code !== void 0) {
        return data.Code;
      }
      if (output.statusCode == 404) {
        return "NotFound";
      }
    };
  }
});

// node_modules/@aws-sdk/core/dist-es/submodules/protocols/index.js
var init_protocols2 = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/protocols/index.js"() {
    init_dirname();
    init_coercing_serializers();
    init_awsExpectUnion();
    init_parseJsonBody();
    init_parseXmlBody();
  }
});

// node_modules/@aws-sdk/core/dist-es/index.js
var dist_es_exports2 = {};
__export(dist_es_exports2, {
  AWSSDKSigV4Signer: () => AWSSDKSigV4Signer,
  AwsSdkSigV4ASigner: () => AwsSdkSigV4ASigner,
  AwsSdkSigV4Signer: () => AwsSdkSigV4Signer,
  NODE_SIGV4A_CONFIG_OPTIONS: () => NODE_SIGV4A_CONFIG_OPTIONS,
  _toBool: () => _toBool,
  _toNum: () => _toNum,
  _toStr: () => _toStr,
  awsExpectUnion: () => awsExpectUnion,
  emitWarningIfUnsupportedVersion: () => emitWarningIfUnsupportedVersion,
  loadRestJsonErrorCode: () => loadRestJsonErrorCode,
  loadRestXmlErrorCode: () => loadRestXmlErrorCode,
  parseJsonBody: () => parseJsonBody,
  parseJsonErrorBody: () => parseJsonErrorBody,
  parseXmlBody: () => parseXmlBody,
  parseXmlErrorBody: () => parseXmlErrorBody,
  resolveAWSSDKSigV4Config: () => resolveAWSSDKSigV4Config,
  resolveAwsSdkSigV4AConfig: () => resolveAwsSdkSigV4AConfig,
  resolveAwsSdkSigV4Config: () => resolveAwsSdkSigV4Config,
  setCredentialFeature: () => setCredentialFeature,
  setFeature: () => setFeature2,
  state: () => state,
  validateSigningProperties: () => validateSigningProperties
});
var init_dist_es2 = __esm({
  "node_modules/@aws-sdk/core/dist-es/index.js"() {
    init_dirname();
    init_client();
    init_httpAuthSchemes2();
    init_protocols2();
  }
});

// node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js
var require_dist_cjs24 = __commonJS({
  "node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js"(exports6, module) {
    "use strict";
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      DEFAULT_UA_APP_ID: () => DEFAULT_UA_APP_ID,
      getUserAgentMiddlewareOptions: () => getUserAgentMiddlewareOptions,
      getUserAgentPlugin: () => getUserAgentPlugin,
      resolveUserAgentConfig: () => resolveUserAgentConfig,
      userAgentMiddleware: () => userAgentMiddleware
    });
    module.exports = __toCommonJS3(src_exports);
    var import_core5 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var DEFAULT_UA_APP_ID = void 0;
    function isValidUserAgentAppId(appId) {
      if (appId === void 0) {
        return true;
      }
      return typeof appId === "string" && appId.length <= 50;
    }
    __name(isValidUserAgentAppId, "isValidUserAgentAppId");
    function resolveUserAgentConfig(input) {
      const normalizedAppIdProvider = (0, import_core5.normalizeProvider)(input.userAgentAppId ?? DEFAULT_UA_APP_ID);
      return {
        ...input,
        customUserAgent: typeof input.customUserAgent === "string" ? [[input.customUserAgent]] : input.customUserAgent,
        userAgentAppId: async () => {
          var _a, _b;
          const appId = await normalizedAppIdProvider();
          if (!isValidUserAgentAppId(appId)) {
            const logger = ((_b = (_a = input.logger) == null ? void 0 : _a.constructor) == null ? void 0 : _b.name) === "NoOpLogger" || !input.logger ? console : input.logger;
            if (typeof appId !== "string") {
              logger == null ? void 0 : logger.warn("userAgentAppId must be a string or undefined.");
            } else if (appId.length > 50) {
              logger == null ? void 0 : logger.warn("The provided userAgentAppId exceeds the maximum length of 50 characters.");
            }
          }
          return appId;
        }
      };
    }
    __name(resolveUserAgentConfig, "resolveUserAgentConfig");
    var import_util_endpoints = require_dist_cjs19();
    var import_protocol_http11 = require_dist_cjs2();
    var import_core22 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var ACCOUNT_ID_ENDPOINT_REGEX = /\d{12}\.ddb/;
    async function checkFeatures(context, config2, args) {
      var _a, _b, _c, _d, _e, _f, _g;
      const request = args.request;
      if (((_a = request == null ? void 0 : request.headers) == null ? void 0 : _a["smithy-protocol"]) === "rpc-v2-cbor") {
        (0, import_core22.setFeature)(context, "PROTOCOL_RPC_V2_CBOR", "M");
      }
      if (typeof config2.retryStrategy === "function") {
        const retryStrategy = await config2.retryStrategy();
        if (typeof retryStrategy.acquireInitialRetryToken === "function") {
          if ((_c = (_b = retryStrategy.constructor) == null ? void 0 : _b.name) == null ? void 0 : _c.includes("Adaptive")) {
            (0, import_core22.setFeature)(context, "RETRY_MODE_ADAPTIVE", "F");
          } else {
            (0, import_core22.setFeature)(context, "RETRY_MODE_STANDARD", "E");
          }
        } else {
          (0, import_core22.setFeature)(context, "RETRY_MODE_LEGACY", "D");
        }
      }
      if (typeof config2.accountIdEndpointMode === "function") {
        const endpointV2 = context.endpointV2;
        if (String((_d = endpointV2 == null ? void 0 : endpointV2.url) == null ? void 0 : _d.hostname).match(ACCOUNT_ID_ENDPOINT_REGEX)) {
          (0, import_core22.setFeature)(context, "ACCOUNT_ID_ENDPOINT", "O");
        }
        switch (await ((_e = config2.accountIdEndpointMode) == null ? void 0 : _e.call(config2))) {
          case "disabled":
            (0, import_core22.setFeature)(context, "ACCOUNT_ID_MODE_DISABLED", "Q");
            break;
          case "preferred":
            (0, import_core22.setFeature)(context, "ACCOUNT_ID_MODE_PREFERRED", "P");
            break;
          case "required":
            (0, import_core22.setFeature)(context, "ACCOUNT_ID_MODE_REQUIRED", "R");
            break;
        }
      }
      const identity = (_g = (_f = context.__smithy_context) == null ? void 0 : _f.selectedHttpAuthScheme) == null ? void 0 : _g.identity;
      if (identity == null ? void 0 : identity.$source) {
        const credentials = identity;
        if (credentials.accountId) {
          (0, import_core22.setFeature)(context, "RESOLVED_ACCOUNT_ID", "T");
        }
        for (const [key, value] of Object.entries(credentials.$source ?? {})) {
          (0, import_core22.setFeature)(context, key, value);
        }
      }
    }
    __name(checkFeatures, "checkFeatures");
    var USER_AGENT = "user-agent";
    var X_AMZ_USER_AGENT = "x-amz-user-agent";
    var SPACE = " ";
    var UA_NAME_SEPARATOR = "/";
    var UA_NAME_ESCAPE_REGEX = /[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g;
    var UA_VALUE_ESCAPE_REGEX = /[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w\#]/g;
    var UA_ESCAPE_CHAR = "-";
    var BYTE_LIMIT = 1024;
    function encodeFeatures(features2) {
      let buffer = "";
      for (const key in features2) {
        const val2 = features2[key];
        if (buffer.length + val2.length + 1 <= BYTE_LIMIT) {
          if (buffer.length) {
            buffer += "," + val2;
          } else {
            buffer += val2;
          }
          continue;
        }
        break;
      }
      return buffer;
    }
    __name(encodeFeatures, "encodeFeatures");
    var userAgentMiddleware = /* @__PURE__ */ __name((options) => (next, context) => async (args) => {
      var _a, _b, _c, _d;
      const { request } = args;
      if (!import_protocol_http11.HttpRequest.isInstance(request)) {
        return next(args);
      }
      const { headers } = request;
      const userAgent = ((_a = context == null ? void 0 : context.userAgent) == null ? void 0 : _a.map(escapeUserAgent)) || [];
      const defaultUserAgent = (await options.defaultUserAgentProvider()).map(escapeUserAgent);
      await checkFeatures(context, options, args);
      const awsContext = context;
      defaultUserAgent.push(
        `m/${encodeFeatures(
          Object.assign({}, (_b = context.__smithy_context) == null ? void 0 : _b.features, (_c = awsContext.__aws_sdk_context) == null ? void 0 : _c.features)
        )}`
      );
      const customUserAgent = ((_d = options == null ? void 0 : options.customUserAgent) == null ? void 0 : _d.map(escapeUserAgent)) || [];
      const appId = await options.userAgentAppId();
      if (appId) {
        defaultUserAgent.push(escapeUserAgent([`app/${appId}`]));
      }
      const prefix = (0, import_util_endpoints.getUserAgentPrefix)();
      const sdkUserAgentValue = (prefix ? [prefix] : []).concat([...defaultUserAgent, ...userAgent, ...customUserAgent]).join(SPACE);
      const normalUAValue = [
        ...defaultUserAgent.filter((section) => section.startsWith("aws-sdk-")),
        ...customUserAgent
      ].join(SPACE);
      if (options.runtime !== "browser") {
        if (normalUAValue) {
          headers[X_AMZ_USER_AGENT] = headers[X_AMZ_USER_AGENT] ? `${headers[USER_AGENT]} ${normalUAValue}` : normalUAValue;
        }
        headers[USER_AGENT] = sdkUserAgentValue;
      } else {
        headers[X_AMZ_USER_AGENT] = sdkUserAgentValue;
      }
      return next({
        ...args,
        request
      });
    }, "userAgentMiddleware");
    var escapeUserAgent = /* @__PURE__ */ __name((userAgentPair) => {
      var _a;
      const name = userAgentPair[0].split(UA_NAME_SEPARATOR).map((part) => part.replace(UA_NAME_ESCAPE_REGEX, UA_ESCAPE_CHAR)).join(UA_NAME_SEPARATOR);
      const version3 = (_a = userAgentPair[1]) == null ? void 0 : _a.replace(UA_VALUE_ESCAPE_REGEX, UA_ESCAPE_CHAR);
      const prefixSeparatorIndex = name.indexOf(UA_NAME_SEPARATOR);
      const prefix = name.substring(0, prefixSeparatorIndex);
      let uaName = name.substring(prefixSeparatorIndex + 1);
      if (prefix === "api") {
        uaName = uaName.toLowerCase();
      }
      return [prefix, uaName, version3].filter((item) => item && item.length > 0).reduce((acc, item, index) => {
        switch (index) {
          case 0:
            return item;
          case 1:
            return `${acc}/${item}`;
          default:
            return `${acc}#${item}`;
        }
      }, "");
    }, "escapeUserAgent");
    var getUserAgentMiddlewareOptions = {
      name: "getUserAgentMiddleware",
      step: "build",
      priority: "low",
      tags: ["SET_USER_AGENT", "USER_AGENT"],
      override: true
    };
    var getUserAgentPlugin = /* @__PURE__ */ __name((config2) => ({
      applyToStack: (clientStack) => {
        clientStack.add(userAgentMiddleware(config2), getUserAgentMiddlewareOptions);
      }
    }), "getUserAgentPlugin");
  }
});

// node_modules/@smithy/util-config-provider/dist-cjs/index.js
var require_dist_cjs25 = __commonJS({
  "node_modules/@smithy/util-config-provider/dist-cjs/index.js"(exports6, module) {
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      SelectorType: () => SelectorType,
      booleanSelector: () => booleanSelector,
      numberSelector: () => numberSelector
    });
    module.exports = __toCommonJS3(src_exports);
    var booleanSelector = /* @__PURE__ */ __name((obj, key, type) => {
      if (!(key in obj))
        return void 0;
      if (obj[key] === "true")
        return true;
      if (obj[key] === "false")
        return false;
      throw new Error(`Cannot load ${type} "${key}". Expected "true" or "false", got ${obj[key]}.`);
    }, "booleanSelector");
    var numberSelector = /* @__PURE__ */ __name((obj, key, type) => {
      if (!(key in obj))
        return void 0;
      const numberValue = parseInt(obj[key], 10);
      if (Number.isNaN(numberValue)) {
        throw new TypeError(`Cannot load ${type} '${key}'. Expected number, got '${obj[key]}'.`);
      }
      return numberValue;
    }, "numberSelector");
    var SelectorType = /* @__PURE__ */ ((SelectorType2) => {
      SelectorType2["ENV"] = "env";
      SelectorType2["CONFIG"] = "shared config entry";
      return SelectorType2;
    })(SelectorType || {});
  }
});

// node_modules/@smithy/config-resolver/dist-cjs/index.js
var require_dist_cjs26 = __commonJS({
  "node_modules/@smithy/config-resolver/dist-cjs/index.js"(exports6, module) {
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      CONFIG_USE_DUALSTACK_ENDPOINT: () => CONFIG_USE_DUALSTACK_ENDPOINT,
      CONFIG_USE_FIPS_ENDPOINT: () => CONFIG_USE_FIPS_ENDPOINT,
      DEFAULT_USE_DUALSTACK_ENDPOINT: () => DEFAULT_USE_DUALSTACK_ENDPOINT,
      DEFAULT_USE_FIPS_ENDPOINT: () => DEFAULT_USE_FIPS_ENDPOINT,
      ENV_USE_DUALSTACK_ENDPOINT: () => ENV_USE_DUALSTACK_ENDPOINT,
      ENV_USE_FIPS_ENDPOINT: () => ENV_USE_FIPS_ENDPOINT,
      NODE_REGION_CONFIG_FILE_OPTIONS: () => NODE_REGION_CONFIG_FILE_OPTIONS,
      NODE_REGION_CONFIG_OPTIONS: () => NODE_REGION_CONFIG_OPTIONS,
      NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS: () => NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS,
      NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS: () => NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS,
      REGION_ENV_NAME: () => REGION_ENV_NAME,
      REGION_INI_NAME: () => REGION_INI_NAME,
      getRegionInfo: () => getRegionInfo,
      resolveCustomEndpointsConfig: () => resolveCustomEndpointsConfig,
      resolveEndpointsConfig: () => resolveEndpointsConfig,
      resolveRegionConfig: () => resolveRegionConfig
    });
    module.exports = __toCommonJS3(src_exports);
    var import_util_config_provider = require_dist_cjs25();
    var ENV_USE_DUALSTACK_ENDPOINT = "AWS_USE_DUALSTACK_ENDPOINT";
    var CONFIG_USE_DUALSTACK_ENDPOINT = "use_dualstack_endpoint";
    var DEFAULT_USE_DUALSTACK_ENDPOINT = false;
    var NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env2) => (0, import_util_config_provider.booleanSelector)(env2, ENV_USE_DUALSTACK_ENDPOINT, import_util_config_provider.SelectorType.ENV),
      configFileSelector: (profile) => (0, import_util_config_provider.booleanSelector)(profile, CONFIG_USE_DUALSTACK_ENDPOINT, import_util_config_provider.SelectorType.CONFIG),
      default: false
    };
    var ENV_USE_FIPS_ENDPOINT = "AWS_USE_FIPS_ENDPOINT";
    var CONFIG_USE_FIPS_ENDPOINT = "use_fips_endpoint";
    var DEFAULT_USE_FIPS_ENDPOINT = false;
    var NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env2) => (0, import_util_config_provider.booleanSelector)(env2, ENV_USE_FIPS_ENDPOINT, import_util_config_provider.SelectorType.ENV),
      configFileSelector: (profile) => (0, import_util_config_provider.booleanSelector)(profile, CONFIG_USE_FIPS_ENDPOINT, import_util_config_provider.SelectorType.CONFIG),
      default: false
    };
    var import_util_middleware3 = require_dist_cjs6();
    var resolveCustomEndpointsConfig = /* @__PURE__ */ __name((input) => {
      const { endpoint, urlParser } = input;
      return {
        ...input,
        tls: input.tls ?? true,
        endpoint: (0, import_util_middleware3.normalizeProvider)(typeof endpoint === "string" ? urlParser(endpoint) : endpoint),
        isCustomEndpoint: true,
        useDualstackEndpoint: (0, import_util_middleware3.normalizeProvider)(input.useDualstackEndpoint ?? false)
      };
    }, "resolveCustomEndpointsConfig");
    var getEndpointFromRegion = /* @__PURE__ */ __name(async (input) => {
      const { tls = true } = input;
      const region = await input.region();
      const dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);
      if (!dnsHostRegex.test(region)) {
        throw new Error("Invalid region in client config");
      }
      const useDualstackEndpoint = await input.useDualstackEndpoint();
      const useFipsEndpoint = await input.useFipsEndpoint();
      const { hostname } = await input.regionInfoProvider(region, { useDualstackEndpoint, useFipsEndpoint }) ?? {};
      if (!hostname) {
        throw new Error("Cannot resolve hostname from client config");
      }
      return input.urlParser(`${tls ? "https:" : "http:"}//${hostname}`);
    }, "getEndpointFromRegion");
    var resolveEndpointsConfig = /* @__PURE__ */ __name((input) => {
      const useDualstackEndpoint = (0, import_util_middleware3.normalizeProvider)(input.useDualstackEndpoint ?? false);
      const { endpoint, useFipsEndpoint, urlParser } = input;
      return {
        ...input,
        tls: input.tls ?? true,
        endpoint: endpoint ? (0, import_util_middleware3.normalizeProvider)(typeof endpoint === "string" ? urlParser(endpoint) : endpoint) : () => getEndpointFromRegion({ ...input, useDualstackEndpoint, useFipsEndpoint }),
        isCustomEndpoint: !!endpoint,
        useDualstackEndpoint
      };
    }, "resolveEndpointsConfig");
    var REGION_ENV_NAME = "AWS_REGION";
    var REGION_INI_NAME = "region";
    var NODE_REGION_CONFIG_OPTIONS = {
      environmentVariableSelector: (env2) => env2[REGION_ENV_NAME],
      configFileSelector: (profile) => profile[REGION_INI_NAME],
      default: () => {
        throw new Error("Region is missing");
      }
    };
    var NODE_REGION_CONFIG_FILE_OPTIONS = {
      preferredFile: "credentials"
    };
    var isFipsRegion = /* @__PURE__ */ __name((region) => typeof region === "string" && (region.startsWith("fips-") || region.endsWith("-fips")), "isFipsRegion");
    var getRealRegion = /* @__PURE__ */ __name((region) => isFipsRegion(region) ? ["fips-aws-global", "aws-fips"].includes(region) ? "us-east-1" : region.replace(/fips-(dkr-|prod-)?|-fips/, "") : region, "getRealRegion");
    var resolveRegionConfig = /* @__PURE__ */ __name((input) => {
      const { region, useFipsEndpoint } = input;
      if (!region) {
        throw new Error("Region is missing");
      }
      return {
        ...input,
        region: async () => {
          if (typeof region === "string") {
            return getRealRegion(region);
          }
          const providedRegion = await region();
          return getRealRegion(providedRegion);
        },
        useFipsEndpoint: async () => {
          const providedRegion = typeof region === "string" ? region : await region();
          if (isFipsRegion(providedRegion)) {
            return true;
          }
          return typeof useFipsEndpoint !== "function" ? Promise.resolve(!!useFipsEndpoint) : useFipsEndpoint();
        }
      };
    }, "resolveRegionConfig");
    var getHostnameFromVariants = /* @__PURE__ */ __name((variants = [], { useFipsEndpoint, useDualstackEndpoint }) => {
      var _a;
      return (_a = variants.find(
        ({ tags }) => useFipsEndpoint === tags.includes("fips") && useDualstackEndpoint === tags.includes("dualstack")
      )) == null ? void 0 : _a.hostname;
    }, "getHostnameFromVariants");
    var getResolvedHostname = /* @__PURE__ */ __name((resolvedRegion, { regionHostname, partitionHostname }) => regionHostname ? regionHostname : partitionHostname ? partitionHostname.replace("{region}", resolvedRegion) : void 0, "getResolvedHostname");
    var getResolvedPartition = /* @__PURE__ */ __name((region, { partitionHash }) => Object.keys(partitionHash || {}).find((key) => partitionHash[key].regions.includes(region)) ?? "aws", "getResolvedPartition");
    var getResolvedSigningRegion = /* @__PURE__ */ __name((hostname, { signingRegion, regionRegex, useFipsEndpoint }) => {
      if (signingRegion) {
        return signingRegion;
      } else if (useFipsEndpoint) {
        const regionRegexJs = regionRegex.replace("\\\\", "\\").replace(/^\^/g, "\\.").replace(/\$$/g, "\\.");
        const regionRegexmatchArray = hostname.match(regionRegexJs);
        if (regionRegexmatchArray) {
          return regionRegexmatchArray[0].slice(1, -1);
        }
      }
    }, "getResolvedSigningRegion");
    var getRegionInfo = /* @__PURE__ */ __name((region, {
      useFipsEndpoint = false,
      useDualstackEndpoint = false,
      signingService,
      regionHash,
      partitionHash
    }) => {
      var _a, _b, _c, _d, _e;
      const partition = getResolvedPartition(region, { partitionHash });
      const resolvedRegion = region in regionHash ? region : ((_a = partitionHash[partition]) == null ? void 0 : _a.endpoint) ?? region;
      const hostnameOptions = { useFipsEndpoint, useDualstackEndpoint };
      const regionHostname = getHostnameFromVariants((_b = regionHash[resolvedRegion]) == null ? void 0 : _b.variants, hostnameOptions);
      const partitionHostname = getHostnameFromVariants((_c = partitionHash[partition]) == null ? void 0 : _c.variants, hostnameOptions);
      const hostname = getResolvedHostname(resolvedRegion, { regionHostname, partitionHostname });
      if (hostname === void 0) {
        throw new Error(`Endpoint resolution failed for: ${{ resolvedRegion, useFipsEndpoint, useDualstackEndpoint }}`);
      }
      const signingRegion = getResolvedSigningRegion(hostname, {
        signingRegion: (_d = regionHash[resolvedRegion]) == null ? void 0 : _d.signingRegion,
        regionRegex: partitionHash[partition].regionRegex,
        useFipsEndpoint
      });
      return {
        partition,
        signingService,
        hostname,
        ...signingRegion && { signingRegion },
        ...((_e = regionHash[resolvedRegion]) == null ? void 0 : _e.signingService) && {
          signingService: regionHash[resolvedRegion].signingService
        }
      };
    }, "getRegionInfo");
  }
});

// node_modules/@smithy/middleware-content-length/dist-cjs/index.js
var require_dist_cjs27 = __commonJS({
  "node_modules/@smithy/middleware-content-length/dist-cjs/index.js"(exports6, module) {
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      contentLengthMiddleware: () => contentLengthMiddleware,
      contentLengthMiddlewareOptions: () => contentLengthMiddlewareOptions,
      getContentLengthPlugin: () => getContentLengthPlugin
    });
    module.exports = __toCommonJS3(src_exports);
    var import_protocol_http11 = require_dist_cjs2();
    var CONTENT_LENGTH_HEADER = "content-length";
    function contentLengthMiddleware(bodyLengthChecker) {
      return (next) => async (args) => {
        const request = args.request;
        if (import_protocol_http11.HttpRequest.isInstance(request)) {
          const { body, headers } = request;
          if (body && Object.keys(headers).map((str) => str.toLowerCase()).indexOf(CONTENT_LENGTH_HEADER) === -1) {
            try {
              const length = bodyLengthChecker(body);
              request.headers = {
                ...request.headers,
                [CONTENT_LENGTH_HEADER]: String(length)
              };
            } catch (error) {
            }
          }
        }
        return next({
          ...args,
          request
        });
      };
    }
    __name(contentLengthMiddleware, "contentLengthMiddleware");
    var contentLengthMiddlewareOptions = {
      step: "build",
      tags: ["SET_CONTENT_LENGTH", "CONTENT_LENGTH"],
      name: "contentLengthMiddleware",
      override: true
    };
    var getContentLengthPlugin = /* @__PURE__ */ __name((options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(contentLengthMiddleware(options.bodyLengthChecker), contentLengthMiddlewareOptions);
      }
    }), "getContentLengthPlugin");
  }
});

// node_modules/@smithy/shared-ini-file-loader/dist-cjs/getHomeDir.js
var require_getHomeDir = __commonJS({
  "node_modules/@smithy/shared-ini-file-loader/dist-cjs/getHomeDir.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.getHomeDir = void 0;
    var os_1 = __require("os");
    var path_1 = __require("path");
    var homeDirCache = {};
    var getHomeDirCacheKey = () => {
      if (process && process.geteuid) {
        return `${process.geteuid()}`;
      }
      return "DEFAULT";
    };
    var getHomeDir2 = () => {
      const { HOME, USERPROFILE, HOMEPATH, HOMEDRIVE = `C:${path_1.sep}` } = process.env;
      if (HOME)
        return HOME;
      if (USERPROFILE)
        return USERPROFILE;
      if (HOMEPATH)
        return `${HOMEDRIVE}${HOMEPATH}`;
      const homeDirCacheKey = getHomeDirCacheKey();
      if (!homeDirCache[homeDirCacheKey])
        homeDirCache[homeDirCacheKey] = (0, os_1.homedir)();
      return homeDirCache[homeDirCacheKey];
    };
    exports6.getHomeDir = getHomeDir2;
  }
});

// node_modules/@smithy/shared-ini-file-loader/dist-cjs/getSSOTokenFilepath.js
var require_getSSOTokenFilepath = __commonJS({
  "node_modules/@smithy/shared-ini-file-loader/dist-cjs/getSSOTokenFilepath.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.getSSOTokenFilepath = void 0;
    var crypto_1 = __require("crypto");
    var path_1 = __require("path");
    var getHomeDir_1 = require_getHomeDir();
    var getSSOTokenFilepath2 = (id) => {
      const hasher = (0, crypto_1.createHash)("sha1");
      const cacheName = hasher.update(id).digest("hex");
      return (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), ".aws", "sso", "cache", `${cacheName}.json`);
    };
    exports6.getSSOTokenFilepath = getSSOTokenFilepath2;
  }
});

// node_modules/@smithy/shared-ini-file-loader/dist-cjs/getSSOTokenFromFile.js
var require_getSSOTokenFromFile = __commonJS({
  "node_modules/@smithy/shared-ini-file-loader/dist-cjs/getSSOTokenFromFile.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.getSSOTokenFromFile = void 0;
    var fs_1 = __require("fs");
    var getSSOTokenFilepath_1 = require_getSSOTokenFilepath();
    var { readFile } = fs_1.promises;
    var getSSOTokenFromFile2 = async (id) => {
      const ssoTokenFilepath = (0, getSSOTokenFilepath_1.getSSOTokenFilepath)(id);
      const ssoTokenText = await readFile(ssoTokenFilepath, "utf8");
      return JSON.parse(ssoTokenText);
    };
    exports6.getSSOTokenFromFile = getSSOTokenFromFile2;
  }
});

// node_modules/@smithy/shared-ini-file-loader/dist-cjs/slurpFile.js
var require_slurpFile = __commonJS({
  "node_modules/@smithy/shared-ini-file-loader/dist-cjs/slurpFile.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.slurpFile = void 0;
    var fs_1 = __require("fs");
    var { readFile } = fs_1.promises;
    var filePromisesHash = {};
    var slurpFile = (path, options) => {
      if (!filePromisesHash[path] || (options === null || options === void 0 ? void 0 : options.ignoreCache)) {
        filePromisesHash[path] = readFile(path, "utf8");
      }
      return filePromisesHash[path];
    };
    exports6.slurpFile = slurpFile;
  }
});

// node_modules/@smithy/shared-ini-file-loader/dist-cjs/index.js
var require_dist_cjs28 = __commonJS({
  "node_modules/@smithy/shared-ini-file-loader/dist-cjs/index.js"(exports6, module) {
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __reExport = (target, mod, secondTarget) => (__copyProps3(target, mod, "default"), secondTarget && __copyProps3(secondTarget, mod, "default"));
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      CONFIG_PREFIX_SEPARATOR: () => CONFIG_PREFIX_SEPARATOR,
      DEFAULT_PROFILE: () => DEFAULT_PROFILE,
      ENV_PROFILE: () => ENV_PROFILE,
      getProfileName: () => getProfileName,
      loadSharedConfigFiles: () => loadSharedConfigFiles,
      loadSsoSessionData: () => loadSsoSessionData,
      parseKnownFiles: () => parseKnownFiles
    });
    module.exports = __toCommonJS3(src_exports);
    __reExport(src_exports, require_getHomeDir(), module.exports);
    var ENV_PROFILE = "AWS_PROFILE";
    var DEFAULT_PROFILE = "default";
    var getProfileName = /* @__PURE__ */ __name((init) => init.profile || process.env[ENV_PROFILE] || DEFAULT_PROFILE, "getProfileName");
    __reExport(src_exports, require_getSSOTokenFilepath(), module.exports);
    __reExport(src_exports, require_getSSOTokenFromFile(), module.exports);
    var import_types5 = require_dist_cjs();
    var getConfigData = /* @__PURE__ */ __name((data) => Object.entries(data).filter(([key]) => {
      const indexOfSeparator = key.indexOf(CONFIG_PREFIX_SEPARATOR);
      if (indexOfSeparator === -1) {
        return false;
      }
      return Object.values(import_types5.IniSectionType).includes(key.substring(0, indexOfSeparator));
    }).reduce(
      (acc, [key, value]) => {
        const indexOfSeparator = key.indexOf(CONFIG_PREFIX_SEPARATOR);
        const updatedKey = key.substring(0, indexOfSeparator) === import_types5.IniSectionType.PROFILE ? key.substring(indexOfSeparator + 1) : key;
        acc[updatedKey] = value;
        return acc;
      },
      {
        // Populate default profile, if present.
        ...data.default && { default: data.default }
      }
    ), "getConfigData");
    var import_path = __require("path");
    var import_getHomeDir = require_getHomeDir();
    var ENV_CONFIG_PATH = "AWS_CONFIG_FILE";
    var getConfigFilepath = /* @__PURE__ */ __name(() => process.env[ENV_CONFIG_PATH] || (0, import_path.join)((0, import_getHomeDir.getHomeDir)(), ".aws", "config"), "getConfigFilepath");
    var import_getHomeDir2 = require_getHomeDir();
    var ENV_CREDENTIALS_PATH = "AWS_SHARED_CREDENTIALS_FILE";
    var getCredentialsFilepath = /* @__PURE__ */ __name(() => process.env[ENV_CREDENTIALS_PATH] || (0, import_path.join)((0, import_getHomeDir2.getHomeDir)(), ".aws", "credentials"), "getCredentialsFilepath");
    var import_getHomeDir3 = require_getHomeDir();
    var prefixKeyRegex = /^([\w-]+)\s(["'])?([\w-@\+\.%:/]+)\2$/;
    var profileNameBlockList = ["__proto__", "profile __proto__"];
    var parseIni = /* @__PURE__ */ __name((iniData) => {
      const map = {};
      let currentSection;
      let currentSubSection;
      for (const iniLine of iniData.split(/\r?\n/)) {
        const trimmedLine = iniLine.split(/(^|\s)[;#]/)[0].trim();
        const isSection = trimmedLine[0] === "[" && trimmedLine[trimmedLine.length - 1] === "]";
        if (isSection) {
          currentSection = void 0;
          currentSubSection = void 0;
          const sectionName = trimmedLine.substring(1, trimmedLine.length - 1);
          const matches = prefixKeyRegex.exec(sectionName);
          if (matches) {
            const [, prefix, , name] = matches;
            if (Object.values(import_types5.IniSectionType).includes(prefix)) {
              currentSection = [prefix, name].join(CONFIG_PREFIX_SEPARATOR);
            }
          } else {
            currentSection = sectionName;
          }
          if (profileNameBlockList.includes(sectionName)) {
            throw new Error(`Found invalid profile name "${sectionName}"`);
          }
        } else if (currentSection) {
          const indexOfEqualsSign = trimmedLine.indexOf("=");
          if (![0, -1].includes(indexOfEqualsSign)) {
            const [name, value] = [
              trimmedLine.substring(0, indexOfEqualsSign).trim(),
              trimmedLine.substring(indexOfEqualsSign + 1).trim()
            ];
            if (value === "") {
              currentSubSection = name;
            } else {
              if (currentSubSection && iniLine.trimStart() === iniLine) {
                currentSubSection = void 0;
              }
              map[currentSection] = map[currentSection] || {};
              const key = currentSubSection ? [currentSubSection, name].join(CONFIG_PREFIX_SEPARATOR) : name;
              map[currentSection][key] = value;
            }
          }
        }
      }
      return map;
    }, "parseIni");
    var import_slurpFile = require_slurpFile();
    var swallowError = /* @__PURE__ */ __name(() => ({}), "swallowError");
    var CONFIG_PREFIX_SEPARATOR = ".";
    var loadSharedConfigFiles = /* @__PURE__ */ __name(async (init = {}) => {
      const { filepath = getCredentialsFilepath(), configFilepath = getConfigFilepath() } = init;
      const homeDir = (0, import_getHomeDir3.getHomeDir)();
      const relativeHomeDirPrefix = "~/";
      let resolvedFilepath = filepath;
      if (filepath.startsWith(relativeHomeDirPrefix)) {
        resolvedFilepath = (0, import_path.join)(homeDir, filepath.slice(2));
      }
      let resolvedConfigFilepath = configFilepath;
      if (configFilepath.startsWith(relativeHomeDirPrefix)) {
        resolvedConfigFilepath = (0, import_path.join)(homeDir, configFilepath.slice(2));
      }
      const parsedFiles = await Promise.all([
        (0, import_slurpFile.slurpFile)(resolvedConfigFilepath, {
          ignoreCache: init.ignoreCache
        }).then(parseIni).then(getConfigData).catch(swallowError),
        (0, import_slurpFile.slurpFile)(resolvedFilepath, {
          ignoreCache: init.ignoreCache
        }).then(parseIni).catch(swallowError)
      ]);
      return {
        configFile: parsedFiles[0],
        credentialsFile: parsedFiles[1]
      };
    }, "loadSharedConfigFiles");
    var getSsoSessionData = /* @__PURE__ */ __name((data) => Object.entries(data).filter(([key]) => key.startsWith(import_types5.IniSectionType.SSO_SESSION + CONFIG_PREFIX_SEPARATOR)).reduce((acc, [key, value]) => ({ ...acc, [key.substring(key.indexOf(CONFIG_PREFIX_SEPARATOR) + 1)]: value }), {}), "getSsoSessionData");
    var import_slurpFile2 = require_slurpFile();
    var swallowError2 = /* @__PURE__ */ __name(() => ({}), "swallowError");
    var loadSsoSessionData = /* @__PURE__ */ __name(async (init = {}) => (0, import_slurpFile2.slurpFile)(init.configFilepath ?? getConfigFilepath()).then(parseIni).then(getSsoSessionData).catch(swallowError2), "loadSsoSessionData");
    var mergeConfigFiles = /* @__PURE__ */ __name((...files) => {
      const merged = {};
      for (const file of files) {
        for (const [key, values] of Object.entries(file)) {
          if (merged[key] !== void 0) {
            Object.assign(merged[key], values);
          } else {
            merged[key] = values;
          }
        }
      }
      return merged;
    }, "mergeConfigFiles");
    var parseKnownFiles = /* @__PURE__ */ __name(async (init) => {
      const parsedFiles = await loadSharedConfigFiles(init);
      return mergeConfigFiles(parsedFiles.configFile, parsedFiles.credentialsFile);
    }, "parseKnownFiles");
  }
});

// node_modules/@smithy/node-config-provider/dist-cjs/index.js
var require_dist_cjs29 = __commonJS({
  "node_modules/@smithy/node-config-provider/dist-cjs/index.js"(exports6, module) {
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      loadConfig: () => loadConfig
    });
    module.exports = __toCommonJS3(src_exports);
    var import_property_provider3 = require_dist_cjs20();
    function getSelectorName(functionString) {
      try {
        const constants2 = new Set(Array.from(functionString.match(/([A-Z_]){3,}/g) ?? []));
        constants2.delete("CONFIG");
        constants2.delete("CONFIG_PREFIX_SEPARATOR");
        constants2.delete("ENV");
        return [...constants2].join(", ");
      } catch (e) {
        return functionString;
      }
    }
    __name(getSelectorName, "getSelectorName");
    var fromEnv = /* @__PURE__ */ __name((envVarSelector, logger) => async () => {
      try {
        const config2 = envVarSelector(process.env);
        if (config2 === void 0) {
          throw new Error();
        }
        return config2;
      } catch (e) {
        throw new import_property_provider3.CredentialsProviderError(
          e.message || `Not found in ENV: ${getSelectorName(envVarSelector.toString())}`,
          { logger }
        );
      }
    }, "fromEnv");
    var import_shared_ini_file_loader = require_dist_cjs28();
    var fromSharedConfigFiles = /* @__PURE__ */ __name((configSelector, { preferredFile = "config", ...init } = {}) => async () => {
      const profile = (0, import_shared_ini_file_loader.getProfileName)(init);
      const { configFile, credentialsFile } = await (0, import_shared_ini_file_loader.loadSharedConfigFiles)(init);
      const profileFromCredentials = credentialsFile[profile] || {};
      const profileFromConfig = configFile[profile] || {};
      const mergedProfile = preferredFile === "config" ? { ...profileFromCredentials, ...profileFromConfig } : { ...profileFromConfig, ...profileFromCredentials };
      try {
        const cfgFile = preferredFile === "config" ? configFile : credentialsFile;
        const configValue = configSelector(mergedProfile, cfgFile);
        if (configValue === void 0) {
          throw new Error();
        }
        return configValue;
      } catch (e) {
        throw new import_property_provider3.CredentialsProviderError(
          e.message || `Not found in config files w/ profile [${profile}]: ${getSelectorName(configSelector.toString())}`,
          { logger: init.logger }
        );
      }
    }, "fromSharedConfigFiles");
    var isFunction2 = /* @__PURE__ */ __name((func) => typeof func === "function", "isFunction");
    var fromStatic = /* @__PURE__ */ __name((defaultValue) => isFunction2(defaultValue) ? async () => await defaultValue() : (0, import_property_provider3.fromStatic)(defaultValue), "fromStatic");
    var loadConfig = /* @__PURE__ */ __name(({ environmentVariableSelector, configFileSelector, default: defaultValue }, configuration = {}) => (0, import_property_provider3.memoize)(
      (0, import_property_provider3.chain)(
        fromEnv(environmentVariableSelector),
        fromSharedConfigFiles(configFileSelector, configuration),
        fromStatic(defaultValue)
      )
    ), "loadConfig");
  }
});

// node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/getEndpointUrlConfig.js
var require_getEndpointUrlConfig = __commonJS({
  "node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/getEndpointUrlConfig.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.getEndpointUrlConfig = void 0;
    var shared_ini_file_loader_1 = require_dist_cjs28();
    var ENV_ENDPOINT_URL = "AWS_ENDPOINT_URL";
    var CONFIG_ENDPOINT_URL = "endpoint_url";
    var getEndpointUrlConfig = (serviceId) => ({
      environmentVariableSelector: (env2) => {
        const serviceSuffixParts = serviceId.split(" ").map((w) => w.toUpperCase());
        const serviceEndpointUrl = env2[[ENV_ENDPOINT_URL, ...serviceSuffixParts].join("_")];
        if (serviceEndpointUrl)
          return serviceEndpointUrl;
        const endpointUrl = env2[ENV_ENDPOINT_URL];
        if (endpointUrl)
          return endpointUrl;
        return void 0;
      },
      configFileSelector: (profile, config2) => {
        if (config2 && profile.services) {
          const servicesSection = config2[["services", profile.services].join(shared_ini_file_loader_1.CONFIG_PREFIX_SEPARATOR)];
          if (servicesSection) {
            const servicePrefixParts = serviceId.split(" ").map((w) => w.toLowerCase());
            const endpointUrl2 = servicesSection[[servicePrefixParts.join("_"), CONFIG_ENDPOINT_URL].join(shared_ini_file_loader_1.CONFIG_PREFIX_SEPARATOR)];
            if (endpointUrl2)
              return endpointUrl2;
          }
        }
        const endpointUrl = profile[CONFIG_ENDPOINT_URL];
        if (endpointUrl)
          return endpointUrl;
        return void 0;
      },
      default: void 0
    });
    exports6.getEndpointUrlConfig = getEndpointUrlConfig;
  }
});

// node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/getEndpointFromConfig.js
var require_getEndpointFromConfig = __commonJS({
  "node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/getEndpointFromConfig.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.getEndpointFromConfig = void 0;
    var node_config_provider_1 = require_dist_cjs29();
    var getEndpointUrlConfig_1 = require_getEndpointUrlConfig();
    var getEndpointFromConfig = async (serviceId) => (0, node_config_provider_1.loadConfig)((0, getEndpointUrlConfig_1.getEndpointUrlConfig)(serviceId !== null && serviceId !== void 0 ? serviceId : ""))();
    exports6.getEndpointFromConfig = getEndpointFromConfig;
  }
});

// node_modules/@smithy/querystring-parser/dist-cjs/index.js
var require_dist_cjs30 = __commonJS({
  "node_modules/@smithy/querystring-parser/dist-cjs/index.js"(exports6, module) {
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      parseQueryString: () => parseQueryString
    });
    module.exports = __toCommonJS3(src_exports);
    function parseQueryString(querystring) {
      const query = {};
      querystring = querystring.replace(/^\?/, "");
      if (querystring) {
        for (const pair of querystring.split("&")) {
          let [key, value = null] = pair.split("=");
          key = decodeURIComponent(key);
          if (value) {
            value = decodeURIComponent(value);
          }
          if (!(key in query)) {
            query[key] = value;
          } else if (Array.isArray(query[key])) {
            query[key].push(value);
          } else {
            query[key] = [query[key], value];
          }
        }
      }
      return query;
    }
    __name(parseQueryString, "parseQueryString");
  }
});

// node_modules/@smithy/url-parser/dist-cjs/index.js
var require_dist_cjs31 = __commonJS({
  "node_modules/@smithy/url-parser/dist-cjs/index.js"(exports6, module) {
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      parseUrl: () => parseUrl
    });
    module.exports = __toCommonJS3(src_exports);
    var import_querystring_parser = require_dist_cjs30();
    var parseUrl = /* @__PURE__ */ __name((url) => {
      if (typeof url === "string") {
        return parseUrl(new URL(url));
      }
      const { hostname, pathname, port, protocol, search } = url;
      let query;
      if (search) {
        query = (0, import_querystring_parser.parseQueryString)(search);
      }
      return {
        hostname,
        port: port ? parseInt(port) : void 0,
        protocol,
        path: pathname,
        query
      };
    }, "parseUrl");
  }
});

// node_modules/@smithy/middleware-endpoint/dist-cjs/index.js
var require_dist_cjs32 = __commonJS({
  "node_modules/@smithy/middleware-endpoint/dist-cjs/index.js"(exports6, module) {
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      endpointMiddleware: () => endpointMiddleware,
      endpointMiddlewareOptions: () => endpointMiddlewareOptions,
      getEndpointFromInstructions: () => getEndpointFromInstructions,
      getEndpointPlugin: () => getEndpointPlugin,
      resolveEndpointConfig: () => resolveEndpointConfig,
      resolveParams: () => resolveParams,
      toEndpointV1: () => toEndpointV1
    });
    module.exports = __toCommonJS3(src_exports);
    var resolveParamsForS3 = /* @__PURE__ */ __name(async (endpointParams) => {
      const bucket = (endpointParams == null ? void 0 : endpointParams.Bucket) || "";
      if (typeof endpointParams.Bucket === "string") {
        endpointParams.Bucket = bucket.replace(/#/g, encodeURIComponent("#")).replace(/\?/g, encodeURIComponent("?"));
      }
      if (isArnBucketName(bucket)) {
        if (endpointParams.ForcePathStyle === true) {
          throw new Error("Path-style addressing cannot be used with ARN buckets");
        }
      } else if (!isDnsCompatibleBucketName(bucket) || bucket.indexOf(".") !== -1 && !String(endpointParams.Endpoint).startsWith("http:") || bucket.toLowerCase() !== bucket || bucket.length < 3) {
        endpointParams.ForcePathStyle = true;
      }
      if (endpointParams.DisableMultiRegionAccessPoints) {
        endpointParams.disableMultiRegionAccessPoints = true;
        endpointParams.DisableMRAP = true;
      }
      return endpointParams;
    }, "resolveParamsForS3");
    var DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\.\-]{1,61}[a-z0-9]$/;
    var IP_ADDRESS_PATTERN = /(\d+\.){3}\d+/;
    var DOTS_PATTERN = /\.\./;
    var isDnsCompatibleBucketName = /* @__PURE__ */ __name((bucketName) => DOMAIN_PATTERN.test(bucketName) && !IP_ADDRESS_PATTERN.test(bucketName) && !DOTS_PATTERN.test(bucketName), "isDnsCompatibleBucketName");
    var isArnBucketName = /* @__PURE__ */ __name((bucketName) => {
      const [arn, partition, service, , , bucket] = bucketName.split(":");
      const isArn = arn === "arn" && bucketName.split(":").length >= 6;
      const isValidArn = Boolean(isArn && partition && service && bucket);
      if (isArn && !isValidArn) {
        throw new Error(`Invalid ARN: ${bucketName} was an invalid ARN.`);
      }
      return isValidArn;
    }, "isArnBucketName");
    var createConfigValueProvider = /* @__PURE__ */ __name((configKey, canonicalEndpointParamKey, config2) => {
      const configProvider = /* @__PURE__ */ __name(async () => {
        const configValue = config2[configKey] ?? config2[canonicalEndpointParamKey];
        if (typeof configValue === "function") {
          return configValue();
        }
        return configValue;
      }, "configProvider");
      if (configKey === "credentialScope" || canonicalEndpointParamKey === "CredentialScope") {
        return async () => {
          const credentials = typeof config2.credentials === "function" ? await config2.credentials() : config2.credentials;
          const configValue = (credentials == null ? void 0 : credentials.credentialScope) ?? (credentials == null ? void 0 : credentials.CredentialScope);
          return configValue;
        };
      }
      if (configKey === "accountId" || canonicalEndpointParamKey === "AccountId") {
        return async () => {
          const credentials = typeof config2.credentials === "function" ? await config2.credentials() : config2.credentials;
          const configValue = (credentials == null ? void 0 : credentials.accountId) ?? (credentials == null ? void 0 : credentials.AccountId);
          return configValue;
        };
      }
      if (configKey === "endpoint" || canonicalEndpointParamKey === "endpoint") {
        return async () => {
          const endpoint = await configProvider();
          if (endpoint && typeof endpoint === "object") {
            if ("url" in endpoint) {
              return endpoint.url.href;
            }
            if ("hostname" in endpoint) {
              const { protocol, hostname, port, path } = endpoint;
              return `${protocol}//${hostname}${port ? ":" + port : ""}${path}`;
            }
          }
          return endpoint;
        };
      }
      return configProvider;
    }, "createConfigValueProvider");
    var import_getEndpointFromConfig = require_getEndpointFromConfig();
    var import_url_parser = require_dist_cjs31();
    var toEndpointV1 = /* @__PURE__ */ __name((endpoint) => {
      if (typeof endpoint === "object") {
        if ("url" in endpoint) {
          return (0, import_url_parser.parseUrl)(endpoint.url);
        }
        return endpoint;
      }
      return (0, import_url_parser.parseUrl)(endpoint);
    }, "toEndpointV1");
    var getEndpointFromInstructions = /* @__PURE__ */ __name(async (commandInput, instructionsSupplier, clientConfig, context) => {
      if (!clientConfig.endpoint) {
        let endpointFromConfig;
        if (clientConfig.serviceConfiguredEndpoint) {
          endpointFromConfig = await clientConfig.serviceConfiguredEndpoint();
        } else {
          endpointFromConfig = await (0, import_getEndpointFromConfig.getEndpointFromConfig)(clientConfig.serviceId);
        }
        if (endpointFromConfig) {
          clientConfig.endpoint = () => Promise.resolve(toEndpointV1(endpointFromConfig));
        }
      }
      const endpointParams = await resolveParams(commandInput, instructionsSupplier, clientConfig);
      if (typeof clientConfig.endpointProvider !== "function") {
        throw new Error("config.endpointProvider is not set.");
      }
      const endpoint = clientConfig.endpointProvider(endpointParams, context);
      return endpoint;
    }, "getEndpointFromInstructions");
    var resolveParams = /* @__PURE__ */ __name(async (commandInput, instructionsSupplier, clientConfig) => {
      var _a;
      const endpointParams = {};
      const instructions = ((_a = instructionsSupplier == null ? void 0 : instructionsSupplier.getEndpointParameterInstructions) == null ? void 0 : _a.call(instructionsSupplier)) || {};
      for (const [name, instruction] of Object.entries(instructions)) {
        switch (instruction.type) {
          case "staticContextParams":
            endpointParams[name] = instruction.value;
            break;
          case "contextParams":
            endpointParams[name] = commandInput[instruction.name];
            break;
          case "clientContextParams":
          case "builtInParams":
            endpointParams[name] = await createConfigValueProvider(instruction.name, name, clientConfig)();
            break;
          case "operationContextParams":
            endpointParams[name] = instruction.get(commandInput);
            break;
          default:
            throw new Error("Unrecognized endpoint parameter instruction: " + JSON.stringify(instruction));
        }
      }
      if (Object.keys(instructions).length === 0) {
        Object.assign(endpointParams, clientConfig);
      }
      if (String(clientConfig.serviceId).toLowerCase() === "s3") {
        await resolveParamsForS3(endpointParams);
      }
      return endpointParams;
    }, "resolveParams");
    var import_core5 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var import_util_middleware3 = require_dist_cjs6();
    var endpointMiddleware = /* @__PURE__ */ __name(({
      config: config2,
      instructions
    }) => {
      return (next, context) => async (args) => {
        var _a, _b, _c;
        if (config2.endpoint) {
          (0, import_core5.setFeature)(context, "ENDPOINT_OVERRIDE", "N");
        }
        const endpoint = await getEndpointFromInstructions(
          args.input,
          {
            getEndpointParameterInstructions() {
              return instructions;
            }
          },
          { ...config2 },
          context
        );
        context.endpointV2 = endpoint;
        context.authSchemes = (_a = endpoint.properties) == null ? void 0 : _a.authSchemes;
        const authScheme = (_b = context.authSchemes) == null ? void 0 : _b[0];
        if (authScheme) {
          context["signing_region"] = authScheme.signingRegion;
          context["signing_service"] = authScheme.signingName;
          const smithyContext = (0, import_util_middleware3.getSmithyContext)(context);
          const httpAuthOption = (_c = smithyContext == null ? void 0 : smithyContext.selectedHttpAuthScheme) == null ? void 0 : _c.httpAuthOption;
          if (httpAuthOption) {
            httpAuthOption.signingProperties = Object.assign(
              httpAuthOption.signingProperties || {},
              {
                signing_region: authScheme.signingRegion,
                signingRegion: authScheme.signingRegion,
                signing_service: authScheme.signingName,
                signingName: authScheme.signingName,
                signingRegionSet: authScheme.signingRegionSet
              },
              authScheme.properties
            );
          }
        }
        return next({
          ...args
        });
      };
    }, "endpointMiddleware");
    var import_middleware_serde2 = require_dist_cjs7();
    var endpointMiddlewareOptions = {
      step: "serialize",
      tags: ["ENDPOINT_PARAMETERS", "ENDPOINT_V2", "ENDPOINT"],
      name: "endpointV2Middleware",
      override: true,
      relation: "before",
      toMiddleware: import_middleware_serde2.serializerMiddlewareOption.name
    };
    var getEndpointPlugin = /* @__PURE__ */ __name((config2, instructions) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo(
          endpointMiddleware({
            config: config2,
            instructions
          }),
          endpointMiddlewareOptions
        );
      }
    }), "getEndpointPlugin");
    var import_getEndpointFromConfig2 = require_getEndpointFromConfig();
    var resolveEndpointConfig = /* @__PURE__ */ __name((input) => {
      const tls = input.tls ?? true;
      const { endpoint } = input;
      const customEndpointProvider = endpoint != null ? async () => toEndpointV1(await (0, import_util_middleware3.normalizeProvider)(endpoint)()) : void 0;
      const isCustomEndpoint = !!endpoint;
      const resolvedConfig = {
        ...input,
        endpoint: customEndpointProvider,
        tls,
        isCustomEndpoint,
        useDualstackEndpoint: (0, import_util_middleware3.normalizeProvider)(input.useDualstackEndpoint ?? false),
        useFipsEndpoint: (0, import_util_middleware3.normalizeProvider)(input.useFipsEndpoint ?? false)
      };
      let configuredEndpointPromise = void 0;
      resolvedConfig.serviceConfiguredEndpoint = async () => {
        if (input.serviceId && !configuredEndpointPromise) {
          configuredEndpointPromise = (0, import_getEndpointFromConfig2.getEndpointFromConfig)(input.serviceId);
        }
        return configuredEndpointPromise;
      };
      return resolvedConfig;
    }, "resolveEndpointConfig");
  }
});

// node_modules/uuid/dist/esm-node/rng.js
import crypto from "crypto";
function rng() {
  if (poolPtr > rnds8Pool.length - 16) {
    crypto.randomFillSync(rnds8Pool);
    poolPtr = 0;
  }
  return rnds8Pool.slice(poolPtr, poolPtr += 16);
}
var rnds8Pool, poolPtr;
var init_rng = __esm({
  "node_modules/uuid/dist/esm-node/rng.js"() {
    init_dirname();
    rnds8Pool = new Uint8Array(256);
    poolPtr = rnds8Pool.length;
  }
});

// node_modules/uuid/dist/esm-node/regex.js
var regex_default;
var init_regex = __esm({
  "node_modules/uuid/dist/esm-node/regex.js"() {
    init_dirname();
    regex_default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
  }
});

// node_modules/uuid/dist/esm-node/validate.js
function validate(uuid) {
  return typeof uuid === "string" && regex_default.test(uuid);
}
var validate_default;
var init_validate = __esm({
  "node_modules/uuid/dist/esm-node/validate.js"() {
    init_dirname();
    init_regex();
    validate_default = validate;
  }
});

// node_modules/uuid/dist/esm-node/stringify.js
function unsafeStringify(arr, offset = 0) {
  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];
}
function stringify(arr, offset = 0) {
  const uuid = unsafeStringify(arr, offset);
  if (!validate_default(uuid)) {
    throw TypeError("Stringified UUID is invalid");
  }
  return uuid;
}
var byteToHex, stringify_default;
var init_stringify = __esm({
  "node_modules/uuid/dist/esm-node/stringify.js"() {
    init_dirname();
    init_validate();
    byteToHex = [];
    for (let i = 0; i < 256; ++i) {
      byteToHex.push((i + 256).toString(16).slice(1));
    }
    stringify_default = stringify;
  }
});

// node_modules/uuid/dist/esm-node/v1.js
function v1(options, buf, offset) {
  let i = buf && offset || 0;
  const b = buf || new Array(16);
  options = options || {};
  let node = options.node || _nodeId;
  let clockseq = options.clockseq !== void 0 ? options.clockseq : _clockseq;
  if (node == null || clockseq == null) {
    const seedBytes = options.random || (options.rng || rng)();
    if (node == null) {
      node = _nodeId = [seedBytes[0] | 1, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }
    if (clockseq == null) {
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 16383;
    }
  }
  let msecs = options.msecs !== void 0 ? options.msecs : Date.now();
  let nsecs = options.nsecs !== void 0 ? options.nsecs : _lastNSecs + 1;
  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
  if (dt < 0 && options.clockseq === void 0) {
    clockseq = clockseq + 1 & 16383;
  }
  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === void 0) {
    nsecs = 0;
  }
  if (nsecs >= 1e4) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }
  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq;
  msecs += 122192928e5;
  const tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
  b[i++] = tl >>> 24 & 255;
  b[i++] = tl >>> 16 & 255;
  b[i++] = tl >>> 8 & 255;
  b[i++] = tl & 255;
  const tmh = msecs / 4294967296 * 1e4 & 268435455;
  b[i++] = tmh >>> 8 & 255;
  b[i++] = tmh & 255;
  b[i++] = tmh >>> 24 & 15 | 16;
  b[i++] = tmh >>> 16 & 255;
  b[i++] = clockseq >>> 8 | 128;
  b[i++] = clockseq & 255;
  for (let n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }
  return buf || unsafeStringify(b);
}
var _nodeId, _clockseq, _lastMSecs, _lastNSecs, v1_default;
var init_v1 = __esm({
  "node_modules/uuid/dist/esm-node/v1.js"() {
    init_dirname();
    init_rng();
    init_stringify();
    _lastMSecs = 0;
    _lastNSecs = 0;
    v1_default = v1;
  }
});

// node_modules/uuid/dist/esm-node/parse.js
function parse(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  let v;
  const arr = new Uint8Array(16);
  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 255;
  arr[2] = v >>> 8 & 255;
  arr[3] = v & 255;
  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 255;
  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 255;
  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 255;
  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255;
  arr[11] = v / 4294967296 & 255;
  arr[12] = v >>> 24 & 255;
  arr[13] = v >>> 16 & 255;
  arr[14] = v >>> 8 & 255;
  arr[15] = v & 255;
  return arr;
}
var parse_default;
var init_parse = __esm({
  "node_modules/uuid/dist/esm-node/parse.js"() {
    init_dirname();
    init_validate();
    parse_default = parse;
  }
});

// node_modules/uuid/dist/esm-node/v35.js
function stringToBytes(str) {
  str = unescape(encodeURIComponent(str));
  const bytes = [];
  for (let i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }
  return bytes;
}
function v35(name, version3, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    var _namespace;
    if (typeof value === "string") {
      value = stringToBytes(value);
    }
    if (typeof namespace === "string") {
      namespace = parse_default(namespace);
    }
    if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {
      throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
    }
    let bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 15 | version3;
    bytes[8] = bytes[8] & 63 | 128;
    if (buf) {
      offset = offset || 0;
      for (let i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }
      return buf;
    }
    return unsafeStringify(bytes);
  }
  try {
    generateUUID.name = name;
  } catch (err) {
  }
  generateUUID.DNS = DNS;
  generateUUID.URL = URL2;
  return generateUUID;
}
var DNS, URL2;
var init_v35 = __esm({
  "node_modules/uuid/dist/esm-node/v35.js"() {
    init_dirname();
    init_stringify();
    init_parse();
    DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
    URL2 = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
  }
});

// node_modules/uuid/dist/esm-node/md5.js
import crypto2 from "crypto";
function md5(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === "string") {
    bytes = Buffer.from(bytes, "utf8");
  }
  return crypto2.createHash("md5").update(bytes).digest();
}
var md5_default;
var init_md5 = __esm({
  "node_modules/uuid/dist/esm-node/md5.js"() {
    init_dirname();
    md5_default = md5;
  }
});

// node_modules/uuid/dist/esm-node/v3.js
var v3, v3_default;
var init_v3 = __esm({
  "node_modules/uuid/dist/esm-node/v3.js"() {
    init_dirname();
    init_v35();
    init_md5();
    v3 = v35("v3", 48, md5_default);
    v3_default = v3;
  }
});

// node_modules/uuid/dist/esm-node/native.js
import crypto3 from "crypto";
var native_default;
var init_native = __esm({
  "node_modules/uuid/dist/esm-node/native.js"() {
    init_dirname();
    native_default = {
      randomUUID: crypto3.randomUUID
    };
  }
});

// node_modules/uuid/dist/esm-node/v4.js
function v4(options, buf, offset) {
  if (native_default.randomUUID && !buf && !options) {
    return native_default.randomUUID();
  }
  options = options || {};
  const rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return unsafeStringify(rnds);
}
var v4_default;
var init_v4 = __esm({
  "node_modules/uuid/dist/esm-node/v4.js"() {
    init_dirname();
    init_native();
    init_rng();
    init_stringify();
    v4_default = v4;
  }
});

// node_modules/uuid/dist/esm-node/sha1.js
import crypto4 from "crypto";
function sha1(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === "string") {
    bytes = Buffer.from(bytes, "utf8");
  }
  return crypto4.createHash("sha1").update(bytes).digest();
}
var sha1_default;
var init_sha1 = __esm({
  "node_modules/uuid/dist/esm-node/sha1.js"() {
    init_dirname();
    sha1_default = sha1;
  }
});

// node_modules/uuid/dist/esm-node/v5.js
var v5, v5_default;
var init_v5 = __esm({
  "node_modules/uuid/dist/esm-node/v5.js"() {
    init_dirname();
    init_v35();
    init_sha1();
    v5 = v35("v5", 80, sha1_default);
    v5_default = v5;
  }
});

// node_modules/uuid/dist/esm-node/nil.js
var nil_default;
var init_nil = __esm({
  "node_modules/uuid/dist/esm-node/nil.js"() {
    init_dirname();
    nil_default = "00000000-0000-0000-0000-000000000000";
  }
});

// node_modules/uuid/dist/esm-node/version.js
function version(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  return parseInt(uuid.slice(14, 15), 16);
}
var version_default;
var init_version = __esm({
  "node_modules/uuid/dist/esm-node/version.js"() {
    init_dirname();
    init_validate();
    version_default = version;
  }
});

// node_modules/uuid/dist/esm-node/index.js
var esm_node_exports = {};
__export(esm_node_exports, {
  NIL: () => nil_default,
  parse: () => parse_default,
  stringify: () => stringify_default,
  v1: () => v1_default,
  v3: () => v3_default,
  v4: () => v4_default,
  v5: () => v5_default,
  validate: () => validate_default,
  version: () => version_default
});
var init_esm_node = __esm({
  "node_modules/uuid/dist/esm-node/index.js"() {
    init_dirname();
    init_v1();
    init_v3();
    init_v4();
    init_v5();
    init_nil();
    init_version();
    init_validate();
    init_stringify();
    init_parse();
  }
});

// node_modules/@smithy/service-error-classification/dist-cjs/index.js
var require_dist_cjs33 = __commonJS({
  "node_modules/@smithy/service-error-classification/dist-cjs/index.js"(exports6, module) {
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      isClockSkewCorrectedError: () => isClockSkewCorrectedError,
      isClockSkewError: () => isClockSkewError,
      isRetryableByTrait: () => isRetryableByTrait,
      isServerError: () => isServerError,
      isThrottlingError: () => isThrottlingError,
      isTransientError: () => isTransientError
    });
    module.exports = __toCommonJS3(src_exports);
    var CLOCK_SKEW_ERROR_CODES = [
      "AuthFailure",
      "InvalidSignatureException",
      "RequestExpired",
      "RequestInTheFuture",
      "RequestTimeTooSkewed",
      "SignatureDoesNotMatch"
    ];
    var THROTTLING_ERROR_CODES = [
      "BandwidthLimitExceeded",
      "EC2ThrottledException",
      "LimitExceededException",
      "PriorRequestNotComplete",
      "ProvisionedThroughputExceededException",
      "RequestLimitExceeded",
      "RequestThrottled",
      "RequestThrottledException",
      "SlowDown",
      "ThrottledException",
      "Throttling",
      "ThrottlingException",
      "TooManyRequestsException",
      "TransactionInProgressException"
      // DynamoDB
    ];
    var TRANSIENT_ERROR_CODES = ["TimeoutError", "RequestTimeout", "RequestTimeoutException"];
    var TRANSIENT_ERROR_STATUS_CODES = [500, 502, 503, 504];
    var NODEJS_TIMEOUT_ERROR_CODES = ["ECONNRESET", "ECONNREFUSED", "EPIPE", "ETIMEDOUT"];
    var isRetryableByTrait = /* @__PURE__ */ __name((error) => error.$retryable !== void 0, "isRetryableByTrait");
    var isClockSkewError = /* @__PURE__ */ __name((error) => CLOCK_SKEW_ERROR_CODES.includes(error.name), "isClockSkewError");
    var isClockSkewCorrectedError = /* @__PURE__ */ __name((error) => {
      var _a;
      return (_a = error.$metadata) == null ? void 0 : _a.clockSkewCorrected;
    }, "isClockSkewCorrectedError");
    var isThrottlingError = /* @__PURE__ */ __name((error) => {
      var _a, _b;
      return ((_a = error.$metadata) == null ? void 0 : _a.httpStatusCode) === 429 || THROTTLING_ERROR_CODES.includes(error.name) || ((_b = error.$retryable) == null ? void 0 : _b.throttling) == true;
    }, "isThrottlingError");
    var isTransientError = /* @__PURE__ */ __name((error, depth = 0) => {
      var _a;
      return isClockSkewCorrectedError(error) || TRANSIENT_ERROR_CODES.includes(error.name) || NODEJS_TIMEOUT_ERROR_CODES.includes((error == null ? void 0 : error.code) || "") || TRANSIENT_ERROR_STATUS_CODES.includes(((_a = error.$metadata) == null ? void 0 : _a.httpStatusCode) || 0) || error.cause !== void 0 && depth <= 10 && isTransientError(error.cause, depth + 1);
    }, "isTransientError");
    var isServerError = /* @__PURE__ */ __name((error) => {
      var _a;
      if (((_a = error.$metadata) == null ? void 0 : _a.httpStatusCode) !== void 0) {
        const statusCode = error.$metadata.httpStatusCode;
        if (500 <= statusCode && statusCode <= 599 && !isTransientError(error)) {
          return true;
        }
        return false;
      }
      return false;
    }, "isServerError");
  }
});

// node_modules/@smithy/util-retry/dist-cjs/index.js
var require_dist_cjs34 = __commonJS({
  "node_modules/@smithy/util-retry/dist-cjs/index.js"(exports6, module) {
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      AdaptiveRetryStrategy: () => AdaptiveRetryStrategy,
      ConfiguredRetryStrategy: () => ConfiguredRetryStrategy,
      DEFAULT_MAX_ATTEMPTS: () => DEFAULT_MAX_ATTEMPTS,
      DEFAULT_RETRY_DELAY_BASE: () => DEFAULT_RETRY_DELAY_BASE,
      DEFAULT_RETRY_MODE: () => DEFAULT_RETRY_MODE,
      DefaultRateLimiter: () => DefaultRateLimiter,
      INITIAL_RETRY_TOKENS: () => INITIAL_RETRY_TOKENS,
      INVOCATION_ID_HEADER: () => INVOCATION_ID_HEADER,
      MAXIMUM_RETRY_DELAY: () => MAXIMUM_RETRY_DELAY,
      NO_RETRY_INCREMENT: () => NO_RETRY_INCREMENT,
      REQUEST_HEADER: () => REQUEST_HEADER,
      RETRY_COST: () => RETRY_COST,
      RETRY_MODES: () => RETRY_MODES,
      StandardRetryStrategy: () => StandardRetryStrategy,
      THROTTLING_RETRY_DELAY_BASE: () => THROTTLING_RETRY_DELAY_BASE,
      TIMEOUT_RETRY_COST: () => TIMEOUT_RETRY_COST
    });
    module.exports = __toCommonJS3(src_exports);
    var RETRY_MODES = /* @__PURE__ */ ((RETRY_MODES2) => {
      RETRY_MODES2["STANDARD"] = "standard";
      RETRY_MODES2["ADAPTIVE"] = "adaptive";
      return RETRY_MODES2;
    })(RETRY_MODES || {});
    var DEFAULT_MAX_ATTEMPTS = 3;
    var DEFAULT_RETRY_MODE = "standard";
    var import_service_error_classification = require_dist_cjs33();
    var _DefaultRateLimiter = class _DefaultRateLimiter2 {
      constructor(options) {
        this.currentCapacity = 0;
        this.enabled = false;
        this.lastMaxRate = 0;
        this.measuredTxRate = 0;
        this.requestCount = 0;
        this.lastTimestamp = 0;
        this.timeWindow = 0;
        this.beta = (options == null ? void 0 : options.beta) ?? 0.7;
        this.minCapacity = (options == null ? void 0 : options.minCapacity) ?? 1;
        this.minFillRate = (options == null ? void 0 : options.minFillRate) ?? 0.5;
        this.scaleConstant = (options == null ? void 0 : options.scaleConstant) ?? 0.4;
        this.smooth = (options == null ? void 0 : options.smooth) ?? 0.8;
        const currentTimeInSeconds = this.getCurrentTimeInSeconds();
        this.lastThrottleTime = currentTimeInSeconds;
        this.lastTxRateBucket = Math.floor(this.getCurrentTimeInSeconds());
        this.fillRate = this.minFillRate;
        this.maxCapacity = this.minCapacity;
      }
      getCurrentTimeInSeconds() {
        return Date.now() / 1e3;
      }
      async getSendToken() {
        return this.acquireTokenBucket(1);
      }
      async acquireTokenBucket(amount) {
        if (!this.enabled) {
          return;
        }
        this.refillTokenBucket();
        if (amount > this.currentCapacity) {
          const delay = (amount - this.currentCapacity) / this.fillRate * 1e3;
          await new Promise((resolve) => _DefaultRateLimiter2.setTimeoutFn(resolve, delay));
        }
        this.currentCapacity = this.currentCapacity - amount;
      }
      refillTokenBucket() {
        const timestamp = this.getCurrentTimeInSeconds();
        if (!this.lastTimestamp) {
          this.lastTimestamp = timestamp;
          return;
        }
        const fillAmount = (timestamp - this.lastTimestamp) * this.fillRate;
        this.currentCapacity = Math.min(this.maxCapacity, this.currentCapacity + fillAmount);
        this.lastTimestamp = timestamp;
      }
      updateClientSendingRate(response) {
        let calculatedRate;
        this.updateMeasuredRate();
        if ((0, import_service_error_classification.isThrottlingError)(response)) {
          const rateToUse = !this.enabled ? this.measuredTxRate : Math.min(this.measuredTxRate, this.fillRate);
          this.lastMaxRate = rateToUse;
          this.calculateTimeWindow();
          this.lastThrottleTime = this.getCurrentTimeInSeconds();
          calculatedRate = this.cubicThrottle(rateToUse);
          this.enableTokenBucket();
        } else {
          this.calculateTimeWindow();
          calculatedRate = this.cubicSuccess(this.getCurrentTimeInSeconds());
        }
        const newRate = Math.min(calculatedRate, 2 * this.measuredTxRate);
        this.updateTokenBucketRate(newRate);
      }
      calculateTimeWindow() {
        this.timeWindow = this.getPrecise(Math.pow(this.lastMaxRate * (1 - this.beta) / this.scaleConstant, 1 / 3));
      }
      cubicThrottle(rateToUse) {
        return this.getPrecise(rateToUse * this.beta);
      }
      cubicSuccess(timestamp) {
        return this.getPrecise(
          this.scaleConstant * Math.pow(timestamp - this.lastThrottleTime - this.timeWindow, 3) + this.lastMaxRate
        );
      }
      enableTokenBucket() {
        this.enabled = true;
      }
      updateTokenBucketRate(newRate) {
        this.refillTokenBucket();
        this.fillRate = Math.max(newRate, this.minFillRate);
        this.maxCapacity = Math.max(newRate, this.minCapacity);
        this.currentCapacity = Math.min(this.currentCapacity, this.maxCapacity);
      }
      updateMeasuredRate() {
        const t = this.getCurrentTimeInSeconds();
        const timeBucket = Math.floor(t * 2) / 2;
        this.requestCount++;
        if (timeBucket > this.lastTxRateBucket) {
          const currentRate = this.requestCount / (timeBucket - this.lastTxRateBucket);
          this.measuredTxRate = this.getPrecise(currentRate * this.smooth + this.measuredTxRate * (1 - this.smooth));
          this.requestCount = 0;
          this.lastTxRateBucket = timeBucket;
        }
      }
      getPrecise(num) {
        return parseFloat(num.toFixed(8));
      }
    };
    __name(_DefaultRateLimiter, "DefaultRateLimiter");
    _DefaultRateLimiter.setTimeoutFn = setTimeout;
    var DefaultRateLimiter = _DefaultRateLimiter;
    var DEFAULT_RETRY_DELAY_BASE = 100;
    var MAXIMUM_RETRY_DELAY = 20 * 1e3;
    var THROTTLING_RETRY_DELAY_BASE = 500;
    var INITIAL_RETRY_TOKENS = 500;
    var RETRY_COST = 5;
    var TIMEOUT_RETRY_COST = 10;
    var NO_RETRY_INCREMENT = 1;
    var INVOCATION_ID_HEADER = "amz-sdk-invocation-id";
    var REQUEST_HEADER = "amz-sdk-request";
    var getDefaultRetryBackoffStrategy = /* @__PURE__ */ __name(() => {
      let delayBase = DEFAULT_RETRY_DELAY_BASE;
      const computeNextBackoffDelay = /* @__PURE__ */ __name((attempts) => {
        return Math.floor(Math.min(MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase));
      }, "computeNextBackoffDelay");
      const setDelayBase = /* @__PURE__ */ __name((delay) => {
        delayBase = delay;
      }, "setDelayBase");
      return {
        computeNextBackoffDelay,
        setDelayBase
      };
    }, "getDefaultRetryBackoffStrategy");
    var createDefaultRetryToken = /* @__PURE__ */ __name(({
      retryDelay,
      retryCount,
      retryCost
    }) => {
      const getRetryCount = /* @__PURE__ */ __name(() => retryCount, "getRetryCount");
      const getRetryDelay = /* @__PURE__ */ __name(() => Math.min(MAXIMUM_RETRY_DELAY, retryDelay), "getRetryDelay");
      const getRetryCost = /* @__PURE__ */ __name(() => retryCost, "getRetryCost");
      return {
        getRetryCount,
        getRetryDelay,
        getRetryCost
      };
    }, "createDefaultRetryToken");
    var _StandardRetryStrategy = class _StandardRetryStrategy {
      constructor(maxAttempts) {
        this.maxAttempts = maxAttempts;
        this.mode = "standard";
        this.capacity = INITIAL_RETRY_TOKENS;
        this.retryBackoffStrategy = getDefaultRetryBackoffStrategy();
        this.maxAttemptsProvider = typeof maxAttempts === "function" ? maxAttempts : async () => maxAttempts;
      }
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      async acquireInitialRetryToken(retryTokenScope) {
        return createDefaultRetryToken({
          retryDelay: DEFAULT_RETRY_DELAY_BASE,
          retryCount: 0
        });
      }
      async refreshRetryTokenForRetry(token, errorInfo) {
        const maxAttempts = await this.getMaxAttempts();
        if (this.shouldRetry(token, errorInfo, maxAttempts)) {
          const errorType = errorInfo.errorType;
          this.retryBackoffStrategy.setDelayBase(
            errorType === "THROTTLING" ? THROTTLING_RETRY_DELAY_BASE : DEFAULT_RETRY_DELAY_BASE
          );
          const delayFromErrorType = this.retryBackoffStrategy.computeNextBackoffDelay(token.getRetryCount());
          const retryDelay = errorInfo.retryAfterHint ? Math.max(errorInfo.retryAfterHint.getTime() - Date.now() || 0, delayFromErrorType) : delayFromErrorType;
          const capacityCost = this.getCapacityCost(errorType);
          this.capacity -= capacityCost;
          return createDefaultRetryToken({
            retryDelay,
            retryCount: token.getRetryCount() + 1,
            retryCost: capacityCost
          });
        }
        throw new Error("No retry token available");
      }
      recordSuccess(token) {
        this.capacity = Math.max(INITIAL_RETRY_TOKENS, this.capacity + (token.getRetryCost() ?? NO_RETRY_INCREMENT));
      }
      /**
       * @returns the current available retry capacity.
       *
       * This number decreases when retries are executed and refills when requests or retries succeed.
       */
      getCapacity() {
        return this.capacity;
      }
      async getMaxAttempts() {
        try {
          return await this.maxAttemptsProvider();
        } catch (error) {
          console.warn(`Max attempts provider could not resolve. Using default of ${DEFAULT_MAX_ATTEMPTS}`);
          return DEFAULT_MAX_ATTEMPTS;
        }
      }
      shouldRetry(tokenToRenew, errorInfo, maxAttempts) {
        const attempts = tokenToRenew.getRetryCount() + 1;
        return attempts < maxAttempts && this.capacity >= this.getCapacityCost(errorInfo.errorType) && this.isRetryableError(errorInfo.errorType);
      }
      getCapacityCost(errorType) {
        return errorType === "TRANSIENT" ? TIMEOUT_RETRY_COST : RETRY_COST;
      }
      isRetryableError(errorType) {
        return errorType === "THROTTLING" || errorType === "TRANSIENT";
      }
    };
    __name(_StandardRetryStrategy, "StandardRetryStrategy");
    var StandardRetryStrategy = _StandardRetryStrategy;
    var _AdaptiveRetryStrategy = class _AdaptiveRetryStrategy {
      constructor(maxAttemptsProvider, options) {
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = "adaptive";
        const { rateLimiter } = options ?? {};
        this.rateLimiter = rateLimiter ?? new DefaultRateLimiter();
        this.standardRetryStrategy = new StandardRetryStrategy(maxAttemptsProvider);
      }
      async acquireInitialRetryToken(retryTokenScope) {
        await this.rateLimiter.getSendToken();
        return this.standardRetryStrategy.acquireInitialRetryToken(retryTokenScope);
      }
      async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {
        this.rateLimiter.updateClientSendingRate(errorInfo);
        return this.standardRetryStrategy.refreshRetryTokenForRetry(tokenToRenew, errorInfo);
      }
      recordSuccess(token) {
        this.rateLimiter.updateClientSendingRate({});
        this.standardRetryStrategy.recordSuccess(token);
      }
    };
    __name(_AdaptiveRetryStrategy, "AdaptiveRetryStrategy");
    var AdaptiveRetryStrategy = _AdaptiveRetryStrategy;
    var _ConfiguredRetryStrategy = class _ConfiguredRetryStrategy extends StandardRetryStrategy {
      /**
       * @param maxAttempts - the maximum number of retry attempts allowed.
       *                      e.g., if set to 3, then 4 total requests are possible.
       * @param computeNextBackoffDelay - a millisecond delay for each retry or a function that takes the retry attempt
       *                                  and returns the delay.
       *
       * @example exponential backoff.
       * ```js
       * new Client({
       *   retryStrategy: new ConfiguredRetryStrategy(3, (attempt) => attempt ** 2)
       * });
       * ```
       * @example constant delay.
       * ```js
       * new Client({
       *   retryStrategy: new ConfiguredRetryStrategy(3, 2000)
       * });
       * ```
       */
      constructor(maxAttempts, computeNextBackoffDelay = DEFAULT_RETRY_DELAY_BASE) {
        super(typeof maxAttempts === "function" ? maxAttempts : async () => maxAttempts);
        if (typeof computeNextBackoffDelay === "number") {
          this.computeNextBackoffDelay = () => computeNextBackoffDelay;
        } else {
          this.computeNextBackoffDelay = computeNextBackoffDelay;
        }
      }
      async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {
        const token = await super.refreshRetryTokenForRetry(tokenToRenew, errorInfo);
        token.getRetryDelay = () => this.computeNextBackoffDelay(token.getRetryCount());
        return token;
      }
    };
    __name(_ConfiguredRetryStrategy, "ConfiguredRetryStrategy");
    var ConfiguredRetryStrategy = _ConfiguredRetryStrategy;
  }
});

// node_modules/@smithy/middleware-retry/dist-cjs/isStreamingPayload/isStreamingPayload.js
var require_isStreamingPayload = __commonJS({
  "node_modules/@smithy/middleware-retry/dist-cjs/isStreamingPayload/isStreamingPayload.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.isStreamingPayload = void 0;
    var stream_1 = (init_stream(), __toCommonJS(stream_exports));
    var isStreamingPayload = (request) => (request === null || request === void 0 ? void 0 : request.body) instanceof stream_1.Readable || typeof ReadableStream !== "undefined" && (request === null || request === void 0 ? void 0 : request.body) instanceof ReadableStream;
    exports6.isStreamingPayload = isStreamingPayload;
  }
});

// node_modules/@smithy/middleware-retry/dist-cjs/index.js
var require_dist_cjs35 = __commonJS({
  "node_modules/@smithy/middleware-retry/dist-cjs/index.js"(exports6, module) {
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      AdaptiveRetryStrategy: () => AdaptiveRetryStrategy,
      CONFIG_MAX_ATTEMPTS: () => CONFIG_MAX_ATTEMPTS,
      CONFIG_RETRY_MODE: () => CONFIG_RETRY_MODE,
      ENV_MAX_ATTEMPTS: () => ENV_MAX_ATTEMPTS,
      ENV_RETRY_MODE: () => ENV_RETRY_MODE,
      NODE_MAX_ATTEMPT_CONFIG_OPTIONS: () => NODE_MAX_ATTEMPT_CONFIG_OPTIONS,
      NODE_RETRY_MODE_CONFIG_OPTIONS: () => NODE_RETRY_MODE_CONFIG_OPTIONS,
      StandardRetryStrategy: () => StandardRetryStrategy,
      defaultDelayDecider: () => defaultDelayDecider,
      defaultRetryDecider: () => defaultRetryDecider,
      getOmitRetryHeadersPlugin: () => getOmitRetryHeadersPlugin,
      getRetryAfterHint: () => getRetryAfterHint,
      getRetryPlugin: () => getRetryPlugin,
      omitRetryHeadersMiddleware: () => omitRetryHeadersMiddleware,
      omitRetryHeadersMiddlewareOptions: () => omitRetryHeadersMiddlewareOptions,
      resolveRetryConfig: () => resolveRetryConfig,
      retryMiddleware: () => retryMiddleware,
      retryMiddlewareOptions: () => retryMiddlewareOptions
    });
    module.exports = __toCommonJS3(src_exports);
    var import_protocol_http11 = require_dist_cjs2();
    var import_uuid = (init_esm_node(), __toCommonJS(esm_node_exports));
    var import_util_retry = require_dist_cjs34();
    var getDefaultRetryQuota = /* @__PURE__ */ __name((initialRetryTokens, options) => {
      const MAX_CAPACITY = initialRetryTokens;
      const noRetryIncrement = (options == null ? void 0 : options.noRetryIncrement) ?? import_util_retry.NO_RETRY_INCREMENT;
      const retryCost = (options == null ? void 0 : options.retryCost) ?? import_util_retry.RETRY_COST;
      const timeoutRetryCost = (options == null ? void 0 : options.timeoutRetryCost) ?? import_util_retry.TIMEOUT_RETRY_COST;
      let availableCapacity = initialRetryTokens;
      const getCapacityAmount = /* @__PURE__ */ __name((error) => error.name === "TimeoutError" ? timeoutRetryCost : retryCost, "getCapacityAmount");
      const hasRetryTokens = /* @__PURE__ */ __name((error) => getCapacityAmount(error) <= availableCapacity, "hasRetryTokens");
      const retrieveRetryTokens = /* @__PURE__ */ __name((error) => {
        if (!hasRetryTokens(error)) {
          throw new Error("No retry token available");
        }
        const capacityAmount = getCapacityAmount(error);
        availableCapacity -= capacityAmount;
        return capacityAmount;
      }, "retrieveRetryTokens");
      const releaseRetryTokens = /* @__PURE__ */ __name((capacityReleaseAmount) => {
        availableCapacity += capacityReleaseAmount ?? noRetryIncrement;
        availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);
      }, "releaseRetryTokens");
      return Object.freeze({
        hasRetryTokens,
        retrieveRetryTokens,
        releaseRetryTokens
      });
    }, "getDefaultRetryQuota");
    var defaultDelayDecider = /* @__PURE__ */ __name((delayBase, attempts) => Math.floor(Math.min(import_util_retry.MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase)), "defaultDelayDecider");
    var import_service_error_classification = require_dist_cjs33();
    var defaultRetryDecider = /* @__PURE__ */ __name((error) => {
      if (!error) {
        return false;
      }
      return (0, import_service_error_classification.isRetryableByTrait)(error) || (0, import_service_error_classification.isClockSkewError)(error) || (0, import_service_error_classification.isThrottlingError)(error) || (0, import_service_error_classification.isTransientError)(error);
    }, "defaultRetryDecider");
    var asSdkError = /* @__PURE__ */ __name((error) => {
      if (error instanceof Error)
        return error;
      if (error instanceof Object)
        return Object.assign(new Error(), error);
      if (typeof error === "string")
        return new Error(error);
      return new Error(`AWS SDK error wrapper for ${error}`);
    }, "asSdkError");
    var _StandardRetryStrategy = class _StandardRetryStrategy {
      constructor(maxAttemptsProvider, options) {
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = import_util_retry.RETRY_MODES.STANDARD;
        this.retryDecider = (options == null ? void 0 : options.retryDecider) ?? defaultRetryDecider;
        this.delayDecider = (options == null ? void 0 : options.delayDecider) ?? defaultDelayDecider;
        this.retryQuota = (options == null ? void 0 : options.retryQuota) ?? getDefaultRetryQuota(import_util_retry.INITIAL_RETRY_TOKENS);
      }
      shouldRetry(error, attempts, maxAttempts) {
        return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);
      }
      async getMaxAttempts() {
        let maxAttempts;
        try {
          maxAttempts = await this.maxAttemptsProvider();
        } catch (error) {
          maxAttempts = import_util_retry.DEFAULT_MAX_ATTEMPTS;
        }
        return maxAttempts;
      }
      async retry(next, args, options) {
        let retryTokenAmount;
        let attempts = 0;
        let totalDelay = 0;
        const maxAttempts = await this.getMaxAttempts();
        const { request } = args;
        if (import_protocol_http11.HttpRequest.isInstance(request)) {
          request.headers[import_util_retry.INVOCATION_ID_HEADER] = (0, import_uuid.v4)();
        }
        while (true) {
          try {
            if (import_protocol_http11.HttpRequest.isInstance(request)) {
              request.headers[import_util_retry.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;
            }
            if (options == null ? void 0 : options.beforeRequest) {
              await options.beforeRequest();
            }
            const { response, output } = await next(args);
            if (options == null ? void 0 : options.afterRequest) {
              options.afterRequest(response);
            }
            this.retryQuota.releaseRetryTokens(retryTokenAmount);
            output.$metadata.attempts = attempts + 1;
            output.$metadata.totalRetryDelay = totalDelay;
            return { response, output };
          } catch (e) {
            const err = asSdkError(e);
            attempts++;
            if (this.shouldRetry(err, attempts, maxAttempts)) {
              retryTokenAmount = this.retryQuota.retrieveRetryTokens(err);
              const delayFromDecider = this.delayDecider(
                (0, import_service_error_classification.isThrottlingError)(err) ? import_util_retry.THROTTLING_RETRY_DELAY_BASE : import_util_retry.DEFAULT_RETRY_DELAY_BASE,
                attempts
              );
              const delayFromResponse = getDelayFromRetryAfterHeader(err.$response);
              const delay = Math.max(delayFromResponse || 0, delayFromDecider);
              totalDelay += delay;
              await new Promise((resolve) => setTimeout(resolve, delay));
              continue;
            }
            if (!err.$metadata) {
              err.$metadata = {};
            }
            err.$metadata.attempts = attempts;
            err.$metadata.totalRetryDelay = totalDelay;
            throw err;
          }
        }
      }
    };
    __name(_StandardRetryStrategy, "StandardRetryStrategy");
    var StandardRetryStrategy = _StandardRetryStrategy;
    var getDelayFromRetryAfterHeader = /* @__PURE__ */ __name((response) => {
      if (!import_protocol_http11.HttpResponse.isInstance(response))
        return;
      const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === "retry-after");
      if (!retryAfterHeaderName)
        return;
      const retryAfter = response.headers[retryAfterHeaderName];
      const retryAfterSeconds = Number(retryAfter);
      if (!Number.isNaN(retryAfterSeconds))
        return retryAfterSeconds * 1e3;
      const retryAfterDate = new Date(retryAfter);
      return retryAfterDate.getTime() - Date.now();
    }, "getDelayFromRetryAfterHeader");
    var _AdaptiveRetryStrategy = class _AdaptiveRetryStrategy extends StandardRetryStrategy {
      constructor(maxAttemptsProvider, options) {
        const { rateLimiter, ...superOptions } = options ?? {};
        super(maxAttemptsProvider, superOptions);
        this.rateLimiter = rateLimiter ?? new import_util_retry.DefaultRateLimiter();
        this.mode = import_util_retry.RETRY_MODES.ADAPTIVE;
      }
      async retry(next, args) {
        return super.retry(next, args, {
          beforeRequest: async () => {
            return this.rateLimiter.getSendToken();
          },
          afterRequest: (response) => {
            this.rateLimiter.updateClientSendingRate(response);
          }
        });
      }
    };
    __name(_AdaptiveRetryStrategy, "AdaptiveRetryStrategy");
    var AdaptiveRetryStrategy = _AdaptiveRetryStrategy;
    var import_util_middleware3 = require_dist_cjs6();
    var ENV_MAX_ATTEMPTS = "AWS_MAX_ATTEMPTS";
    var CONFIG_MAX_ATTEMPTS = "max_attempts";
    var NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env2) => {
        const value = env2[ENV_MAX_ATTEMPTS];
        if (!value)
          return void 0;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
          throw new Error(`Environment variable ${ENV_MAX_ATTEMPTS} mast be a number, got "${value}"`);
        }
        return maxAttempt;
      },
      configFileSelector: (profile) => {
        const value = profile[CONFIG_MAX_ATTEMPTS];
        if (!value)
          return void 0;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
          throw new Error(`Shared config file entry ${CONFIG_MAX_ATTEMPTS} mast be a number, got "${value}"`);
        }
        return maxAttempt;
      },
      default: import_util_retry.DEFAULT_MAX_ATTEMPTS
    };
    var resolveRetryConfig = /* @__PURE__ */ __name((input) => {
      const { retryStrategy } = input;
      const maxAttempts = (0, import_util_middleware3.normalizeProvider)(input.maxAttempts ?? import_util_retry.DEFAULT_MAX_ATTEMPTS);
      return {
        ...input,
        maxAttempts,
        retryStrategy: async () => {
          if (retryStrategy) {
            return retryStrategy;
          }
          const retryMode = await (0, import_util_middleware3.normalizeProvider)(input.retryMode)();
          if (retryMode === import_util_retry.RETRY_MODES.ADAPTIVE) {
            return new import_util_retry.AdaptiveRetryStrategy(maxAttempts);
          }
          return new import_util_retry.StandardRetryStrategy(maxAttempts);
        }
      };
    }, "resolveRetryConfig");
    var ENV_RETRY_MODE = "AWS_RETRY_MODE";
    var CONFIG_RETRY_MODE = "retry_mode";
    var NODE_RETRY_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env2) => env2[ENV_RETRY_MODE],
      configFileSelector: (profile) => profile[CONFIG_RETRY_MODE],
      default: import_util_retry.DEFAULT_RETRY_MODE
    };
    var omitRetryHeadersMiddleware = /* @__PURE__ */ __name(() => (next) => async (args) => {
      const { request } = args;
      if (import_protocol_http11.HttpRequest.isInstance(request)) {
        delete request.headers[import_util_retry.INVOCATION_ID_HEADER];
        delete request.headers[import_util_retry.REQUEST_HEADER];
      }
      return next(args);
    }, "omitRetryHeadersMiddleware");
    var omitRetryHeadersMiddlewareOptions = {
      name: "omitRetryHeadersMiddleware",
      tags: ["RETRY", "HEADERS", "OMIT_RETRY_HEADERS"],
      relation: "before",
      toMiddleware: "awsAuthMiddleware",
      override: true
    };
    var getOmitRetryHeadersPlugin = /* @__PURE__ */ __name((options) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo(omitRetryHeadersMiddleware(), omitRetryHeadersMiddlewareOptions);
      }
    }), "getOmitRetryHeadersPlugin");
    var import_smithy_client7 = require_dist_cjs23();
    var import_isStreamingPayload = require_isStreamingPayload();
    var retryMiddleware = /* @__PURE__ */ __name((options) => (next, context) => async (args) => {
      var _a;
      let retryStrategy = await options.retryStrategy();
      const maxAttempts = await options.maxAttempts();
      if (isRetryStrategyV2(retryStrategy)) {
        retryStrategy = retryStrategy;
        let retryToken = await retryStrategy.acquireInitialRetryToken(context["partition_id"]);
        let lastError = new Error();
        let attempts = 0;
        let totalRetryDelay = 0;
        const { request } = args;
        const isRequest = import_protocol_http11.HttpRequest.isInstance(request);
        if (isRequest) {
          request.headers[import_util_retry.INVOCATION_ID_HEADER] = (0, import_uuid.v4)();
        }
        while (true) {
          try {
            if (isRequest) {
              request.headers[import_util_retry.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;
            }
            const { response, output } = await next(args);
            retryStrategy.recordSuccess(retryToken);
            output.$metadata.attempts = attempts + 1;
            output.$metadata.totalRetryDelay = totalRetryDelay;
            return { response, output };
          } catch (e) {
            const retryErrorInfo = getRetryErrorInfo(e);
            lastError = asSdkError(e);
            if (isRequest && (0, import_isStreamingPayload.isStreamingPayload)(request)) {
              (_a = context.logger instanceof import_smithy_client7.NoOpLogger ? console : context.logger) == null ? void 0 : _a.warn(
                "An error was encountered in a non-retryable streaming request."
              );
              throw lastError;
            }
            try {
              retryToken = await retryStrategy.refreshRetryTokenForRetry(retryToken, retryErrorInfo);
            } catch (refreshError) {
              if (!lastError.$metadata) {
                lastError.$metadata = {};
              }
              lastError.$metadata.attempts = attempts + 1;
              lastError.$metadata.totalRetryDelay = totalRetryDelay;
              throw lastError;
            }
            attempts = retryToken.getRetryCount();
            const delay = retryToken.getRetryDelay();
            totalRetryDelay += delay;
            await new Promise((resolve) => setTimeout(resolve, delay));
          }
        }
      } else {
        retryStrategy = retryStrategy;
        if (retryStrategy == null ? void 0 : retryStrategy.mode)
          context.userAgent = [...context.userAgent || [], ["cfg/retry-mode", retryStrategy.mode]];
        return retryStrategy.retry(next, args);
      }
    }, "retryMiddleware");
    var isRetryStrategyV2 = /* @__PURE__ */ __name((retryStrategy) => typeof retryStrategy.acquireInitialRetryToken !== "undefined" && typeof retryStrategy.refreshRetryTokenForRetry !== "undefined" && typeof retryStrategy.recordSuccess !== "undefined", "isRetryStrategyV2");
    var getRetryErrorInfo = /* @__PURE__ */ __name((error) => {
      const errorInfo = {
        error,
        errorType: getRetryErrorType(error)
      };
      const retryAfterHint = getRetryAfterHint(error.$response);
      if (retryAfterHint) {
        errorInfo.retryAfterHint = retryAfterHint;
      }
      return errorInfo;
    }, "getRetryErrorInfo");
    var getRetryErrorType = /* @__PURE__ */ __name((error) => {
      if ((0, import_service_error_classification.isThrottlingError)(error))
        return "THROTTLING";
      if ((0, import_service_error_classification.isTransientError)(error))
        return "TRANSIENT";
      if ((0, import_service_error_classification.isServerError)(error))
        return "SERVER_ERROR";
      return "CLIENT_ERROR";
    }, "getRetryErrorType");
    var retryMiddlewareOptions = {
      name: "retryMiddleware",
      tags: ["RETRY"],
      step: "finalizeRequest",
      priority: "high",
      override: true
    };
    var getRetryPlugin = /* @__PURE__ */ __name((options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(retryMiddleware(options), retryMiddlewareOptions);
      }
    }), "getRetryPlugin");
    var getRetryAfterHint = /* @__PURE__ */ __name((response) => {
      if (!import_protocol_http11.HttpResponse.isInstance(response))
        return;
      const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === "retry-after");
      if (!retryAfterHeaderName)
        return;
      const retryAfter = response.headers[retryAfterHeaderName];
      const retryAfterSeconds = Number(retryAfter);
      if (!Number.isNaN(retryAfterSeconds))
        return new Date(retryAfterSeconds * 1e3);
      const retryAfterDate = new Date(retryAfter);
      return retryAfterDate;
    }, "getRetryAfterHint");
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/auth/httpAuthSchemeProvider.js
var require_httpAuthSchemeProvider = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/auth/httpAuthSchemeProvider.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.resolveHttpAuthSchemeConfig = exports6.defaultSSOHttpAuthSchemeProvider = exports6.defaultSSOHttpAuthSchemeParametersProvider = void 0;
    var core_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var util_middleware_1 = require_dist_cjs6();
    var defaultSSOHttpAuthSchemeParametersProvider = async (config2, context, input) => {
      return {
        operation: (0, util_middleware_1.getSmithyContext)(context).operation,
        region: await (0, util_middleware_1.normalizeProvider)(config2.region)() || (() => {
          throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
        })()
      };
    };
    exports6.defaultSSOHttpAuthSchemeParametersProvider = defaultSSOHttpAuthSchemeParametersProvider;
    function createAwsAuthSigv4HttpAuthOption(authParameters) {
      return {
        schemeId: "aws.auth#sigv4",
        signingProperties: {
          name: "awsssoportal",
          region: authParameters.region
        },
        propertiesExtractor: (config2, context) => ({
          signingProperties: {
            config: config2,
            context
          }
        })
      };
    }
    function createSmithyApiNoAuthHttpAuthOption(authParameters) {
      return {
        schemeId: "smithy.api#noAuth"
      };
    }
    var defaultSSOHttpAuthSchemeProvider = (authParameters) => {
      const options = [];
      switch (authParameters.operation) {
        case "GetRoleCredentials": {
          options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
          break;
        }
        case "ListAccountRoles": {
          options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
          break;
        }
        case "ListAccounts": {
          options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
          break;
        }
        case "Logout": {
          options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
          break;
        }
        default: {
          options.push(createAwsAuthSigv4HttpAuthOption(authParameters));
        }
      }
      return options;
    };
    exports6.defaultSSOHttpAuthSchemeProvider = defaultSSOHttpAuthSchemeProvider;
    var resolveHttpAuthSchemeConfig = (config2) => {
      const config_0 = (0, core_1.resolveAwsSdkSigV4Config)(config2);
      return {
        ...config_0
      };
    };
    exports6.resolveHttpAuthSchemeConfig = resolveHttpAuthSchemeConfig;
  }
});

// node_modules/tslib/tslib.es6.mjs
var tslib_es6_exports = {};
__export(tslib_es6_exports, {
  __addDisposableResource: () => __addDisposableResource,
  __assign: () => __assign,
  __asyncDelegator: () => __asyncDelegator,
  __asyncGenerator: () => __asyncGenerator,
  __asyncValues: () => __asyncValues,
  __await: () => __await,
  __awaiter: () => __awaiter,
  __classPrivateFieldGet: () => __classPrivateFieldGet,
  __classPrivateFieldIn: () => __classPrivateFieldIn,
  __classPrivateFieldSet: () => __classPrivateFieldSet,
  __createBinding: () => __createBinding,
  __decorate: () => __decorate,
  __disposeResources: () => __disposeResources,
  __esDecorate: () => __esDecorate,
  __exportStar: () => __exportStar,
  __extends: () => __extends,
  __generator: () => __generator,
  __importDefault: () => __importDefault,
  __importStar: () => __importStar,
  __makeTemplateObject: () => __makeTemplateObject,
  __metadata: () => __metadata,
  __param: () => __param,
  __propKey: () => __propKey,
  __read: () => __read,
  __rest: () => __rest,
  __rewriteRelativeImportExtension: () => __rewriteRelativeImportExtension,
  __runInitializers: () => __runInitializers,
  __setFunctionName: () => __setFunctionName,
  __spread: () => __spread,
  __spreadArray: () => __spreadArray,
  __spreadArrays: () => __spreadArrays,
  __values: () => __values,
  default: () => tslib_es6_default
});
function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
function __rest(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
    t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __decorate(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
  return function(target, key) {
    decorator(target, key, paramIndex);
  };
}
function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
  function accept(f) {
    if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected");
    return f;
  }
  var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
  var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
  var _, done = false;
  for (var i = decorators.length - 1; i >= 0; i--) {
    var context = {};
    for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
    for (var p in contextIn.access) context.access[p] = contextIn.access[p];
    context.addInitializer = function(f) {
      if (done) throw new TypeError("Cannot add initializers after decoration has completed");
      extraInitializers.push(accept(f || null));
    };
    var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
    if (kind === "accessor") {
      if (result === void 0) continue;
      if (result === null || typeof result !== "object") throw new TypeError("Object expected");
      if (_ = accept(result.get)) descriptor.get = _;
      if (_ = accept(result.set)) descriptor.set = _;
      if (_ = accept(result.init)) initializers.unshift(_);
    } else if (_ = accept(result)) {
      if (kind === "field") initializers.unshift(_);
      else descriptor[key] = _;
    }
  }
  if (target) Object.defineProperty(target, contextIn.name, descriptor);
  done = true;
}
function __runInitializers(thisArg, initializers, value) {
  var useValue = arguments.length > 2;
  for (var i = 0; i < initializers.length; i++) {
    value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
  }
  return useValue ? value : void 0;
}
function __propKey(x) {
  return typeof x === "symbol" ? x : "".concat(x);
}
function __setFunctionName(f, name, prefix) {
  if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
  return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
}
function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1) throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
  return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];
      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;
        case 4:
          _.label++;
          return { value: op[1], done: false };
        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;
        case 7:
          op = _.ops.pop();
          _.trys.pop();
          continue;
        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }
          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }
          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }
          if (t && _.label < t[2]) {
            _.label = t[2];
            _.ops.push(op);
            break;
          }
          if (t[2]) _.ops.pop();
          _.trys.pop();
          continue;
      }
      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }
    if (op[0] & 5) throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __exportStar(m, o) {
  for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}
function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
}
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++)
    ar = ar.concat(__read(arguments[i]));
  return ar;
}
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
      r[k] = a[j];
  return r;
}
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
}
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = Object.create((typeof AsyncIterator === "function" ? AsyncIterator : Object).prototype), verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function() {
    return this;
  }, i;
  function awaitReturn(f) {
    return function(v) {
      return Promise.resolve(v).then(f, reject);
    };
  }
  function verb(n, f) {
    if (g[n]) {
      i[n] = function(v) {
        return new Promise(function(a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
      if (f) i[n] = f(i[n]);
    }
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f, v) {
    if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
  }
}
function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function(e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function() {
    return this;
  }, i;
  function verb(n, f) {
    i[n] = o[n] ? function(v) {
      return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v;
    } : f;
  }
}
function __asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i);
  function verb(n) {
    i[n] = o[n] && function(v) {
      return new Promise(function(resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }
  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function(v2) {
      resolve({ value: v2, done: d });
    }, reject);
  }
}
function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", { value: raw });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
function __importStar(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) {
    for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
  }
  __setModuleDefault(result, mod);
  return result;
}
function __importDefault(mod) {
  return mod && mod.__esModule ? mod : { default: mod };
}
function __classPrivateFieldGet(receiver, state3, kind, f) {
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state3 === "function" ? receiver !== state3 || !f : !state3.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state3.get(receiver);
}
function __classPrivateFieldSet(receiver, state3, value, kind, f) {
  if (kind === "m") throw new TypeError("Private method is not writable");
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
  if (typeof state3 === "function" ? receiver !== state3 || !f : !state3.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state3.set(receiver, value), value;
}
function __classPrivateFieldIn(state3, receiver) {
  if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function") throw new TypeError("Cannot use 'in' operator on non-object");
  return typeof state3 === "function" ? receiver === state3 : state3.has(receiver);
}
function __addDisposableResource(env2, value, async) {
  if (value !== null && value !== void 0) {
    if (typeof value !== "object" && typeof value !== "function") throw new TypeError("Object expected.");
    var dispose, inner;
    if (async) {
      if (!Symbol.asyncDispose) throw new TypeError("Symbol.asyncDispose is not defined.");
      dispose = value[Symbol.asyncDispose];
    }
    if (dispose === void 0) {
      if (!Symbol.dispose) throw new TypeError("Symbol.dispose is not defined.");
      dispose = value[Symbol.dispose];
      if (async) inner = dispose;
    }
    if (typeof dispose !== "function") throw new TypeError("Object not disposable.");
    if (inner) dispose = function() {
      try {
        inner.call(this);
      } catch (e) {
        return Promise.reject(e);
      }
    };
    env2.stack.push({ value, dispose, async });
  } else if (async) {
    env2.stack.push({ async: true });
  }
  return value;
}
function __disposeResources(env2) {
  function fail(e) {
    env2.error = env2.hasError ? new _SuppressedError(e, env2.error, "An error was suppressed during disposal.") : e;
    env2.hasError = true;
  }
  var r, s = 0;
  function next() {
    while (r = env2.stack.pop()) {
      try {
        if (!r.async && s === 1) return s = 0, env2.stack.push(r), Promise.resolve().then(next);
        if (r.dispose) {
          var result = r.dispose.call(r.value);
          if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) {
            fail(e);
            return next();
          });
        } else s |= 1;
      } catch (e) {
        fail(e);
      }
    }
    if (s === 1) return env2.hasError ? Promise.reject(env2.error) : Promise.resolve();
    if (env2.hasError) throw env2.error;
  }
  return next();
}
function __rewriteRelativeImportExtension(path, preserveJsx) {
  if (typeof path === "string" && /^\.\.?\//.test(path)) {
    return path.replace(/\.(tsx)$|((?:\.d)?)((?:\.[^./]+?)?)\.([cm]?)ts$/i, function(m, tsx, d, ext, cm) {
      return tsx ? preserveJsx ? ".jsx" : ".js" : d && (!ext || !cm) ? m : d + ext + "." + cm.toLowerCase() + "js";
    });
  }
  return path;
}
var extendStatics, __assign, __createBinding, __setModuleDefault, ownKeys, _SuppressedError, tslib_es6_default;
var init_tslib_es6 = __esm({
  "node_modules/tslib/tslib.es6.mjs"() {
    init_dirname();
    extendStatics = function(d, b) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
        d2.__proto__ = b2;
      } || function(d2, b2) {
        for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
      };
      return extendStatics(d, b);
    };
    __assign = function() {
      __assign = Object.assign || function __assign2(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    __createBinding = Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    };
    __setModuleDefault = Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    };
    ownKeys = function(o) {
      ownKeys = Object.getOwnPropertyNames || function(o2) {
        var ar = [];
        for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
        return ar;
      };
      return ownKeys(o);
    };
    _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function(error, suppressed, message) {
      var e = new Error(message);
      return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
    };
    tslib_es6_default = {
      __extends,
      __assign,
      __rest,
      __decorate,
      __param,
      __esDecorate,
      __runInitializers,
      __propKey,
      __setFunctionName,
      __metadata,
      __awaiter,
      __generator,
      __createBinding,
      __exportStar,
      __values,
      __read,
      __spread,
      __spreadArrays,
      __spreadArray,
      __await,
      __asyncGenerator,
      __asyncDelegator,
      __asyncValues,
      __makeTemplateObject,
      __importStar,
      __importDefault,
      __classPrivateFieldGet,
      __classPrivateFieldSet,
      __classPrivateFieldIn,
      __addDisposableResource,
      __disposeResources,
      __rewriteRelativeImportExtension
    };
  }
});

// node_modules/@aws-sdk/client-sso/package.json
var require_package = __commonJS({
  "node_modules/@aws-sdk/client-sso/package.json"(exports6, module) {
    module.exports = {
      name: "@aws-sdk/client-sso",
      description: "AWS SDK for JavaScript Sso Client for Node.js, Browser and React Native",
      version: "3.712.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "node ../../scripts/compilation/inline client-sso",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "extract:docs": "api-extractor run --local",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo sso"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "5.2.0",
        "@aws-crypto/sha256-js": "5.2.0",
        "@aws-sdk/core": "3.709.0",
        "@aws-sdk/middleware-host-header": "3.709.0",
        "@aws-sdk/middleware-logger": "3.709.0",
        "@aws-sdk/middleware-recursion-detection": "3.709.0",
        "@aws-sdk/middleware-user-agent": "3.709.0",
        "@aws-sdk/region-config-resolver": "3.709.0",
        "@aws-sdk/types": "3.709.0",
        "@aws-sdk/util-endpoints": "3.709.0",
        "@aws-sdk/util-user-agent-browser": "3.709.0",
        "@aws-sdk/util-user-agent-node": "3.712.0",
        "@smithy/config-resolver": "^3.0.13",
        "@smithy/core": "^2.5.5",
        "@smithy/fetch-http-handler": "^4.1.2",
        "@smithy/hash-node": "^3.0.11",
        "@smithy/invalid-dependency": "^3.0.11",
        "@smithy/middleware-content-length": "^3.0.13",
        "@smithy/middleware-endpoint": "^3.2.5",
        "@smithy/middleware-retry": "^3.0.30",
        "@smithy/middleware-serde": "^3.0.11",
        "@smithy/middleware-stack": "^3.0.11",
        "@smithy/node-config-provider": "^3.1.12",
        "@smithy/node-http-handler": "^3.3.2",
        "@smithy/protocol-http": "^4.1.8",
        "@smithy/smithy-client": "^3.5.0",
        "@smithy/types": "^3.7.2",
        "@smithy/url-parser": "^3.0.11",
        "@smithy/util-base64": "^3.0.0",
        "@smithy/util-body-length-browser": "^3.0.0",
        "@smithy/util-body-length-node": "^3.0.0",
        "@smithy/util-defaults-mode-browser": "^3.0.30",
        "@smithy/util-defaults-mode-node": "^3.0.30",
        "@smithy/util-endpoints": "^2.1.7",
        "@smithy/util-middleware": "^3.0.11",
        "@smithy/util-retry": "^3.0.11",
        "@smithy/util-utf8": "^3.0.0",
        tslib: "^2.6.2"
      },
      devDependencies: {
        "@tsconfig/node16": "16.1.3",
        "@types/node": "^16.18.96",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typescript: "~4.9.5"
      },
      engines: {
        node: ">=16.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*/**"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sso",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-sso"
      }
    };
  }
});

// node_modules/@aws-sdk/util-user-agent-node/dist-cjs/index.js
var require_dist_cjs36 = __commonJS({
  "node_modules/@aws-sdk/util-user-agent-node/dist-cjs/index.js"(exports6, module) {
    "use strict";
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      NODE_APP_ID_CONFIG_OPTIONS: () => NODE_APP_ID_CONFIG_OPTIONS,
      UA_APP_ID_ENV_NAME: () => UA_APP_ID_ENV_NAME,
      UA_APP_ID_INI_NAME: () => UA_APP_ID_INI_NAME,
      createDefaultUserAgentProvider: () => createDefaultUserAgentProvider,
      crtAvailability: () => crtAvailability,
      defaultUserAgent: () => defaultUserAgent
    });
    module.exports = __toCommonJS3(src_exports);
    var import_os = __require("os");
    var import_process = __require("process");
    var crtAvailability = {
      isCrtAvailable: false
    };
    var isCrtAvailable = /* @__PURE__ */ __name(() => {
      if (crtAvailability.isCrtAvailable) {
        return ["md/crt-avail"];
      }
      return null;
    }, "isCrtAvailable");
    var createDefaultUserAgentProvider = /* @__PURE__ */ __name(({ serviceId, clientVersion }) => {
      return async (config2) => {
        var _a;
        const sections = [
          // sdk-metadata
          ["aws-sdk-js", clientVersion],
          // ua-metadata
          ["ua", "2.1"],
          // os-metadata
          [`os/${(0, import_os.platform)()}`, (0, import_os.release)()],
          // language-metadata
          // ECMAScript edition doesn't matter in JS, so no version needed.
          ["lang/js"],
          ["md/nodejs", `${import_process.versions.node}`]
        ];
        const crtAvailable = isCrtAvailable();
        if (crtAvailable) {
          sections.push(crtAvailable);
        }
        if (serviceId) {
          sections.push([`api/${serviceId}`, clientVersion]);
        }
        if (import_process.env.AWS_EXECUTION_ENV) {
          sections.push([`exec-env/${import_process.env.AWS_EXECUTION_ENV}`]);
        }
        const appId = await ((_a = config2 == null ? void 0 : config2.userAgentAppId) == null ? void 0 : _a.call(config2));
        const resolvedUserAgent = appId ? [...sections, [`app/${appId}`]] : [...sections];
        return resolvedUserAgent;
      };
    }, "createDefaultUserAgentProvider");
    var defaultUserAgent = createDefaultUserAgentProvider;
    var import_middleware_user_agent = require_dist_cjs24();
    var UA_APP_ID_ENV_NAME = "AWS_SDK_UA_APP_ID";
    var UA_APP_ID_INI_NAME = "sdk_ua_app_id";
    var UA_APP_ID_INI_NAME_DEPRECATED = "sdk-ua-app-id";
    var NODE_APP_ID_CONFIG_OPTIONS = {
      environmentVariableSelector: (env2) => env2[UA_APP_ID_ENV_NAME],
      configFileSelector: (profile) => profile[UA_APP_ID_INI_NAME] ?? profile[UA_APP_ID_INI_NAME_DEPRECATED],
      default: import_middleware_user_agent.DEFAULT_UA_APP_ID
    };
  }
});

// node_modules/@smithy/hash-node/dist-cjs/index.js
var require_dist_cjs37 = __commonJS({
  "node_modules/@smithy/hash-node/dist-cjs/index.js"(exports6, module) {
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      Hash: () => Hash
    });
    module.exports = __toCommonJS3(src_exports);
    var import_util_buffer_from = require_dist_cjs9();
    var import_util_utf8 = require_dist_cjs10();
    var import_buffer = __require("buffer");
    var import_crypto5 = __require("crypto");
    var _Hash = class _Hash {
      constructor(algorithmIdentifier, secret) {
        this.algorithmIdentifier = algorithmIdentifier;
        this.secret = secret;
        this.reset();
      }
      update(toHash, encoding) {
        this.hash.update((0, import_util_utf8.toUint8Array)(castSourceData(toHash, encoding)));
      }
      digest() {
        return Promise.resolve(this.hash.digest());
      }
      reset() {
        this.hash = this.secret ? (0, import_crypto5.createHmac)(this.algorithmIdentifier, castSourceData(this.secret)) : (0, import_crypto5.createHash)(this.algorithmIdentifier);
      }
    };
    __name(_Hash, "Hash");
    var Hash = _Hash;
    function castSourceData(toCast, encoding) {
      if (import_buffer.Buffer.isBuffer(toCast)) {
        return toCast;
      }
      if (typeof toCast === "string") {
        return (0, import_util_buffer_from.fromString)(toCast, encoding);
      }
      if (ArrayBuffer.isView(toCast)) {
        return (0, import_util_buffer_from.fromArrayBuffer)(toCast.buffer, toCast.byteOffset, toCast.byteLength);
      }
      return (0, import_util_buffer_from.fromArrayBuffer)(toCast);
    }
    __name(castSourceData, "castSourceData");
  }
});

// node_modules/@smithy/util-body-length-node/dist-cjs/index.js
var require_dist_cjs38 = __commonJS({
  "node_modules/@smithy/util-body-length-node/dist-cjs/index.js"(exports6, module) {
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      calculateBodyLength: () => calculateBodyLength
    });
    module.exports = __toCommonJS3(src_exports);
    var import_fs = __require("fs");
    var calculateBodyLength = /* @__PURE__ */ __name((body) => {
      if (!body) {
        return 0;
      }
      if (typeof body === "string") {
        return Buffer.byteLength(body);
      } else if (typeof body.byteLength === "number") {
        return body.byteLength;
      } else if (typeof body.size === "number") {
        return body.size;
      } else if (typeof body.start === "number" && typeof body.end === "number") {
        return body.end + 1 - body.start;
      } else if (typeof body.path === "string" || Buffer.isBuffer(body.path)) {
        return (0, import_fs.lstatSync)(body.path).size;
      } else if (typeof body.fd === "number") {
        return (0, import_fs.fstatSync)(body.fd).size;
      }
      throw new Error(`Body Length computation failed for ${body}`);
    }, "calculateBodyLength");
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.js
var require_ruleset = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.ruleSet = void 0;
    var u = "required";
    var v = "fn";
    var w = "argv";
    var x = "ref";
    var a = true;
    var b = "isSet";
    var c = "booleanEquals";
    var d = "error";
    var e = "endpoint";
    var f = "tree";
    var g = "PartitionResult";
    var h = "getAttr";
    var i = { [u]: false, "type": "String" };
    var j = { [u]: true, "default": false, "type": "Boolean" };
    var k = { [x]: "Endpoint" };
    var l = { [v]: c, [w]: [{ [x]: "UseFIPS" }, true] };
    var m = { [v]: c, [w]: [{ [x]: "UseDualStack" }, true] };
    var n = {};
    var o = { [v]: h, [w]: [{ [x]: g }, "supportsFIPS"] };
    var p = { [x]: g };
    var q = { [v]: c, [w]: [true, { [v]: h, [w]: [p, "supportsDualStack"] }] };
    var r = [l];
    var s = [m];
    var t = [{ [x]: "Region" }];
    var _data = { version: "1.0", parameters: { Region: i, UseDualStack: j, UseFIPS: j, Endpoint: i }, rules: [{ conditions: [{ [v]: b, [w]: [k] }], rules: [{ conditions: r, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: d }, { conditions: s, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: d }, { endpoint: { url: k, properties: n, headers: n }, type: e }], type: f }, { conditions: [{ [v]: b, [w]: t }], rules: [{ conditions: [{ [v]: "aws.partition", [w]: t, assign: g }], rules: [{ conditions: [l, m], rules: [{ conditions: [{ [v]: c, [w]: [a, o] }, q], rules: [{ endpoint: { url: "https://portal.sso-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: d }], type: f }, { conditions: r, rules: [{ conditions: [{ [v]: c, [w]: [o, a] }], rules: [{ conditions: [{ [v]: "stringEquals", [w]: [{ [v]: h, [w]: [p, "name"] }, "aws-us-gov"] }], endpoint: { url: "https://portal.sso.{Region}.amazonaws.com", properties: n, headers: n }, type: e }, { endpoint: { url: "https://portal.sso-fips.{Region}.{PartitionResult#dnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "FIPS is enabled but this partition does not support FIPS", type: d }], type: f }, { conditions: s, rules: [{ conditions: [q], rules: [{ endpoint: { url: "https://portal.sso.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "DualStack is enabled but this partition does not support DualStack", type: d }], type: f }, { endpoint: { url: "https://portal.sso.{Region}.{PartitionResult#dnsSuffix}", properties: n, headers: n }, type: e }], type: f }], type: f }, { error: "Invalid Configuration: Missing Region", type: d }] };
    exports6.ruleSet = _data;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/endpointResolver.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs19();
    var util_endpoints_2 = require_dist_cjs18();
    var ruleset_1 = require_ruleset();
    var cache = new util_endpoints_2.EndpointCache({
      size: 50,
      params: ["Endpoint", "Region", "UseDualStack", "UseFIPS"]
    });
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return cache.get(endpointParams, () => (0, util_endpoints_2.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      }));
    };
    exports6.defaultEndpointResolver = defaultEndpointResolver;
    util_endpoints_2.customEndpointFunctions.aws = util_endpoints_1.awsEndpointFunctions;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.shared.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.getRuntimeConfig = void 0;
    var core_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var core_2 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var smithy_client_1 = require_dist_cjs23();
    var url_parser_1 = require_dist_cjs31();
    var util_base64_1 = require_dist_cjs11();
    var util_utf8_1 = require_dist_cjs10();
    var httpAuthSchemeProvider_1 = require_httpAuthSchemeProvider();
    var endpointResolver_1 = require_endpointResolver();
    var getRuntimeConfig = (config2) => {
      return {
        apiVersion: "2019-06-10",
        base64Decoder: config2?.base64Decoder ?? util_base64_1.fromBase64,
        base64Encoder: config2?.base64Encoder ?? util_base64_1.toBase64,
        disableHostPrefix: config2?.disableHostPrefix ?? false,
        endpointProvider: config2?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
        extensions: config2?.extensions ?? [],
        httpAuthSchemeProvider: config2?.httpAuthSchemeProvider ?? httpAuthSchemeProvider_1.defaultSSOHttpAuthSchemeProvider,
        httpAuthSchemes: config2?.httpAuthSchemes ?? [
          {
            schemeId: "aws.auth#sigv4",
            identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4"),
            signer: new core_1.AwsSdkSigV4Signer()
          },
          {
            schemeId: "smithy.api#noAuth",
            identityProvider: (ipc) => ipc.getIdentityProvider("smithy.api#noAuth") || (async () => ({})),
            signer: new core_2.NoAuthSigner()
          }
        ],
        logger: config2?.logger ?? new smithy_client_1.NoOpLogger(),
        serviceId: config2?.serviceId ?? "SSO",
        urlParser: config2?.urlParser ?? url_parser_1.parseUrl,
        utf8Decoder: config2?.utf8Decoder ?? util_utf8_1.fromUtf8,
        utf8Encoder: config2?.utf8Encoder ?? util_utf8_1.toUtf8
      };
    };
    exports6.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@smithy/credential-provider-imds/dist-cjs/index.js
var require_dist_cjs39 = __commonJS({
  "node_modules/@smithy/credential-provider-imds/dist-cjs/index.js"(exports6, module) {
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      DEFAULT_MAX_RETRIES: () => DEFAULT_MAX_RETRIES,
      DEFAULT_TIMEOUT: () => DEFAULT_TIMEOUT,
      ENV_CMDS_AUTH_TOKEN: () => ENV_CMDS_AUTH_TOKEN,
      ENV_CMDS_FULL_URI: () => ENV_CMDS_FULL_URI,
      ENV_CMDS_RELATIVE_URI: () => ENV_CMDS_RELATIVE_URI,
      Endpoint: () => Endpoint,
      fromContainerMetadata: () => fromContainerMetadata,
      fromInstanceMetadata: () => fromInstanceMetadata,
      getInstanceMetadataEndpoint: () => getInstanceMetadataEndpoint,
      httpRequest: () => httpRequest,
      providerConfigFromInit: () => providerConfigFromInit
    });
    module.exports = __toCommonJS3(src_exports);
    var import_url = __require("url");
    var import_property_provider3 = require_dist_cjs20();
    var import_buffer = __require("buffer");
    var import_http = (init_empty(), __toCommonJS(empty_exports));
    function httpRequest(options) {
      return new Promise((resolve, reject) => {
        var _a;
        const req = (0, import_http.request)({
          method: "GET",
          ...options,
          // Node.js http module doesn't accept hostname with square brackets
          // Refs: https://github.com/nodejs/node/issues/39738
          hostname: (_a = options.hostname) == null ? void 0 : _a.replace(/^\[(.+)\]$/, "$1")
        });
        req.on("error", (err) => {
          reject(Object.assign(new import_property_provider3.ProviderError("Unable to connect to instance metadata service"), err));
          req.destroy();
        });
        req.on("timeout", () => {
          reject(new import_property_provider3.ProviderError("TimeoutError from instance metadata service"));
          req.destroy();
        });
        req.on("response", (res) => {
          const { statusCode = 400 } = res;
          if (statusCode < 200 || 300 <= statusCode) {
            reject(
              Object.assign(new import_property_provider3.ProviderError("Error response received from instance metadata service"), { statusCode })
            );
            req.destroy();
          }
          const chunks = [];
          res.on("data", (chunk) => {
            chunks.push(chunk);
          });
          res.on("end", () => {
            resolve(import_buffer.Buffer.concat(chunks));
            req.destroy();
          });
        });
        req.end();
      });
    }
    __name(httpRequest, "httpRequest");
    var isImdsCredentials = /* @__PURE__ */ __name((arg) => Boolean(arg) && typeof arg === "object" && typeof arg.AccessKeyId === "string" && typeof arg.SecretAccessKey === "string" && typeof arg.Token === "string" && typeof arg.Expiration === "string", "isImdsCredentials");
    var fromImdsCredentials = /* @__PURE__ */ __name((creds) => ({
      accessKeyId: creds.AccessKeyId,
      secretAccessKey: creds.SecretAccessKey,
      sessionToken: creds.Token,
      expiration: new Date(creds.Expiration),
      ...creds.AccountId && { accountId: creds.AccountId }
    }), "fromImdsCredentials");
    var DEFAULT_TIMEOUT = 1e3;
    var DEFAULT_MAX_RETRIES = 0;
    var providerConfigFromInit = /* @__PURE__ */ __name(({
      maxRetries = DEFAULT_MAX_RETRIES,
      timeout = DEFAULT_TIMEOUT
    }) => ({ maxRetries, timeout }), "providerConfigFromInit");
    var retry = /* @__PURE__ */ __name((toRetry, maxRetries) => {
      let promise = toRetry();
      for (let i = 0; i < maxRetries; i++) {
        promise = promise.catch(toRetry);
      }
      return promise;
    }, "retry");
    var ENV_CMDS_FULL_URI = "AWS_CONTAINER_CREDENTIALS_FULL_URI";
    var ENV_CMDS_RELATIVE_URI = "AWS_CONTAINER_CREDENTIALS_RELATIVE_URI";
    var ENV_CMDS_AUTH_TOKEN = "AWS_CONTAINER_AUTHORIZATION_TOKEN";
    var fromContainerMetadata = /* @__PURE__ */ __name((init = {}) => {
      const { timeout, maxRetries } = providerConfigFromInit(init);
      return () => retry(async () => {
        const requestOptions = await getCmdsUri({ logger: init.logger });
        const credsResponse = JSON.parse(await requestFromEcsImds(timeout, requestOptions));
        if (!isImdsCredentials(credsResponse)) {
          throw new import_property_provider3.CredentialsProviderError("Invalid response received from instance metadata service.", {
            logger: init.logger
          });
        }
        return fromImdsCredentials(credsResponse);
      }, maxRetries);
    }, "fromContainerMetadata");
    var requestFromEcsImds = /* @__PURE__ */ __name(async (timeout, options) => {
      if (process.env[ENV_CMDS_AUTH_TOKEN]) {
        options.headers = {
          ...options.headers,
          Authorization: process.env[ENV_CMDS_AUTH_TOKEN]
        };
      }
      const buffer = await httpRequest({
        ...options,
        timeout
      });
      return buffer.toString();
    }, "requestFromEcsImds");
    var CMDS_IP = "169.254.170.2";
    var GREENGRASS_HOSTS = {
      localhost: true,
      "127.0.0.1": true
    };
    var GREENGRASS_PROTOCOLS = {
      "http:": true,
      "https:": true
    };
    var getCmdsUri = /* @__PURE__ */ __name(async ({ logger }) => {
      if (process.env[ENV_CMDS_RELATIVE_URI]) {
        return {
          hostname: CMDS_IP,
          path: process.env[ENV_CMDS_RELATIVE_URI]
        };
      }
      if (process.env[ENV_CMDS_FULL_URI]) {
        const parsed = (0, import_url.parse)(process.env[ENV_CMDS_FULL_URI]);
        if (!parsed.hostname || !(parsed.hostname in GREENGRASS_HOSTS)) {
          throw new import_property_provider3.CredentialsProviderError(`${parsed.hostname} is not a valid container metadata service hostname`, {
            tryNextLink: false,
            logger
          });
        }
        if (!parsed.protocol || !(parsed.protocol in GREENGRASS_PROTOCOLS)) {
          throw new import_property_provider3.CredentialsProviderError(`${parsed.protocol} is not a valid container metadata service protocol`, {
            tryNextLink: false,
            logger
          });
        }
        return {
          ...parsed,
          port: parsed.port ? parseInt(parsed.port, 10) : void 0
        };
      }
      throw new import_property_provider3.CredentialsProviderError(
        `The container metadata credential provider cannot be used unless the ${ENV_CMDS_RELATIVE_URI} or ${ENV_CMDS_FULL_URI} environment variable is set`,
        {
          tryNextLink: false,
          logger
        }
      );
    }, "getCmdsUri");
    var _InstanceMetadataV1FallbackError = class _InstanceMetadataV1FallbackError2 extends import_property_provider3.CredentialsProviderError {
      constructor(message, tryNextLink = true) {
        super(message, tryNextLink);
        this.tryNextLink = tryNextLink;
        this.name = "InstanceMetadataV1FallbackError";
        Object.setPrototypeOf(this, _InstanceMetadataV1FallbackError2.prototype);
      }
    };
    __name(_InstanceMetadataV1FallbackError, "InstanceMetadataV1FallbackError");
    var InstanceMetadataV1FallbackError = _InstanceMetadataV1FallbackError;
    var import_node_config_provider = require_dist_cjs29();
    var import_url_parser = require_dist_cjs31();
    var Endpoint = /* @__PURE__ */ ((Endpoint2) => {
      Endpoint2["IPv4"] = "http://169.254.169.254";
      Endpoint2["IPv6"] = "http://[fd00:ec2::254]";
      return Endpoint2;
    })(Endpoint || {});
    var ENV_ENDPOINT_NAME = "AWS_EC2_METADATA_SERVICE_ENDPOINT";
    var CONFIG_ENDPOINT_NAME = "ec2_metadata_service_endpoint";
    var ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env2) => env2[ENV_ENDPOINT_NAME],
      configFileSelector: (profile) => profile[CONFIG_ENDPOINT_NAME],
      default: void 0
    };
    var EndpointMode = /* @__PURE__ */ ((EndpointMode2) => {
      EndpointMode2["IPv4"] = "IPv4";
      EndpointMode2["IPv6"] = "IPv6";
      return EndpointMode2;
    })(EndpointMode || {});
    var ENV_ENDPOINT_MODE_NAME = "AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE";
    var CONFIG_ENDPOINT_MODE_NAME = "ec2_metadata_service_endpoint_mode";
    var ENDPOINT_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env2) => env2[ENV_ENDPOINT_MODE_NAME],
      configFileSelector: (profile) => profile[CONFIG_ENDPOINT_MODE_NAME],
      default: "IPv4"
      /* IPv4 */
    };
    var getInstanceMetadataEndpoint = /* @__PURE__ */ __name(async () => (0, import_url_parser.parseUrl)(await getFromEndpointConfig() || await getFromEndpointModeConfig()), "getInstanceMetadataEndpoint");
    var getFromEndpointConfig = /* @__PURE__ */ __name(async () => (0, import_node_config_provider.loadConfig)(ENDPOINT_CONFIG_OPTIONS)(), "getFromEndpointConfig");
    var getFromEndpointModeConfig = /* @__PURE__ */ __name(async () => {
      const endpointMode = await (0, import_node_config_provider.loadConfig)(ENDPOINT_MODE_CONFIG_OPTIONS)();
      switch (endpointMode) {
        case "IPv4":
          return "http://169.254.169.254";
        case "IPv6":
          return "http://[fd00:ec2::254]";
        default:
          throw new Error(`Unsupported endpoint mode: ${endpointMode}. Select from ${Object.values(EndpointMode)}`);
      }
    }, "getFromEndpointModeConfig");
    var STATIC_STABILITY_REFRESH_INTERVAL_SECONDS = 5 * 60;
    var STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS = 5 * 60;
    var STATIC_STABILITY_DOC_URL = "https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html";
    var getExtendedInstanceMetadataCredentials = /* @__PURE__ */ __name((credentials, logger) => {
      const refreshInterval = STATIC_STABILITY_REFRESH_INTERVAL_SECONDS + Math.floor(Math.random() * STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS);
      const newExpiration = new Date(Date.now() + refreshInterval * 1e3);
      logger.warn(
        `Attempting credential expiration extension due to a credential service availability issue. A refresh of these credentials will be attempted after ${new Date(newExpiration)}.
For more information, please visit: ` + STATIC_STABILITY_DOC_URL
      );
      const originalExpiration = credentials.originalExpiration ?? credentials.expiration;
      return {
        ...credentials,
        ...originalExpiration ? { originalExpiration } : {},
        expiration: newExpiration
      };
    }, "getExtendedInstanceMetadataCredentials");
    var staticStabilityProvider = /* @__PURE__ */ __name((provider, options = {}) => {
      const logger = (options == null ? void 0 : options.logger) || console;
      let pastCredentials;
      return async () => {
        let credentials;
        try {
          credentials = await provider();
          if (credentials.expiration && credentials.expiration.getTime() < Date.now()) {
            credentials = getExtendedInstanceMetadataCredentials(credentials, logger);
          }
        } catch (e) {
          if (pastCredentials) {
            logger.warn("Credential renew failed: ", e);
            credentials = getExtendedInstanceMetadataCredentials(pastCredentials, logger);
          } else {
            throw e;
          }
        }
        pastCredentials = credentials;
        return credentials;
      };
    }, "staticStabilityProvider");
    var IMDS_PATH = "/latest/meta-data/iam/security-credentials/";
    var IMDS_TOKEN_PATH = "/latest/api/token";
    var AWS_EC2_METADATA_V1_DISABLED = "AWS_EC2_METADATA_V1_DISABLED";
    var PROFILE_AWS_EC2_METADATA_V1_DISABLED = "ec2_metadata_v1_disabled";
    var X_AWS_EC2_METADATA_TOKEN = "x-aws-ec2-metadata-token";
    var fromInstanceMetadata = /* @__PURE__ */ __name((init = {}) => staticStabilityProvider(getInstanceMetadataProvider(init), { logger: init.logger }), "fromInstanceMetadata");
    var getInstanceMetadataProvider = /* @__PURE__ */ __name((init = {}) => {
      let disableFetchToken = false;
      const { logger, profile } = init;
      const { timeout, maxRetries } = providerConfigFromInit(init);
      const getCredentials = /* @__PURE__ */ __name(async (maxRetries2, options) => {
        var _a;
        const isImdsV1Fallback = disableFetchToken || ((_a = options.headers) == null ? void 0 : _a[X_AWS_EC2_METADATA_TOKEN]) == null;
        if (isImdsV1Fallback) {
          let fallbackBlockedFromProfile = false;
          let fallbackBlockedFromProcessEnv = false;
          const configValue = await (0, import_node_config_provider.loadConfig)(
            {
              environmentVariableSelector: (env2) => {
                const envValue = env2[AWS_EC2_METADATA_V1_DISABLED];
                fallbackBlockedFromProcessEnv = !!envValue && envValue !== "false";
                if (envValue === void 0) {
                  throw new import_property_provider3.CredentialsProviderError(
                    `${AWS_EC2_METADATA_V1_DISABLED} not set in env, checking config file next.`,
                    { logger: init.logger }
                  );
                }
                return fallbackBlockedFromProcessEnv;
              },
              configFileSelector: (profile2) => {
                const profileValue = profile2[PROFILE_AWS_EC2_METADATA_V1_DISABLED];
                fallbackBlockedFromProfile = !!profileValue && profileValue !== "false";
                return fallbackBlockedFromProfile;
              },
              default: false
            },
            {
              profile
            }
          )();
          if (init.ec2MetadataV1Disabled || configValue) {
            const causes = [];
            if (init.ec2MetadataV1Disabled)
              causes.push("credential provider initialization (runtime option ec2MetadataV1Disabled)");
            if (fallbackBlockedFromProfile)
              causes.push(`config file profile (${PROFILE_AWS_EC2_METADATA_V1_DISABLED})`);
            if (fallbackBlockedFromProcessEnv)
              causes.push(`process environment variable (${AWS_EC2_METADATA_V1_DISABLED})`);
            throw new InstanceMetadataV1FallbackError(
              `AWS EC2 Metadata v1 fallback has been blocked by AWS SDK configuration in the following: [${causes.join(
                ", "
              )}].`
            );
          }
        }
        const imdsProfile = (await retry(async () => {
          let profile2;
          try {
            profile2 = await getProfile(options);
          } catch (err) {
            if (err.statusCode === 401) {
              disableFetchToken = false;
            }
            throw err;
          }
          return profile2;
        }, maxRetries2)).trim();
        return retry(async () => {
          let creds;
          try {
            creds = await getCredentialsFromProfile(imdsProfile, options, init);
          } catch (err) {
            if (err.statusCode === 401) {
              disableFetchToken = false;
            }
            throw err;
          }
          return creds;
        }, maxRetries2);
      }, "getCredentials");
      return async () => {
        const endpoint = await getInstanceMetadataEndpoint();
        if (disableFetchToken) {
          logger == null ? void 0 : logger.debug("AWS SDK Instance Metadata", "using v1 fallback (no token fetch)");
          return getCredentials(maxRetries, { ...endpoint, timeout });
        } else {
          let token;
          try {
            token = (await getMetadataToken({ ...endpoint, timeout })).toString();
          } catch (error) {
            if ((error == null ? void 0 : error.statusCode) === 400) {
              throw Object.assign(error, {
                message: "EC2 Metadata token request returned error"
              });
            } else if (error.message === "TimeoutError" || [403, 404, 405].includes(error.statusCode)) {
              disableFetchToken = true;
            }
            logger == null ? void 0 : logger.debug("AWS SDK Instance Metadata", "using v1 fallback (initial)");
            return getCredentials(maxRetries, { ...endpoint, timeout });
          }
          return getCredentials(maxRetries, {
            ...endpoint,
            headers: {
              [X_AWS_EC2_METADATA_TOKEN]: token
            },
            timeout
          });
        }
      };
    }, "getInstanceMetadataProvider");
    var getMetadataToken = /* @__PURE__ */ __name(async (options) => httpRequest({
      ...options,
      path: IMDS_TOKEN_PATH,
      method: "PUT",
      headers: {
        "x-aws-ec2-metadata-token-ttl-seconds": "21600"
      }
    }), "getMetadataToken");
    var getProfile = /* @__PURE__ */ __name(async (options) => (await httpRequest({ ...options, path: IMDS_PATH })).toString(), "getProfile");
    var getCredentialsFromProfile = /* @__PURE__ */ __name(async (profile, options, init) => {
      const credentialsResponse = JSON.parse(
        (await httpRequest({
          ...options,
          path: IMDS_PATH + profile
        })).toString()
      );
      if (!isImdsCredentials(credentialsResponse)) {
        throw new import_property_provider3.CredentialsProviderError("Invalid response received from instance metadata service.", {
          logger: init.logger
        });
      }
      return fromImdsCredentials(credentialsResponse);
    }, "getCredentialsFromProfile");
  }
});

// node_modules/@smithy/util-defaults-mode-node/dist-cjs/index.js
var require_dist_cjs40 = __commonJS({
  "node_modules/@smithy/util-defaults-mode-node/dist-cjs/index.js"(exports6, module) {
    init_dirname();
    var __create3 = Object.create;
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __getProtoOf3 = Object.getPrototypeOf;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM3 = (mod, isNodeMode, target) => (target = mod != null ? __create3(__getProtoOf3(mod)) : {}, __copyProps3(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp3(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      resolveDefaultsModeConfig: () => resolveDefaultsModeConfig
    });
    module.exports = __toCommonJS3(src_exports);
    var import_config_resolver = require_dist_cjs26();
    var import_node_config_provider = require_dist_cjs29();
    var import_property_provider3 = require_dist_cjs20();
    var AWS_EXECUTION_ENV = "AWS_EXECUTION_ENV";
    var AWS_REGION_ENV = "AWS_REGION";
    var AWS_DEFAULT_REGION_ENV = "AWS_DEFAULT_REGION";
    var ENV_IMDS_DISABLED = "AWS_EC2_METADATA_DISABLED";
    var DEFAULTS_MODE_OPTIONS = ["in-region", "cross-region", "mobile", "standard", "legacy"];
    var IMDS_REGION_PATH = "/latest/meta-data/placement/region";
    var AWS_DEFAULTS_MODE_ENV = "AWS_DEFAULTS_MODE";
    var AWS_DEFAULTS_MODE_CONFIG = "defaults_mode";
    var NODE_DEFAULTS_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env2) => {
        return env2[AWS_DEFAULTS_MODE_ENV];
      },
      configFileSelector: (profile) => {
        return profile[AWS_DEFAULTS_MODE_CONFIG];
      },
      default: "legacy"
    };
    var resolveDefaultsModeConfig = /* @__PURE__ */ __name(({
      region = (0, import_node_config_provider.loadConfig)(import_config_resolver.NODE_REGION_CONFIG_OPTIONS),
      defaultsMode = (0, import_node_config_provider.loadConfig)(NODE_DEFAULTS_MODE_CONFIG_OPTIONS)
    } = {}) => (0, import_property_provider3.memoize)(async () => {
      const mode = typeof defaultsMode === "function" ? await defaultsMode() : defaultsMode;
      switch (mode == null ? void 0 : mode.toLowerCase()) {
        case "auto":
          return resolveNodeDefaultsModeAuto(region);
        case "in-region":
        case "cross-region":
        case "mobile":
        case "standard":
        case "legacy":
          return Promise.resolve(mode == null ? void 0 : mode.toLocaleLowerCase());
        case void 0:
          return Promise.resolve("legacy");
        default:
          throw new Error(
            `Invalid parameter for "defaultsMode", expect ${DEFAULTS_MODE_OPTIONS.join(", ")}, got ${mode}`
          );
      }
    }), "resolveDefaultsModeConfig");
    var resolveNodeDefaultsModeAuto = /* @__PURE__ */ __name(async (clientRegion) => {
      if (clientRegion) {
        const resolvedRegion = typeof clientRegion === "function" ? await clientRegion() : clientRegion;
        const inferredRegion = await inferPhysicalRegion();
        if (!inferredRegion) {
          return "standard";
        }
        if (resolvedRegion === inferredRegion) {
          return "in-region";
        } else {
          return "cross-region";
        }
      }
      return "standard";
    }, "resolveNodeDefaultsModeAuto");
    var inferPhysicalRegion = /* @__PURE__ */ __name(async () => {
      if (process.env[AWS_EXECUTION_ENV] && (process.env[AWS_REGION_ENV] || process.env[AWS_DEFAULT_REGION_ENV])) {
        return process.env[AWS_REGION_ENV] ?? process.env[AWS_DEFAULT_REGION_ENV];
      }
      if (!process.env[ENV_IMDS_DISABLED]) {
        try {
          const { getInstanceMetadataEndpoint, httpRequest } = await Promise.resolve().then(() => __toESM3(require_dist_cjs39()));
          const endpoint = await getInstanceMetadataEndpoint();
          return (await httpRequest({ ...endpoint, path: IMDS_REGION_PATH })).toString();
        } catch (e) {
        }
      }
    }, "inferPhysicalRegion");
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.js
var require_runtimeConfig = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package());
    var core_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var util_user_agent_node_1 = require_dist_cjs36();
    var config_resolver_1 = require_dist_cjs26();
    var hash_node_1 = require_dist_cjs37();
    var middleware_retry_1 = require_dist_cjs35();
    var node_config_provider_1 = require_dist_cjs29();
    var node_http_handler_1 = require_dist_cjs14();
    var util_body_length_node_1 = require_dist_cjs38();
    var util_retry_1 = require_dist_cjs34();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared();
    var smithy_client_1 = require_dist_cjs23();
    var util_defaults_mode_node_1 = require_dist_cjs40();
    var smithy_client_2 = require_dist_cjs23();
    var getRuntimeConfig = (config2) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config2);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config2);
      (0, core_1.emitWarningIfUnsupportedVersion)(process.version);
      return {
        ...clientSharedValues,
        ...config2,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config2?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
        defaultUserAgentProvider: config2?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.createDefaultUserAgentProvider)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: config2?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: config2?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: node_http_handler_1.NodeHttpHandler.create(config2?.requestHandler ?? defaultConfigProvider),
        retryMode: config2?.retryMode ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: config2?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: config2?.streamCollector ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: config2?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: config2?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS),
        userAgentAppId: config2?.userAgentAppId ?? (0, node_config_provider_1.loadConfig)(util_user_agent_node_1.NODE_APP_ID_CONFIG_OPTIONS)
      };
    };
    exports6.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/region-config-resolver/dist-cjs/index.js
var require_dist_cjs41 = __commonJS({
  "node_modules/@aws-sdk/region-config-resolver/dist-cjs/index.js"(exports6, module) {
    "use strict";
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      NODE_REGION_CONFIG_FILE_OPTIONS: () => NODE_REGION_CONFIG_FILE_OPTIONS,
      NODE_REGION_CONFIG_OPTIONS: () => NODE_REGION_CONFIG_OPTIONS,
      REGION_ENV_NAME: () => REGION_ENV_NAME,
      REGION_INI_NAME: () => REGION_INI_NAME,
      getAwsRegionExtensionConfiguration: () => getAwsRegionExtensionConfiguration,
      resolveAwsRegionExtensionConfiguration: () => resolveAwsRegionExtensionConfiguration,
      resolveRegionConfig: () => resolveRegionConfig
    });
    module.exports = __toCommonJS3(src_exports);
    var getAwsRegionExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
      let runtimeConfigRegion = /* @__PURE__ */ __name(async () => {
        if (runtimeConfig.region === void 0) {
          throw new Error("Region is missing from runtimeConfig");
        }
        const region = runtimeConfig.region;
        if (typeof region === "string") {
          return region;
        }
        return region();
      }, "runtimeConfigRegion");
      return {
        setRegion(region) {
          runtimeConfigRegion = region;
        },
        region() {
          return runtimeConfigRegion;
        }
      };
    }, "getAwsRegionExtensionConfiguration");
    var resolveAwsRegionExtensionConfiguration = /* @__PURE__ */ __name((awsRegionExtensionConfiguration) => {
      return {
        region: awsRegionExtensionConfiguration.region()
      };
    }, "resolveAwsRegionExtensionConfiguration");
    var REGION_ENV_NAME = "AWS_REGION";
    var REGION_INI_NAME = "region";
    var NODE_REGION_CONFIG_OPTIONS = {
      environmentVariableSelector: (env2) => env2[REGION_ENV_NAME],
      configFileSelector: (profile) => profile[REGION_INI_NAME],
      default: () => {
        throw new Error("Region is missing");
      }
    };
    var NODE_REGION_CONFIG_FILE_OPTIONS = {
      preferredFile: "credentials"
    };
    var isFipsRegion = /* @__PURE__ */ __name((region) => typeof region === "string" && (region.startsWith("fips-") || region.endsWith("-fips")), "isFipsRegion");
    var getRealRegion = /* @__PURE__ */ __name((region) => isFipsRegion(region) ? ["fips-aws-global", "aws-fips"].includes(region) ? "us-east-1" : region.replace(/fips-(dkr-|prod-)?|-fips/, "") : region, "getRealRegion");
    var resolveRegionConfig = /* @__PURE__ */ __name((input) => {
      const { region, useFipsEndpoint } = input;
      if (!region) {
        throw new Error("Region is missing");
      }
      return {
        ...input,
        region: async () => {
          if (typeof region === "string") {
            return getRealRegion(region);
          }
          const providedRegion = await region();
          return getRealRegion(providedRegion);
        },
        useFipsEndpoint: async () => {
          const providedRegion = typeof region === "string" ? region : await region();
          if (isFipsRegion(providedRegion)) {
            return true;
          }
          return typeof useFipsEndpoint !== "function" ? Promise.resolve(!!useFipsEndpoint) : useFipsEndpoint();
        }
      };
    }, "resolveRegionConfig");
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/index.js
var require_dist_cjs42 = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/index.js"(exports6, module) {
    "use strict";
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      GetRoleCredentialsCommand: () => GetRoleCredentialsCommand,
      GetRoleCredentialsRequestFilterSensitiveLog: () => GetRoleCredentialsRequestFilterSensitiveLog,
      GetRoleCredentialsResponseFilterSensitiveLog: () => GetRoleCredentialsResponseFilterSensitiveLog,
      InvalidRequestException: () => InvalidRequestException,
      ListAccountRolesCommand: () => ListAccountRolesCommand,
      ListAccountRolesRequestFilterSensitiveLog: () => ListAccountRolesRequestFilterSensitiveLog,
      ListAccountsCommand: () => ListAccountsCommand,
      ListAccountsRequestFilterSensitiveLog: () => ListAccountsRequestFilterSensitiveLog,
      LogoutCommand: () => LogoutCommand,
      LogoutRequestFilterSensitiveLog: () => LogoutRequestFilterSensitiveLog,
      ResourceNotFoundException: () => ResourceNotFoundException,
      RoleCredentialsFilterSensitiveLog: () => RoleCredentialsFilterSensitiveLog,
      SSO: () => SSO,
      SSOClient: () => SSOClient,
      SSOServiceException: () => SSOServiceException,
      TooManyRequestsException: () => TooManyRequestsException,
      UnauthorizedException: () => UnauthorizedException,
      __Client: () => import_smithy_client7.Client,
      paginateListAccountRoles: () => paginateListAccountRoles,
      paginateListAccounts: () => paginateListAccounts
    });
    module.exports = __toCommonJS3(src_exports);
    var import_middleware_host_header = require_dist_cjs3();
    var import_middleware_logger = require_dist_cjs4();
    var import_middleware_recursion_detection = require_dist_cjs5();
    var import_middleware_user_agent = require_dist_cjs24();
    var import_config_resolver = require_dist_cjs26();
    var import_core5 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var import_middleware_content_length = require_dist_cjs27();
    var import_middleware_endpoint = require_dist_cjs32();
    var import_middleware_retry = require_dist_cjs35();
    var import_httpAuthSchemeProvider = require_httpAuthSchemeProvider();
    var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "awsssoportal"
      };
    }, "resolveClientEndpointParameters");
    var commonParams = {
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
    var import_runtimeConfig = require_runtimeConfig();
    var import_region_config_resolver = require_dist_cjs41();
    var import_protocol_http11 = require_dist_cjs2();
    var import_smithy_client7 = require_dist_cjs23();
    var getHttpAuthExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
      const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
      let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
      let _credentials = runtimeConfig.credentials;
      return {
        setHttpAuthScheme(httpAuthScheme) {
          const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
          if (index === -1) {
            _httpAuthSchemes.push(httpAuthScheme);
          } else {
            _httpAuthSchemes.splice(index, 1, httpAuthScheme);
          }
        },
        httpAuthSchemes() {
          return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
          _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
          return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
          _credentials = credentials;
        },
        credentials() {
          return _credentials;
        }
      };
    }, "getHttpAuthExtensionConfiguration");
    var resolveHttpAuthRuntimeConfig = /* @__PURE__ */ __name((config2) => {
      return {
        httpAuthSchemes: config2.httpAuthSchemes(),
        httpAuthSchemeProvider: config2.httpAuthSchemeProvider(),
        credentials: config2.credentials()
      };
    }, "resolveHttpAuthRuntimeConfig");
    var asPartial = /* @__PURE__ */ __name((t) => t, "asPartial");
    var resolveRuntimeExtensions = /* @__PURE__ */ __name((runtimeConfig, extensions) => {
      const extensionConfiguration = {
        ...asPartial((0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig)),
        ...asPartial((0, import_smithy_client7.getDefaultExtensionConfiguration)(runtimeConfig)),
        ...asPartial((0, import_protocol_http11.getHttpHandlerExtensionConfiguration)(runtimeConfig)),
        ...asPartial(getHttpAuthExtensionConfiguration(runtimeConfig))
      };
      extensions.forEach((extension) => extension.configure(extensionConfiguration));
      return {
        ...runtimeConfig,
        ...(0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
        ...(0, import_smithy_client7.resolveDefaultRuntimeConfig)(extensionConfiguration),
        ...(0, import_protocol_http11.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),
        ...resolveHttpAuthRuntimeConfig(extensionConfiguration)
      };
    }, "resolveRuntimeExtensions");
    var _SSOClient = class _SSOClient extends import_smithy_client7.Client {
      constructor(...[configuration]) {
        const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});
        const _config_1 = resolveClientEndpointParameters(_config_0);
        const _config_2 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_1);
        const _config_3 = (0, import_middleware_retry.resolveRetryConfig)(_config_2);
        const _config_4 = (0, import_config_resolver.resolveRegionConfig)(_config_3);
        const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, import_middleware_endpoint.resolveEndpointConfig)(_config_5);
        const _config_7 = (0, import_httpAuthSchemeProvider.resolveHttpAuthSchemeConfig)(_config_6);
        const _config_8 = resolveRuntimeExtensions(_config_7, (configuration == null ? void 0 : configuration.extensions) || []);
        super(_config_8);
        this.config = _config_8;
        this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_retry.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_content_length.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_host_header.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use(
          (0, import_core5.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
            httpAuthSchemeParametersProvider: import_httpAuthSchemeProvider.defaultSSOHttpAuthSchemeParametersProvider,
            identityProviderConfigProvider: async (config2) => new import_core5.DefaultIdentityProviderConfig({
              "aws.auth#sigv4": config2.credentials
            })
          })
        );
        this.middlewareStack.use((0, import_core5.getHttpSigningPlugin)(this.config));
      }
      /**
       * Destroy underlying resources, like sockets. It's usually not necessary to do this.
       * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
       * Otherwise, sockets might stay open for quite a long time before the server terminates them.
       */
      destroy() {
        super.destroy();
      }
    };
    __name(_SSOClient, "SSOClient");
    var SSOClient = _SSOClient;
    var import_middleware_serde2 = require_dist_cjs7();
    var _SSOServiceException = class _SSOServiceException2 extends import_smithy_client7.ServiceException {
      /**
       * @internal
       */
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, _SSOServiceException2.prototype);
      }
    };
    __name(_SSOServiceException, "SSOServiceException");
    var SSOServiceException = _SSOServiceException;
    var _InvalidRequestException = class _InvalidRequestException2 extends SSOServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidRequestException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidRequestException2.prototype);
      }
    };
    __name(_InvalidRequestException, "InvalidRequestException");
    var InvalidRequestException = _InvalidRequestException;
    var _ResourceNotFoundException = class _ResourceNotFoundException2 extends SSOServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ResourceNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ResourceNotFoundException2.prototype);
      }
    };
    __name(_ResourceNotFoundException, "ResourceNotFoundException");
    var ResourceNotFoundException = _ResourceNotFoundException;
    var _TooManyRequestsException = class _TooManyRequestsException2 extends SSOServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "TooManyRequestsException",
          $fault: "client",
          ...opts
        });
        this.name = "TooManyRequestsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _TooManyRequestsException2.prototype);
      }
    };
    __name(_TooManyRequestsException, "TooManyRequestsException");
    var TooManyRequestsException = _TooManyRequestsException;
    var _UnauthorizedException = class _UnauthorizedException2 extends SSOServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "UnauthorizedException",
          $fault: "client",
          ...opts
        });
        this.name = "UnauthorizedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UnauthorizedException2.prototype);
      }
    };
    __name(_UnauthorizedException, "UnauthorizedException");
    var UnauthorizedException = _UnauthorizedException;
    var GetRoleCredentialsRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: import_smithy_client7.SENSITIVE_STRING }
    }), "GetRoleCredentialsRequestFilterSensitiveLog");
    var RoleCredentialsFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.secretAccessKey && { secretAccessKey: import_smithy_client7.SENSITIVE_STRING },
      ...obj.sessionToken && { sessionToken: import_smithy_client7.SENSITIVE_STRING }
    }), "RoleCredentialsFilterSensitiveLog");
    var GetRoleCredentialsResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.roleCredentials && { roleCredentials: RoleCredentialsFilterSensitiveLog(obj.roleCredentials) }
    }), "GetRoleCredentialsResponseFilterSensitiveLog");
    var ListAccountRolesRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: import_smithy_client7.SENSITIVE_STRING }
    }), "ListAccountRolesRequestFilterSensitiveLog");
    var ListAccountsRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: import_smithy_client7.SENSITIVE_STRING }
    }), "ListAccountsRequestFilterSensitiveLog");
    var LogoutRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: import_smithy_client7.SENSITIVE_STRING }
    }), "LogoutRequestFilterSensitiveLog");
    var import_core22 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var se_GetRoleCredentialsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = (0, import_smithy_client7.map)({}, import_smithy_client7.isSerializableHeaderValue, {
        [_xasbt]: input[_aT]
      });
      b.bp("/federation/credentials");
      const query = (0, import_smithy_client7.map)({
        [_rn]: [, (0, import_smithy_client7.expectNonNull)(input[_rN], `roleName`)],
        [_ai]: [, (0, import_smithy_client7.expectNonNull)(input[_aI], `accountId`)]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_GetRoleCredentialsCommand");
    var se_ListAccountRolesCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = (0, import_smithy_client7.map)({}, import_smithy_client7.isSerializableHeaderValue, {
        [_xasbt]: input[_aT]
      });
      b.bp("/assignment/roles");
      const query = (0, import_smithy_client7.map)({
        [_nt]: [, input[_nT]],
        [_mr]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_ai]: [, (0, import_smithy_client7.expectNonNull)(input[_aI], `accountId`)]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_ListAccountRolesCommand");
    var se_ListAccountsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = (0, import_smithy_client7.map)({}, import_smithy_client7.isSerializableHeaderValue, {
        [_xasbt]: input[_aT]
      });
      b.bp("/assignment/accounts");
      const query = (0, import_smithy_client7.map)({
        [_nt]: [, input[_nT]],
        [_mr]: [() => input.maxResults !== void 0, () => input[_mR].toString()]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_ListAccountsCommand");
    var se_LogoutCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = (0, import_smithy_client7.map)({}, import_smithy_client7.isSerializableHeaderValue, {
        [_xasbt]: input[_aT]
      });
      b.bp("/logout");
      let body;
      b.m("POST").h(headers).b(body);
      return b.build();
    }, "se_LogoutCommand");
    var de_GetRoleCredentialsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client7.take)(data, {
        roleCredentials: import_smithy_client7._json
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_GetRoleCredentialsCommand");
    var de_ListAccountRolesCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client7.take)(data, {
        nextToken: import_smithy_client7.expectString,
        roleList: import_smithy_client7._json
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_ListAccountRolesCommand");
    var de_ListAccountsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client7.take)(data, {
        accountList: import_smithy_client7._json,
        nextToken: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_ListAccountsCommand");
    var de_LogoutCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, import_smithy_client7.collectBody)(output.body, context);
      return contents;
    }, "de_LogoutCommand");
    var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await (0, import_core22.parseJsonErrorBody)(output.body, context)
      };
      const errorCode = (0, import_core22.loadRestJsonErrorCode)(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.sso#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await de_UnauthorizedExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    }, "de_CommandError");
    var throwDefaultError = (0, import_smithy_client7.withBaseException)(SSOServiceException);
    var de_InvalidRequestExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client7.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client7.take)(data, {
        message: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, parsedOutput.body);
    }, "de_InvalidRequestExceptionRes");
    var de_ResourceNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client7.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client7.take)(data, {
        message: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, parsedOutput.body);
    }, "de_ResourceNotFoundExceptionRes");
    var de_TooManyRequestsExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client7.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client7.take)(data, {
        message: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      const exception = new TooManyRequestsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, parsedOutput.body);
    }, "de_TooManyRequestsExceptionRes");
    var de_UnauthorizedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client7.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client7.take)(data, {
        message: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      const exception = new UnauthorizedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, parsedOutput.body);
    }, "de_UnauthorizedExceptionRes");
    var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    }), "deserializeMetadata");
    var _aI = "accountId";
    var _aT = "accessToken";
    var _ai = "account_id";
    var _mR = "maxResults";
    var _mr = "max_result";
    var _nT = "nextToken";
    var _nt = "next_token";
    var _rN = "roleName";
    var _rn = "role_name";
    var _xasbt = "x-amz-sso_bearer_token";
    var _GetRoleCredentialsCommand = class _GetRoleCredentialsCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("SWBPortalService", "GetRoleCredentials", {}).n("SSOClient", "GetRoleCredentialsCommand").f(GetRoleCredentialsRequestFilterSensitiveLog, GetRoleCredentialsResponseFilterSensitiveLog).ser(se_GetRoleCredentialsCommand).de(de_GetRoleCredentialsCommand).build() {
    };
    __name(_GetRoleCredentialsCommand, "GetRoleCredentialsCommand");
    var GetRoleCredentialsCommand = _GetRoleCredentialsCommand;
    var _ListAccountRolesCommand = class _ListAccountRolesCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("SWBPortalService", "ListAccountRoles", {}).n("SSOClient", "ListAccountRolesCommand").f(ListAccountRolesRequestFilterSensitiveLog, void 0).ser(se_ListAccountRolesCommand).de(de_ListAccountRolesCommand).build() {
    };
    __name(_ListAccountRolesCommand, "ListAccountRolesCommand");
    var ListAccountRolesCommand = _ListAccountRolesCommand;
    var _ListAccountsCommand = class _ListAccountsCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("SWBPortalService", "ListAccounts", {}).n("SSOClient", "ListAccountsCommand").f(ListAccountsRequestFilterSensitiveLog, void 0).ser(se_ListAccountsCommand).de(de_ListAccountsCommand).build() {
    };
    __name(_ListAccountsCommand, "ListAccountsCommand");
    var ListAccountsCommand = _ListAccountsCommand;
    var _LogoutCommand = class _LogoutCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("SWBPortalService", "Logout", {}).n("SSOClient", "LogoutCommand").f(LogoutRequestFilterSensitiveLog, void 0).ser(se_LogoutCommand).de(de_LogoutCommand).build() {
    };
    __name(_LogoutCommand, "LogoutCommand");
    var LogoutCommand = _LogoutCommand;
    var commands = {
      GetRoleCredentialsCommand,
      ListAccountRolesCommand,
      ListAccountsCommand,
      LogoutCommand
    };
    var _SSO = class _SSO extends SSOClient {
    };
    __name(_SSO, "SSO");
    var SSO = _SSO;
    (0, import_smithy_client7.createAggregatedClient)(commands, SSO);
    var paginateListAccountRoles = (0, import_core5.createPaginator)(SSOClient, ListAccountRolesCommand, "nextToken", "nextToken", "maxResults");
    var paginateListAccounts = (0, import_core5.createPaginator)(SSOClient, ListAccountsCommand, "nextToken", "nextToken", "maxResults");
  }
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/auth/httpAuthSchemeProvider.js
var require_httpAuthSchemeProvider2 = __commonJS({
  "node_modules/@aws-sdk/client-sso-oidc/dist-cjs/auth/httpAuthSchemeProvider.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.resolveHttpAuthSchemeConfig = exports6.defaultSSOOIDCHttpAuthSchemeProvider = exports6.defaultSSOOIDCHttpAuthSchemeParametersProvider = void 0;
    var core_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var util_middleware_1 = require_dist_cjs6();
    var defaultSSOOIDCHttpAuthSchemeParametersProvider = async (config2, context, input) => {
      return {
        operation: (0, util_middleware_1.getSmithyContext)(context).operation,
        region: await (0, util_middleware_1.normalizeProvider)(config2.region)() || (() => {
          throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
        })()
      };
    };
    exports6.defaultSSOOIDCHttpAuthSchemeParametersProvider = defaultSSOOIDCHttpAuthSchemeParametersProvider;
    function createAwsAuthSigv4HttpAuthOption(authParameters) {
      return {
        schemeId: "aws.auth#sigv4",
        signingProperties: {
          name: "sso-oauth",
          region: authParameters.region
        },
        propertiesExtractor: (config2, context) => ({
          signingProperties: {
            config: config2,
            context
          }
        })
      };
    }
    function createSmithyApiNoAuthHttpAuthOption(authParameters) {
      return {
        schemeId: "smithy.api#noAuth"
      };
    }
    var defaultSSOOIDCHttpAuthSchemeProvider = (authParameters) => {
      const options = [];
      switch (authParameters.operation) {
        case "CreateToken": {
          options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
          break;
        }
        case "RegisterClient": {
          options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
          break;
        }
        case "StartDeviceAuthorization": {
          options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
          break;
        }
        default: {
          options.push(createAwsAuthSigv4HttpAuthOption(authParameters));
        }
      }
      return options;
    };
    exports6.defaultSSOOIDCHttpAuthSchemeProvider = defaultSSOOIDCHttpAuthSchemeProvider;
    var resolveHttpAuthSchemeConfig = (config2) => {
      const config_0 = (0, core_1.resolveAwsSdkSigV4Config)(config2);
      return {
        ...config_0
      };
    };
    exports6.resolveHttpAuthSchemeConfig = resolveHttpAuthSchemeConfig;
  }
});

// node_modules/@aws-sdk/client-sso-oidc/package.json
var require_package2 = __commonJS({
  "node_modules/@aws-sdk/client-sso-oidc/package.json"(exports6, module) {
    module.exports = {
      name: "@aws-sdk/client-sso-oidc",
      description: "AWS SDK for JavaScript Sso Oidc Client for Node.js, Browser and React Native",
      version: "3.712.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "node ../../scripts/compilation/inline client-sso-oidc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "extract:docs": "api-extractor run --local",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo sso-oidc"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "5.2.0",
        "@aws-crypto/sha256-js": "5.2.0",
        "@aws-sdk/core": "3.709.0",
        "@aws-sdk/credential-provider-node": "3.712.0",
        "@aws-sdk/middleware-host-header": "3.709.0",
        "@aws-sdk/middleware-logger": "3.709.0",
        "@aws-sdk/middleware-recursion-detection": "3.709.0",
        "@aws-sdk/middleware-user-agent": "3.709.0",
        "@aws-sdk/region-config-resolver": "3.709.0",
        "@aws-sdk/types": "3.709.0",
        "@aws-sdk/util-endpoints": "3.709.0",
        "@aws-sdk/util-user-agent-browser": "3.709.0",
        "@aws-sdk/util-user-agent-node": "3.712.0",
        "@smithy/config-resolver": "^3.0.13",
        "@smithy/core": "^2.5.5",
        "@smithy/fetch-http-handler": "^4.1.2",
        "@smithy/hash-node": "^3.0.11",
        "@smithy/invalid-dependency": "^3.0.11",
        "@smithy/middleware-content-length": "^3.0.13",
        "@smithy/middleware-endpoint": "^3.2.5",
        "@smithy/middleware-retry": "^3.0.30",
        "@smithy/middleware-serde": "^3.0.11",
        "@smithy/middleware-stack": "^3.0.11",
        "@smithy/node-config-provider": "^3.1.12",
        "@smithy/node-http-handler": "^3.3.2",
        "@smithy/protocol-http": "^4.1.8",
        "@smithy/smithy-client": "^3.5.0",
        "@smithy/types": "^3.7.2",
        "@smithy/url-parser": "^3.0.11",
        "@smithy/util-base64": "^3.0.0",
        "@smithy/util-body-length-browser": "^3.0.0",
        "@smithy/util-body-length-node": "^3.0.0",
        "@smithy/util-defaults-mode-browser": "^3.0.30",
        "@smithy/util-defaults-mode-node": "^3.0.30",
        "@smithy/util-endpoints": "^2.1.7",
        "@smithy/util-middleware": "^3.0.11",
        "@smithy/util-retry": "^3.0.11",
        "@smithy/util-utf8": "^3.0.0",
        tslib: "^2.6.2"
      },
      devDependencies: {
        "@tsconfig/node16": "16.1.3",
        "@types/node": "^16.18.96",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typescript: "~4.9.5"
      },
      engines: {
        node: ">=16.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*/**"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      peerDependencies: {
        "@aws-sdk/client-sts": "^3.712.0"
      },
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sso-oidc",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-sso-oidc"
      }
    };
  }
});

// node_modules/@aws-sdk/credential-provider-env/dist-cjs/index.js
var require_dist_cjs43 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-env/dist-cjs/index.js"(exports6, module) {
    "use strict";
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      ENV_ACCOUNT_ID: () => ENV_ACCOUNT_ID,
      ENV_CREDENTIAL_SCOPE: () => ENV_CREDENTIAL_SCOPE,
      ENV_EXPIRATION: () => ENV_EXPIRATION,
      ENV_KEY: () => ENV_KEY,
      ENV_SECRET: () => ENV_SECRET,
      ENV_SESSION: () => ENV_SESSION,
      fromEnv: () => fromEnv
    });
    module.exports = __toCommonJS3(src_exports);
    var import_client3 = (init_client(), __toCommonJS(client_exports));
    var import_property_provider3 = require_dist_cjs20();
    var ENV_KEY = "AWS_ACCESS_KEY_ID";
    var ENV_SECRET = "AWS_SECRET_ACCESS_KEY";
    var ENV_SESSION = "AWS_SESSION_TOKEN";
    var ENV_EXPIRATION = "AWS_CREDENTIAL_EXPIRATION";
    var ENV_CREDENTIAL_SCOPE = "AWS_CREDENTIAL_SCOPE";
    var ENV_ACCOUNT_ID = "AWS_ACCOUNT_ID";
    var fromEnv = /* @__PURE__ */ __name((init) => async () => {
      var _a;
      (_a = init == null ? void 0 : init.logger) == null ? void 0 : _a.debug("@aws-sdk/credential-provider-env - fromEnv");
      const accessKeyId = process.env[ENV_KEY];
      const secretAccessKey = process.env[ENV_SECRET];
      const sessionToken = process.env[ENV_SESSION];
      const expiry = process.env[ENV_EXPIRATION];
      const credentialScope = process.env[ENV_CREDENTIAL_SCOPE];
      const accountId = process.env[ENV_ACCOUNT_ID];
      if (accessKeyId && secretAccessKey) {
        const credentials = {
          accessKeyId,
          secretAccessKey,
          ...sessionToken && { sessionToken },
          ...expiry && { expiration: new Date(expiry) },
          ...credentialScope && { credentialScope },
          ...accountId && { accountId }
        };
        (0, import_client3.setCredentialFeature)(credentials, "CREDENTIALS_ENV_VARS", "g");
        return credentials;
      }
      throw new import_property_provider3.CredentialsProviderError("Unable to find environment variable credentials.", { logger: init == null ? void 0 : init.logger });
    }, "fromEnv");
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/auth/httpAuthSchemeProvider.js
var require_httpAuthSchemeProvider3 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/auth/httpAuthSchemeProvider.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.resolveHttpAuthSchemeConfig = exports6.resolveStsAuthConfig = exports6.defaultSTSHttpAuthSchemeProvider = exports6.defaultSTSHttpAuthSchemeParametersProvider = void 0;
    var core_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var util_middleware_1 = require_dist_cjs6();
    var STSClient_1 = require_STSClient();
    var defaultSTSHttpAuthSchemeParametersProvider = async (config2, context, input) => {
      return {
        operation: (0, util_middleware_1.getSmithyContext)(context).operation,
        region: await (0, util_middleware_1.normalizeProvider)(config2.region)() || (() => {
          throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
        })()
      };
    };
    exports6.defaultSTSHttpAuthSchemeParametersProvider = defaultSTSHttpAuthSchemeParametersProvider;
    function createAwsAuthSigv4HttpAuthOption(authParameters) {
      return {
        schemeId: "aws.auth#sigv4",
        signingProperties: {
          name: "sts",
          region: authParameters.region
        },
        propertiesExtractor: (config2, context) => ({
          signingProperties: {
            config: config2,
            context
          }
        })
      };
    }
    function createSmithyApiNoAuthHttpAuthOption(authParameters) {
      return {
        schemeId: "smithy.api#noAuth"
      };
    }
    var defaultSTSHttpAuthSchemeProvider = (authParameters) => {
      const options = [];
      switch (authParameters.operation) {
        case "AssumeRoleWithSAML": {
          options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
          break;
        }
        case "AssumeRoleWithWebIdentity": {
          options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
          break;
        }
        default: {
          options.push(createAwsAuthSigv4HttpAuthOption(authParameters));
        }
      }
      return options;
    };
    exports6.defaultSTSHttpAuthSchemeProvider = defaultSTSHttpAuthSchemeProvider;
    var resolveStsAuthConfig = (input) => ({
      ...input,
      stsClientCtor: STSClient_1.STSClient
    });
    exports6.resolveStsAuthConfig = resolveStsAuthConfig;
    var resolveHttpAuthSchemeConfig = (config2) => {
      const config_0 = (0, exports6.resolveStsAuthConfig)(config2);
      const config_1 = (0, core_1.resolveAwsSdkSigV4Config)(config_0);
      return {
        ...config_1
      };
    };
    exports6.resolveHttpAuthSchemeConfig = resolveHttpAuthSchemeConfig;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/EndpointParameters.js
var require_EndpointParameters = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/EndpointParameters.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.commonParams = exports6.resolveClientEndpointParameters = void 0;
    var resolveClientEndpointParameters = (options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        useGlobalEndpoint: options.useGlobalEndpoint ?? false,
        defaultSigningName: "sts"
      };
    };
    exports6.resolveClientEndpointParameters = resolveClientEndpointParameters;
    exports6.commonParams = {
      UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
  }
});

// node_modules/@aws-sdk/client-sts/package.json
var require_package3 = __commonJS({
  "node_modules/@aws-sdk/client-sts/package.json"(exports6, module) {
    module.exports = {
      name: "@aws-sdk/client-sts",
      description: "AWS SDK for JavaScript Sts Client for Node.js, Browser and React Native",
      version: "3.712.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "node ../../scripts/compilation/inline client-sts",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "rimraf ./dist-types tsconfig.types.tsbuildinfo && tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "extract:docs": "api-extractor run --local",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo sts",
        test: "yarn g:vitest run",
        "test:watch": "yarn g:vitest watch"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "5.2.0",
        "@aws-crypto/sha256-js": "5.2.0",
        "@aws-sdk/client-sso-oidc": "3.712.0",
        "@aws-sdk/core": "3.709.0",
        "@aws-sdk/credential-provider-node": "3.712.0",
        "@aws-sdk/middleware-host-header": "3.709.0",
        "@aws-sdk/middleware-logger": "3.709.0",
        "@aws-sdk/middleware-recursion-detection": "3.709.0",
        "@aws-sdk/middleware-user-agent": "3.709.0",
        "@aws-sdk/region-config-resolver": "3.709.0",
        "@aws-sdk/types": "3.709.0",
        "@aws-sdk/util-endpoints": "3.709.0",
        "@aws-sdk/util-user-agent-browser": "3.709.0",
        "@aws-sdk/util-user-agent-node": "3.712.0",
        "@smithy/config-resolver": "^3.0.13",
        "@smithy/core": "^2.5.5",
        "@smithy/fetch-http-handler": "^4.1.2",
        "@smithy/hash-node": "^3.0.11",
        "@smithy/invalid-dependency": "^3.0.11",
        "@smithy/middleware-content-length": "^3.0.13",
        "@smithy/middleware-endpoint": "^3.2.5",
        "@smithy/middleware-retry": "^3.0.30",
        "@smithy/middleware-serde": "^3.0.11",
        "@smithy/middleware-stack": "^3.0.11",
        "@smithy/node-config-provider": "^3.1.12",
        "@smithy/node-http-handler": "^3.3.2",
        "@smithy/protocol-http": "^4.1.8",
        "@smithy/smithy-client": "^3.5.0",
        "@smithy/types": "^3.7.2",
        "@smithy/url-parser": "^3.0.11",
        "@smithy/util-base64": "^3.0.0",
        "@smithy/util-body-length-browser": "^3.0.0",
        "@smithy/util-body-length-node": "^3.0.0",
        "@smithy/util-defaults-mode-browser": "^3.0.30",
        "@smithy/util-defaults-mode-node": "^3.0.30",
        "@smithy/util-endpoints": "^2.1.7",
        "@smithy/util-middleware": "^3.0.11",
        "@smithy/util-retry": "^3.0.11",
        "@smithy/util-utf8": "^3.0.0",
        tslib: "^2.6.2"
      },
      devDependencies: {
        "@tsconfig/node16": "16.1.3",
        "@types/node": "^16.18.96",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typescript: "~4.9.5"
      },
      engines: {
        node: ">=16.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*/**"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sts",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-sts"
      }
    };
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/ruleset.js
var require_ruleset2 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/ruleset.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.ruleSet = void 0;
    var F = "required";
    var G = "type";
    var H = "fn";
    var I = "argv";
    var J = "ref";
    var a = false;
    var b = true;
    var c = "booleanEquals";
    var d = "stringEquals";
    var e = "sigv4";
    var f = "sts";
    var g = "us-east-1";
    var h = "endpoint";
    var i = "https://sts.{Region}.{PartitionResult#dnsSuffix}";
    var j = "tree";
    var k = "error";
    var l = "getAttr";
    var m = { [F]: false, [G]: "String" };
    var n = { [F]: true, "default": false, [G]: "Boolean" };
    var o = { [J]: "Endpoint" };
    var p = { [H]: "isSet", [I]: [{ [J]: "Region" }] };
    var q = { [J]: "Region" };
    var r = { [H]: "aws.partition", [I]: [q], "assign": "PartitionResult" };
    var s = { [J]: "UseFIPS" };
    var t = { [J]: "UseDualStack" };
    var u = { "url": "https://sts.amazonaws.com", "properties": { "authSchemes": [{ "name": e, "signingName": f, "signingRegion": g }] }, "headers": {} };
    var v = {};
    var w = { "conditions": [{ [H]: d, [I]: [q, "aws-global"] }], [h]: u, [G]: h };
    var x = { [H]: c, [I]: [s, true] };
    var y = { [H]: c, [I]: [t, true] };
    var z = { [H]: l, [I]: [{ [J]: "PartitionResult" }, "supportsFIPS"] };
    var A = { [J]: "PartitionResult" };
    var B = { [H]: c, [I]: [true, { [H]: l, [I]: [A, "supportsDualStack"] }] };
    var C = [{ [H]: "isSet", [I]: [o] }];
    var D = [x];
    var E = [y];
    var _data = { version: "1.0", parameters: { Region: m, UseDualStack: n, UseFIPS: n, Endpoint: m, UseGlobalEndpoint: n }, rules: [{ conditions: [{ [H]: c, [I]: [{ [J]: "UseGlobalEndpoint" }, b] }, { [H]: "not", [I]: C }, p, r, { [H]: c, [I]: [s, a] }, { [H]: c, [I]: [t, a] }], rules: [{ conditions: [{ [H]: d, [I]: [q, "ap-northeast-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "ap-south-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "ap-southeast-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "ap-southeast-2"] }], endpoint: u, [G]: h }, w, { conditions: [{ [H]: d, [I]: [q, "ca-central-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "eu-central-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "eu-north-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "eu-west-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "eu-west-2"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "eu-west-3"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "sa-east-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, g] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "us-east-2"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "us-west-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "us-west-2"] }], endpoint: u, [G]: h }, { endpoint: { url: i, properties: { authSchemes: [{ name: e, signingName: f, signingRegion: "{Region}" }] }, headers: v }, [G]: h }], [G]: j }, { conditions: C, rules: [{ conditions: D, error: "Invalid Configuration: FIPS and custom endpoint are not supported", [G]: k }, { conditions: E, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", [G]: k }, { endpoint: { url: o, properties: v, headers: v }, [G]: h }], [G]: j }, { conditions: [p], rules: [{ conditions: [r], rules: [{ conditions: [x, y], rules: [{ conditions: [{ [H]: c, [I]: [b, z] }, B], rules: [{ endpoint: { url: "https://sts-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: v, headers: v }, [G]: h }], [G]: j }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", [G]: k }], [G]: j }, { conditions: D, rules: [{ conditions: [{ [H]: c, [I]: [z, b] }], rules: [{ conditions: [{ [H]: d, [I]: [{ [H]: l, [I]: [A, "name"] }, "aws-us-gov"] }], endpoint: { url: "https://sts.{Region}.amazonaws.com", properties: v, headers: v }, [G]: h }, { endpoint: { url: "https://sts-fips.{Region}.{PartitionResult#dnsSuffix}", properties: v, headers: v }, [G]: h }], [G]: j }, { error: "FIPS is enabled but this partition does not support FIPS", [G]: k }], [G]: j }, { conditions: E, rules: [{ conditions: [B], rules: [{ endpoint: { url: "https://sts.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: v, headers: v }, [G]: h }], [G]: j }, { error: "DualStack is enabled but this partition does not support DualStack", [G]: k }], [G]: j }, w, { endpoint: { url: i, properties: v, headers: v }, [G]: h }], [G]: j }], [G]: j }, { error: "Invalid Configuration: Missing Region", [G]: k }] };
    exports6.ruleSet = _data;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver2 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/endpointResolver.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs19();
    var util_endpoints_2 = require_dist_cjs18();
    var ruleset_1 = require_ruleset2();
    var cache = new util_endpoints_2.EndpointCache({
      size: 50,
      params: ["Endpoint", "Region", "UseDualStack", "UseFIPS", "UseGlobalEndpoint"]
    });
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return cache.get(endpointParams, () => (0, util_endpoints_2.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      }));
    };
    exports6.defaultEndpointResolver = defaultEndpointResolver;
    util_endpoints_2.customEndpointFunctions.aws = util_endpoints_1.awsEndpointFunctions;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared2 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.shared.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.getRuntimeConfig = void 0;
    var core_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var core_2 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var smithy_client_1 = require_dist_cjs23();
    var url_parser_1 = require_dist_cjs31();
    var util_base64_1 = require_dist_cjs11();
    var util_utf8_1 = require_dist_cjs10();
    var httpAuthSchemeProvider_1 = require_httpAuthSchemeProvider3();
    var endpointResolver_1 = require_endpointResolver2();
    var getRuntimeConfig = (config2) => {
      return {
        apiVersion: "2011-06-15",
        base64Decoder: config2?.base64Decoder ?? util_base64_1.fromBase64,
        base64Encoder: config2?.base64Encoder ?? util_base64_1.toBase64,
        disableHostPrefix: config2?.disableHostPrefix ?? false,
        endpointProvider: config2?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
        extensions: config2?.extensions ?? [],
        httpAuthSchemeProvider: config2?.httpAuthSchemeProvider ?? httpAuthSchemeProvider_1.defaultSTSHttpAuthSchemeProvider,
        httpAuthSchemes: config2?.httpAuthSchemes ?? [
          {
            schemeId: "aws.auth#sigv4",
            identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4"),
            signer: new core_1.AwsSdkSigV4Signer()
          },
          {
            schemeId: "smithy.api#noAuth",
            identityProvider: (ipc) => ipc.getIdentityProvider("smithy.api#noAuth") || (async () => ({})),
            signer: new core_2.NoAuthSigner()
          }
        ],
        logger: config2?.logger ?? new smithy_client_1.NoOpLogger(),
        serviceId: config2?.serviceId ?? "STS",
        urlParser: config2?.urlParser ?? url_parser_1.parseUrl,
        utf8Decoder: config2?.utf8Decoder ?? util_utf8_1.fromUtf8,
        utf8Encoder: config2?.utf8Encoder ?? util_utf8_1.toUtf8
      };
    };
    exports6.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.js
var require_runtimeConfig2 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package3());
    var core_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var credential_provider_node_1 = require_dist_cjs48();
    var util_user_agent_node_1 = require_dist_cjs36();
    var config_resolver_1 = require_dist_cjs26();
    var core_2 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var hash_node_1 = require_dist_cjs37();
    var middleware_retry_1 = require_dist_cjs35();
    var node_config_provider_1 = require_dist_cjs29();
    var node_http_handler_1 = require_dist_cjs14();
    var util_body_length_node_1 = require_dist_cjs38();
    var util_retry_1 = require_dist_cjs34();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared2();
    var smithy_client_1 = require_dist_cjs23();
    var util_defaults_mode_node_1 = require_dist_cjs40();
    var smithy_client_2 = require_dist_cjs23();
    var getRuntimeConfig = (config2) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config2);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config2);
      (0, core_1.emitWarningIfUnsupportedVersion)(process.version);
      return {
        ...clientSharedValues,
        ...config2,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config2?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider: config2?.credentialDefaultProvider ?? credential_provider_node_1.defaultProvider,
        defaultUserAgentProvider: config2?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.createDefaultUserAgentProvider)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        httpAuthSchemes: config2?.httpAuthSchemes ?? [
          {
            schemeId: "aws.auth#sigv4",
            identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4") || (async (idProps) => await (0, credential_provider_node_1.defaultProvider)(idProps?.__config || {})()),
            signer: new core_1.AwsSdkSigV4Signer()
          },
          {
            schemeId: "smithy.api#noAuth",
            identityProvider: (ipc) => ipc.getIdentityProvider("smithy.api#noAuth") || (async () => ({})),
            signer: new core_2.NoAuthSigner()
          }
        ],
        maxAttempts: config2?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: config2?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: node_http_handler_1.NodeHttpHandler.create(config2?.requestHandler ?? defaultConfigProvider),
        retryMode: config2?.retryMode ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: config2?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: config2?.streamCollector ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: config2?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: config2?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS),
        userAgentAppId: config2?.userAgentAppId ?? (0, node_config_provider_1.loadConfig)(util_user_agent_node_1.NODE_APP_ID_CONFIG_OPTIONS)
      };
    };
    exports6.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/auth/httpAuthExtensionConfiguration.js
var require_httpAuthExtensionConfiguration = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/auth/httpAuthExtensionConfiguration.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.resolveHttpAuthRuntimeConfig = exports6.getHttpAuthExtensionConfiguration = void 0;
    var getHttpAuthExtensionConfiguration = (runtimeConfig) => {
      const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
      let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
      let _credentials = runtimeConfig.credentials;
      return {
        setHttpAuthScheme(httpAuthScheme) {
          const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
          if (index === -1) {
            _httpAuthSchemes.push(httpAuthScheme);
          } else {
            _httpAuthSchemes.splice(index, 1, httpAuthScheme);
          }
        },
        httpAuthSchemes() {
          return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
          _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
          return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
          _credentials = credentials;
        },
        credentials() {
          return _credentials;
        }
      };
    };
    exports6.getHttpAuthExtensionConfiguration = getHttpAuthExtensionConfiguration;
    var resolveHttpAuthRuntimeConfig = (config2) => {
      return {
        httpAuthSchemes: config2.httpAuthSchemes(),
        httpAuthSchemeProvider: config2.httpAuthSchemeProvider(),
        credentials: config2.credentials()
      };
    };
    exports6.resolveHttpAuthRuntimeConfig = resolveHttpAuthRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/runtimeExtensions.js
var require_runtimeExtensions = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/runtimeExtensions.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.resolveRuntimeExtensions = void 0;
    var region_config_resolver_1 = require_dist_cjs41();
    var protocol_http_1 = require_dist_cjs2();
    var smithy_client_1 = require_dist_cjs23();
    var httpAuthExtensionConfiguration_1 = require_httpAuthExtensionConfiguration();
    var asPartial = (t) => t;
    var resolveRuntimeExtensions = (runtimeConfig, extensions) => {
      const extensionConfiguration = {
        ...asPartial((0, region_config_resolver_1.getAwsRegionExtensionConfiguration)(runtimeConfig)),
        ...asPartial((0, smithy_client_1.getDefaultExtensionConfiguration)(runtimeConfig)),
        ...asPartial((0, protocol_http_1.getHttpHandlerExtensionConfiguration)(runtimeConfig)),
        ...asPartial((0, httpAuthExtensionConfiguration_1.getHttpAuthExtensionConfiguration)(runtimeConfig))
      };
      extensions.forEach((extension) => extension.configure(extensionConfiguration));
      return {
        ...runtimeConfig,
        ...(0, region_config_resolver_1.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
        ...(0, smithy_client_1.resolveDefaultRuntimeConfig)(extensionConfiguration),
        ...(0, protocol_http_1.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),
        ...(0, httpAuthExtensionConfiguration_1.resolveHttpAuthRuntimeConfig)(extensionConfiguration)
      };
    };
    exports6.resolveRuntimeExtensions = resolveRuntimeExtensions;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/STSClient.js
var require_STSClient = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/STSClient.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.STSClient = exports6.__Client = void 0;
    var middleware_host_header_1 = require_dist_cjs3();
    var middleware_logger_1 = require_dist_cjs4();
    var middleware_recursion_detection_1 = require_dist_cjs5();
    var middleware_user_agent_1 = require_dist_cjs24();
    var config_resolver_1 = require_dist_cjs26();
    var core_1 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var middleware_content_length_1 = require_dist_cjs27();
    var middleware_endpoint_1 = require_dist_cjs32();
    var middleware_retry_1 = require_dist_cjs35();
    var smithy_client_1 = require_dist_cjs23();
    Object.defineProperty(exports6, "__Client", { enumerable: true, get: function() {
      return smithy_client_1.Client;
    } });
    var httpAuthSchemeProvider_1 = require_httpAuthSchemeProvider3();
    var EndpointParameters_1 = require_EndpointParameters();
    var runtimeConfig_1 = require_runtimeConfig2();
    var runtimeExtensions_1 = require_runtimeExtensions();
    var STSClient2 = class extends smithy_client_1.Client {
      constructor(...[configuration]) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration || {});
        const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_1);
        const _config_3 = (0, middleware_retry_1.resolveRetryConfig)(_config_2);
        const _config_4 = (0, config_resolver_1.resolveRegionConfig)(_config_3);
        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_5);
        const _config_7 = (0, httpAuthSchemeProvider_1.resolveHttpAuthSchemeConfig)(_config_6);
        const _config_8 = (0, runtimeExtensions_1.resolveRuntimeExtensions)(_config_7, configuration?.extensions || []);
        super(_config_8);
        this.config = _config_8;
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, core_1.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
          httpAuthSchemeParametersProvider: httpAuthSchemeProvider_1.defaultSTSHttpAuthSchemeParametersProvider,
          identityProviderConfigProvider: async (config2) => new core_1.DefaultIdentityProviderConfig({
            "aws.auth#sigv4": config2.credentials
          })
        }));
        this.middlewareStack.use((0, core_1.getHttpSigningPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports6.STSClient = STSClient2;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/index.js
var require_dist_cjs44 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/index.js"(exports6, module) {
    "use strict";
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __reExport = (target, mod, secondTarget) => (__copyProps3(target, mod, "default"), secondTarget && __copyProps3(secondTarget, mod, "default"));
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      AssumeRoleCommand: () => AssumeRoleCommand,
      AssumeRoleResponseFilterSensitiveLog: () => AssumeRoleResponseFilterSensitiveLog,
      AssumeRoleWithSAMLCommand: () => AssumeRoleWithSAMLCommand,
      AssumeRoleWithSAMLRequestFilterSensitiveLog: () => AssumeRoleWithSAMLRequestFilterSensitiveLog,
      AssumeRoleWithSAMLResponseFilterSensitiveLog: () => AssumeRoleWithSAMLResponseFilterSensitiveLog,
      AssumeRoleWithWebIdentityCommand: () => AssumeRoleWithWebIdentityCommand,
      AssumeRoleWithWebIdentityRequestFilterSensitiveLog: () => AssumeRoleWithWebIdentityRequestFilterSensitiveLog,
      AssumeRoleWithWebIdentityResponseFilterSensitiveLog: () => AssumeRoleWithWebIdentityResponseFilterSensitiveLog,
      AssumeRootCommand: () => AssumeRootCommand,
      AssumeRootResponseFilterSensitiveLog: () => AssumeRootResponseFilterSensitiveLog,
      ClientInputEndpointParameters: () => import_EndpointParameters10.ClientInputEndpointParameters,
      CredentialsFilterSensitiveLog: () => CredentialsFilterSensitiveLog,
      DecodeAuthorizationMessageCommand: () => DecodeAuthorizationMessageCommand,
      ExpiredTokenException: () => ExpiredTokenException,
      GetAccessKeyInfoCommand: () => GetAccessKeyInfoCommand,
      GetCallerIdentityCommand: () => GetCallerIdentityCommand,
      GetFederationTokenCommand: () => GetFederationTokenCommand,
      GetFederationTokenResponseFilterSensitiveLog: () => GetFederationTokenResponseFilterSensitiveLog,
      GetSessionTokenCommand: () => GetSessionTokenCommand,
      GetSessionTokenResponseFilterSensitiveLog: () => GetSessionTokenResponseFilterSensitiveLog,
      IDPCommunicationErrorException: () => IDPCommunicationErrorException,
      IDPRejectedClaimException: () => IDPRejectedClaimException,
      InvalidAuthorizationMessageException: () => InvalidAuthorizationMessageException,
      InvalidIdentityTokenException: () => InvalidIdentityTokenException,
      MalformedPolicyDocumentException: () => MalformedPolicyDocumentException,
      PackedPolicyTooLargeException: () => PackedPolicyTooLargeException,
      RegionDisabledException: () => RegionDisabledException,
      STS: () => STS,
      STSServiceException: () => STSServiceException,
      decorateDefaultCredentialProvider: () => decorateDefaultCredentialProvider,
      getDefaultRoleAssumer: () => getDefaultRoleAssumer2,
      getDefaultRoleAssumerWithWebIdentity: () => getDefaultRoleAssumerWithWebIdentity2
    });
    module.exports = __toCommonJS3(src_exports);
    __reExport(src_exports, require_STSClient(), module.exports);
    var import_middleware_endpoint = require_dist_cjs32();
    var import_middleware_serde2 = require_dist_cjs7();
    var import_EndpointParameters = require_EndpointParameters();
    var import_smithy_client7 = require_dist_cjs23();
    var _STSServiceException = class _STSServiceException2 extends import_smithy_client7.ServiceException {
      /**
       * @internal
       */
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, _STSServiceException2.prototype);
      }
    };
    __name(_STSServiceException, "STSServiceException");
    var STSServiceException = _STSServiceException;
    var _ExpiredTokenException = class _ExpiredTokenException2 extends STSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ExpiredTokenException",
          $fault: "client",
          ...opts
        });
        this.name = "ExpiredTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ExpiredTokenException2.prototype);
      }
    };
    __name(_ExpiredTokenException, "ExpiredTokenException");
    var ExpiredTokenException = _ExpiredTokenException;
    var _MalformedPolicyDocumentException = class _MalformedPolicyDocumentException2 extends STSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "MalformedPolicyDocumentException",
          $fault: "client",
          ...opts
        });
        this.name = "MalformedPolicyDocumentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _MalformedPolicyDocumentException2.prototype);
      }
    };
    __name(_MalformedPolicyDocumentException, "MalformedPolicyDocumentException");
    var MalformedPolicyDocumentException = _MalformedPolicyDocumentException;
    var _PackedPolicyTooLargeException = class _PackedPolicyTooLargeException2 extends STSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "PackedPolicyTooLargeException",
          $fault: "client",
          ...opts
        });
        this.name = "PackedPolicyTooLargeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _PackedPolicyTooLargeException2.prototype);
      }
    };
    __name(_PackedPolicyTooLargeException, "PackedPolicyTooLargeException");
    var PackedPolicyTooLargeException = _PackedPolicyTooLargeException;
    var _RegionDisabledException = class _RegionDisabledException2 extends STSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "RegionDisabledException",
          $fault: "client",
          ...opts
        });
        this.name = "RegionDisabledException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _RegionDisabledException2.prototype);
      }
    };
    __name(_RegionDisabledException, "RegionDisabledException");
    var RegionDisabledException = _RegionDisabledException;
    var _IDPRejectedClaimException = class _IDPRejectedClaimException2 extends STSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "IDPRejectedClaimException",
          $fault: "client",
          ...opts
        });
        this.name = "IDPRejectedClaimException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _IDPRejectedClaimException2.prototype);
      }
    };
    __name(_IDPRejectedClaimException, "IDPRejectedClaimException");
    var IDPRejectedClaimException = _IDPRejectedClaimException;
    var _InvalidIdentityTokenException = class _InvalidIdentityTokenException2 extends STSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidIdentityTokenException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidIdentityTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidIdentityTokenException2.prototype);
      }
    };
    __name(_InvalidIdentityTokenException, "InvalidIdentityTokenException");
    var InvalidIdentityTokenException = _InvalidIdentityTokenException;
    var _IDPCommunicationErrorException = class _IDPCommunicationErrorException2 extends STSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "IDPCommunicationErrorException",
          $fault: "client",
          ...opts
        });
        this.name = "IDPCommunicationErrorException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _IDPCommunicationErrorException2.prototype);
      }
    };
    __name(_IDPCommunicationErrorException, "IDPCommunicationErrorException");
    var IDPCommunicationErrorException = _IDPCommunicationErrorException;
    var _InvalidAuthorizationMessageException = class _InvalidAuthorizationMessageException2 extends STSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidAuthorizationMessageException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidAuthorizationMessageException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidAuthorizationMessageException2.prototype);
      }
    };
    __name(_InvalidAuthorizationMessageException, "InvalidAuthorizationMessageException");
    var InvalidAuthorizationMessageException = _InvalidAuthorizationMessageException;
    var CredentialsFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.SecretAccessKey && { SecretAccessKey: import_smithy_client7.SENSITIVE_STRING }
    }), "CredentialsFilterSensitiveLog");
    var AssumeRoleResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) }
    }), "AssumeRoleResponseFilterSensitiveLog");
    var AssumeRoleWithSAMLRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.SAMLAssertion && { SAMLAssertion: import_smithy_client7.SENSITIVE_STRING }
    }), "AssumeRoleWithSAMLRequestFilterSensitiveLog");
    var AssumeRoleWithSAMLResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) }
    }), "AssumeRoleWithSAMLResponseFilterSensitiveLog");
    var AssumeRoleWithWebIdentityRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.WebIdentityToken && { WebIdentityToken: import_smithy_client7.SENSITIVE_STRING }
    }), "AssumeRoleWithWebIdentityRequestFilterSensitiveLog");
    var AssumeRoleWithWebIdentityResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) }
    }), "AssumeRoleWithWebIdentityResponseFilterSensitiveLog");
    var AssumeRootResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) }
    }), "AssumeRootResponseFilterSensitiveLog");
    var GetFederationTokenResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) }
    }), "GetFederationTokenResponseFilterSensitiveLog");
    var GetSessionTokenResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) }
    }), "GetSessionTokenResponseFilterSensitiveLog");
    var import_core5 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var import_protocol_http11 = require_dist_cjs2();
    var se_AssumeRoleCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_AssumeRoleRequest(input, context),
        [_A]: _AR,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_AssumeRoleCommand");
    var se_AssumeRoleWithSAMLCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_AssumeRoleWithSAMLRequest(input, context),
        [_A]: _ARWSAML,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_AssumeRoleWithSAMLCommand");
    var se_AssumeRoleWithWebIdentityCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_AssumeRoleWithWebIdentityRequest(input, context),
        [_A]: _ARWWI,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_AssumeRoleWithWebIdentityCommand");
    var se_AssumeRootCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_AssumeRootRequest(input, context),
        [_A]: _ARs,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_AssumeRootCommand");
    var se_DecodeAuthorizationMessageCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DecodeAuthorizationMessageRequest(input, context),
        [_A]: _DAM,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DecodeAuthorizationMessageCommand");
    var se_GetAccessKeyInfoCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_GetAccessKeyInfoRequest(input, context),
        [_A]: _GAKI,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_GetAccessKeyInfoCommand");
    var se_GetCallerIdentityCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_GetCallerIdentityRequest(input, context),
        [_A]: _GCI,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_GetCallerIdentityCommand");
    var se_GetFederationTokenCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_GetFederationTokenRequest(input, context),
        [_A]: _GFT,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_GetFederationTokenCommand");
    var se_GetSessionTokenCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_GetSessionTokenRequest(input, context),
        [_A]: _GST,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_GetSessionTokenCommand");
    var de_AssumeRoleCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core5.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_AssumeRoleResponse(data.AssumeRoleResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_AssumeRoleCommand");
    var de_AssumeRoleWithSAMLCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core5.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_AssumeRoleWithSAMLResponse(data.AssumeRoleWithSAMLResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_AssumeRoleWithSAMLCommand");
    var de_AssumeRoleWithWebIdentityCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core5.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_AssumeRoleWithWebIdentityResponse(data.AssumeRoleWithWebIdentityResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_AssumeRoleWithWebIdentityCommand");
    var de_AssumeRootCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core5.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_AssumeRootResponse(data.AssumeRootResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_AssumeRootCommand");
    var de_DecodeAuthorizationMessageCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core5.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_DecodeAuthorizationMessageResponse(data.DecodeAuthorizationMessageResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DecodeAuthorizationMessageCommand");
    var de_GetAccessKeyInfoCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core5.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_GetAccessKeyInfoResponse(data.GetAccessKeyInfoResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_GetAccessKeyInfoCommand");
    var de_GetCallerIdentityCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core5.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_GetCallerIdentityResponse(data.GetCallerIdentityResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_GetCallerIdentityCommand");
    var de_GetFederationTokenCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core5.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_GetFederationTokenResponse(data.GetFederationTokenResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_GetFederationTokenCommand");
    var de_GetSessionTokenCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core5.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_GetSessionTokenResponse(data.GetSessionTokenResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_GetSessionTokenCommand");
    var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await (0, import_core5.parseXmlErrorBody)(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ExpiredTokenException":
        case "com.amazonaws.sts#ExpiredTokenException":
          throw await de_ExpiredTokenExceptionRes(parsedOutput, context);
        case "MalformedPolicyDocument":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);
        case "PackedPolicyTooLarge":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw await de_PackedPolicyTooLargeExceptionRes(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await de_RegionDisabledExceptionRes(parsedOutput, context);
        case "IDPRejectedClaim":
        case "com.amazonaws.sts#IDPRejectedClaimException":
          throw await de_IDPRejectedClaimExceptionRes(parsedOutput, context);
        case "InvalidIdentityToken":
        case "com.amazonaws.sts#InvalidIdentityTokenException":
          throw await de_InvalidIdentityTokenExceptionRes(parsedOutput, context);
        case "IDPCommunicationError":
        case "com.amazonaws.sts#IDPCommunicationErrorException":
          throw await de_IDPCommunicationErrorExceptionRes(parsedOutput, context);
        case "InvalidAuthorizationMessageException":
        case "com.amazonaws.sts#InvalidAuthorizationMessageException":
          throw await de_InvalidAuthorizationMessageExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    }, "de_CommandError");
    var de_ExpiredTokenExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_ExpiredTokenException(body.Error, context);
      const exception = new ExpiredTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, body);
    }, "de_ExpiredTokenExceptionRes");
    var de_IDPCommunicationErrorExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_IDPCommunicationErrorException(body.Error, context);
      const exception = new IDPCommunicationErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, body);
    }, "de_IDPCommunicationErrorExceptionRes");
    var de_IDPRejectedClaimExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_IDPRejectedClaimException(body.Error, context);
      const exception = new IDPRejectedClaimException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, body);
    }, "de_IDPRejectedClaimExceptionRes");
    var de_InvalidAuthorizationMessageExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_InvalidAuthorizationMessageException(body.Error, context);
      const exception = new InvalidAuthorizationMessageException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, body);
    }, "de_InvalidAuthorizationMessageExceptionRes");
    var de_InvalidIdentityTokenExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_InvalidIdentityTokenException(body.Error, context);
      const exception = new InvalidIdentityTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, body);
    }, "de_InvalidIdentityTokenExceptionRes");
    var de_MalformedPolicyDocumentExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_MalformedPolicyDocumentException(body.Error, context);
      const exception = new MalformedPolicyDocumentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, body);
    }, "de_MalformedPolicyDocumentExceptionRes");
    var de_PackedPolicyTooLargeExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_PackedPolicyTooLargeException(body.Error, context);
      const exception = new PackedPolicyTooLargeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, body);
    }, "de_PackedPolicyTooLargeExceptionRes");
    var de_RegionDisabledExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_RegionDisabledException(body.Error, context);
      const exception = new RegionDisabledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, body);
    }, "de_RegionDisabledExceptionRes");
    var se_AssumeRoleRequest = /* @__PURE__ */ __name((input, context) => {
      var _a2, _b, _c, _d;
      const entries = {};
      if (input[_RA] != null) {
        entries[_RA] = input[_RA];
      }
      if (input[_RSN] != null) {
        entries[_RSN] = input[_RSN];
      }
      if (input[_PA] != null) {
        const memberEntries = se_policyDescriptorListType(input[_PA], context);
        if (((_a2 = input[_PA]) == null ? void 0 : _a2.length) === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_P] != null) {
        entries[_P] = input[_P];
      }
      if (input[_DS] != null) {
        entries[_DS] = input[_DS];
      }
      if (input[_T] != null) {
        const memberEntries = se_tagListType(input[_T], context);
        if (((_b = input[_T]) == null ? void 0 : _b.length) === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_TTK] != null) {
        const memberEntries = se_tagKeyListType(input[_TTK], context);
        if (((_c = input[_TTK]) == null ? void 0 : _c.length) === 0) {
          entries.TransitiveTagKeys = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `TransitiveTagKeys.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_EI] != null) {
        entries[_EI] = input[_EI];
      }
      if (input[_SN] != null) {
        entries[_SN] = input[_SN];
      }
      if (input[_TC] != null) {
        entries[_TC] = input[_TC];
      }
      if (input[_SI] != null) {
        entries[_SI] = input[_SI];
      }
      if (input[_PC] != null) {
        const memberEntries = se_ProvidedContextsListType(input[_PC], context);
        if (((_d = input[_PC]) == null ? void 0 : _d.length) === 0) {
          entries.ProvidedContexts = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ProvidedContexts.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    }, "se_AssumeRoleRequest");
    var se_AssumeRoleWithSAMLRequest = /* @__PURE__ */ __name((input, context) => {
      var _a2;
      const entries = {};
      if (input[_RA] != null) {
        entries[_RA] = input[_RA];
      }
      if (input[_PAr] != null) {
        entries[_PAr] = input[_PAr];
      }
      if (input[_SAMLA] != null) {
        entries[_SAMLA] = input[_SAMLA];
      }
      if (input[_PA] != null) {
        const memberEntries = se_policyDescriptorListType(input[_PA], context);
        if (((_a2 = input[_PA]) == null ? void 0 : _a2.length) === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_P] != null) {
        entries[_P] = input[_P];
      }
      if (input[_DS] != null) {
        entries[_DS] = input[_DS];
      }
      return entries;
    }, "se_AssumeRoleWithSAMLRequest");
    var se_AssumeRoleWithWebIdentityRequest = /* @__PURE__ */ __name((input, context) => {
      var _a2;
      const entries = {};
      if (input[_RA] != null) {
        entries[_RA] = input[_RA];
      }
      if (input[_RSN] != null) {
        entries[_RSN] = input[_RSN];
      }
      if (input[_WIT] != null) {
        entries[_WIT] = input[_WIT];
      }
      if (input[_PI] != null) {
        entries[_PI] = input[_PI];
      }
      if (input[_PA] != null) {
        const memberEntries = se_policyDescriptorListType(input[_PA], context);
        if (((_a2 = input[_PA]) == null ? void 0 : _a2.length) === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_P] != null) {
        entries[_P] = input[_P];
      }
      if (input[_DS] != null) {
        entries[_DS] = input[_DS];
      }
      return entries;
    }, "se_AssumeRoleWithWebIdentityRequest");
    var se_AssumeRootRequest = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_TP] != null) {
        entries[_TP] = input[_TP];
      }
      if (input[_TPA] != null) {
        const memberEntries = se_PolicyDescriptorType(input[_TPA], context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `TaskPolicyArn.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_DS] != null) {
        entries[_DS] = input[_DS];
      }
      return entries;
    }, "se_AssumeRootRequest");
    var se_DecodeAuthorizationMessageRequest = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_EM] != null) {
        entries[_EM] = input[_EM];
      }
      return entries;
    }, "se_DecodeAuthorizationMessageRequest");
    var se_GetAccessKeyInfoRequest = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_AKI] != null) {
        entries[_AKI] = input[_AKI];
      }
      return entries;
    }, "se_GetAccessKeyInfoRequest");
    var se_GetCallerIdentityRequest = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      return entries;
    }, "se_GetCallerIdentityRequest");
    var se_GetFederationTokenRequest = /* @__PURE__ */ __name((input, context) => {
      var _a2, _b;
      const entries = {};
      if (input[_N] != null) {
        entries[_N] = input[_N];
      }
      if (input[_P] != null) {
        entries[_P] = input[_P];
      }
      if (input[_PA] != null) {
        const memberEntries = se_policyDescriptorListType(input[_PA], context);
        if (((_a2 = input[_PA]) == null ? void 0 : _a2.length) === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_DS] != null) {
        entries[_DS] = input[_DS];
      }
      if (input[_T] != null) {
        const memberEntries = se_tagListType(input[_T], context);
        if (((_b = input[_T]) == null ? void 0 : _b.length) === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    }, "se_GetFederationTokenRequest");
    var se_GetSessionTokenRequest = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_DS] != null) {
        entries[_DS] = input[_DS];
      }
      if (input[_SN] != null) {
        entries[_SN] = input[_SN];
      }
      if (input[_TC] != null) {
        entries[_TC] = input[_TC];
      }
      return entries;
    }, "se_GetSessionTokenRequest");
    var se_policyDescriptorListType = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = se_PolicyDescriptorType(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    }, "se_policyDescriptorListType");
    var se_PolicyDescriptorType = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_a] != null) {
        entries[_a] = input[_a];
      }
      return entries;
    }, "se_PolicyDescriptorType");
    var se_ProvidedContext = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_PAro] != null) {
        entries[_PAro] = input[_PAro];
      }
      if (input[_CA] != null) {
        entries[_CA] = input[_CA];
      }
      return entries;
    }, "se_ProvidedContext");
    var se_ProvidedContextsListType = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = se_ProvidedContext(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    }, "se_ProvidedContextsListType");
    var se_Tag = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_K] != null) {
        entries[_K] = input[_K];
      }
      if (input[_Va] != null) {
        entries[_Va] = input[_Va];
      }
      return entries;
    }, "se_Tag");
    var se_tagKeyListType = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    }, "se_tagKeyListType");
    var se_tagListType = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = se_Tag(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    }, "se_tagListType");
    var de_AssumedRoleUser = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_ARI] != null) {
        contents[_ARI] = (0, import_smithy_client7.expectString)(output[_ARI]);
      }
      if (output[_Ar] != null) {
        contents[_Ar] = (0, import_smithy_client7.expectString)(output[_Ar]);
      }
      return contents;
    }, "de_AssumedRoleUser");
    var de_AssumeRoleResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_C] != null) {
        contents[_C] = de_Credentials(output[_C], context);
      }
      if (output[_ARU] != null) {
        contents[_ARU] = de_AssumedRoleUser(output[_ARU], context);
      }
      if (output[_PPS] != null) {
        contents[_PPS] = (0, import_smithy_client7.strictParseInt32)(output[_PPS]);
      }
      if (output[_SI] != null) {
        contents[_SI] = (0, import_smithy_client7.expectString)(output[_SI]);
      }
      return contents;
    }, "de_AssumeRoleResponse");
    var de_AssumeRoleWithSAMLResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_C] != null) {
        contents[_C] = de_Credentials(output[_C], context);
      }
      if (output[_ARU] != null) {
        contents[_ARU] = de_AssumedRoleUser(output[_ARU], context);
      }
      if (output[_PPS] != null) {
        contents[_PPS] = (0, import_smithy_client7.strictParseInt32)(output[_PPS]);
      }
      if (output[_S] != null) {
        contents[_S] = (0, import_smithy_client7.expectString)(output[_S]);
      }
      if (output[_ST] != null) {
        contents[_ST] = (0, import_smithy_client7.expectString)(output[_ST]);
      }
      if (output[_I] != null) {
        contents[_I] = (0, import_smithy_client7.expectString)(output[_I]);
      }
      if (output[_Au] != null) {
        contents[_Au] = (0, import_smithy_client7.expectString)(output[_Au]);
      }
      if (output[_NQ] != null) {
        contents[_NQ] = (0, import_smithy_client7.expectString)(output[_NQ]);
      }
      if (output[_SI] != null) {
        contents[_SI] = (0, import_smithy_client7.expectString)(output[_SI]);
      }
      return contents;
    }, "de_AssumeRoleWithSAMLResponse");
    var de_AssumeRoleWithWebIdentityResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_C] != null) {
        contents[_C] = de_Credentials(output[_C], context);
      }
      if (output[_SFWIT] != null) {
        contents[_SFWIT] = (0, import_smithy_client7.expectString)(output[_SFWIT]);
      }
      if (output[_ARU] != null) {
        contents[_ARU] = de_AssumedRoleUser(output[_ARU], context);
      }
      if (output[_PPS] != null) {
        contents[_PPS] = (0, import_smithy_client7.strictParseInt32)(output[_PPS]);
      }
      if (output[_Pr] != null) {
        contents[_Pr] = (0, import_smithy_client7.expectString)(output[_Pr]);
      }
      if (output[_Au] != null) {
        contents[_Au] = (0, import_smithy_client7.expectString)(output[_Au]);
      }
      if (output[_SI] != null) {
        contents[_SI] = (0, import_smithy_client7.expectString)(output[_SI]);
      }
      return contents;
    }, "de_AssumeRoleWithWebIdentityResponse");
    var de_AssumeRootResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_C] != null) {
        contents[_C] = de_Credentials(output[_C], context);
      }
      if (output[_SI] != null) {
        contents[_SI] = (0, import_smithy_client7.expectString)(output[_SI]);
      }
      return contents;
    }, "de_AssumeRootResponse");
    var de_Credentials = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_AKI] != null) {
        contents[_AKI] = (0, import_smithy_client7.expectString)(output[_AKI]);
      }
      if (output[_SAK] != null) {
        contents[_SAK] = (0, import_smithy_client7.expectString)(output[_SAK]);
      }
      if (output[_STe] != null) {
        contents[_STe] = (0, import_smithy_client7.expectString)(output[_STe]);
      }
      if (output[_E] != null) {
        contents[_E] = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.parseRfc3339DateTimeWithOffset)(output[_E]));
      }
      return contents;
    }, "de_Credentials");
    var de_DecodeAuthorizationMessageResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_DM] != null) {
        contents[_DM] = (0, import_smithy_client7.expectString)(output[_DM]);
      }
      return contents;
    }, "de_DecodeAuthorizationMessageResponse");
    var de_ExpiredTokenException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client7.expectString)(output[_m]);
      }
      return contents;
    }, "de_ExpiredTokenException");
    var de_FederatedUser = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_FUI] != null) {
        contents[_FUI] = (0, import_smithy_client7.expectString)(output[_FUI]);
      }
      if (output[_Ar] != null) {
        contents[_Ar] = (0, import_smithy_client7.expectString)(output[_Ar]);
      }
      return contents;
    }, "de_FederatedUser");
    var de_GetAccessKeyInfoResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_Ac] != null) {
        contents[_Ac] = (0, import_smithy_client7.expectString)(output[_Ac]);
      }
      return contents;
    }, "de_GetAccessKeyInfoResponse");
    var de_GetCallerIdentityResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_UI] != null) {
        contents[_UI] = (0, import_smithy_client7.expectString)(output[_UI]);
      }
      if (output[_Ac] != null) {
        contents[_Ac] = (0, import_smithy_client7.expectString)(output[_Ac]);
      }
      if (output[_Ar] != null) {
        contents[_Ar] = (0, import_smithy_client7.expectString)(output[_Ar]);
      }
      return contents;
    }, "de_GetCallerIdentityResponse");
    var de_GetFederationTokenResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_C] != null) {
        contents[_C] = de_Credentials(output[_C], context);
      }
      if (output[_FU] != null) {
        contents[_FU] = de_FederatedUser(output[_FU], context);
      }
      if (output[_PPS] != null) {
        contents[_PPS] = (0, import_smithy_client7.strictParseInt32)(output[_PPS]);
      }
      return contents;
    }, "de_GetFederationTokenResponse");
    var de_GetSessionTokenResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_C] != null) {
        contents[_C] = de_Credentials(output[_C], context);
      }
      return contents;
    }, "de_GetSessionTokenResponse");
    var de_IDPCommunicationErrorException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client7.expectString)(output[_m]);
      }
      return contents;
    }, "de_IDPCommunicationErrorException");
    var de_IDPRejectedClaimException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client7.expectString)(output[_m]);
      }
      return contents;
    }, "de_IDPRejectedClaimException");
    var de_InvalidAuthorizationMessageException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client7.expectString)(output[_m]);
      }
      return contents;
    }, "de_InvalidAuthorizationMessageException");
    var de_InvalidIdentityTokenException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client7.expectString)(output[_m]);
      }
      return contents;
    }, "de_InvalidIdentityTokenException");
    var de_MalformedPolicyDocumentException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client7.expectString)(output[_m]);
      }
      return contents;
    }, "de_MalformedPolicyDocumentException");
    var de_PackedPolicyTooLargeException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client7.expectString)(output[_m]);
      }
      return contents;
    }, "de_PackedPolicyTooLargeException");
    var de_RegionDisabledException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client7.expectString)(output[_m]);
      }
      return contents;
    }, "de_RegionDisabledException");
    var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    }), "deserializeMetadata");
    var throwDefaultError = (0, import_smithy_client7.withBaseException)(STSServiceException);
    var buildHttpRpcRequest = /* @__PURE__ */ __name(async (context, headers, path, resolvedHostname, body) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers
      };
      if (resolvedHostname !== void 0) {
        contents.hostname = resolvedHostname;
      }
      if (body !== void 0) {
        contents.body = body;
      }
      return new import_protocol_http11.HttpRequest(contents);
    }, "buildHttpRpcRequest");
    var SHARED_HEADERS = {
      "content-type": "application/x-www-form-urlencoded"
    };
    var _ = "2011-06-15";
    var _A = "Action";
    var _AKI = "AccessKeyId";
    var _AR = "AssumeRole";
    var _ARI = "AssumedRoleId";
    var _ARU = "AssumedRoleUser";
    var _ARWSAML = "AssumeRoleWithSAML";
    var _ARWWI = "AssumeRoleWithWebIdentity";
    var _ARs = "AssumeRoot";
    var _Ac = "Account";
    var _Ar = "Arn";
    var _Au = "Audience";
    var _C = "Credentials";
    var _CA = "ContextAssertion";
    var _DAM = "DecodeAuthorizationMessage";
    var _DM = "DecodedMessage";
    var _DS = "DurationSeconds";
    var _E = "Expiration";
    var _EI = "ExternalId";
    var _EM = "EncodedMessage";
    var _FU = "FederatedUser";
    var _FUI = "FederatedUserId";
    var _GAKI = "GetAccessKeyInfo";
    var _GCI = "GetCallerIdentity";
    var _GFT = "GetFederationToken";
    var _GST = "GetSessionToken";
    var _I = "Issuer";
    var _K = "Key";
    var _N = "Name";
    var _NQ = "NameQualifier";
    var _P = "Policy";
    var _PA = "PolicyArns";
    var _PAr = "PrincipalArn";
    var _PAro = "ProviderArn";
    var _PC = "ProvidedContexts";
    var _PI = "ProviderId";
    var _PPS = "PackedPolicySize";
    var _Pr = "Provider";
    var _RA = "RoleArn";
    var _RSN = "RoleSessionName";
    var _S = "Subject";
    var _SAK = "SecretAccessKey";
    var _SAMLA = "SAMLAssertion";
    var _SFWIT = "SubjectFromWebIdentityToken";
    var _SI = "SourceIdentity";
    var _SN = "SerialNumber";
    var _ST = "SubjectType";
    var _STe = "SessionToken";
    var _T = "Tags";
    var _TC = "TokenCode";
    var _TP = "TargetPrincipal";
    var _TPA = "TaskPolicyArn";
    var _TTK = "TransitiveTagKeys";
    var _UI = "UserId";
    var _V = "Version";
    var _Va = "Value";
    var _WIT = "WebIdentityToken";
    var _a = "arn";
    var _m = "message";
    var buildFormUrlencodedString = /* @__PURE__ */ __name((formEntries) => Object.entries(formEntries).map(([key, value]) => (0, import_smithy_client7.extendedEncodeURIComponent)(key) + "=" + (0, import_smithy_client7.extendedEncodeURIComponent)(value)).join("&"), "buildFormUrlencodedString");
    var loadQueryErrorCode = /* @__PURE__ */ __name((output, data) => {
      var _a2;
      if (((_a2 = data.Error) == null ? void 0 : _a2.Code) !== void 0) {
        return data.Error.Code;
      }
      if (output.statusCode == 404) {
        return "NotFound";
      }
    }, "loadQueryErrorCode");
    var _AssumeRoleCommand = class _AssumeRoleCommand extends import_smithy_client7.Command.classBuilder().ep(import_EndpointParameters.commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AWSSecurityTokenServiceV20110615", "AssumeRole", {}).n("STSClient", "AssumeRoleCommand").f(void 0, AssumeRoleResponseFilterSensitiveLog).ser(se_AssumeRoleCommand).de(de_AssumeRoleCommand).build() {
    };
    __name(_AssumeRoleCommand, "AssumeRoleCommand");
    var AssumeRoleCommand = _AssumeRoleCommand;
    var import_EndpointParameters2 = require_EndpointParameters();
    var _AssumeRoleWithSAMLCommand = class _AssumeRoleWithSAMLCommand extends import_smithy_client7.Command.classBuilder().ep(import_EndpointParameters2.commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AWSSecurityTokenServiceV20110615", "AssumeRoleWithSAML", {}).n("STSClient", "AssumeRoleWithSAMLCommand").f(AssumeRoleWithSAMLRequestFilterSensitiveLog, AssumeRoleWithSAMLResponseFilterSensitiveLog).ser(se_AssumeRoleWithSAMLCommand).de(de_AssumeRoleWithSAMLCommand).build() {
    };
    __name(_AssumeRoleWithSAMLCommand, "AssumeRoleWithSAMLCommand");
    var AssumeRoleWithSAMLCommand = _AssumeRoleWithSAMLCommand;
    var import_EndpointParameters3 = require_EndpointParameters();
    var _AssumeRoleWithWebIdentityCommand = class _AssumeRoleWithWebIdentityCommand extends import_smithy_client7.Command.classBuilder().ep(import_EndpointParameters3.commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AWSSecurityTokenServiceV20110615", "AssumeRoleWithWebIdentity", {}).n("STSClient", "AssumeRoleWithWebIdentityCommand").f(AssumeRoleWithWebIdentityRequestFilterSensitiveLog, AssumeRoleWithWebIdentityResponseFilterSensitiveLog).ser(se_AssumeRoleWithWebIdentityCommand).de(de_AssumeRoleWithWebIdentityCommand).build() {
    };
    __name(_AssumeRoleWithWebIdentityCommand, "AssumeRoleWithWebIdentityCommand");
    var AssumeRoleWithWebIdentityCommand = _AssumeRoleWithWebIdentityCommand;
    var import_EndpointParameters4 = require_EndpointParameters();
    var _AssumeRootCommand = class _AssumeRootCommand extends import_smithy_client7.Command.classBuilder().ep(import_EndpointParameters4.commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AWSSecurityTokenServiceV20110615", "AssumeRoot", {}).n("STSClient", "AssumeRootCommand").f(void 0, AssumeRootResponseFilterSensitiveLog).ser(se_AssumeRootCommand).de(de_AssumeRootCommand).build() {
    };
    __name(_AssumeRootCommand, "AssumeRootCommand");
    var AssumeRootCommand = _AssumeRootCommand;
    var import_EndpointParameters5 = require_EndpointParameters();
    var _DecodeAuthorizationMessageCommand = class _DecodeAuthorizationMessageCommand extends import_smithy_client7.Command.classBuilder().ep(import_EndpointParameters5.commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AWSSecurityTokenServiceV20110615", "DecodeAuthorizationMessage", {}).n("STSClient", "DecodeAuthorizationMessageCommand").f(void 0, void 0).ser(se_DecodeAuthorizationMessageCommand).de(de_DecodeAuthorizationMessageCommand).build() {
    };
    __name(_DecodeAuthorizationMessageCommand, "DecodeAuthorizationMessageCommand");
    var DecodeAuthorizationMessageCommand = _DecodeAuthorizationMessageCommand;
    var import_EndpointParameters6 = require_EndpointParameters();
    var _GetAccessKeyInfoCommand = class _GetAccessKeyInfoCommand extends import_smithy_client7.Command.classBuilder().ep(import_EndpointParameters6.commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AWSSecurityTokenServiceV20110615", "GetAccessKeyInfo", {}).n("STSClient", "GetAccessKeyInfoCommand").f(void 0, void 0).ser(se_GetAccessKeyInfoCommand).de(de_GetAccessKeyInfoCommand).build() {
    };
    __name(_GetAccessKeyInfoCommand, "GetAccessKeyInfoCommand");
    var GetAccessKeyInfoCommand = _GetAccessKeyInfoCommand;
    var import_EndpointParameters7 = require_EndpointParameters();
    var _GetCallerIdentityCommand = class _GetCallerIdentityCommand extends import_smithy_client7.Command.classBuilder().ep(import_EndpointParameters7.commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AWSSecurityTokenServiceV20110615", "GetCallerIdentity", {}).n("STSClient", "GetCallerIdentityCommand").f(void 0, void 0).ser(se_GetCallerIdentityCommand).de(de_GetCallerIdentityCommand).build() {
    };
    __name(_GetCallerIdentityCommand, "GetCallerIdentityCommand");
    var GetCallerIdentityCommand = _GetCallerIdentityCommand;
    var import_EndpointParameters8 = require_EndpointParameters();
    var _GetFederationTokenCommand = class _GetFederationTokenCommand extends import_smithy_client7.Command.classBuilder().ep(import_EndpointParameters8.commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AWSSecurityTokenServiceV20110615", "GetFederationToken", {}).n("STSClient", "GetFederationTokenCommand").f(void 0, GetFederationTokenResponseFilterSensitiveLog).ser(se_GetFederationTokenCommand).de(de_GetFederationTokenCommand).build() {
    };
    __name(_GetFederationTokenCommand, "GetFederationTokenCommand");
    var GetFederationTokenCommand = _GetFederationTokenCommand;
    var import_EndpointParameters9 = require_EndpointParameters();
    var _GetSessionTokenCommand = class _GetSessionTokenCommand extends import_smithy_client7.Command.classBuilder().ep(import_EndpointParameters9.commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AWSSecurityTokenServiceV20110615", "GetSessionToken", {}).n("STSClient", "GetSessionTokenCommand").f(void 0, GetSessionTokenResponseFilterSensitiveLog).ser(se_GetSessionTokenCommand).de(de_GetSessionTokenCommand).build() {
    };
    __name(_GetSessionTokenCommand, "GetSessionTokenCommand");
    var GetSessionTokenCommand = _GetSessionTokenCommand;
    var import_STSClient = require_STSClient();
    var commands = {
      AssumeRoleCommand,
      AssumeRoleWithSAMLCommand,
      AssumeRoleWithWebIdentityCommand,
      AssumeRootCommand,
      DecodeAuthorizationMessageCommand,
      GetAccessKeyInfoCommand,
      GetCallerIdentityCommand,
      GetFederationTokenCommand,
      GetSessionTokenCommand
    };
    var _STS = class _STS extends import_STSClient.STSClient {
    };
    __name(_STS, "STS");
    var STS = _STS;
    (0, import_smithy_client7.createAggregatedClient)(commands, STS);
    var import_EndpointParameters10 = require_EndpointParameters();
    var import_client3 = (init_client(), __toCommonJS(client_exports));
    var ASSUME_ROLE_DEFAULT_REGION = "us-east-1";
    var getAccountIdFromAssumedRoleUser = /* @__PURE__ */ __name((assumedRoleUser) => {
      if (typeof (assumedRoleUser == null ? void 0 : assumedRoleUser.Arn) === "string") {
        const arnComponents = assumedRoleUser.Arn.split(":");
        if (arnComponents.length > 4 && arnComponents[4] !== "") {
          return arnComponents[4];
        }
      }
      return void 0;
    }, "getAccountIdFromAssumedRoleUser");
    var resolveRegion = /* @__PURE__ */ __name(async (_region, _parentRegion, credentialProviderLogger) => {
      var _a2;
      const region = typeof _region === "function" ? await _region() : _region;
      const parentRegion = typeof _parentRegion === "function" ? await _parentRegion() : _parentRegion;
      (_a2 = credentialProviderLogger == null ? void 0 : credentialProviderLogger.debug) == null ? void 0 : _a2.call(
        credentialProviderLogger,
        "@aws-sdk/client-sts::resolveRegion",
        "accepting first of:",
        `${region} (provider)`,
        `${parentRegion} (parent client)`,
        `${ASSUME_ROLE_DEFAULT_REGION} (STS default)`
      );
      return region ?? parentRegion ?? ASSUME_ROLE_DEFAULT_REGION;
    }, "resolveRegion");
    var getDefaultRoleAssumer = /* @__PURE__ */ __name((stsOptions, stsClientCtor) => {
      let stsClient;
      let closureSourceCreds;
      return async (sourceCreds, params) => {
        var _a2, _b, _c;
        closureSourceCreds = sourceCreds;
        if (!stsClient) {
          const {
            logger = (_a2 = stsOptions == null ? void 0 : stsOptions.parentClientConfig) == null ? void 0 : _a2.logger,
            region,
            requestHandler = (_b = stsOptions == null ? void 0 : stsOptions.parentClientConfig) == null ? void 0 : _b.requestHandler,
            credentialProviderLogger
          } = stsOptions;
          const resolvedRegion = await resolveRegion(
            region,
            (_c = stsOptions == null ? void 0 : stsOptions.parentClientConfig) == null ? void 0 : _c.region,
            credentialProviderLogger
          );
          const isCompatibleRequestHandler = !isH2(requestHandler);
          stsClient = new stsClientCtor({
            // A hack to make sts client uses the credential in current closure.
            credentialDefaultProvider: () => async () => closureSourceCreds,
            region: resolvedRegion,
            requestHandler: isCompatibleRequestHandler ? requestHandler : void 0,
            logger
          });
        }
        const { Credentials: Credentials2, AssumedRoleUser: AssumedRoleUser2 } = await stsClient.send(new AssumeRoleCommand(params));
        if (!Credentials2 || !Credentials2.AccessKeyId || !Credentials2.SecretAccessKey) {
          throw new Error(`Invalid response from STS.assumeRole call with role ${params.RoleArn}`);
        }
        const accountId = getAccountIdFromAssumedRoleUser(AssumedRoleUser2);
        const credentials = {
          accessKeyId: Credentials2.AccessKeyId,
          secretAccessKey: Credentials2.SecretAccessKey,
          sessionToken: Credentials2.SessionToken,
          expiration: Credentials2.Expiration,
          // TODO(credentialScope): access normally when shape is updated.
          ...Credentials2.CredentialScope && { credentialScope: Credentials2.CredentialScope },
          ...accountId && { accountId }
        };
        (0, import_client3.setCredentialFeature)(credentials, "CREDENTIALS_STS_ASSUME_ROLE", "i");
        return credentials;
      };
    }, "getDefaultRoleAssumer");
    var getDefaultRoleAssumerWithWebIdentity = /* @__PURE__ */ __name((stsOptions, stsClientCtor) => {
      let stsClient;
      return async (params) => {
        var _a2, _b, _c;
        if (!stsClient) {
          const {
            logger = (_a2 = stsOptions == null ? void 0 : stsOptions.parentClientConfig) == null ? void 0 : _a2.logger,
            region,
            requestHandler = (_b = stsOptions == null ? void 0 : stsOptions.parentClientConfig) == null ? void 0 : _b.requestHandler,
            credentialProviderLogger
          } = stsOptions;
          const resolvedRegion = await resolveRegion(
            region,
            (_c = stsOptions == null ? void 0 : stsOptions.parentClientConfig) == null ? void 0 : _c.region,
            credentialProviderLogger
          );
          const isCompatibleRequestHandler = !isH2(requestHandler);
          stsClient = new stsClientCtor({
            region: resolvedRegion,
            requestHandler: isCompatibleRequestHandler ? requestHandler : void 0,
            logger
          });
        }
        const { Credentials: Credentials2, AssumedRoleUser: AssumedRoleUser2 } = await stsClient.send(new AssumeRoleWithWebIdentityCommand(params));
        if (!Credentials2 || !Credentials2.AccessKeyId || !Credentials2.SecretAccessKey) {
          throw new Error(`Invalid response from STS.assumeRoleWithWebIdentity call with role ${params.RoleArn}`);
        }
        const accountId = getAccountIdFromAssumedRoleUser(AssumedRoleUser2);
        const credentials = {
          accessKeyId: Credentials2.AccessKeyId,
          secretAccessKey: Credentials2.SecretAccessKey,
          sessionToken: Credentials2.SessionToken,
          expiration: Credentials2.Expiration,
          // TODO(credentialScope): access normally when shape is updated.
          ...Credentials2.CredentialScope && { credentialScope: Credentials2.CredentialScope },
          ...accountId && { accountId }
        };
        if (accountId) {
          (0, import_client3.setCredentialFeature)(credentials, "RESOLVED_ACCOUNT_ID", "T");
        }
        (0, import_client3.setCredentialFeature)(credentials, "CREDENTIALS_STS_ASSUME_ROLE_WEB_ID", "k");
        return credentials;
      };
    }, "getDefaultRoleAssumerWithWebIdentity");
    var isH2 = /* @__PURE__ */ __name((requestHandler) => {
      var _a2;
      return ((_a2 = requestHandler == null ? void 0 : requestHandler.metadata) == null ? void 0 : _a2.handlerProtocol) === "h2";
    }, "isH2");
    var import_STSClient2 = require_STSClient();
    var getCustomizableStsClientCtor = /* @__PURE__ */ __name((baseCtor, customizations) => {
      var _a2;
      if (!customizations)
        return baseCtor;
      else
        return _a2 = class extends baseCtor {
          constructor(config2) {
            super(config2);
            for (const customization of customizations) {
              this.middlewareStack.use(customization);
            }
          }
        }, __name(_a2, "CustomizableSTSClient"), _a2;
    }, "getCustomizableStsClientCtor");
    var getDefaultRoleAssumer2 = /* @__PURE__ */ __name((stsOptions = {}, stsPlugins) => getDefaultRoleAssumer(stsOptions, getCustomizableStsClientCtor(import_STSClient2.STSClient, stsPlugins)), "getDefaultRoleAssumer");
    var getDefaultRoleAssumerWithWebIdentity2 = /* @__PURE__ */ __name((stsOptions = {}, stsPlugins) => getDefaultRoleAssumerWithWebIdentity(stsOptions, getCustomizableStsClientCtor(import_STSClient2.STSClient, stsPlugins)), "getDefaultRoleAssumerWithWebIdentity");
    var decorateDefaultCredentialProvider = /* @__PURE__ */ __name((provider) => (input) => provider({
      roleAssumer: getDefaultRoleAssumer2(input),
      roleAssumerWithWebIdentity: getDefaultRoleAssumerWithWebIdentity2(input),
      ...input
    }), "decorateDefaultCredentialProvider");
  }
});

// ../../../../node_modules/@jspm/core/nodelibs/browser/chunk-DtcTpLWz.js
function dew$k() {
  if (_dewExec$k) return exports$k;
  _dewExec$k = true;
  exports$k = function hasSymbols() {
    if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function") {
      return false;
    }
    if (typeof Symbol.iterator === "symbol") {
      return true;
    }
    var obj = {};
    var sym = Symbol("test");
    var symObj = Object(sym);
    if (typeof sym === "string") {
      return false;
    }
    if (Object.prototype.toString.call(sym) !== "[object Symbol]") {
      return false;
    }
    if (Object.prototype.toString.call(symObj) !== "[object Symbol]") {
      return false;
    }
    var symVal = 42;
    obj[sym] = symVal;
    for (sym in obj) {
      return false;
    }
    if (typeof Object.keys === "function" && Object.keys(obj).length !== 0) {
      return false;
    }
    if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(obj).length !== 0) {
      return false;
    }
    var syms = Object.getOwnPropertySymbols(obj);
    if (syms.length !== 1 || syms[0] !== sym) {
      return false;
    }
    if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
      return false;
    }
    if (typeof Object.getOwnPropertyDescriptor === "function") {
      var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
      if (descriptor.value !== symVal || descriptor.enumerable !== true) {
        return false;
      }
    }
    return true;
  };
  return exports$k;
}
function dew$j() {
  if (_dewExec$j) return exports$j;
  _dewExec$j = true;
  exports$j = Error;
  return exports$j;
}
function dew$i() {
  if (_dewExec$i) return exports$i;
  _dewExec$i = true;
  exports$i = EvalError;
  return exports$i;
}
function dew$h() {
  if (_dewExec$h) return exports$h;
  _dewExec$h = true;
  exports$h = RangeError;
  return exports$h;
}
function dew$g() {
  if (_dewExec$g) return exports$g;
  _dewExec$g = true;
  exports$g = ReferenceError;
  return exports$g;
}
function dew$f() {
  if (_dewExec$f) return exports$f;
  _dewExec$f = true;
  exports$f = SyntaxError;
  return exports$f;
}
function dew$e() {
  if (_dewExec$e) return exports$e;
  _dewExec$e = true;
  exports$e = TypeError;
  return exports$e;
}
function dew$d() {
  if (_dewExec$d) return exports$d;
  _dewExec$d = true;
  exports$d = URIError;
  return exports$d;
}
function dew$c() {
  if (_dewExec$c) return exports$c;
  _dewExec$c = true;
  var origSymbol = typeof Symbol !== "undefined" && Symbol;
  var hasSymbolSham = dew$k();
  exports$c = function hasNativeSymbols() {
    if (typeof origSymbol !== "function") {
      return false;
    }
    if (typeof Symbol !== "function") {
      return false;
    }
    if (typeof origSymbol("foo") !== "symbol") {
      return false;
    }
    if (typeof Symbol("bar") !== "symbol") {
      return false;
    }
    return hasSymbolSham();
  };
  return exports$c;
}
function dew$b() {
  if (_dewExec$b) return exports$b;
  _dewExec$b = true;
  var test = {
    __proto__: null,
    foo: {}
  };
  var $Object = Object;
  exports$b = function hasProto() {
    return {
      __proto__: test
    }.foo === test.foo && !(test instanceof $Object);
  };
  return exports$b;
}
function dew$a() {
  if (_dewExec$a) return exports$a;
  _dewExec$a = true;
  var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
  var toStr = Object.prototype.toString;
  var max = Math.max;
  var funcType = "[object Function]";
  var concatty = function concatty2(a, b) {
    var arr = [];
    for (var i = 0; i < a.length; i += 1) {
      arr[i] = a[i];
    }
    for (var j = 0; j < b.length; j += 1) {
      arr[j + a.length] = b[j];
    }
    return arr;
  };
  var slicy = function slicy2(arrLike, offset) {
    var arr = [];
    for (var i = offset, j = 0; i < arrLike.length; i += 1, j += 1) {
      arr[j] = arrLike[i];
    }
    return arr;
  };
  var joiny = function(arr, joiner) {
    var str = "";
    for (var i = 0; i < arr.length; i += 1) {
      str += arr[i];
      if (i + 1 < arr.length) {
        str += joiner;
      }
    }
    return str;
  };
  exports$a = function bind(that) {
    var target = this;
    if (typeof target !== "function" || toStr.apply(target) !== funcType) {
      throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slicy(arguments, 1);
    var bound;
    var binder = function() {
      if (this instanceof bound) {
        var result = target.apply(this, concatty(args, arguments));
        if (Object(result) === result) {
          return result;
        }
        return this;
      }
      return target.apply(that, concatty(args, arguments));
    };
    var boundLength = max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
      boundArgs[i] = "$" + i;
    }
    bound = Function("binder", "return function (" + joiny(boundArgs, ",") + "){ return binder.apply(this,arguments); }")(binder);
    if (target.prototype) {
      var Empty = function Empty2() {
      };
      Empty.prototype = target.prototype;
      bound.prototype = new Empty();
      Empty.prototype = null;
    }
    return bound;
  };
  return exports$a;
}
function dew$9() {
  if (_dewExec$9) return exports$9;
  _dewExec$9 = true;
  var implementation = dew$a();
  exports$9 = Function.prototype.bind || implementation;
  return exports$9;
}
function dew$8() {
  if (_dewExec$8) return exports$8;
  _dewExec$8 = true;
  var call = Function.prototype.call;
  var $hasOwn = Object.prototype.hasOwnProperty;
  var bind = dew$9();
  exports$8 = bind.call(call, $hasOwn);
  return exports$8;
}
function dew$7() {
  if (_dewExec$7) return exports$7;
  _dewExec$7 = true;
  var undefined$1;
  var $Error = dew$j();
  var $EvalError = dew$i();
  var $RangeError = dew$h();
  var $ReferenceError = dew$g();
  var $SyntaxError = dew$f();
  var $TypeError = dew$e();
  var $URIError = dew$d();
  var $Function = Function;
  var getEvalledConstructor = function(expressionSyntax) {
    try {
      return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
    } catch (e) {
    }
  };
  var $gOPD = Object.getOwnPropertyDescriptor;
  if ($gOPD) {
    try {
      $gOPD({}, "");
    } catch (e) {
      $gOPD = null;
    }
  }
  var throwTypeError = function() {
    throw new $TypeError();
  };
  var ThrowTypeError = $gOPD ? function() {
    try {
      arguments.callee;
      return throwTypeError;
    } catch (calleeThrows) {
      try {
        return $gOPD(arguments, "callee").get;
      } catch (gOPDthrows) {
        return throwTypeError;
      }
    }
  }() : throwTypeError;
  var hasSymbols = dew$c()();
  var hasProto = dew$b()();
  var getProto = Object.getPrototypeOf || (hasProto ? function(x) {
    return x.__proto__;
  } : null);
  var needsEval = {};
  var TypedArray = typeof Uint8Array === "undefined" || !getProto ? undefined$1 : getProto(Uint8Array);
  var INTRINSICS = {
    __proto__: null,
    "%AggregateError%": typeof AggregateError === "undefined" ? undefined$1 : AggregateError,
    "%Array%": Array,
    "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? undefined$1 : ArrayBuffer,
    "%ArrayIteratorPrototype%": hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined$1,
    "%AsyncFromSyncIteratorPrototype%": undefined$1,
    "%AsyncFunction%": needsEval,
    "%AsyncGenerator%": needsEval,
    "%AsyncGeneratorFunction%": needsEval,
    "%AsyncIteratorPrototype%": needsEval,
    "%Atomics%": typeof Atomics === "undefined" ? undefined$1 : Atomics,
    "%BigInt%": typeof BigInt === "undefined" ? undefined$1 : BigInt,
    "%BigInt64Array%": typeof BigInt64Array === "undefined" ? undefined$1 : BigInt64Array,
    "%BigUint64Array%": typeof BigUint64Array === "undefined" ? undefined$1 : BigUint64Array,
    "%Boolean%": Boolean,
    "%DataView%": typeof DataView === "undefined" ? undefined$1 : DataView,
    "%Date%": Date,
    "%decodeURI%": decodeURI,
    "%decodeURIComponent%": decodeURIComponent,
    "%encodeURI%": encodeURI,
    "%encodeURIComponent%": encodeURIComponent,
    "%Error%": $Error,
    "%eval%": eval,
    // eslint-disable-line no-eval
    "%EvalError%": $EvalError,
    "%Float32Array%": typeof Float32Array === "undefined" ? undefined$1 : Float32Array,
    "%Float64Array%": typeof Float64Array === "undefined" ? undefined$1 : Float64Array,
    "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? undefined$1 : FinalizationRegistry,
    "%Function%": $Function,
    "%GeneratorFunction%": needsEval,
    "%Int8Array%": typeof Int8Array === "undefined" ? undefined$1 : Int8Array,
    "%Int16Array%": typeof Int16Array === "undefined" ? undefined$1 : Int16Array,
    "%Int32Array%": typeof Int32Array === "undefined" ? undefined$1 : Int32Array,
    "%isFinite%": isFinite,
    "%isNaN%": isNaN,
    "%IteratorPrototype%": hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined$1,
    "%JSON%": typeof JSON === "object" ? JSON : undefined$1,
    "%Map%": typeof Map === "undefined" ? undefined$1 : Map,
    "%MapIteratorPrototype%": typeof Map === "undefined" || !hasSymbols || !getProto ? undefined$1 : getProto((/* @__PURE__ */ new Map())[Symbol.iterator]()),
    "%Math%": Math,
    "%Number%": Number,
    "%Object%": Object,
    "%parseFloat%": parseFloat,
    "%parseInt%": parseInt,
    "%Promise%": typeof Promise === "undefined" ? undefined$1 : Promise,
    "%Proxy%": typeof Proxy === "undefined" ? undefined$1 : Proxy,
    "%RangeError%": $RangeError,
    "%ReferenceError%": $ReferenceError,
    "%Reflect%": typeof Reflect === "undefined" ? undefined$1 : Reflect,
    "%RegExp%": RegExp,
    "%Set%": typeof Set === "undefined" ? undefined$1 : Set,
    "%SetIteratorPrototype%": typeof Set === "undefined" || !hasSymbols || !getProto ? undefined$1 : getProto((/* @__PURE__ */ new Set())[Symbol.iterator]()),
    "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? undefined$1 : SharedArrayBuffer,
    "%String%": String,
    "%StringIteratorPrototype%": hasSymbols && getProto ? getProto(""[Symbol.iterator]()) : undefined$1,
    "%Symbol%": hasSymbols ? Symbol : undefined$1,
    "%SyntaxError%": $SyntaxError,
    "%ThrowTypeError%": ThrowTypeError,
    "%TypedArray%": TypedArray,
    "%TypeError%": $TypeError,
    "%Uint8Array%": typeof Uint8Array === "undefined" ? undefined$1 : Uint8Array,
    "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? undefined$1 : Uint8ClampedArray,
    "%Uint16Array%": typeof Uint16Array === "undefined" ? undefined$1 : Uint16Array,
    "%Uint32Array%": typeof Uint32Array === "undefined" ? undefined$1 : Uint32Array,
    "%URIError%": $URIError,
    "%WeakMap%": typeof WeakMap === "undefined" ? undefined$1 : WeakMap,
    "%WeakRef%": typeof WeakRef === "undefined" ? undefined$1 : WeakRef,
    "%WeakSet%": typeof WeakSet === "undefined" ? undefined$1 : WeakSet
  };
  if (getProto) {
    try {
      null.error;
    } catch (e) {
      var errorProto = getProto(getProto(e));
      INTRINSICS["%Error.prototype%"] = errorProto;
    }
  }
  var doEval = function doEval2(name) {
    var value;
    if (name === "%AsyncFunction%") {
      value = getEvalledConstructor("async function () {}");
    } else if (name === "%GeneratorFunction%") {
      value = getEvalledConstructor("function* () {}");
    } else if (name === "%AsyncGeneratorFunction%") {
      value = getEvalledConstructor("async function* () {}");
    } else if (name === "%AsyncGenerator%") {
      var fn = doEval2("%AsyncGeneratorFunction%");
      if (fn) {
        value = fn.prototype;
      }
    } else if (name === "%AsyncIteratorPrototype%") {
      var gen = doEval2("%AsyncGenerator%");
      if (gen && getProto) {
        value = getProto(gen.prototype);
      }
    }
    INTRINSICS[name] = value;
    return value;
  };
  var LEGACY_ALIASES = {
    __proto__: null,
    "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
    "%ArrayPrototype%": ["Array", "prototype"],
    "%ArrayProto_entries%": ["Array", "prototype", "entries"],
    "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
    "%ArrayProto_keys%": ["Array", "prototype", "keys"],
    "%ArrayProto_values%": ["Array", "prototype", "values"],
    "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
    "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
    "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"],
    "%BooleanPrototype%": ["Boolean", "prototype"],
    "%DataViewPrototype%": ["DataView", "prototype"],
    "%DatePrototype%": ["Date", "prototype"],
    "%ErrorPrototype%": ["Error", "prototype"],
    "%EvalErrorPrototype%": ["EvalError", "prototype"],
    "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
    "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
    "%FunctionPrototype%": ["Function", "prototype"],
    "%Generator%": ["GeneratorFunction", "prototype"],
    "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"],
    "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
    "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
    "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
    "%JSONParse%": ["JSON", "parse"],
    "%JSONStringify%": ["JSON", "stringify"],
    "%MapPrototype%": ["Map", "prototype"],
    "%NumberPrototype%": ["Number", "prototype"],
    "%ObjectPrototype%": ["Object", "prototype"],
    "%ObjProto_toString%": ["Object", "prototype", "toString"],
    "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
    "%PromisePrototype%": ["Promise", "prototype"],
    "%PromiseProto_then%": ["Promise", "prototype", "then"],
    "%Promise_all%": ["Promise", "all"],
    "%Promise_reject%": ["Promise", "reject"],
    "%Promise_resolve%": ["Promise", "resolve"],
    "%RangeErrorPrototype%": ["RangeError", "prototype"],
    "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
    "%RegExpPrototype%": ["RegExp", "prototype"],
    "%SetPrototype%": ["Set", "prototype"],
    "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
    "%StringPrototype%": ["String", "prototype"],
    "%SymbolPrototype%": ["Symbol", "prototype"],
    "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
    "%TypedArrayPrototype%": ["TypedArray", "prototype"],
    "%TypeErrorPrototype%": ["TypeError", "prototype"],
    "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
    "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
    "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
    "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
    "%URIErrorPrototype%": ["URIError", "prototype"],
    "%WeakMapPrototype%": ["WeakMap", "prototype"],
    "%WeakSetPrototype%": ["WeakSet", "prototype"]
  };
  var bind = dew$9();
  var hasOwn = dew$8();
  var $concat = bind.call(Function.call, Array.prototype.concat);
  var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
  var $replace = bind.call(Function.call, String.prototype.replace);
  var $strSlice = bind.call(Function.call, String.prototype.slice);
  var $exec = bind.call(Function.call, RegExp.prototype.exec);
  var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
  var reEscapeChar = /\\(\\)?/g;
  var stringToPath = function stringToPath2(string) {
    var first = $strSlice(string, 0, 1);
    var last = $strSlice(string, -1);
    if (first === "%" && last !== "%") {
      throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");
    } else if (last === "%" && first !== "%") {
      throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
    }
    var result = [];
    $replace(string, rePropName, function(match, number, quote, subString) {
      result[result.length] = quote ? $replace(subString, reEscapeChar, "$1") : number || match;
    });
    return result;
  };
  var getBaseIntrinsic = function getBaseIntrinsic2(name, allowMissing) {
    var intrinsicName = name;
    var alias;
    if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
      alias = LEGACY_ALIASES[intrinsicName];
      intrinsicName = "%" + alias[0] + "%";
    }
    if (hasOwn(INTRINSICS, intrinsicName)) {
      var value = INTRINSICS[intrinsicName];
      if (value === needsEval) {
        value = doEval(intrinsicName);
      }
      if (typeof value === "undefined" && !allowMissing) {
        throw new $TypeError("intrinsic " + name + " exists, but is not available. Please file an issue!");
      }
      return {
        alias,
        name: intrinsicName,
        value
      };
    }
    throw new $SyntaxError("intrinsic " + name + " does not exist!");
  };
  exports$7 = function GetIntrinsic(name, allowMissing) {
    if (typeof name !== "string" || name.length === 0) {
      throw new $TypeError("intrinsic name must be a non-empty string");
    }
    if (arguments.length > 1 && typeof allowMissing !== "boolean") {
      throw new $TypeError('"allowMissing" argument must be a boolean');
    }
    if ($exec(/^%?[^%]*%?$/, name) === null) {
      throw new $SyntaxError("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
    }
    var parts = stringToPath(name);
    var intrinsicBaseName = parts.length > 0 ? parts[0] : "";
    var intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
    var intrinsicRealName = intrinsic.name;
    var value = intrinsic.value;
    var skipFurtherCaching = false;
    var alias = intrinsic.alias;
    if (alias) {
      intrinsicBaseName = alias[0];
      $spliceApply(parts, $concat([0, 1], alias));
    }
    for (var i = 1, isOwn = true; i < parts.length; i += 1) {
      var part = parts[i];
      var first = $strSlice(part, 0, 1);
      var last = $strSlice(part, -1);
      if ((first === '"' || first === "'" || first === "`" || last === '"' || last === "'" || last === "`") && first !== last) {
        throw new $SyntaxError("property names with quotes must have matching quotes");
      }
      if (part === "constructor" || !isOwn) {
        skipFurtherCaching = true;
      }
      intrinsicBaseName += "." + part;
      intrinsicRealName = "%" + intrinsicBaseName + "%";
      if (hasOwn(INTRINSICS, intrinsicRealName)) {
        value = INTRINSICS[intrinsicRealName];
      } else if (value != null) {
        if (!(part in value)) {
          if (!allowMissing) {
            throw new $TypeError("base intrinsic for " + name + " exists, but the property is not available.");
          }
          return void 0;
        }
        if ($gOPD && i + 1 >= parts.length) {
          var desc = $gOPD(value, part);
          isOwn = !!desc;
          if (isOwn && "get" in desc && !("originalValue" in desc.get)) {
            value = desc.get;
          } else {
            value = value[part];
          }
        } else {
          isOwn = hasOwn(value, part);
          value = value[part];
        }
        if (isOwn && !skipFurtherCaching) {
          INTRINSICS[intrinsicRealName] = value;
        }
      }
    }
    return value;
  };
  return exports$7;
}
function dew$6() {
  if (_dewExec$6) return exports$6;
  _dewExec$6 = true;
  var GetIntrinsic = dew$7();
  var $defineProperty = GetIntrinsic("%Object.defineProperty%", true) || false;
  if ($defineProperty) {
    try {
      $defineProperty({}, "a", {
        value: 1
      });
    } catch (e) {
      $defineProperty = false;
    }
  }
  exports$6 = $defineProperty;
  return exports$6;
}
function dew$5() {
  if (_dewExec$5) return exports$5;
  _dewExec$5 = true;
  var GetIntrinsic = dew$7();
  var $gOPD = GetIntrinsic("%Object.getOwnPropertyDescriptor%", true);
  if ($gOPD) {
    try {
      $gOPD([], "length");
    } catch (e) {
      $gOPD = null;
    }
  }
  exports$5 = $gOPD;
  return exports$5;
}
function dew$4() {
  if (_dewExec$4) return exports$4;
  _dewExec$4 = true;
  var $defineProperty = dew$6();
  var $SyntaxError = dew$f();
  var $TypeError = dew$e();
  var gopd = dew$5();
  exports$4 = function defineDataProperty(obj, property, value) {
    if (!obj || typeof obj !== "object" && typeof obj !== "function") {
      throw new $TypeError("`obj` must be an object or a function`");
    }
    if (typeof property !== "string" && typeof property !== "symbol") {
      throw new $TypeError("`property` must be a string or a symbol`");
    }
    if (arguments.length > 3 && typeof arguments[3] !== "boolean" && arguments[3] !== null) {
      throw new $TypeError("`nonEnumerable`, if provided, must be a boolean or null");
    }
    if (arguments.length > 4 && typeof arguments[4] !== "boolean" && arguments[4] !== null) {
      throw new $TypeError("`nonWritable`, if provided, must be a boolean or null");
    }
    if (arguments.length > 5 && typeof arguments[5] !== "boolean" && arguments[5] !== null) {
      throw new $TypeError("`nonConfigurable`, if provided, must be a boolean or null");
    }
    if (arguments.length > 6 && typeof arguments[6] !== "boolean") {
      throw new $TypeError("`loose`, if provided, must be a boolean");
    }
    var nonEnumerable = arguments.length > 3 ? arguments[3] : null;
    var nonWritable = arguments.length > 4 ? arguments[4] : null;
    var nonConfigurable = arguments.length > 5 ? arguments[5] : null;
    var loose = arguments.length > 6 ? arguments[6] : false;
    var desc = !!gopd && gopd(obj, property);
    if ($defineProperty) {
      $defineProperty(obj, property, {
        configurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable,
        enumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable,
        value,
        writable: nonWritable === null && desc ? desc.writable : !nonWritable
      });
    } else if (loose || !nonEnumerable && !nonWritable && !nonConfigurable) {
      obj[property] = value;
    } else {
      throw new $SyntaxError("This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.");
    }
  };
  return exports$4;
}
function dew$3() {
  if (_dewExec$3) return exports$3;
  _dewExec$3 = true;
  var $defineProperty = dew$6();
  var hasPropertyDescriptors = function hasPropertyDescriptors2() {
    return !!$defineProperty;
  };
  hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
    if (!$defineProperty) {
      return null;
    }
    try {
      return $defineProperty([], "length", {
        value: 1
      }).length !== 1;
    } catch (e) {
      return true;
    }
  };
  exports$3 = hasPropertyDescriptors;
  return exports$3;
}
function dew$22() {
  if (_dewExec$22) return exports$23;
  _dewExec$22 = true;
  var GetIntrinsic = dew$7();
  var define = dew$4();
  var hasDescriptors = dew$3()();
  var gOPD = dew$5();
  var $TypeError = dew$e();
  var $floor = GetIntrinsic("%Math.floor%");
  exports$23 = function setFunctionLength(fn, length) {
    if (typeof fn !== "function") {
      throw new $TypeError("`fn` is not a function");
    }
    if (typeof length !== "number" || length < 0 || length > 4294967295 || $floor(length) !== length) {
      throw new $TypeError("`length` must be a positive 32-bit integer");
    }
    var loose = arguments.length > 2 && !!arguments[2];
    var functionLengthIsConfigurable = true;
    var functionLengthIsWritable = true;
    if ("length" in fn && gOPD) {
      var desc = gOPD(fn, "length");
      if (desc && !desc.configurable) {
        functionLengthIsConfigurable = false;
      }
      if (desc && !desc.writable) {
        functionLengthIsWritable = false;
      }
    }
    if (functionLengthIsConfigurable || functionLengthIsWritable || !loose) {
      if (hasDescriptors) {
        define(
          /** @type {Parameters<define>[0]} */
          fn,
          "length",
          length,
          true,
          true
        );
      } else {
        define(
          /** @type {Parameters<define>[0]} */
          fn,
          "length",
          length
        );
      }
    }
    return fn;
  };
  return exports$23;
}
function dew$13() {
  if (_dewExec$13) return exports$13;
  _dewExec$13 = true;
  var bind = dew$9();
  var GetIntrinsic = dew$7();
  var setFunctionLength = dew$22();
  var $TypeError = dew$e();
  var $apply = GetIntrinsic("%Function.prototype.apply%");
  var $call = GetIntrinsic("%Function.prototype.call%");
  var $reflectApply = GetIntrinsic("%Reflect.apply%", true) || bind.call($call, $apply);
  var $defineProperty = dew$6();
  var $max = GetIntrinsic("%Math.max%");
  exports$13 = function callBind(originalFunction) {
    if (typeof originalFunction !== "function") {
      throw new $TypeError("a function is required");
    }
    var func = $reflectApply(bind, $call, arguments);
    return setFunctionLength(func, 1 + $max(0, originalFunction.length - (arguments.length - 1)), true);
  };
  var applyBind = function applyBind2() {
    return $reflectApply(bind, $apply, arguments);
  };
  if ($defineProperty) {
    $defineProperty(exports$13, "apply", {
      value: applyBind
    });
  } else {
    exports$13.apply = applyBind;
  }
  return exports$13;
}
function dew3() {
  if (_dewExec3) return exports3;
  _dewExec3 = true;
  var GetIntrinsic = dew$7();
  var callBind = dew$13();
  var $indexOf = callBind(GetIntrinsic("String.prototype.indexOf"));
  exports3 = function callBoundIntrinsic(name, allowMissing) {
    var intrinsic = GetIntrinsic(name, !!allowMissing);
    if (typeof intrinsic === "function" && $indexOf(name, ".prototype.") > -1) {
      return callBind(intrinsic);
    }
    return intrinsic;
  };
  return exports3;
}
var exports$k, _dewExec$k, exports$j, _dewExec$j, exports$i, _dewExec$i, exports$h, _dewExec$h, exports$g, _dewExec$g, exports$f, _dewExec$f, exports$e, _dewExec$e, exports$d, _dewExec$d, exports$c, _dewExec$c, exports$b, _dewExec$b, exports$a, _dewExec$a, exports$9, _dewExec$9, exports$8, _dewExec$8, exports$7, _dewExec$7, exports$6, _dewExec$6, exports$5, _dewExec$5, exports$4, _dewExec$4, exports$3, _dewExec$3, exports$23, _dewExec$22, exports$13, _dewExec$13, exports3, _dewExec3;
var init_chunk_DtcTpLWz = __esm({
  "../../../../node_modules/@jspm/core/nodelibs/browser/chunk-DtcTpLWz.js"() {
    init_dirname();
    exports$k = {};
    _dewExec$k = false;
    exports$j = {};
    _dewExec$j = false;
    exports$i = {};
    _dewExec$i = false;
    exports$h = {};
    _dewExec$h = false;
    exports$g = {};
    _dewExec$g = false;
    exports$f = {};
    _dewExec$f = false;
    exports$e = {};
    _dewExec$e = false;
    exports$d = {};
    _dewExec$d = false;
    exports$c = {};
    _dewExec$c = false;
    exports$b = {};
    _dewExec$b = false;
    exports$a = {};
    _dewExec$a = false;
    exports$9 = {};
    _dewExec$9 = false;
    exports$8 = {};
    _dewExec$8 = false;
    exports$7 = {};
    _dewExec$7 = false;
    exports$6 = {};
    _dewExec$6 = false;
    exports$5 = {};
    _dewExec$5 = false;
    exports$4 = {};
    _dewExec$4 = false;
    exports$3 = {};
    _dewExec$3 = false;
    exports$23 = {};
    _dewExec$22 = false;
    exports$13 = {};
    _dewExec$13 = false;
    exports3 = {};
    _dewExec3 = false;
  }
});

// ../../../../node_modules/@jspm/core/nodelibs/browser/chunk-CkFCi-G1.js
function dew4() {
  if (_dewExec4) return exports4;
  _dewExec4 = true;
  if (typeof Object.create === "function") {
    exports4 = function inherits3(ctor, superCtor) {
      if (superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
          constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
      }
    };
  } else {
    exports4 = function inherits3(ctor, superCtor) {
      if (superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
    };
  }
  return exports4;
}
var exports4, _dewExec4;
var init_chunk_CkFCi_G1 = __esm({
  "../../../../node_modules/@jspm/core/nodelibs/browser/chunk-CkFCi-G1.js"() {
    init_dirname();
    exports4 = {};
    _dewExec4 = false;
  }
});

// ../../../../node_modules/@jspm/core/nodelibs/browser/chunk-DEMDiNwt.js
function unimplemented2(name) {
  throw new Error("Node.js process " + name + " is not supported by JSPM core outside of Node.js");
}
function cleanUpNextTick() {
  if (!draining || !currentQueue)
    return;
  draining = false;
  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }
  if (queue.length)
    drainQueue();
}
function drainQueue() {
  if (draining)
    return;
  var timeout = setTimeout(cleanUpNextTick, 0);
  draining = true;
  var len = queue.length;
  while (len) {
    currentQueue = queue;
    queue = [];
    while (++queueIndex < len) {
      if (currentQueue)
        currentQueue[queueIndex].run();
    }
    queueIndex = -1;
    len = queue.length;
  }
  currentQueue = null;
  draining = false;
  clearTimeout(timeout);
}
function nextTick(fun) {
  var args = new Array(arguments.length - 1);
  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++)
      args[i - 1] = arguments[i];
  }
  queue.push(new Item(fun, args));
  if (queue.length === 1 && !draining)
    setTimeout(drainQueue, 0);
}
function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}
function noop() {
}
function _linkedBinding(name) {
  unimplemented2("_linkedBinding");
}
function dlopen(name) {
  unimplemented2("dlopen");
}
function _getActiveRequests() {
  return [];
}
function _getActiveHandles() {
  return [];
}
function assert(condition, message) {
  if (!condition) throw new Error(message || "assertion error");
}
function hasUncaughtExceptionCaptureCallback() {
  return false;
}
function uptime() {
  return _performance.now() / 1e3;
}
function hrtime(previousTimestamp) {
  var baseNow = Math.floor((Date.now() - _performance.now()) * 1e-3);
  var clocktime = _performance.now() * 1e-3;
  var seconds = Math.floor(clocktime) + baseNow;
  var nanoseconds = Math.floor(clocktime % 1 * 1e9);
  if (previousTimestamp) {
    seconds = seconds - previousTimestamp[0];
    nanoseconds = nanoseconds - previousTimestamp[1];
    if (nanoseconds < 0) {
      seconds--;
      nanoseconds += nanoPerSec;
    }
  }
  return [seconds, nanoseconds];
}
function on() {
  return process3;
}
function listeners(name) {
  return [];
}
var queue, draining, currentQueue, queueIndex, title, arch, platform, env, argv, execArgv, version2, versions, emitWarning, binding, umask, cwd, chdir, release, _rawDebug, moduleLoadList, domain, _exiting, config, reallyExit, _kill, cpuUsage, resourceUsage, memoryUsage, kill, exit, openStdin, allowedNodeEnvironmentFlags, features, _fatalExceptions, setUncaughtExceptionCaptureCallback, _tickCallback, _debugProcess, _debugEnd, _startProfilerIdleNotifier, _stopProfilerIdleNotifier, stdout, stderr, stdin, abort, pid, ppid, execPath, debugPort, argv0, _preload_modules, setSourceMapsEnabled, _performance, nowOffset, nanoPerSec, _maxListeners, _events, _eventsCount, addListener, once, off, removeListener, removeAllListeners, emit, prependListener, prependOnceListener, process3;
var init_chunk_DEMDiNwt = __esm({
  "../../../../node_modules/@jspm/core/nodelibs/browser/chunk-DEMDiNwt.js"() {
    init_dirname();
    queue = [];
    draining = false;
    queueIndex = -1;
    Item.prototype.run = function() {
      this.fun.apply(null, this.array);
    };
    title = "browser";
    arch = "x64";
    platform = "browser";
    env = {
      PATH: "/usr/bin",
      LANG: navigator.language + ".UTF-8",
      PWD: "/",
      HOME: "/home",
      TMP: "/tmp"
    };
    argv = ["/usr/bin/node"];
    execArgv = [];
    version2 = "v16.8.0";
    versions = {};
    emitWarning = function(message, type) {
      console.warn((type ? type + ": " : "") + message);
    };
    binding = function(name) {
      unimplemented2("binding");
    };
    umask = function(mask) {
      return 0;
    };
    cwd = function() {
      return "/";
    };
    chdir = function(dir) {
    };
    release = {
      name: "node",
      sourceUrl: "",
      headersUrl: "",
      libUrl: ""
    };
    _rawDebug = noop;
    moduleLoadList = [];
    domain = {};
    _exiting = false;
    config = {};
    reallyExit = noop;
    _kill = noop;
    cpuUsage = function() {
      return {};
    };
    resourceUsage = cpuUsage;
    memoryUsage = cpuUsage;
    kill = noop;
    exit = noop;
    openStdin = noop;
    allowedNodeEnvironmentFlags = {};
    features = {
      inspector: false,
      debug: false,
      uv: false,
      ipv6: false,
      tls_alpn: false,
      tls_sni: false,
      tls_ocsp: false,
      tls: false,
      cached_builtins: true
    };
    _fatalExceptions = noop;
    setUncaughtExceptionCaptureCallback = noop;
    _tickCallback = noop;
    _debugProcess = noop;
    _debugEnd = noop;
    _startProfilerIdleNotifier = noop;
    _stopProfilerIdleNotifier = noop;
    stdout = void 0;
    stderr = void 0;
    stdin = void 0;
    abort = noop;
    pid = 2;
    ppid = 1;
    execPath = "/bin/usr/node";
    debugPort = 9229;
    argv0 = "node";
    _preload_modules = [];
    setSourceMapsEnabled = noop;
    _performance = {
      now: typeof performance !== "undefined" ? performance.now.bind(performance) : void 0,
      timing: typeof performance !== "undefined" ? performance.timing : void 0
    };
    if (_performance.now === void 0) {
      nowOffset = Date.now();
      if (_performance.timing && _performance.timing.navigationStart) {
        nowOffset = _performance.timing.navigationStart;
      }
      _performance.now = () => Date.now() - nowOffset;
    }
    nanoPerSec = 1e9;
    hrtime.bigint = function(time) {
      var diff = hrtime(time);
      if (typeof BigInt === "undefined") {
        return diff[0] * nanoPerSec + diff[1];
      }
      return BigInt(diff[0] * nanoPerSec) + BigInt(diff[1]);
    };
    _maxListeners = 10;
    _events = {};
    _eventsCount = 0;
    addListener = on;
    once = on;
    off = on;
    removeListener = on;
    removeAllListeners = on;
    emit = noop;
    prependListener = on;
    prependOnceListener = on;
    process3 = {
      version: version2,
      versions,
      arch,
      platform,
      release,
      _rawDebug,
      moduleLoadList,
      binding,
      _linkedBinding,
      _events,
      _eventsCount,
      _maxListeners,
      on,
      addListener,
      once,
      off,
      removeListener,
      removeAllListeners,
      emit,
      prependListener,
      prependOnceListener,
      listeners,
      domain,
      _exiting,
      config,
      dlopen,
      uptime,
      _getActiveRequests,
      _getActiveHandles,
      reallyExit,
      _kill,
      cpuUsage,
      resourceUsage,
      memoryUsage,
      kill,
      exit,
      openStdin,
      allowedNodeEnvironmentFlags,
      assert,
      features,
      _fatalExceptions,
      setUncaughtExceptionCaptureCallback,
      hasUncaughtExceptionCaptureCallback,
      emitWarning,
      nextTick,
      _tickCallback,
      _debugProcess,
      _debugEnd,
      _startProfilerIdleNotifier,
      _stopProfilerIdleNotifier,
      stdout,
      stdin,
      stderr,
      abort,
      umask,
      chdir,
      cwd,
      env,
      title,
      argv,
      execArgv,
      pid,
      ppid,
      execPath,
      debugPort,
      hrtime,
      argv0,
      _preload_modules,
      setSourceMapsEnabled
    };
  }
});

// ../../../../node_modules/@jspm/core/nodelibs/browser/util.js
var util_exports = {};
__export(util_exports, {
  TextDecoder: () => TextDecoder2,
  TextEncoder: () => TextEncoder,
  _extend: () => _extend,
  callbackify: () => callbackify,
  debuglog: () => debuglog,
  default: () => exports5,
  deprecate: () => deprecate,
  format: () => format,
  inherits: () => inherits2,
  inspect: () => inspect,
  isArray: () => isArray,
  isBoolean: () => isBoolean,
  isBuffer: () => isBuffer,
  isDate: () => isDate,
  isError: () => isError,
  isFunction: () => isFunction,
  isNull: () => isNull,
  isNullOrUndefined: () => isNullOrUndefined,
  isNumber: () => isNumber,
  isObject: () => isObject,
  isPrimitive: () => isPrimitive,
  isRegExp: () => isRegExp,
  isString: () => isString,
  isSymbol: () => isSymbol,
  isUndefined: () => isUndefined,
  log: () => log,
  promisify: () => promisify,
  types: () => types
});
function dew$b2() {
  if (_dewExec$b2) return exports$c2;
  _dewExec$b2 = true;
  var hasSymbols = dew$k();
  exports$c2 = function hasToStringTagShams() {
    return hasSymbols() && !!Symbol.toStringTag;
  };
  return exports$c2;
}
function dew$a2() {
  if (_dewExec$a2) return exports$b2;
  _dewExec$a2 = true;
  var hasToStringTag = dew$b2()();
  var callBound = dew3();
  var $toString = callBound("Object.prototype.toString");
  var isStandardArguments = function isArguments(value) {
    if (hasToStringTag && value && typeof value === "object" && Symbol.toStringTag in value) {
      return false;
    }
    return $toString(value) === "[object Arguments]";
  };
  var isLegacyArguments = function isArguments(value) {
    if (isStandardArguments(value)) {
      return true;
    }
    return value !== null && typeof value === "object" && typeof value.length === "number" && value.length >= 0 && $toString(value) !== "[object Array]" && $toString(value.callee) === "[object Function]";
  };
  var supportsStandardArguments = function() {
    return isStandardArguments(arguments);
  }();
  isStandardArguments.isLegacyArguments = isLegacyArguments;
  exports$b2 = supportsStandardArguments ? isStandardArguments : isLegacyArguments;
  return exports$b2;
}
function dew$92() {
  if (_dewExec$92) return exports$a2;
  _dewExec$92 = true;
  var toStr = Object.prototype.toString;
  var fnToStr = Function.prototype.toString;
  var isFnRegex = /^\s*(?:function)?\*/;
  var hasToStringTag = dew$b2()();
  var getProto = Object.getPrototypeOf;
  var getGeneratorFunc = function() {
    if (!hasToStringTag) {
      return false;
    }
    try {
      return Function("return function*() {}")();
    } catch (e) {
    }
  };
  var GeneratorFunction;
  exports$a2 = function isGeneratorFunction(fn) {
    if (typeof fn !== "function") {
      return false;
    }
    if (isFnRegex.test(fnToStr.call(fn))) {
      return true;
    }
    if (!hasToStringTag) {
      var str = toStr.call(fn);
      return str === "[object GeneratorFunction]";
    }
    if (!getProto) {
      return false;
    }
    if (typeof GeneratorFunction === "undefined") {
      var generatorFunc = getGeneratorFunc();
      GeneratorFunction = generatorFunc ? getProto(generatorFunc) : false;
    }
    return getProto(fn) === GeneratorFunction;
  };
  return exports$a2;
}
function dew$82() {
  if (_dewExec$82) return exports$92;
  _dewExec$82 = true;
  var fnToStr = Function.prototype.toString;
  var reflectApply = typeof Reflect === "object" && Reflect !== null && Reflect.apply;
  var badArrayLike;
  var isCallableMarker;
  if (typeof reflectApply === "function" && typeof Object.defineProperty === "function") {
    try {
      badArrayLike = Object.defineProperty({}, "length", {
        get: function() {
          throw isCallableMarker;
        }
      });
      isCallableMarker = {};
      reflectApply(function() {
        throw 42;
      }, null, badArrayLike);
    } catch (_) {
      if (_ !== isCallableMarker) {
        reflectApply = null;
      }
    }
  } else {
    reflectApply = null;
  }
  var constructorRegex = /^\s*class\b/;
  var isES6ClassFn = function isES6ClassFunction(value) {
    try {
      var fnStr = fnToStr.call(value);
      return constructorRegex.test(fnStr);
    } catch (e) {
      return false;
    }
  };
  var tryFunctionObject = function tryFunctionToStr(value) {
    try {
      if (isES6ClassFn(value)) {
        return false;
      }
      fnToStr.call(value);
      return true;
    } catch (e) {
      return false;
    }
  };
  var toStr = Object.prototype.toString;
  var objectClass = "[object Object]";
  var fnClass = "[object Function]";
  var genClass = "[object GeneratorFunction]";
  var ddaClass = "[object HTMLAllCollection]";
  var ddaClass2 = "[object HTML document.all class]";
  var ddaClass3 = "[object HTMLCollection]";
  var hasToStringTag = typeof Symbol === "function" && !!Symbol.toStringTag;
  var isIE68 = !(0 in [,]);
  var isDDA = function isDocumentDotAll() {
    return false;
  };
  if (typeof document === "object") {
    var all = document.all;
    if (toStr.call(all) === toStr.call(document.all)) {
      isDDA = function isDocumentDotAll(value) {
        if ((isIE68 || !value) && (typeof value === "undefined" || typeof value === "object")) {
          try {
            var str = toStr.call(value);
            return (str === ddaClass || str === ddaClass2 || str === ddaClass3 || str === objectClass) && value("") == null;
          } catch (e) {
          }
        }
        return false;
      };
    }
  }
  exports$92 = reflectApply ? function isCallable(value) {
    if (isDDA(value)) {
      return true;
    }
    if (!value) {
      return false;
    }
    if (typeof value !== "function" && typeof value !== "object") {
      return false;
    }
    try {
      reflectApply(value, null, badArrayLike);
    } catch (e) {
      if (e !== isCallableMarker) {
        return false;
      }
    }
    return !isES6ClassFn(value) && tryFunctionObject(value);
  } : function isCallable(value) {
    if (isDDA(value)) {
      return true;
    }
    if (!value) {
      return false;
    }
    if (typeof value !== "function" && typeof value !== "object") {
      return false;
    }
    if (hasToStringTag) {
      return tryFunctionObject(value);
    }
    if (isES6ClassFn(value)) {
      return false;
    }
    var strClass = toStr.call(value);
    if (strClass !== fnClass && strClass !== genClass && !/^\[object HTML/.test(strClass)) {
      return false;
    }
    return tryFunctionObject(value);
  };
  return exports$92;
}
function dew$72() {
  if (_dewExec$72) return exports$82;
  _dewExec$72 = true;
  var isCallable = dew$82();
  var toStr = Object.prototype.toString;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var forEachArray = function forEachArray2(array, iterator, receiver) {
    for (var i = 0, len = array.length; i < len; i++) {
      if (hasOwnProperty.call(array, i)) {
        if (receiver == null) {
          iterator(array[i], i, array);
        } else {
          iterator.call(receiver, array[i], i, array);
        }
      }
    }
  };
  var forEachString = function forEachString2(string, iterator, receiver) {
    for (var i = 0, len = string.length; i < len; i++) {
      if (receiver == null) {
        iterator(string.charAt(i), i, string);
      } else {
        iterator.call(receiver, string.charAt(i), i, string);
      }
    }
  };
  var forEachObject = function forEachObject2(object, iterator, receiver) {
    for (var k in object) {
      if (hasOwnProperty.call(object, k)) {
        if (receiver == null) {
          iterator(object[k], k, object);
        } else {
          iterator.call(receiver, object[k], k, object);
        }
      }
    }
  };
  var forEach = function forEach2(list, iterator, thisArg) {
    if (!isCallable(iterator)) {
      throw new TypeError("iterator must be a function");
    }
    var receiver;
    if (arguments.length >= 3) {
      receiver = thisArg;
    }
    if (toStr.call(list) === "[object Array]") {
      forEachArray(list, iterator, receiver);
    } else if (typeof list === "string") {
      forEachString(list, iterator, receiver);
    } else {
      forEachObject(list, iterator, receiver);
    }
  };
  exports$82 = forEach;
  return exports$82;
}
function dew$62() {
  if (_dewExec$62) return exports$72;
  _dewExec$62 = true;
  exports$72 = ["Float32Array", "Float64Array", "Int8Array", "Int16Array", "Int32Array", "Uint8Array", "Uint8ClampedArray", "Uint16Array", "Uint32Array", "BigInt64Array", "BigUint64Array"];
  return exports$72;
}
function dew$52() {
  if (_dewExec$52) return exports$62;
  _dewExec$52 = true;
  var possibleNames = dew$62();
  var g = typeof globalThis === "undefined" ? _global$2 : globalThis;
  exports$62 = function availableTypedArrays() {
    var out = [];
    for (var i = 0; i < possibleNames.length; i++) {
      if (typeof g[possibleNames[i]] === "function") {
        out[out.length] = possibleNames[i];
      }
    }
    return out;
  };
  return exports$62;
}
function dew$42() {
  if (_dewExec$42) return exports$52;
  _dewExec$42 = true;
  var forEach = dew$72();
  var availableTypedArrays = dew$52();
  var callBind = dew$13();
  var callBound = dew3();
  var gOPD = dew$5();
  var $toString = callBound("Object.prototype.toString");
  var hasToStringTag = dew$b2()();
  var g = typeof globalThis === "undefined" ? _global$1 : globalThis;
  var typedArrays = availableTypedArrays();
  var $slice = callBound("String.prototype.slice");
  var getPrototypeOf = Object.getPrototypeOf;
  var $indexOf = callBound("Array.prototype.indexOf", true) || function indexOf(array, value) {
    for (var i = 0; i < array.length; i += 1) {
      if (array[i] === value) {
        return i;
      }
    }
    return -1;
  };
  var cache = {
    __proto__: null
  };
  if (hasToStringTag && gOPD && getPrototypeOf) {
    forEach(typedArrays, function(typedArray) {
      var arr = new g[typedArray]();
      if (Symbol.toStringTag in arr) {
        var proto = getPrototypeOf(arr);
        var descriptor = gOPD(proto, Symbol.toStringTag);
        if (!descriptor) {
          var superProto = getPrototypeOf(proto);
          descriptor = gOPD(superProto, Symbol.toStringTag);
        }
        cache["$" + typedArray] = callBind(descriptor.get);
      }
    });
  } else {
    forEach(typedArrays, function(typedArray) {
      var arr = new g[typedArray]();
      var fn = arr.slice || arr.set;
      if (fn) {
        cache["$" + typedArray] = callBind(fn);
      }
    });
  }
  var tryTypedArrays = function tryAllTypedArrays(value) {
    var found = false;
    forEach(
      // eslint-disable-next-line no-extra-parens
      /** @type {Record<`\$${TypedArrayName}`, Getter>} */
      /** @type {any} */
      cache,
      /** @type {(getter: Getter, name: `\$${import('.').TypedArrayName}`) => void} */
      function(getter, typedArray) {
        if (!found) {
          try {
            if ("$" + getter(value) === typedArray) {
              found = $slice(typedArray, 1);
            }
          } catch (e) {
          }
        }
      }
    );
    return found;
  };
  var trySlices = function tryAllSlices(value) {
    var found = false;
    forEach(
      // eslint-disable-next-line no-extra-parens
      /** @type {Record<`\$${TypedArrayName}`, Getter>} */
      /** @type {any} */
      cache,
      /** @type {(getter: typeof cache, name: `\$${import('.').TypedArrayName}`) => void} */
      function(getter, name) {
        if (!found) {
          try {
            getter(value);
            found = $slice(name, 1);
          } catch (e) {
          }
        }
      }
    );
    return found;
  };
  exports$52 = function whichTypedArray(value) {
    if (!value || typeof value !== "object") {
      return false;
    }
    if (!hasToStringTag) {
      var tag = $slice($toString(value), 8, -1);
      if ($indexOf(typedArrays, tag) > -1) {
        return tag;
      }
      if (tag !== "Object") {
        return false;
      }
      return trySlices(value);
    }
    if (!gOPD) {
      return null;
    }
    return tryTypedArrays(value);
  };
  return exports$52;
}
function dew$32() {
  if (_dewExec$32) return exports$42;
  _dewExec$32 = true;
  var whichTypedArray = dew$42();
  exports$42 = function isTypedArray(value) {
    return !!whichTypedArray(value);
  };
  return exports$42;
}
function dew$23() {
  if (_dewExec$23) return exports$32;
  _dewExec$23 = true;
  var isArgumentsObject = dew$a2();
  var isGeneratorFunction = dew$92();
  var whichTypedArray = dew$42();
  var isTypedArray = dew$32();
  function uncurryThis(f) {
    return f.call.bind(f);
  }
  var BigIntSupported = typeof BigInt !== "undefined";
  var SymbolSupported = typeof Symbol !== "undefined";
  var ObjectToString = uncurryThis(Object.prototype.toString);
  var numberValue = uncurryThis(Number.prototype.valueOf);
  var stringValue = uncurryThis(String.prototype.valueOf);
  var booleanValue = uncurryThis(Boolean.prototype.valueOf);
  if (BigIntSupported) {
    var bigIntValue = uncurryThis(BigInt.prototype.valueOf);
  }
  if (SymbolSupported) {
    var symbolValue = uncurryThis(Symbol.prototype.valueOf);
  }
  function checkBoxedPrimitive(value, prototypeValueOf) {
    if (typeof value !== "object") {
      return false;
    }
    try {
      prototypeValueOf(value);
      return true;
    } catch (e) {
      return false;
    }
  }
  exports$32.isArgumentsObject = isArgumentsObject;
  exports$32.isGeneratorFunction = isGeneratorFunction;
  exports$32.isTypedArray = isTypedArray;
  function isPromise(input) {
    return typeof Promise !== "undefined" && input instanceof Promise || input !== null && typeof input === "object" && typeof input.then === "function" && typeof input.catch === "function";
  }
  exports$32.isPromise = isPromise;
  function isArrayBufferView(value) {
    if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
      return ArrayBuffer.isView(value);
    }
    return isTypedArray(value) || isDataView(value);
  }
  exports$32.isArrayBufferView = isArrayBufferView;
  function isUint8Array(value) {
    return whichTypedArray(value) === "Uint8Array";
  }
  exports$32.isUint8Array = isUint8Array;
  function isUint8ClampedArray(value) {
    return whichTypedArray(value) === "Uint8ClampedArray";
  }
  exports$32.isUint8ClampedArray = isUint8ClampedArray;
  function isUint16Array(value) {
    return whichTypedArray(value) === "Uint16Array";
  }
  exports$32.isUint16Array = isUint16Array;
  function isUint32Array(value) {
    return whichTypedArray(value) === "Uint32Array";
  }
  exports$32.isUint32Array = isUint32Array;
  function isInt8Array(value) {
    return whichTypedArray(value) === "Int8Array";
  }
  exports$32.isInt8Array = isInt8Array;
  function isInt16Array(value) {
    return whichTypedArray(value) === "Int16Array";
  }
  exports$32.isInt16Array = isInt16Array;
  function isInt32Array(value) {
    return whichTypedArray(value) === "Int32Array";
  }
  exports$32.isInt32Array = isInt32Array;
  function isFloat32Array(value) {
    return whichTypedArray(value) === "Float32Array";
  }
  exports$32.isFloat32Array = isFloat32Array;
  function isFloat64Array(value) {
    return whichTypedArray(value) === "Float64Array";
  }
  exports$32.isFloat64Array = isFloat64Array;
  function isBigInt64Array(value) {
    return whichTypedArray(value) === "BigInt64Array";
  }
  exports$32.isBigInt64Array = isBigInt64Array;
  function isBigUint64Array(value) {
    return whichTypedArray(value) === "BigUint64Array";
  }
  exports$32.isBigUint64Array = isBigUint64Array;
  function isMapToString(value) {
    return ObjectToString(value) === "[object Map]";
  }
  isMapToString.working = typeof Map !== "undefined" && isMapToString(/* @__PURE__ */ new Map());
  function isMap(value) {
    if (typeof Map === "undefined") {
      return false;
    }
    return isMapToString.working ? isMapToString(value) : value instanceof Map;
  }
  exports$32.isMap = isMap;
  function isSetToString(value) {
    return ObjectToString(value) === "[object Set]";
  }
  isSetToString.working = typeof Set !== "undefined" && isSetToString(/* @__PURE__ */ new Set());
  function isSet(value) {
    if (typeof Set === "undefined") {
      return false;
    }
    return isSetToString.working ? isSetToString(value) : value instanceof Set;
  }
  exports$32.isSet = isSet;
  function isWeakMapToString(value) {
    return ObjectToString(value) === "[object WeakMap]";
  }
  isWeakMapToString.working = typeof WeakMap !== "undefined" && isWeakMapToString(/* @__PURE__ */ new WeakMap());
  function isWeakMap(value) {
    if (typeof WeakMap === "undefined") {
      return false;
    }
    return isWeakMapToString.working ? isWeakMapToString(value) : value instanceof WeakMap;
  }
  exports$32.isWeakMap = isWeakMap;
  function isWeakSetToString(value) {
    return ObjectToString(value) === "[object WeakSet]";
  }
  isWeakSetToString.working = typeof WeakSet !== "undefined" && isWeakSetToString(/* @__PURE__ */ new WeakSet());
  function isWeakSet(value) {
    return isWeakSetToString(value);
  }
  exports$32.isWeakSet = isWeakSet;
  function isArrayBufferToString(value) {
    return ObjectToString(value) === "[object ArrayBuffer]";
  }
  isArrayBufferToString.working = typeof ArrayBuffer !== "undefined" && isArrayBufferToString(new ArrayBuffer());
  function isArrayBuffer(value) {
    if (typeof ArrayBuffer === "undefined") {
      return false;
    }
    return isArrayBufferToString.working ? isArrayBufferToString(value) : value instanceof ArrayBuffer;
  }
  exports$32.isArrayBuffer = isArrayBuffer;
  function isDataViewToString(value) {
    return ObjectToString(value) === "[object DataView]";
  }
  isDataViewToString.working = typeof ArrayBuffer !== "undefined" && typeof DataView !== "undefined" && isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1));
  function isDataView(value) {
    if (typeof DataView === "undefined") {
      return false;
    }
    return isDataViewToString.working ? isDataViewToString(value) : value instanceof DataView;
  }
  exports$32.isDataView = isDataView;
  var SharedArrayBufferCopy = typeof SharedArrayBuffer !== "undefined" ? SharedArrayBuffer : void 0;
  function isSharedArrayBufferToString(value) {
    return ObjectToString(value) === "[object SharedArrayBuffer]";
  }
  function isSharedArrayBuffer(value) {
    if (typeof SharedArrayBufferCopy === "undefined") {
      return false;
    }
    if (typeof isSharedArrayBufferToString.working === "undefined") {
      isSharedArrayBufferToString.working = isSharedArrayBufferToString(new SharedArrayBufferCopy());
    }
    return isSharedArrayBufferToString.working ? isSharedArrayBufferToString(value) : value instanceof SharedArrayBufferCopy;
  }
  exports$32.isSharedArrayBuffer = isSharedArrayBuffer;
  function isAsyncFunction(value) {
    return ObjectToString(value) === "[object AsyncFunction]";
  }
  exports$32.isAsyncFunction = isAsyncFunction;
  function isMapIterator(value) {
    return ObjectToString(value) === "[object Map Iterator]";
  }
  exports$32.isMapIterator = isMapIterator;
  function isSetIterator(value) {
    return ObjectToString(value) === "[object Set Iterator]";
  }
  exports$32.isSetIterator = isSetIterator;
  function isGeneratorObject(value) {
    return ObjectToString(value) === "[object Generator]";
  }
  exports$32.isGeneratorObject = isGeneratorObject;
  function isWebAssemblyCompiledModule(value) {
    return ObjectToString(value) === "[object WebAssembly.Module]";
  }
  exports$32.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;
  function isNumberObject(value) {
    return checkBoxedPrimitive(value, numberValue);
  }
  exports$32.isNumberObject = isNumberObject;
  function isStringObject(value) {
    return checkBoxedPrimitive(value, stringValue);
  }
  exports$32.isStringObject = isStringObject;
  function isBooleanObject(value) {
    return checkBoxedPrimitive(value, booleanValue);
  }
  exports$32.isBooleanObject = isBooleanObject;
  function isBigIntObject(value) {
    return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);
  }
  exports$32.isBigIntObject = isBigIntObject;
  function isSymbolObject(value) {
    return SymbolSupported && checkBoxedPrimitive(value, symbolValue);
  }
  exports$32.isSymbolObject = isSymbolObject;
  function isBoxedPrimitive(value) {
    return isNumberObject(value) || isStringObject(value) || isBooleanObject(value) || isBigIntObject(value) || isSymbolObject(value);
  }
  exports$32.isBoxedPrimitive = isBoxedPrimitive;
  function isAnyArrayBuffer(value) {
    return typeof Uint8Array !== "undefined" && (isArrayBuffer(value) || isSharedArrayBuffer(value));
  }
  exports$32.isAnyArrayBuffer = isAnyArrayBuffer;
  ["isProxy", "isExternal", "isModuleNamespaceObject"].forEach(function(method) {
    Object.defineProperty(exports$32, method, {
      enumerable: false,
      value: function() {
        throw new Error(method + " is not supported in userland");
      }
    });
  });
  return exports$32;
}
function dew$14() {
  if (_dewExec$14) return exports$24;
  _dewExec$14 = true;
  exports$24 = function isBuffer2(arg) {
    return arg && typeof arg === "object" && typeof arg.copy === "function" && typeof arg.fill === "function" && typeof arg.readUInt8 === "function";
  };
  return exports$24;
}
function dew5() {
  if (_dewExec5) return exports$14;
  _dewExec5 = true;
  var process$1 = process3;
  var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors2(obj) {
    var keys = Object.keys(obj);
    var descriptors = {};
    for (var i = 0; i < keys.length; i++) {
      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
    }
    return descriptors;
  };
  var formatRegExp = /%[sdj%]/g;
  exports$14.format = function(f) {
    if (!isString2(f)) {
      var objects = [];
      for (var i = 0; i < arguments.length; i++) {
        objects.push(inspect2(arguments[i]));
      }
      return objects.join(" ");
    }
    var i = 1;
    var args = arguments;
    var len = args.length;
    var str = String(f).replace(formatRegExp, function(x2) {
      if (x2 === "%%") return "%";
      if (i >= len) return x2;
      switch (x2) {
        case "%s":
          return String(args[i++]);
        case "%d":
          return Number(args[i++]);
        case "%j":
          try {
            return JSON.stringify(args[i++]);
          } catch (_) {
            return "[Circular]";
          }
        default:
          return x2;
      }
    });
    for (var x = args[i]; i < len; x = args[++i]) {
      if (isNull2(x) || !isObject2(x)) {
        str += " " + x;
      } else {
        str += " " + inspect2(x);
      }
    }
    return str;
  };
  exports$14.deprecate = function(fn, msg) {
    if (typeof process$1 !== "undefined" && process$1.noDeprecation === true) {
      return fn;
    }
    if (typeof process$1 === "undefined") {
      return function() {
        return exports$14.deprecate(fn, msg).apply(this || _global, arguments);
      };
    }
    var warned = false;
    function deprecated() {
      if (!warned) {
        if (process$1.throwDeprecation) {
          throw new Error(msg);
        } else if (process$1.traceDeprecation) {
          console.trace(msg);
        } else {
          console.error(msg);
        }
        warned = true;
      }
      return fn.apply(this || _global, arguments);
    }
    return deprecated;
  };
  var debugs = {};
  var debugEnvRegex = /^$/;
  if (process$1.env.NODE_DEBUG) {
    var debugEnv = process$1.env.NODE_DEBUG;
    debugEnv = debugEnv.replace(/[|\\{}()[\]^$+?.]/g, "\\$&").replace(/\*/g, ".*").replace(/,/g, "$|^").toUpperCase();
    debugEnvRegex = new RegExp("^" + debugEnv + "$", "i");
  }
  exports$14.debuglog = function(set) {
    set = set.toUpperCase();
    if (!debugs[set]) {
      if (debugEnvRegex.test(set)) {
        var pid2 = process$1.pid;
        debugs[set] = function() {
          var msg = exports$14.format.apply(exports$14, arguments);
          console.error("%s %d: %s", set, pid2, msg);
        };
      } else {
        debugs[set] = function() {
        };
      }
    }
    return debugs[set];
  };
  function inspect2(obj, opts) {
    var ctx = {
      seen: [],
      stylize: stylizeNoColor
    };
    if (arguments.length >= 3) ctx.depth = arguments[2];
    if (arguments.length >= 4) ctx.colors = arguments[3];
    if (isBoolean2(opts)) {
      ctx.showHidden = opts;
    } else if (opts) {
      exports$14._extend(ctx, opts);
    }
    if (isUndefined2(ctx.showHidden)) ctx.showHidden = false;
    if (isUndefined2(ctx.depth)) ctx.depth = 2;
    if (isUndefined2(ctx.colors)) ctx.colors = false;
    if (isUndefined2(ctx.customInspect)) ctx.customInspect = true;
    if (ctx.colors) ctx.stylize = stylizeWithColor;
    return formatValue(ctx, obj, ctx.depth);
  }
  exports$14.inspect = inspect2;
  inspect2.colors = {
    "bold": [1, 22],
    "italic": [3, 23],
    "underline": [4, 24],
    "inverse": [7, 27],
    "white": [37, 39],
    "grey": [90, 39],
    "black": [30, 39],
    "blue": [34, 39],
    "cyan": [36, 39],
    "green": [32, 39],
    "magenta": [35, 39],
    "red": [31, 39],
    "yellow": [33, 39]
  };
  inspect2.styles = {
    "special": "cyan",
    "number": "yellow",
    "boolean": "yellow",
    "undefined": "grey",
    "null": "bold",
    "string": "green",
    "date": "magenta",
    // "name": intentionally not styling
    "regexp": "red"
  };
  function stylizeWithColor(str, styleType) {
    var style = inspect2.styles[styleType];
    if (style) {
      return "\x1B[" + inspect2.colors[style][0] + "m" + str + "\x1B[" + inspect2.colors[style][1] + "m";
    } else {
      return str;
    }
  }
  function stylizeNoColor(str, styleType) {
    return str;
  }
  function arrayToHash(array) {
    var hash = {};
    array.forEach(function(val2, idx) {
      hash[val2] = true;
    });
    return hash;
  }
  function formatValue(ctx, value, recurseTimes) {
    if (ctx.customInspect && value && isFunction2(value.inspect) && // Filter out the util module, it's inspect function is special
    value.inspect !== exports$14.inspect && // Also filter out any prototype objects using the circular check.
    !(value.constructor && value.constructor.prototype === value)) {
      var ret = value.inspect(recurseTimes, ctx);
      if (!isString2(ret)) {
        ret = formatValue(ctx, ret, recurseTimes);
      }
      return ret;
    }
    var primitive = formatPrimitive(ctx, value);
    if (primitive) {
      return primitive;
    }
    var keys = Object.keys(value);
    var visibleKeys = arrayToHash(keys);
    if (ctx.showHidden) {
      keys = Object.getOwnPropertyNames(value);
    }
    if (isError2(value) && (keys.indexOf("message") >= 0 || keys.indexOf("description") >= 0)) {
      return formatError(value);
    }
    if (keys.length === 0) {
      if (isFunction2(value)) {
        var name = value.name ? ": " + value.name : "";
        return ctx.stylize("[Function" + name + "]", "special");
      }
      if (isRegExp2(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
      }
      if (isDate2(value)) {
        return ctx.stylize(Date.prototype.toString.call(value), "date");
      }
      if (isError2(value)) {
        return formatError(value);
      }
    }
    var base = "", array = false, braces = ["{", "}"];
    if (isArray2(value)) {
      array = true;
      braces = ["[", "]"];
    }
    if (isFunction2(value)) {
      var n = value.name ? ": " + value.name : "";
      base = " [Function" + n + "]";
    }
    if (isRegExp2(value)) {
      base = " " + RegExp.prototype.toString.call(value);
    }
    if (isDate2(value)) {
      base = " " + Date.prototype.toUTCString.call(value);
    }
    if (isError2(value)) {
      base = " " + formatError(value);
    }
    if (keys.length === 0 && (!array || value.length == 0)) {
      return braces[0] + base + braces[1];
    }
    if (recurseTimes < 0) {
      if (isRegExp2(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
      } else {
        return ctx.stylize("[Object]", "special");
      }
    }
    ctx.seen.push(value);
    var output;
    if (array) {
      output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
    } else {
      output = keys.map(function(key) {
        return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
      });
    }
    ctx.seen.pop();
    return reduceToSingleString(output, base, braces);
  }
  function formatPrimitive(ctx, value) {
    if (isUndefined2(value)) return ctx.stylize("undefined", "undefined");
    if (isString2(value)) {
      var simple = "'" + JSON.stringify(value).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
      return ctx.stylize(simple, "string");
    }
    if (isNumber2(value)) return ctx.stylize("" + value, "number");
    if (isBoolean2(value)) return ctx.stylize("" + value, "boolean");
    if (isNull2(value)) return ctx.stylize("null", "null");
  }
  function formatError(value) {
    return "[" + Error.prototype.toString.call(value) + "]";
  }
  function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
    var output = [];
    for (var i = 0, l = value.length; i < l; ++i) {
      if (hasOwnProperty(value, String(i))) {
        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
      } else {
        output.push("");
      }
    }
    keys.forEach(function(key) {
      if (!key.match(/^\d+$/)) {
        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
      }
    });
    return output;
  }
  function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
    var name, str, desc;
    desc = Object.getOwnPropertyDescriptor(value, key) || {
      value: value[key]
    };
    if (desc.get) {
      if (desc.set) {
        str = ctx.stylize("[Getter/Setter]", "special");
      } else {
        str = ctx.stylize("[Getter]", "special");
      }
    } else {
      if (desc.set) {
        str = ctx.stylize("[Setter]", "special");
      }
    }
    if (!hasOwnProperty(visibleKeys, key)) {
      name = "[" + key + "]";
    }
    if (!str) {
      if (ctx.seen.indexOf(desc.value) < 0) {
        if (isNull2(recurseTimes)) {
          str = formatValue(ctx, desc.value, null);
        } else {
          str = formatValue(ctx, desc.value, recurseTimes - 1);
        }
        if (str.indexOf("\n") > -1) {
          if (array) {
            str = str.split("\n").map(function(line) {
              return "  " + line;
            }).join("\n").slice(2);
          } else {
            str = "\n" + str.split("\n").map(function(line) {
              return "   " + line;
            }).join("\n");
          }
        }
      } else {
        str = ctx.stylize("[Circular]", "special");
      }
    }
    if (isUndefined2(name)) {
      if (array && key.match(/^\d+$/)) {
        return str;
      }
      name = JSON.stringify("" + key);
      if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
        name = name.slice(1, -1);
        name = ctx.stylize(name, "name");
      } else {
        name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
        name = ctx.stylize(name, "string");
      }
    }
    return name + ": " + str;
  }
  function reduceToSingleString(output, base, braces) {
    var length = output.reduce(function(prev, cur) {
      if (cur.indexOf("\n") >= 0) ;
      return prev + cur.replace(/\u001b\[\d\d?m/g, "").length + 1;
    }, 0);
    if (length > 60) {
      return braces[0] + (base === "" ? "" : base + "\n ") + " " + output.join(",\n  ") + " " + braces[1];
    }
    return braces[0] + base + " " + output.join(", ") + " " + braces[1];
  }
  exports$14.types = dew$23();
  function isArray2(ar) {
    return Array.isArray(ar);
  }
  exports$14.isArray = isArray2;
  function isBoolean2(arg) {
    return typeof arg === "boolean";
  }
  exports$14.isBoolean = isBoolean2;
  function isNull2(arg) {
    return arg === null;
  }
  exports$14.isNull = isNull2;
  function isNullOrUndefined2(arg) {
    return arg == null;
  }
  exports$14.isNullOrUndefined = isNullOrUndefined2;
  function isNumber2(arg) {
    return typeof arg === "number";
  }
  exports$14.isNumber = isNumber2;
  function isString2(arg) {
    return typeof arg === "string";
  }
  exports$14.isString = isString2;
  function isSymbol2(arg) {
    return typeof arg === "symbol";
  }
  exports$14.isSymbol = isSymbol2;
  function isUndefined2(arg) {
    return arg === void 0;
  }
  exports$14.isUndefined = isUndefined2;
  function isRegExp2(re) {
    return isObject2(re) && objectToString(re) === "[object RegExp]";
  }
  exports$14.isRegExp = isRegExp2;
  exports$14.types.isRegExp = isRegExp2;
  function isObject2(arg) {
    return typeof arg === "object" && arg !== null;
  }
  exports$14.isObject = isObject2;
  function isDate2(d) {
    return isObject2(d) && objectToString(d) === "[object Date]";
  }
  exports$14.isDate = isDate2;
  exports$14.types.isDate = isDate2;
  function isError2(e) {
    return isObject2(e) && (objectToString(e) === "[object Error]" || e instanceof Error);
  }
  exports$14.isError = isError2;
  exports$14.types.isNativeError = isError2;
  function isFunction2(arg) {
    return typeof arg === "function";
  }
  exports$14.isFunction = isFunction2;
  function isPrimitive2(arg) {
    return arg === null || typeof arg === "boolean" || typeof arg === "number" || typeof arg === "string" || typeof arg === "symbol" || // ES6 symbol
    typeof arg === "undefined";
  }
  exports$14.isPrimitive = isPrimitive2;
  exports$14.isBuffer = dew$14();
  function objectToString(o) {
    return Object.prototype.toString.call(o);
  }
  function pad(n) {
    return n < 10 ? "0" + n.toString(10) : n.toString(10);
  }
  var months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
  function timestamp() {
    var d = /* @__PURE__ */ new Date();
    var time = [pad(d.getHours()), pad(d.getMinutes()), pad(d.getSeconds())].join(":");
    return [d.getDate(), months[d.getMonth()], time].join(" ");
  }
  exports$14.log = function() {
    console.log("%s - %s", timestamp(), exports$14.format.apply(exports$14, arguments));
  };
  exports$14.inherits = dew4();
  exports$14._extend = function(origin, add) {
    if (!add || !isObject2(add)) return origin;
    var keys = Object.keys(add);
    var i = keys.length;
    while (i--) {
      origin[keys[i]] = add[keys[i]];
    }
    return origin;
  };
  function hasOwnProperty(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  }
  var kCustomPromisifiedSymbol = typeof Symbol !== "undefined" ? Symbol("util.promisify.custom") : void 0;
  exports$14.promisify = function promisify2(original) {
    if (typeof original !== "function") throw new TypeError('The "original" argument must be of type Function');
    if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
      fn = original[kCustomPromisifiedSymbol];
      if (typeof fn !== "function") {
        throw new TypeError('The "util.promisify.custom" argument must be of type Function');
      }
      Object.defineProperty(fn, kCustomPromisifiedSymbol, {
        value: fn,
        enumerable: false,
        writable: false,
        configurable: true
      });
      return fn;
    }
    function fn() {
      var promiseResolve, promiseReject;
      var promise = new Promise(function(resolve, reject) {
        promiseResolve = resolve;
        promiseReject = reject;
      });
      var args = [];
      for (var i = 0; i < arguments.length; i++) {
        args.push(arguments[i]);
      }
      args.push(function(err, value) {
        if (err) {
          promiseReject(err);
        } else {
          promiseResolve(value);
        }
      });
      try {
        original.apply(this || _global, args);
      } catch (err) {
        promiseReject(err);
      }
      return promise;
    }
    Object.setPrototypeOf(fn, Object.getPrototypeOf(original));
    if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
      value: fn,
      enumerable: false,
      writable: false,
      configurable: true
    });
    return Object.defineProperties(fn, getOwnPropertyDescriptors(original));
  };
  exports$14.promisify.custom = kCustomPromisifiedSymbol;
  function callbackifyOnRejected(reason, cb) {
    if (!reason) {
      var newReason = new Error("Promise was rejected with a falsy value");
      newReason.reason = reason;
      reason = newReason;
    }
    return cb(reason);
  }
  function callbackify2(original) {
    if (typeof original !== "function") {
      throw new TypeError('The "original" argument must be of type Function');
    }
    function callbackified() {
      var args = [];
      for (var i = 0; i < arguments.length; i++) {
        args.push(arguments[i]);
      }
      var maybeCb = args.pop();
      if (typeof maybeCb !== "function") {
        throw new TypeError("The last argument must be of type Function");
      }
      var self2 = this || _global;
      var cb = function() {
        return maybeCb.apply(self2, arguments);
      };
      original.apply(this || _global, args).then(function(ret) {
        process$1.nextTick(cb.bind(null, null, ret));
      }, function(rej) {
        process$1.nextTick(callbackifyOnRejected.bind(null, rej, cb));
      });
    }
    Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
    Object.defineProperties(callbackified, getOwnPropertyDescriptors(original));
    return callbackified;
  }
  exports$14.callbackify = callbackify2;
  return exports$14;
}
var exports$c2, _dewExec$b2, exports$b2, _dewExec$a2, exports$a2, _dewExec$92, exports$92, _dewExec$82, exports$82, _dewExec$72, exports$72, _dewExec$62, exports$62, _dewExec$52, _global$2, exports$52, _dewExec$42, _global$1, exports$42, _dewExec$32, exports$32, _dewExec$23, exports$24, _dewExec$14, exports$14, _dewExec5, _global, exports5, _extend, callbackify, debuglog, deprecate, format, inherits2, inspect, isArray, isBoolean, isBuffer, isDate, isError, isFunction, isNull, isNullOrUndefined, isNumber, isObject, isPrimitive, isRegExp, isString, isSymbol, isUndefined, log, promisify, types, TextEncoder, TextDecoder2;
var init_util = __esm({
  "../../../../node_modules/@jspm/core/nodelibs/browser/util.js"() {
    init_dirname();
    init_chunk_DtcTpLWz();
    init_chunk_CkFCi_G1();
    init_chunk_DEMDiNwt();
    exports$c2 = {};
    _dewExec$b2 = false;
    exports$b2 = {};
    _dewExec$a2 = false;
    exports$a2 = {};
    _dewExec$92 = false;
    exports$92 = {};
    _dewExec$82 = false;
    exports$82 = {};
    _dewExec$72 = false;
    exports$72 = {};
    _dewExec$62 = false;
    exports$62 = {};
    _dewExec$52 = false;
    _global$2 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$52 = {};
    _dewExec$42 = false;
    _global$1 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$42 = {};
    _dewExec$32 = false;
    exports$32 = {};
    _dewExec$23 = false;
    exports$24 = {};
    _dewExec$14 = false;
    exports$14 = {};
    _dewExec5 = false;
    _global = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports5 = dew5();
    exports5["format"];
    exports5["deprecate"];
    exports5["debuglog"];
    exports5["inspect"];
    exports5["types"];
    exports5["isArray"];
    exports5["isBoolean"];
    exports5["isNull"];
    exports5["isNullOrUndefined"];
    exports5["isNumber"];
    exports5["isString"];
    exports5["isSymbol"];
    exports5["isUndefined"];
    exports5["isRegExp"];
    exports5["isObject"];
    exports5["isDate"];
    exports5["isError"];
    exports5["isFunction"];
    exports5["isPrimitive"];
    exports5["isBuffer"];
    exports5["log"];
    exports5["inherits"];
    exports5["_extend"];
    exports5["promisify"];
    exports5["callbackify"];
    _extend = exports5._extend;
    callbackify = exports5.callbackify;
    debuglog = exports5.debuglog;
    deprecate = exports5.deprecate;
    format = exports5.format;
    inherits2 = exports5.inherits;
    inspect = exports5.inspect;
    isArray = exports5.isArray;
    isBoolean = exports5.isBoolean;
    isBuffer = exports5.isBuffer;
    isDate = exports5.isDate;
    isError = exports5.isError;
    isFunction = exports5.isFunction;
    isNull = exports5.isNull;
    isNullOrUndefined = exports5.isNullOrUndefined;
    isNumber = exports5.isNumber;
    isObject = exports5.isObject;
    isPrimitive = exports5.isPrimitive;
    isRegExp = exports5.isRegExp;
    isString = exports5.isString;
    isSymbol = exports5.isSymbol;
    isUndefined = exports5.isUndefined;
    log = exports5.log;
    promisify = exports5.promisify;
    types = exports5.types;
    TextEncoder = exports5.TextEncoder = globalThis.TextEncoder;
    TextDecoder2 = exports5.TextDecoder = globalThis.TextDecoder;
  }
});

// node_modules/@aws-sdk/credential-provider-process/dist-cjs/index.js
var require_dist_cjs45 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-process/dist-cjs/index.js"(exports6, module) {
    "use strict";
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      fromProcess: () => fromProcess
    });
    module.exports = __toCommonJS3(src_exports);
    var import_shared_ini_file_loader = require_dist_cjs28();
    var import_property_provider3 = require_dist_cjs20();
    var import_child_process = __require("child_process");
    var import_util = (init_util(), __toCommonJS(util_exports));
    var import_client3 = (init_client(), __toCommonJS(client_exports));
    var getValidatedProcessCredentials = /* @__PURE__ */ __name((profileName, data, profiles) => {
      var _a;
      if (data.Version !== 1) {
        throw Error(`Profile ${profileName} credential_process did not return Version 1.`);
      }
      if (data.AccessKeyId === void 0 || data.SecretAccessKey === void 0) {
        throw Error(`Profile ${profileName} credential_process returned invalid credentials.`);
      }
      if (data.Expiration) {
        const currentTime = /* @__PURE__ */ new Date();
        const expireTime = new Date(data.Expiration);
        if (expireTime < currentTime) {
          throw Error(`Profile ${profileName} credential_process returned expired credentials.`);
        }
      }
      let accountId = data.AccountId;
      if (!accountId && ((_a = profiles == null ? void 0 : profiles[profileName]) == null ? void 0 : _a.aws_account_id)) {
        accountId = profiles[profileName].aws_account_id;
      }
      const credentials = {
        accessKeyId: data.AccessKeyId,
        secretAccessKey: data.SecretAccessKey,
        ...data.SessionToken && { sessionToken: data.SessionToken },
        ...data.Expiration && { expiration: new Date(data.Expiration) },
        ...data.CredentialScope && { credentialScope: data.CredentialScope },
        ...accountId && { accountId }
      };
      (0, import_client3.setCredentialFeature)(credentials, "CREDENTIALS_PROCESS", "w");
      return credentials;
    }, "getValidatedProcessCredentials");
    var resolveProcessCredentials = /* @__PURE__ */ __name(async (profileName, profiles, logger) => {
      const profile = profiles[profileName];
      if (profiles[profileName]) {
        const credentialProcess = profile["credential_process"];
        if (credentialProcess !== void 0) {
          const execPromise = (0, import_util.promisify)(import_child_process.exec);
          try {
            const { stdout: stdout2 } = await execPromise(credentialProcess);
            let data;
            try {
              data = JSON.parse(stdout2.trim());
            } catch {
              throw Error(`Profile ${profileName} credential_process returned invalid JSON.`);
            }
            return getValidatedProcessCredentials(profileName, data, profiles);
          } catch (error) {
            throw new import_property_provider3.CredentialsProviderError(error.message, { logger });
          }
        } else {
          throw new import_property_provider3.CredentialsProviderError(`Profile ${profileName} did not contain credential_process.`, { logger });
        }
      } else {
        throw new import_property_provider3.CredentialsProviderError(`Profile ${profileName} could not be found in shared credentials file.`, {
          logger
        });
      }
    }, "resolveProcessCredentials");
    var fromProcess = /* @__PURE__ */ __name((init = {}) => async () => {
      var _a;
      (_a = init.logger) == null ? void 0 : _a.debug("@aws-sdk/credential-provider-process - fromProcess");
      const profiles = await (0, import_shared_ini_file_loader.parseKnownFiles)(init);
      return resolveProcessCredentials((0, import_shared_ini_file_loader.getProfileName)(init), profiles, init.logger);
    }, "fromProcess");
  }
});

// node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromWebToken.js
var require_fromWebToken = __commonJS({
  "node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromWebToken.js"(exports6) {
    "use strict";
    init_dirname();
    var __createBinding2 = exports6 && exports6.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports6 && exports6.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports6 && exports6.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding2(result, mod, k);
      }
      __setModuleDefault2(result, mod);
      return result;
    };
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.fromWebToken = void 0;
    var fromWebToken2 = (init) => async () => {
      init.logger?.debug("@aws-sdk/credential-provider-web-identity - fromWebToken");
      const { roleArn, roleSessionName, webIdentityToken, providerId, policyArns, policy, durationSeconds } = init;
      let { roleAssumerWithWebIdentity } = init;
      if (!roleAssumerWithWebIdentity) {
        const { getDefaultRoleAssumerWithWebIdentity } = await Promise.resolve().then(() => __importStar2(require_dist_cjs44()));
        roleAssumerWithWebIdentity = getDefaultRoleAssumerWithWebIdentity({
          ...init.clientConfig,
          credentialProviderLogger: init.logger,
          parentClientConfig: init.parentClientConfig
        }, init.clientPlugins);
      }
      return roleAssumerWithWebIdentity({
        RoleArn: roleArn,
        RoleSessionName: roleSessionName ?? `aws-sdk-js-session-${Date.now()}`,
        WebIdentityToken: webIdentityToken,
        ProviderId: providerId,
        PolicyArns: policyArns,
        Policy: policy,
        DurationSeconds: durationSeconds
      });
    };
    exports6.fromWebToken = fromWebToken2;
  }
});

// node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromTokenFile.js
var require_fromTokenFile = __commonJS({
  "node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromTokenFile.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.fromTokenFile = void 0;
    var client_1 = (init_client(), __toCommonJS(client_exports));
    var property_provider_1 = require_dist_cjs20();
    var fs_1 = __require("fs");
    var fromWebToken_1 = require_fromWebToken();
    var ENV_TOKEN_FILE = "AWS_WEB_IDENTITY_TOKEN_FILE";
    var ENV_ROLE_ARN = "AWS_ROLE_ARN";
    var ENV_ROLE_SESSION_NAME = "AWS_ROLE_SESSION_NAME";
    var fromTokenFile2 = (init = {}) => async () => {
      init.logger?.debug("@aws-sdk/credential-provider-web-identity - fromTokenFile");
      const webIdentityTokenFile = init?.webIdentityTokenFile ?? process.env[ENV_TOKEN_FILE];
      const roleArn = init?.roleArn ?? process.env[ENV_ROLE_ARN];
      const roleSessionName = init?.roleSessionName ?? process.env[ENV_ROLE_SESSION_NAME];
      if (!webIdentityTokenFile || !roleArn) {
        throw new property_provider_1.CredentialsProviderError("Web identity configuration not specified", {
          logger: init.logger
        });
      }
      const credentials = await (0, fromWebToken_1.fromWebToken)({
        ...init,
        webIdentityToken: (0, fs_1.readFileSync)(webIdentityTokenFile, { encoding: "ascii" }),
        roleArn,
        roleSessionName
      })();
      if (webIdentityTokenFile === process.env[ENV_TOKEN_FILE]) {
        (0, client_1.setCredentialFeature)(credentials, "CREDENTIALS_ENV_VARS_STS_WEB_ID_TOKEN", "h");
      }
      return credentials;
    };
    exports6.fromTokenFile = fromTokenFile2;
  }
});

// node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/index.js
var require_dist_cjs46 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/index.js"(exports6, module) {
    "use strict";
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __reExport = (target, mod, secondTarget) => (__copyProps3(target, mod, "default"), secondTarget && __copyProps3(secondTarget, mod, "default"));
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    module.exports = __toCommonJS3(src_exports);
    __reExport(src_exports, require_fromTokenFile(), module.exports);
    __reExport(src_exports, require_fromWebToken(), module.exports);
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/index.js
var require_dist_cjs47 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-ini/dist-cjs/index.js"(exports6, module) {
    "use strict";
    init_dirname();
    var __create3 = Object.create;
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __getProtoOf3 = Object.getPrototypeOf;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM3 = (mod, isNodeMode, target) => (target = mod != null ? __create3(__getProtoOf3(mod)) : {}, __copyProps3(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp3(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      fromIni: () => fromIni
    });
    module.exports = __toCommonJS3(src_exports);
    var import_shared_ini_file_loader = require_dist_cjs28();
    var import_client3 = (init_client(), __toCommonJS(client_exports));
    var import_property_provider3 = require_dist_cjs20();
    var resolveCredentialSource = /* @__PURE__ */ __name((credentialSource, profileName, logger) => {
      const sourceProvidersMap = {
        EcsContainer: async (options) => {
          const { fromHttp } = await Promise.resolve().then(() => __toESM3(__require("@aws-sdk/credential-provider-http")));
          const { fromContainerMetadata } = await Promise.resolve().then(() => __toESM3(require_dist_cjs39()));
          logger == null ? void 0 : logger.debug("@aws-sdk/credential-provider-ini - credential_source is EcsContainer");
          return async () => (0, import_property_provider3.chain)(fromHttp(options ?? {}), fromContainerMetadata(options))().then(setNamedProvider);
        },
        Ec2InstanceMetadata: async (options) => {
          logger == null ? void 0 : logger.debug("@aws-sdk/credential-provider-ini - credential_source is Ec2InstanceMetadata");
          const { fromInstanceMetadata } = await Promise.resolve().then(() => __toESM3(require_dist_cjs39()));
          return async () => fromInstanceMetadata(options)().then(setNamedProvider);
        },
        Environment: async (options) => {
          logger == null ? void 0 : logger.debug("@aws-sdk/credential-provider-ini - credential_source is Environment");
          const { fromEnv } = await Promise.resolve().then(() => __toESM3(require_dist_cjs43()));
          return async () => fromEnv(options)().then(setNamedProvider);
        }
      };
      if (credentialSource in sourceProvidersMap) {
        return sourceProvidersMap[credentialSource];
      } else {
        throw new import_property_provider3.CredentialsProviderError(
          `Unsupported credential source in profile ${profileName}. Got ${credentialSource}, expected EcsContainer or Ec2InstanceMetadata or Environment.`,
          { logger }
        );
      }
    }, "resolveCredentialSource");
    var setNamedProvider = /* @__PURE__ */ __name((creds) => (0, import_client3.setCredentialFeature)(creds, "CREDENTIALS_PROFILE_NAMED_PROVIDER", "p"), "setNamedProvider");
    var isAssumeRoleProfile = /* @__PURE__ */ __name((arg, { profile = "default", logger } = {}) => {
      return Boolean(arg) && typeof arg === "object" && typeof arg.role_arn === "string" && ["undefined", "string"].indexOf(typeof arg.role_session_name) > -1 && ["undefined", "string"].indexOf(typeof arg.external_id) > -1 && ["undefined", "string"].indexOf(typeof arg.mfa_serial) > -1 && (isAssumeRoleWithSourceProfile(arg, { profile, logger }) || isCredentialSourceProfile(arg, { profile, logger }));
    }, "isAssumeRoleProfile");
    var isAssumeRoleWithSourceProfile = /* @__PURE__ */ __name((arg, { profile, logger }) => {
      var _a;
      const withSourceProfile = typeof arg.source_profile === "string" && typeof arg.credential_source === "undefined";
      if (withSourceProfile) {
        (_a = logger == null ? void 0 : logger.debug) == null ? void 0 : _a.call(logger, `    ${profile} isAssumeRoleWithSourceProfile source_profile=${arg.source_profile}`);
      }
      return withSourceProfile;
    }, "isAssumeRoleWithSourceProfile");
    var isCredentialSourceProfile = /* @__PURE__ */ __name((arg, { profile, logger }) => {
      var _a;
      const withProviderProfile = typeof arg.credential_source === "string" && typeof arg.source_profile === "undefined";
      if (withProviderProfile) {
        (_a = logger == null ? void 0 : logger.debug) == null ? void 0 : _a.call(logger, `    ${profile} isCredentialSourceProfile credential_source=${arg.credential_source}`);
      }
      return withProviderProfile;
    }, "isCredentialSourceProfile");
    var resolveAssumeRoleCredentials = /* @__PURE__ */ __name(async (profileName, profiles, options, visitedProfiles = {}) => {
      var _a, _b;
      (_a = options.logger) == null ? void 0 : _a.debug("@aws-sdk/credential-provider-ini - resolveAssumeRoleCredentials (STS)");
      const data = profiles[profileName];
      if (!options.roleAssumer) {
        const { getDefaultRoleAssumer } = await Promise.resolve().then(() => __toESM3(require_dist_cjs44()));
        options.roleAssumer = getDefaultRoleAssumer(
          {
            ...options.clientConfig,
            credentialProviderLogger: options.logger,
            parentClientConfig: options == null ? void 0 : options.parentClientConfig
          },
          options.clientPlugins
        );
      }
      const { source_profile } = data;
      if (source_profile && source_profile in visitedProfiles) {
        throw new import_property_provider3.CredentialsProviderError(
          `Detected a cycle attempting to resolve credentials for profile ${(0, import_shared_ini_file_loader.getProfileName)(options)}. Profiles visited: ` + Object.keys(visitedProfiles).join(", "),
          { logger: options.logger }
        );
      }
      (_b = options.logger) == null ? void 0 : _b.debug(
        `@aws-sdk/credential-provider-ini - finding credential resolver using ${source_profile ? `source_profile=[${source_profile}]` : `profile=[${profileName}]`}`
      );
      const sourceCredsProvider = source_profile ? resolveProfileData(
        source_profile,
        profiles,
        options,
        {
          ...visitedProfiles,
          [source_profile]: true
        },
        isCredentialSourceWithoutRoleArn(profiles[source_profile] ?? {})
      ) : (await resolveCredentialSource(data.credential_source, profileName, options.logger)(options))();
      if (isCredentialSourceWithoutRoleArn(data)) {
        return sourceCredsProvider.then((creds) => (0, import_client3.setCredentialFeature)(creds, "CREDENTIALS_PROFILE_SOURCE_PROFILE", "o"));
      } else {
        const params = {
          RoleArn: data.role_arn,
          RoleSessionName: data.role_session_name || `aws-sdk-js-${Date.now()}`,
          ExternalId: data.external_id,
          DurationSeconds: parseInt(data.duration_seconds || "3600", 10)
        };
        const { mfa_serial } = data;
        if (mfa_serial) {
          if (!options.mfaCodeProvider) {
            throw new import_property_provider3.CredentialsProviderError(
              `Profile ${profileName} requires multi-factor authentication, but no MFA code callback was provided.`,
              { logger: options.logger, tryNextLink: false }
            );
          }
          params.SerialNumber = mfa_serial;
          params.TokenCode = await options.mfaCodeProvider(mfa_serial);
        }
        const sourceCreds = await sourceCredsProvider;
        return options.roleAssumer(sourceCreds, params).then(
          (creds) => (0, import_client3.setCredentialFeature)(creds, "CREDENTIALS_PROFILE_SOURCE_PROFILE", "o")
        );
      }
    }, "resolveAssumeRoleCredentials");
    var isCredentialSourceWithoutRoleArn = /* @__PURE__ */ __name((section) => {
      return !section.role_arn && !!section.credential_source;
    }, "isCredentialSourceWithoutRoleArn");
    var isProcessProfile = /* @__PURE__ */ __name((arg) => Boolean(arg) && typeof arg === "object" && typeof arg.credential_process === "string", "isProcessProfile");
    var resolveProcessCredentials = /* @__PURE__ */ __name(async (options, profile) => Promise.resolve().then(() => __toESM3(require_dist_cjs45())).then(
      ({ fromProcess }) => fromProcess({
        ...options,
        profile
      })().then((creds) => (0, import_client3.setCredentialFeature)(creds, "CREDENTIALS_PROFILE_PROCESS", "v"))
    ), "resolveProcessCredentials");
    var resolveSsoCredentials = /* @__PURE__ */ __name(async (profile, profileData, options = {}) => {
      const { fromSSO: fromSSO2 } = await Promise.resolve().then(() => __toESM3(require_dist_cjs51()));
      return fromSSO2({
        profile,
        logger: options.logger,
        parentClientConfig: options.parentClientConfig,
        clientConfig: options.clientConfig
      })().then((creds) => {
        if (profileData.sso_session) {
          return (0, import_client3.setCredentialFeature)(creds, "CREDENTIALS_PROFILE_SSO", "r");
        } else {
          return (0, import_client3.setCredentialFeature)(creds, "CREDENTIALS_PROFILE_SSO_LEGACY", "t");
        }
      });
    }, "resolveSsoCredentials");
    var isSsoProfile = /* @__PURE__ */ __name((arg) => arg && (typeof arg.sso_start_url === "string" || typeof arg.sso_account_id === "string" || typeof arg.sso_session === "string" || typeof arg.sso_region === "string" || typeof arg.sso_role_name === "string"), "isSsoProfile");
    var isStaticCredsProfile = /* @__PURE__ */ __name((arg) => Boolean(arg) && typeof arg === "object" && typeof arg.aws_access_key_id === "string" && typeof arg.aws_secret_access_key === "string" && ["undefined", "string"].indexOf(typeof arg.aws_session_token) > -1 && ["undefined", "string"].indexOf(typeof arg.aws_account_id) > -1, "isStaticCredsProfile");
    var resolveStaticCredentials = /* @__PURE__ */ __name(async (profile, options) => {
      var _a;
      (_a = options == null ? void 0 : options.logger) == null ? void 0 : _a.debug("@aws-sdk/credential-provider-ini - resolveStaticCredentials");
      const credentials = {
        accessKeyId: profile.aws_access_key_id,
        secretAccessKey: profile.aws_secret_access_key,
        sessionToken: profile.aws_session_token,
        ...profile.aws_credential_scope && { credentialScope: profile.aws_credential_scope },
        ...profile.aws_account_id && { accountId: profile.aws_account_id }
      };
      return (0, import_client3.setCredentialFeature)(credentials, "CREDENTIALS_PROFILE", "n");
    }, "resolveStaticCredentials");
    var isWebIdentityProfile = /* @__PURE__ */ __name((arg) => Boolean(arg) && typeof arg === "object" && typeof arg.web_identity_token_file === "string" && typeof arg.role_arn === "string" && ["undefined", "string"].indexOf(typeof arg.role_session_name) > -1, "isWebIdentityProfile");
    var resolveWebIdentityCredentials = /* @__PURE__ */ __name(async (profile, options) => Promise.resolve().then(() => __toESM3(require_dist_cjs46())).then(
      ({ fromTokenFile: fromTokenFile2 }) => fromTokenFile2({
        webIdentityTokenFile: profile.web_identity_token_file,
        roleArn: profile.role_arn,
        roleSessionName: profile.role_session_name,
        roleAssumerWithWebIdentity: options.roleAssumerWithWebIdentity,
        logger: options.logger,
        parentClientConfig: options.parentClientConfig
      })().then((creds) => (0, import_client3.setCredentialFeature)(creds, "CREDENTIALS_PROFILE_STS_WEB_ID_TOKEN", "q"))
    ), "resolveWebIdentityCredentials");
    var resolveProfileData = /* @__PURE__ */ __name(async (profileName, profiles, options, visitedProfiles = {}, isAssumeRoleRecursiveCall = false) => {
      const data = profiles[profileName];
      if (Object.keys(visitedProfiles).length > 0 && isStaticCredsProfile(data)) {
        return resolveStaticCredentials(data, options);
      }
      if (isAssumeRoleRecursiveCall || isAssumeRoleProfile(data, { profile: profileName, logger: options.logger })) {
        return resolveAssumeRoleCredentials(profileName, profiles, options, visitedProfiles);
      }
      if (isStaticCredsProfile(data)) {
        return resolveStaticCredentials(data, options);
      }
      if (isWebIdentityProfile(data)) {
        return resolveWebIdentityCredentials(data, options);
      }
      if (isProcessProfile(data)) {
        return resolveProcessCredentials(options, profileName);
      }
      if (isSsoProfile(data)) {
        return await resolveSsoCredentials(profileName, data, options);
      }
      throw new import_property_provider3.CredentialsProviderError(
        `Could not resolve credentials using profile: [${profileName}] in configuration/credentials file(s).`,
        { logger: options.logger }
      );
    }, "resolveProfileData");
    var fromIni = /* @__PURE__ */ __name((init = {}) => async () => {
      var _a;
      (_a = init.logger) == null ? void 0 : _a.debug("@aws-sdk/credential-provider-ini - fromIni");
      const profiles = await (0, import_shared_ini_file_loader.parseKnownFiles)(init);
      return resolveProfileData((0, import_shared_ini_file_loader.getProfileName)(init), profiles, init);
    }, "fromIni");
  }
});

// node_modules/@aws-sdk/credential-provider-node/dist-cjs/index.js
var require_dist_cjs48 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-node/dist-cjs/index.js"(exports6, module) {
    "use strict";
    init_dirname();
    var __create3 = Object.create;
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __getProtoOf3 = Object.getPrototypeOf;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM3 = (mod, isNodeMode, target) => (target = mod != null ? __create3(__getProtoOf3(mod)) : {}, __copyProps3(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp3(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      credentialsTreatedAsExpired: () => credentialsTreatedAsExpired,
      credentialsWillNeedRefresh: () => credentialsWillNeedRefresh,
      defaultProvider: () => defaultProvider
    });
    module.exports = __toCommonJS3(src_exports);
    var import_credential_provider_env = require_dist_cjs43();
    var import_shared_ini_file_loader = require_dist_cjs28();
    var import_property_provider3 = require_dist_cjs20();
    var ENV_IMDS_DISABLED = "AWS_EC2_METADATA_DISABLED";
    var remoteProvider = /* @__PURE__ */ __name(async (init) => {
      var _a, _b;
      const { ENV_CMDS_FULL_URI, ENV_CMDS_RELATIVE_URI, fromContainerMetadata, fromInstanceMetadata } = await Promise.resolve().then(() => __toESM3(require_dist_cjs39()));
      if (process.env[ENV_CMDS_RELATIVE_URI] || process.env[ENV_CMDS_FULL_URI]) {
        (_a = init.logger) == null ? void 0 : _a.debug("@aws-sdk/credential-provider-node - remoteProvider::fromHttp/fromContainerMetadata");
        const { fromHttp } = await Promise.resolve().then(() => __toESM3(__require("@aws-sdk/credential-provider-http")));
        return (0, import_property_provider3.chain)(fromHttp(init), fromContainerMetadata(init));
      }
      if (process.env[ENV_IMDS_DISABLED]) {
        return async () => {
          throw new import_property_provider3.CredentialsProviderError("EC2 Instance Metadata Service access disabled", { logger: init.logger });
        };
      }
      (_b = init.logger) == null ? void 0 : _b.debug("@aws-sdk/credential-provider-node - remoteProvider::fromInstanceMetadata");
      return fromInstanceMetadata(init);
    }, "remoteProvider");
    var multipleCredentialSourceWarningEmitted = false;
    var defaultProvider = /* @__PURE__ */ __name((init = {}) => (0, import_property_provider3.memoize)(
      (0, import_property_provider3.chain)(
        async () => {
          var _a, _b, _c, _d;
          const profile = init.profile ?? process.env[import_shared_ini_file_loader.ENV_PROFILE];
          if (profile) {
            const envStaticCredentialsAreSet = process.env[import_credential_provider_env.ENV_KEY] && process.env[import_credential_provider_env.ENV_SECRET];
            if (envStaticCredentialsAreSet) {
              if (!multipleCredentialSourceWarningEmitted) {
                const warnFn = ((_a = init.logger) == null ? void 0 : _a.warn) && ((_c = (_b = init.logger) == null ? void 0 : _b.constructor) == null ? void 0 : _c.name) !== "NoOpLogger" ? init.logger.warn : console.warn;
                warnFn(
                  `@aws-sdk/credential-provider-node - defaultProvider::fromEnv WARNING:
    Multiple credential sources detected: 
    Both AWS_PROFILE and the pair AWS_ACCESS_KEY_ID/AWS_SECRET_ACCESS_KEY static credentials are set.
    This SDK will proceed with the AWS_PROFILE value.
    
    However, a future version may change this behavior to prefer the ENV static credentials.
    Please ensure that your environment only sets either the AWS_PROFILE or the
    AWS_ACCESS_KEY_ID/AWS_SECRET_ACCESS_KEY pair.
`
                );
                multipleCredentialSourceWarningEmitted = true;
              }
            }
            throw new import_property_provider3.CredentialsProviderError("AWS_PROFILE is set, skipping fromEnv provider.", {
              logger: init.logger,
              tryNextLink: true
            });
          }
          (_d = init.logger) == null ? void 0 : _d.debug("@aws-sdk/credential-provider-node - defaultProvider::fromEnv");
          return (0, import_credential_provider_env.fromEnv)(init)();
        },
        async () => {
          var _a;
          (_a = init.logger) == null ? void 0 : _a.debug("@aws-sdk/credential-provider-node - defaultProvider::fromSSO");
          const { ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoSession } = init;
          if (!ssoStartUrl && !ssoAccountId && !ssoRegion && !ssoRoleName && !ssoSession) {
            throw new import_property_provider3.CredentialsProviderError(
              "Skipping SSO provider in default chain (inputs do not include SSO fields).",
              { logger: init.logger }
            );
          }
          const { fromSSO: fromSSO2 } = await Promise.resolve().then(() => __toESM3(require_dist_cjs51()));
          return fromSSO2(init)();
        },
        async () => {
          var _a;
          (_a = init.logger) == null ? void 0 : _a.debug("@aws-sdk/credential-provider-node - defaultProvider::fromIni");
          const { fromIni } = await Promise.resolve().then(() => __toESM3(require_dist_cjs47()));
          return fromIni(init)();
        },
        async () => {
          var _a;
          (_a = init.logger) == null ? void 0 : _a.debug("@aws-sdk/credential-provider-node - defaultProvider::fromProcess");
          const { fromProcess } = await Promise.resolve().then(() => __toESM3(require_dist_cjs45()));
          return fromProcess(init)();
        },
        async () => {
          var _a;
          (_a = init.logger) == null ? void 0 : _a.debug("@aws-sdk/credential-provider-node - defaultProvider::fromTokenFile");
          const { fromTokenFile: fromTokenFile2 } = await Promise.resolve().then(() => __toESM3(require_dist_cjs46()));
          return fromTokenFile2(init)();
        },
        async () => {
          var _a;
          (_a = init.logger) == null ? void 0 : _a.debug("@aws-sdk/credential-provider-node - defaultProvider::remoteProvider");
          return (await remoteProvider(init))();
        },
        async () => {
          throw new import_property_provider3.CredentialsProviderError("Could not load credentials from any providers", {
            tryNextLink: false,
            logger: init.logger
          });
        }
      ),
      credentialsTreatedAsExpired,
      credentialsWillNeedRefresh
    ), "defaultProvider");
    var credentialsWillNeedRefresh = /* @__PURE__ */ __name((credentials) => (credentials == null ? void 0 : credentials.expiration) !== void 0, "credentialsWillNeedRefresh");
    var credentialsTreatedAsExpired = /* @__PURE__ */ __name((credentials) => (credentials == null ? void 0 : credentials.expiration) !== void 0 && credentials.expiration.getTime() - Date.now() < 3e5, "credentialsTreatedAsExpired");
  }
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/ruleset.js
var require_ruleset3 = __commonJS({
  "node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/ruleset.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.ruleSet = void 0;
    var u = "required";
    var v = "fn";
    var w = "argv";
    var x = "ref";
    var a = true;
    var b = "isSet";
    var c = "booleanEquals";
    var d = "error";
    var e = "endpoint";
    var f = "tree";
    var g = "PartitionResult";
    var h = "getAttr";
    var i = { [u]: false, "type": "String" };
    var j = { [u]: true, "default": false, "type": "Boolean" };
    var k = { [x]: "Endpoint" };
    var l = { [v]: c, [w]: [{ [x]: "UseFIPS" }, true] };
    var m = { [v]: c, [w]: [{ [x]: "UseDualStack" }, true] };
    var n = {};
    var o = { [v]: h, [w]: [{ [x]: g }, "supportsFIPS"] };
    var p = { [x]: g };
    var q = { [v]: c, [w]: [true, { [v]: h, [w]: [p, "supportsDualStack"] }] };
    var r = [l];
    var s = [m];
    var t = [{ [x]: "Region" }];
    var _data = { version: "1.0", parameters: { Region: i, UseDualStack: j, UseFIPS: j, Endpoint: i }, rules: [{ conditions: [{ [v]: b, [w]: [k] }], rules: [{ conditions: r, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: d }, { conditions: s, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: d }, { endpoint: { url: k, properties: n, headers: n }, type: e }], type: f }, { conditions: [{ [v]: b, [w]: t }], rules: [{ conditions: [{ [v]: "aws.partition", [w]: t, assign: g }], rules: [{ conditions: [l, m], rules: [{ conditions: [{ [v]: c, [w]: [a, o] }, q], rules: [{ endpoint: { url: "https://oidc-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: d }], type: f }, { conditions: r, rules: [{ conditions: [{ [v]: c, [w]: [o, a] }], rules: [{ conditions: [{ [v]: "stringEquals", [w]: [{ [v]: h, [w]: [p, "name"] }, "aws-us-gov"] }], endpoint: { url: "https://oidc.{Region}.amazonaws.com", properties: n, headers: n }, type: e }, { endpoint: { url: "https://oidc-fips.{Region}.{PartitionResult#dnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "FIPS is enabled but this partition does not support FIPS", type: d }], type: f }, { conditions: s, rules: [{ conditions: [q], rules: [{ endpoint: { url: "https://oidc.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "DualStack is enabled but this partition does not support DualStack", type: d }], type: f }, { endpoint: { url: "https://oidc.{Region}.{PartitionResult#dnsSuffix}", properties: n, headers: n }, type: e }], type: f }], type: f }, { error: "Invalid Configuration: Missing Region", type: d }] };
    exports6.ruleSet = _data;
  }
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver3 = __commonJS({
  "node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/endpointResolver.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs19();
    var util_endpoints_2 = require_dist_cjs18();
    var ruleset_1 = require_ruleset3();
    var cache = new util_endpoints_2.EndpointCache({
      size: 50,
      params: ["Endpoint", "Region", "UseDualStack", "UseFIPS"]
    });
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return cache.get(endpointParams, () => (0, util_endpoints_2.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      }));
    };
    exports6.defaultEndpointResolver = defaultEndpointResolver;
    util_endpoints_2.customEndpointFunctions.aws = util_endpoints_1.awsEndpointFunctions;
  }
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared3 = __commonJS({
  "node_modules/@aws-sdk/client-sso-oidc/dist-cjs/runtimeConfig.shared.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.getRuntimeConfig = void 0;
    var core_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var core_2 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var smithy_client_1 = require_dist_cjs23();
    var url_parser_1 = require_dist_cjs31();
    var util_base64_1 = require_dist_cjs11();
    var util_utf8_1 = require_dist_cjs10();
    var httpAuthSchemeProvider_1 = require_httpAuthSchemeProvider2();
    var endpointResolver_1 = require_endpointResolver3();
    var getRuntimeConfig = (config2) => {
      return {
        apiVersion: "2019-06-10",
        base64Decoder: config2?.base64Decoder ?? util_base64_1.fromBase64,
        base64Encoder: config2?.base64Encoder ?? util_base64_1.toBase64,
        disableHostPrefix: config2?.disableHostPrefix ?? false,
        endpointProvider: config2?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
        extensions: config2?.extensions ?? [],
        httpAuthSchemeProvider: config2?.httpAuthSchemeProvider ?? httpAuthSchemeProvider_1.defaultSSOOIDCHttpAuthSchemeProvider,
        httpAuthSchemes: config2?.httpAuthSchemes ?? [
          {
            schemeId: "aws.auth#sigv4",
            identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4"),
            signer: new core_1.AwsSdkSigV4Signer()
          },
          {
            schemeId: "smithy.api#noAuth",
            identityProvider: (ipc) => ipc.getIdentityProvider("smithy.api#noAuth") || (async () => ({})),
            signer: new core_2.NoAuthSigner()
          }
        ],
        logger: config2?.logger ?? new smithy_client_1.NoOpLogger(),
        serviceId: config2?.serviceId ?? "SSO OIDC",
        urlParser: config2?.urlParser ?? url_parser_1.parseUrl,
        utf8Decoder: config2?.utf8Decoder ?? util_utf8_1.fromUtf8,
        utf8Encoder: config2?.utf8Encoder ?? util_utf8_1.toUtf8
      };
    };
    exports6.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/runtimeConfig.js
var require_runtimeConfig3 = __commonJS({
  "node_modules/@aws-sdk/client-sso-oidc/dist-cjs/runtimeConfig.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package2());
    var core_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var credential_provider_node_1 = require_dist_cjs48();
    var util_user_agent_node_1 = require_dist_cjs36();
    var config_resolver_1 = require_dist_cjs26();
    var hash_node_1 = require_dist_cjs37();
    var middleware_retry_1 = require_dist_cjs35();
    var node_config_provider_1 = require_dist_cjs29();
    var node_http_handler_1 = require_dist_cjs14();
    var util_body_length_node_1 = require_dist_cjs38();
    var util_retry_1 = require_dist_cjs34();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared3();
    var smithy_client_1 = require_dist_cjs23();
    var util_defaults_mode_node_1 = require_dist_cjs40();
    var smithy_client_2 = require_dist_cjs23();
    var getRuntimeConfig = (config2) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config2);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config2);
      (0, core_1.emitWarningIfUnsupportedVersion)(process.version);
      return {
        ...clientSharedValues,
        ...config2,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config2?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider: config2?.credentialDefaultProvider ?? credential_provider_node_1.defaultProvider,
        defaultUserAgentProvider: config2?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.createDefaultUserAgentProvider)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: config2?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: config2?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: node_http_handler_1.NodeHttpHandler.create(config2?.requestHandler ?? defaultConfigProvider),
        retryMode: config2?.retryMode ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: config2?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: config2?.streamCollector ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: config2?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: config2?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS),
        userAgentAppId: config2?.userAgentAppId ?? (0, node_config_provider_1.loadConfig)(util_user_agent_node_1.NODE_APP_ID_CONFIG_OPTIONS)
      };
    };
    exports6.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/index.js
var require_dist_cjs49 = __commonJS({
  "node_modules/@aws-sdk/client-sso-oidc/dist-cjs/index.js"(exports6, module) {
    "use strict";
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      AccessDeniedException: () => AccessDeniedException,
      AuthorizationPendingException: () => AuthorizationPendingException,
      CreateTokenCommand: () => CreateTokenCommand,
      CreateTokenRequestFilterSensitiveLog: () => CreateTokenRequestFilterSensitiveLog,
      CreateTokenResponseFilterSensitiveLog: () => CreateTokenResponseFilterSensitiveLog,
      CreateTokenWithIAMCommand: () => CreateTokenWithIAMCommand,
      CreateTokenWithIAMRequestFilterSensitiveLog: () => CreateTokenWithIAMRequestFilterSensitiveLog,
      CreateTokenWithIAMResponseFilterSensitiveLog: () => CreateTokenWithIAMResponseFilterSensitiveLog,
      ExpiredTokenException: () => ExpiredTokenException,
      InternalServerException: () => InternalServerException,
      InvalidClientException: () => InvalidClientException,
      InvalidClientMetadataException: () => InvalidClientMetadataException,
      InvalidGrantException: () => InvalidGrantException,
      InvalidRedirectUriException: () => InvalidRedirectUriException,
      InvalidRequestException: () => InvalidRequestException,
      InvalidRequestRegionException: () => InvalidRequestRegionException,
      InvalidScopeException: () => InvalidScopeException,
      RegisterClientCommand: () => RegisterClientCommand,
      RegisterClientResponseFilterSensitiveLog: () => RegisterClientResponseFilterSensitiveLog,
      SSOOIDC: () => SSOOIDC,
      SSOOIDCClient: () => SSOOIDCClient,
      SSOOIDCServiceException: () => SSOOIDCServiceException,
      SlowDownException: () => SlowDownException,
      StartDeviceAuthorizationCommand: () => StartDeviceAuthorizationCommand,
      StartDeviceAuthorizationRequestFilterSensitiveLog: () => StartDeviceAuthorizationRequestFilterSensitiveLog,
      UnauthorizedClientException: () => UnauthorizedClientException,
      UnsupportedGrantTypeException: () => UnsupportedGrantTypeException,
      __Client: () => import_smithy_client7.Client
    });
    module.exports = __toCommonJS3(src_exports);
    var import_middleware_host_header = require_dist_cjs3();
    var import_middleware_logger = require_dist_cjs4();
    var import_middleware_recursion_detection = require_dist_cjs5();
    var import_middleware_user_agent = require_dist_cjs24();
    var import_config_resolver = require_dist_cjs26();
    var import_core5 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var import_middleware_content_length = require_dist_cjs27();
    var import_middleware_endpoint = require_dist_cjs32();
    var import_middleware_retry = require_dist_cjs35();
    var import_httpAuthSchemeProvider = require_httpAuthSchemeProvider2();
    var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "sso-oauth"
      };
    }, "resolveClientEndpointParameters");
    var commonParams = {
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
    var import_runtimeConfig = require_runtimeConfig3();
    var import_region_config_resolver = require_dist_cjs41();
    var import_protocol_http11 = require_dist_cjs2();
    var import_smithy_client7 = require_dist_cjs23();
    var getHttpAuthExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
      const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
      let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
      let _credentials = runtimeConfig.credentials;
      return {
        setHttpAuthScheme(httpAuthScheme) {
          const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
          if (index === -1) {
            _httpAuthSchemes.push(httpAuthScheme);
          } else {
            _httpAuthSchemes.splice(index, 1, httpAuthScheme);
          }
        },
        httpAuthSchemes() {
          return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
          _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
          return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
          _credentials = credentials;
        },
        credentials() {
          return _credentials;
        }
      };
    }, "getHttpAuthExtensionConfiguration");
    var resolveHttpAuthRuntimeConfig = /* @__PURE__ */ __name((config2) => {
      return {
        httpAuthSchemes: config2.httpAuthSchemes(),
        httpAuthSchemeProvider: config2.httpAuthSchemeProvider(),
        credentials: config2.credentials()
      };
    }, "resolveHttpAuthRuntimeConfig");
    var asPartial = /* @__PURE__ */ __name((t) => t, "asPartial");
    var resolveRuntimeExtensions = /* @__PURE__ */ __name((runtimeConfig, extensions) => {
      const extensionConfiguration = {
        ...asPartial((0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig)),
        ...asPartial((0, import_smithy_client7.getDefaultExtensionConfiguration)(runtimeConfig)),
        ...asPartial((0, import_protocol_http11.getHttpHandlerExtensionConfiguration)(runtimeConfig)),
        ...asPartial(getHttpAuthExtensionConfiguration(runtimeConfig))
      };
      extensions.forEach((extension) => extension.configure(extensionConfiguration));
      return {
        ...runtimeConfig,
        ...(0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
        ...(0, import_smithy_client7.resolveDefaultRuntimeConfig)(extensionConfiguration),
        ...(0, import_protocol_http11.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),
        ...resolveHttpAuthRuntimeConfig(extensionConfiguration)
      };
    }, "resolveRuntimeExtensions");
    var _SSOOIDCClient = class _SSOOIDCClient extends import_smithy_client7.Client {
      constructor(...[configuration]) {
        const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});
        const _config_1 = resolveClientEndpointParameters(_config_0);
        const _config_2 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_1);
        const _config_3 = (0, import_middleware_retry.resolveRetryConfig)(_config_2);
        const _config_4 = (0, import_config_resolver.resolveRegionConfig)(_config_3);
        const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, import_middleware_endpoint.resolveEndpointConfig)(_config_5);
        const _config_7 = (0, import_httpAuthSchemeProvider.resolveHttpAuthSchemeConfig)(_config_6);
        const _config_8 = resolveRuntimeExtensions(_config_7, (configuration == null ? void 0 : configuration.extensions) || []);
        super(_config_8);
        this.config = _config_8;
        this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_retry.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_content_length.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_host_header.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use(
          (0, import_core5.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
            httpAuthSchemeParametersProvider: import_httpAuthSchemeProvider.defaultSSOOIDCHttpAuthSchemeParametersProvider,
            identityProviderConfigProvider: async (config2) => new import_core5.DefaultIdentityProviderConfig({
              "aws.auth#sigv4": config2.credentials
            })
          })
        );
        this.middlewareStack.use((0, import_core5.getHttpSigningPlugin)(this.config));
      }
      /**
       * Destroy underlying resources, like sockets. It's usually not necessary to do this.
       * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
       * Otherwise, sockets might stay open for quite a long time before the server terminates them.
       */
      destroy() {
        super.destroy();
      }
    };
    __name(_SSOOIDCClient, "SSOOIDCClient");
    var SSOOIDCClient = _SSOOIDCClient;
    var import_middleware_serde2 = require_dist_cjs7();
    var _SSOOIDCServiceException = class _SSOOIDCServiceException2 extends import_smithy_client7.ServiceException {
      /**
       * @internal
       */
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, _SSOOIDCServiceException2.prototype);
      }
    };
    __name(_SSOOIDCServiceException, "SSOOIDCServiceException");
    var SSOOIDCServiceException = _SSOOIDCServiceException;
    var _AccessDeniedException = class _AccessDeniedException2 extends SSOOIDCServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "AccessDeniedException",
          $fault: "client",
          ...opts
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _AccessDeniedException2.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    __name(_AccessDeniedException, "AccessDeniedException");
    var AccessDeniedException = _AccessDeniedException;
    var _AuthorizationPendingException = class _AuthorizationPendingException2 extends SSOOIDCServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "AuthorizationPendingException",
          $fault: "client",
          ...opts
        });
        this.name = "AuthorizationPendingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _AuthorizationPendingException2.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    __name(_AuthorizationPendingException, "AuthorizationPendingException");
    var AuthorizationPendingException = _AuthorizationPendingException;
    var _ExpiredTokenException = class _ExpiredTokenException2 extends SSOOIDCServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ExpiredTokenException",
          $fault: "client",
          ...opts
        });
        this.name = "ExpiredTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ExpiredTokenException2.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    __name(_ExpiredTokenException, "ExpiredTokenException");
    var ExpiredTokenException = _ExpiredTokenException;
    var _InternalServerException = class _InternalServerException2 extends SSOOIDCServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InternalServerException",
          $fault: "server",
          ...opts
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, _InternalServerException2.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    __name(_InternalServerException, "InternalServerException");
    var InternalServerException = _InternalServerException;
    var _InvalidClientException = class _InvalidClientException2 extends SSOOIDCServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidClientException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidClientException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidClientException2.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    __name(_InvalidClientException, "InvalidClientException");
    var InvalidClientException = _InvalidClientException;
    var _InvalidGrantException = class _InvalidGrantException2 extends SSOOIDCServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidGrantException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidGrantException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidGrantException2.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    __name(_InvalidGrantException, "InvalidGrantException");
    var InvalidGrantException = _InvalidGrantException;
    var _InvalidRequestException = class _InvalidRequestException2 extends SSOOIDCServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidRequestException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidRequestException2.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    __name(_InvalidRequestException, "InvalidRequestException");
    var InvalidRequestException = _InvalidRequestException;
    var _InvalidScopeException = class _InvalidScopeException2 extends SSOOIDCServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidScopeException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidScopeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidScopeException2.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    __name(_InvalidScopeException, "InvalidScopeException");
    var InvalidScopeException = _InvalidScopeException;
    var _SlowDownException = class _SlowDownException2 extends SSOOIDCServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "SlowDownException",
          $fault: "client",
          ...opts
        });
        this.name = "SlowDownException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _SlowDownException2.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    __name(_SlowDownException, "SlowDownException");
    var SlowDownException = _SlowDownException;
    var _UnauthorizedClientException = class _UnauthorizedClientException2 extends SSOOIDCServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "UnauthorizedClientException",
          $fault: "client",
          ...opts
        });
        this.name = "UnauthorizedClientException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UnauthorizedClientException2.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    __name(_UnauthorizedClientException, "UnauthorizedClientException");
    var UnauthorizedClientException = _UnauthorizedClientException;
    var _UnsupportedGrantTypeException = class _UnsupportedGrantTypeException2 extends SSOOIDCServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "UnsupportedGrantTypeException",
          $fault: "client",
          ...opts
        });
        this.name = "UnsupportedGrantTypeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UnsupportedGrantTypeException2.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    __name(_UnsupportedGrantTypeException, "UnsupportedGrantTypeException");
    var UnsupportedGrantTypeException = _UnsupportedGrantTypeException;
    var _InvalidRequestRegionException = class _InvalidRequestRegionException2 extends SSOOIDCServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidRequestRegionException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidRequestRegionException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidRequestRegionException2.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
        this.endpoint = opts.endpoint;
        this.region = opts.region;
      }
    };
    __name(_InvalidRequestRegionException, "InvalidRequestRegionException");
    var InvalidRequestRegionException = _InvalidRequestRegionException;
    var _InvalidClientMetadataException = class _InvalidClientMetadataException2 extends SSOOIDCServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidClientMetadataException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidClientMetadataException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidClientMetadataException2.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    __name(_InvalidClientMetadataException, "InvalidClientMetadataException");
    var InvalidClientMetadataException = _InvalidClientMetadataException;
    var _InvalidRedirectUriException = class _InvalidRedirectUriException2 extends SSOOIDCServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidRedirectUriException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidRedirectUriException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidRedirectUriException2.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    __name(_InvalidRedirectUriException, "InvalidRedirectUriException");
    var InvalidRedirectUriException = _InvalidRedirectUriException;
    var CreateTokenRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.clientSecret && { clientSecret: import_smithy_client7.SENSITIVE_STRING },
      ...obj.refreshToken && { refreshToken: import_smithy_client7.SENSITIVE_STRING },
      ...obj.codeVerifier && { codeVerifier: import_smithy_client7.SENSITIVE_STRING }
    }), "CreateTokenRequestFilterSensitiveLog");
    var CreateTokenResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: import_smithy_client7.SENSITIVE_STRING },
      ...obj.refreshToken && { refreshToken: import_smithy_client7.SENSITIVE_STRING },
      ...obj.idToken && { idToken: import_smithy_client7.SENSITIVE_STRING }
    }), "CreateTokenResponseFilterSensitiveLog");
    var CreateTokenWithIAMRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.refreshToken && { refreshToken: import_smithy_client7.SENSITIVE_STRING },
      ...obj.assertion && { assertion: import_smithy_client7.SENSITIVE_STRING },
      ...obj.subjectToken && { subjectToken: import_smithy_client7.SENSITIVE_STRING },
      ...obj.codeVerifier && { codeVerifier: import_smithy_client7.SENSITIVE_STRING }
    }), "CreateTokenWithIAMRequestFilterSensitiveLog");
    var CreateTokenWithIAMResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: import_smithy_client7.SENSITIVE_STRING },
      ...obj.refreshToken && { refreshToken: import_smithy_client7.SENSITIVE_STRING },
      ...obj.idToken && { idToken: import_smithy_client7.SENSITIVE_STRING }
    }), "CreateTokenWithIAMResponseFilterSensitiveLog");
    var RegisterClientResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.clientSecret && { clientSecret: import_smithy_client7.SENSITIVE_STRING }
    }), "RegisterClientResponseFilterSensitiveLog");
    var StartDeviceAuthorizationRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.clientSecret && { clientSecret: import_smithy_client7.SENSITIVE_STRING }
    }), "StartDeviceAuthorizationRequestFilterSensitiveLog");
    var import_core22 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var se_CreateTokenCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {
        "content-type": "application/json"
      };
      b.bp("/token");
      let body;
      body = JSON.stringify(
        (0, import_smithy_client7.take)(input, {
          clientId: [],
          clientSecret: [],
          code: [],
          codeVerifier: [],
          deviceCode: [],
          grantType: [],
          redirectUri: [],
          refreshToken: [],
          scope: (_) => (0, import_smithy_client7._json)(_)
        })
      );
      b.m("POST").h(headers).b(body);
      return b.build();
    }, "se_CreateTokenCommand");
    var se_CreateTokenWithIAMCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {
        "content-type": "application/json"
      };
      b.bp("/token");
      const query = (0, import_smithy_client7.map)({
        [_ai]: [, "t"]
      });
      let body;
      body = JSON.stringify(
        (0, import_smithy_client7.take)(input, {
          assertion: [],
          clientId: [],
          code: [],
          codeVerifier: [],
          grantType: [],
          redirectUri: [],
          refreshToken: [],
          requestedTokenType: [],
          scope: (_) => (0, import_smithy_client7._json)(_),
          subjectToken: [],
          subjectTokenType: []
        })
      );
      b.m("POST").h(headers).q(query).b(body);
      return b.build();
    }, "se_CreateTokenWithIAMCommand");
    var se_RegisterClientCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {
        "content-type": "application/json"
      };
      b.bp("/client/register");
      let body;
      body = JSON.stringify(
        (0, import_smithy_client7.take)(input, {
          clientName: [],
          clientType: [],
          entitledApplicationArn: [],
          grantTypes: (_) => (0, import_smithy_client7._json)(_),
          issuerUrl: [],
          redirectUris: (_) => (0, import_smithy_client7._json)(_),
          scopes: (_) => (0, import_smithy_client7._json)(_)
        })
      );
      b.m("POST").h(headers).b(body);
      return b.build();
    }, "se_RegisterClientCommand");
    var se_StartDeviceAuthorizationCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {
        "content-type": "application/json"
      };
      b.bp("/device_authorization");
      let body;
      body = JSON.stringify(
        (0, import_smithy_client7.take)(input, {
          clientId: [],
          clientSecret: [],
          startUrl: []
        })
      );
      b.m("POST").h(headers).b(body);
      return b.build();
    }, "se_StartDeviceAuthorizationCommand");
    var de_CreateTokenCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client7.take)(data, {
        accessToken: import_smithy_client7.expectString,
        expiresIn: import_smithy_client7.expectInt32,
        idToken: import_smithy_client7.expectString,
        refreshToken: import_smithy_client7.expectString,
        tokenType: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_CreateTokenCommand");
    var de_CreateTokenWithIAMCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client7.take)(data, {
        accessToken: import_smithy_client7.expectString,
        expiresIn: import_smithy_client7.expectInt32,
        idToken: import_smithy_client7.expectString,
        issuedTokenType: import_smithy_client7.expectString,
        refreshToken: import_smithy_client7.expectString,
        scope: import_smithy_client7._json,
        tokenType: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_CreateTokenWithIAMCommand");
    var de_RegisterClientCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client7.take)(data, {
        authorizationEndpoint: import_smithy_client7.expectString,
        clientId: import_smithy_client7.expectString,
        clientIdIssuedAt: import_smithy_client7.expectLong,
        clientSecret: import_smithy_client7.expectString,
        clientSecretExpiresAt: import_smithy_client7.expectLong,
        tokenEndpoint: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_RegisterClientCommand");
    var de_StartDeviceAuthorizationCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client7.take)(data, {
        deviceCode: import_smithy_client7.expectString,
        expiresIn: import_smithy_client7.expectInt32,
        interval: import_smithy_client7.expectInt32,
        userCode: import_smithy_client7.expectString,
        verificationUri: import_smithy_client7.expectString,
        verificationUriComplete: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_StartDeviceAuthorizationCommand");
    var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await (0, import_core22.parseJsonErrorBody)(output.body, context)
      };
      const errorCode = (0, import_core22.loadRestJsonErrorCode)(output, parsedOutput.body);
      switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.ssooidc#AccessDeniedException":
          throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AuthorizationPendingException":
        case "com.amazonaws.ssooidc#AuthorizationPendingException":
          throw await de_AuthorizationPendingExceptionRes(parsedOutput, context);
        case "ExpiredTokenException":
        case "com.amazonaws.ssooidc#ExpiredTokenException":
          throw await de_ExpiredTokenExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.ssooidc#InternalServerException":
          throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidClientException":
        case "com.amazonaws.ssooidc#InvalidClientException":
          throw await de_InvalidClientExceptionRes(parsedOutput, context);
        case "InvalidGrantException":
        case "com.amazonaws.ssooidc#InvalidGrantException":
          throw await de_InvalidGrantExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.ssooidc#InvalidRequestException":
          throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "InvalidScopeException":
        case "com.amazonaws.ssooidc#InvalidScopeException":
          throw await de_InvalidScopeExceptionRes(parsedOutput, context);
        case "SlowDownException":
        case "com.amazonaws.ssooidc#SlowDownException":
          throw await de_SlowDownExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.ssooidc#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        case "UnsupportedGrantTypeException":
        case "com.amazonaws.ssooidc#UnsupportedGrantTypeException":
          throw await de_UnsupportedGrantTypeExceptionRes(parsedOutput, context);
        case "InvalidRequestRegionException":
        case "com.amazonaws.ssooidc#InvalidRequestRegionException":
          throw await de_InvalidRequestRegionExceptionRes(parsedOutput, context);
        case "InvalidClientMetadataException":
        case "com.amazonaws.ssooidc#InvalidClientMetadataException":
          throw await de_InvalidClientMetadataExceptionRes(parsedOutput, context);
        case "InvalidRedirectUriException":
        case "com.amazonaws.ssooidc#InvalidRedirectUriException":
          throw await de_InvalidRedirectUriExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    }, "de_CommandError");
    var throwDefaultError = (0, import_smithy_client7.withBaseException)(SSOOIDCServiceException);
    var de_AccessDeniedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client7.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client7.take)(data, {
        error: import_smithy_client7.expectString,
        error_description: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, parsedOutput.body);
    }, "de_AccessDeniedExceptionRes");
    var de_AuthorizationPendingExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client7.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client7.take)(data, {
        error: import_smithy_client7.expectString,
        error_description: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      const exception = new AuthorizationPendingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, parsedOutput.body);
    }, "de_AuthorizationPendingExceptionRes");
    var de_ExpiredTokenExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client7.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client7.take)(data, {
        error: import_smithy_client7.expectString,
        error_description: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      const exception = new ExpiredTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, parsedOutput.body);
    }, "de_ExpiredTokenExceptionRes");
    var de_InternalServerExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client7.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client7.take)(data, {
        error: import_smithy_client7.expectString,
        error_description: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, parsedOutput.body);
    }, "de_InternalServerExceptionRes");
    var de_InvalidClientExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client7.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client7.take)(data, {
        error: import_smithy_client7.expectString,
        error_description: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidClientException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, parsedOutput.body);
    }, "de_InvalidClientExceptionRes");
    var de_InvalidClientMetadataExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client7.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client7.take)(data, {
        error: import_smithy_client7.expectString,
        error_description: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidClientMetadataException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, parsedOutput.body);
    }, "de_InvalidClientMetadataExceptionRes");
    var de_InvalidGrantExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client7.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client7.take)(data, {
        error: import_smithy_client7.expectString,
        error_description: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidGrantException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, parsedOutput.body);
    }, "de_InvalidGrantExceptionRes");
    var de_InvalidRedirectUriExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client7.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client7.take)(data, {
        error: import_smithy_client7.expectString,
        error_description: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidRedirectUriException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, parsedOutput.body);
    }, "de_InvalidRedirectUriExceptionRes");
    var de_InvalidRequestExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client7.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client7.take)(data, {
        error: import_smithy_client7.expectString,
        error_description: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, parsedOutput.body);
    }, "de_InvalidRequestExceptionRes");
    var de_InvalidRequestRegionExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client7.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client7.take)(data, {
        endpoint: import_smithy_client7.expectString,
        error: import_smithy_client7.expectString,
        error_description: import_smithy_client7.expectString,
        region: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidRequestRegionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, parsedOutput.body);
    }, "de_InvalidRequestRegionExceptionRes");
    var de_InvalidScopeExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client7.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client7.take)(data, {
        error: import_smithy_client7.expectString,
        error_description: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidScopeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, parsedOutput.body);
    }, "de_InvalidScopeExceptionRes");
    var de_SlowDownExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client7.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client7.take)(data, {
        error: import_smithy_client7.expectString,
        error_description: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      const exception = new SlowDownException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, parsedOutput.body);
    }, "de_SlowDownExceptionRes");
    var de_UnauthorizedClientExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client7.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client7.take)(data, {
        error: import_smithy_client7.expectString,
        error_description: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      const exception = new UnauthorizedClientException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, parsedOutput.body);
    }, "de_UnauthorizedClientExceptionRes");
    var de_UnsupportedGrantTypeExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client7.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client7.take)(data, {
        error: import_smithy_client7.expectString,
        error_description: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      const exception = new UnsupportedGrantTypeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, parsedOutput.body);
    }, "de_UnsupportedGrantTypeExceptionRes");
    var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    }), "deserializeMetadata");
    var _ai = "aws_iam";
    var _CreateTokenCommand = class _CreateTokenCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AWSSSOOIDCService", "CreateToken", {}).n("SSOOIDCClient", "CreateTokenCommand").f(CreateTokenRequestFilterSensitiveLog, CreateTokenResponseFilterSensitiveLog).ser(se_CreateTokenCommand).de(de_CreateTokenCommand).build() {
    };
    __name(_CreateTokenCommand, "CreateTokenCommand");
    var CreateTokenCommand = _CreateTokenCommand;
    var _CreateTokenWithIAMCommand = class _CreateTokenWithIAMCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AWSSSOOIDCService", "CreateTokenWithIAM", {}).n("SSOOIDCClient", "CreateTokenWithIAMCommand").f(CreateTokenWithIAMRequestFilterSensitiveLog, CreateTokenWithIAMResponseFilterSensitiveLog).ser(se_CreateTokenWithIAMCommand).de(de_CreateTokenWithIAMCommand).build() {
    };
    __name(_CreateTokenWithIAMCommand, "CreateTokenWithIAMCommand");
    var CreateTokenWithIAMCommand = _CreateTokenWithIAMCommand;
    var _RegisterClientCommand = class _RegisterClientCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AWSSSOOIDCService", "RegisterClient", {}).n("SSOOIDCClient", "RegisterClientCommand").f(void 0, RegisterClientResponseFilterSensitiveLog).ser(se_RegisterClientCommand).de(de_RegisterClientCommand).build() {
    };
    __name(_RegisterClientCommand, "RegisterClientCommand");
    var RegisterClientCommand = _RegisterClientCommand;
    var _StartDeviceAuthorizationCommand = class _StartDeviceAuthorizationCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AWSSSOOIDCService", "StartDeviceAuthorization", {}).n("SSOOIDCClient", "StartDeviceAuthorizationCommand").f(StartDeviceAuthorizationRequestFilterSensitiveLog, void 0).ser(se_StartDeviceAuthorizationCommand).de(de_StartDeviceAuthorizationCommand).build() {
    };
    __name(_StartDeviceAuthorizationCommand, "StartDeviceAuthorizationCommand");
    var StartDeviceAuthorizationCommand = _StartDeviceAuthorizationCommand;
    var commands = {
      CreateTokenCommand,
      CreateTokenWithIAMCommand,
      RegisterClientCommand,
      StartDeviceAuthorizationCommand
    };
    var _SSOOIDC = class _SSOOIDC extends SSOOIDCClient {
    };
    __name(_SSOOIDC, "SSOOIDC");
    var SSOOIDC = _SSOOIDC;
    (0, import_smithy_client7.createAggregatedClient)(commands, SSOOIDC);
  }
});

// node_modules/@aws-sdk/token-providers/dist-cjs/index.js
var require_dist_cjs50 = __commonJS({
  "node_modules/@aws-sdk/token-providers/dist-cjs/index.js"(exports6, module) {
    "use strict";
    init_dirname();
    var __create3 = Object.create;
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __getProtoOf3 = Object.getPrototypeOf;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM3 = (mod, isNodeMode, target) => (target = mod != null ? __create3(__getProtoOf3(mod)) : {}, __copyProps3(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp3(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      fromSso: () => fromSso,
      fromStatic: () => fromStatic,
      nodeProvider: () => nodeProvider
    });
    module.exports = __toCommonJS3(src_exports);
    var EXPIRE_WINDOW_MS = 5 * 60 * 1e3;
    var REFRESH_MESSAGE = `To refresh this SSO session run 'aws sso login' with the corresponding profile.`;
    var getSsoOidcClient = /* @__PURE__ */ __name(async (ssoRegion, init = {}) => {
      var _a, _b, _c;
      const { SSOOIDCClient } = await Promise.resolve().then(() => __toESM3(require_dist_cjs49()));
      const ssoOidcClient = new SSOOIDCClient(
        Object.assign({}, init.clientConfig ?? {}, {
          region: ssoRegion ?? ((_a = init.clientConfig) == null ? void 0 : _a.region),
          logger: ((_b = init.clientConfig) == null ? void 0 : _b.logger) ?? ((_c = init.parentClientConfig) == null ? void 0 : _c.logger)
        })
      );
      return ssoOidcClient;
    }, "getSsoOidcClient");
    var getNewSsoOidcToken = /* @__PURE__ */ __name(async (ssoToken, ssoRegion, init = {}) => {
      const { CreateTokenCommand } = await Promise.resolve().then(() => __toESM3(require_dist_cjs49()));
      const ssoOidcClient = await getSsoOidcClient(ssoRegion, init);
      return ssoOidcClient.send(
        new CreateTokenCommand({
          clientId: ssoToken.clientId,
          clientSecret: ssoToken.clientSecret,
          refreshToken: ssoToken.refreshToken,
          grantType: "refresh_token"
        })
      );
    }, "getNewSsoOidcToken");
    var import_property_provider3 = require_dist_cjs20();
    var validateTokenExpiry = /* @__PURE__ */ __name((token) => {
      if (token.expiration && token.expiration.getTime() < Date.now()) {
        throw new import_property_provider3.TokenProviderError(`Token is expired. ${REFRESH_MESSAGE}`, false);
      }
    }, "validateTokenExpiry");
    var validateTokenKey = /* @__PURE__ */ __name((key, value, forRefresh = false) => {
      if (typeof value === "undefined") {
        throw new import_property_provider3.TokenProviderError(
          `Value not present for '${key}' in SSO Token${forRefresh ? ". Cannot refresh" : ""}. ${REFRESH_MESSAGE}`,
          false
        );
      }
    }, "validateTokenKey");
    var import_shared_ini_file_loader = require_dist_cjs28();
    var import_fs = __require("fs");
    var { writeFile } = import_fs.promises;
    var writeSSOTokenToFile = /* @__PURE__ */ __name((id, ssoToken) => {
      const tokenFilepath = (0, import_shared_ini_file_loader.getSSOTokenFilepath)(id);
      const tokenString = JSON.stringify(ssoToken, null, 2);
      return writeFile(tokenFilepath, tokenString);
    }, "writeSSOTokenToFile");
    var lastRefreshAttemptTime = /* @__PURE__ */ new Date(0);
    var fromSso = /* @__PURE__ */ __name((init = {}) => async () => {
      var _a;
      (_a = init.logger) == null ? void 0 : _a.debug("@aws-sdk/token-providers - fromSso");
      const profiles = await (0, import_shared_ini_file_loader.parseKnownFiles)(init);
      const profileName = (0, import_shared_ini_file_loader.getProfileName)(init);
      const profile = profiles[profileName];
      if (!profile) {
        throw new import_property_provider3.TokenProviderError(`Profile '${profileName}' could not be found in shared credentials file.`, false);
      } else if (!profile["sso_session"]) {
        throw new import_property_provider3.TokenProviderError(`Profile '${profileName}' is missing required property 'sso_session'.`);
      }
      const ssoSessionName = profile["sso_session"];
      const ssoSessions = await (0, import_shared_ini_file_loader.loadSsoSessionData)(init);
      const ssoSession = ssoSessions[ssoSessionName];
      if (!ssoSession) {
        throw new import_property_provider3.TokenProviderError(
          `Sso session '${ssoSessionName}' could not be found in shared credentials file.`,
          false
        );
      }
      for (const ssoSessionRequiredKey of ["sso_start_url", "sso_region"]) {
        if (!ssoSession[ssoSessionRequiredKey]) {
          throw new import_property_provider3.TokenProviderError(
            `Sso session '${ssoSessionName}' is missing required property '${ssoSessionRequiredKey}'.`,
            false
          );
        }
      }
      const ssoStartUrl = ssoSession["sso_start_url"];
      const ssoRegion = ssoSession["sso_region"];
      let ssoToken;
      try {
        ssoToken = await (0, import_shared_ini_file_loader.getSSOTokenFromFile)(ssoSessionName);
      } catch (e) {
        throw new import_property_provider3.TokenProviderError(
          `The SSO session token associated with profile=${profileName} was not found or is invalid. ${REFRESH_MESSAGE}`,
          false
        );
      }
      validateTokenKey("accessToken", ssoToken.accessToken);
      validateTokenKey("expiresAt", ssoToken.expiresAt);
      const { accessToken, expiresAt } = ssoToken;
      const existingToken = { token: accessToken, expiration: new Date(expiresAt) };
      if (existingToken.expiration.getTime() - Date.now() > EXPIRE_WINDOW_MS) {
        return existingToken;
      }
      if (Date.now() - lastRefreshAttemptTime.getTime() < 30 * 1e3) {
        validateTokenExpiry(existingToken);
        return existingToken;
      }
      validateTokenKey("clientId", ssoToken.clientId, true);
      validateTokenKey("clientSecret", ssoToken.clientSecret, true);
      validateTokenKey("refreshToken", ssoToken.refreshToken, true);
      try {
        lastRefreshAttemptTime.setTime(Date.now());
        const newSsoOidcToken = await getNewSsoOidcToken(ssoToken, ssoRegion, init);
        validateTokenKey("accessToken", newSsoOidcToken.accessToken);
        validateTokenKey("expiresIn", newSsoOidcToken.expiresIn);
        const newTokenExpiration = new Date(Date.now() + newSsoOidcToken.expiresIn * 1e3);
        try {
          await writeSSOTokenToFile(ssoSessionName, {
            ...ssoToken,
            accessToken: newSsoOidcToken.accessToken,
            expiresAt: newTokenExpiration.toISOString(),
            refreshToken: newSsoOidcToken.refreshToken
          });
        } catch (error) {
        }
        return {
          token: newSsoOidcToken.accessToken,
          expiration: newTokenExpiration
        };
      } catch (error) {
        validateTokenExpiry(existingToken);
        return existingToken;
      }
    }, "fromSso");
    var fromStatic = /* @__PURE__ */ __name(({ token, logger }) => async () => {
      logger == null ? void 0 : logger.debug("@aws-sdk/token-providers - fromStatic");
      if (!token || !token.token) {
        throw new import_property_provider3.TokenProviderError(`Please pass a valid token to fromStatic`, false);
      }
      return token;
    }, "fromStatic");
    var nodeProvider = /* @__PURE__ */ __name((init = {}) => (0, import_property_provider3.memoize)(
      (0, import_property_provider3.chain)(fromSso(init), async () => {
        throw new import_property_provider3.TokenProviderError("Could not load token from any providers", false);
      }),
      (token) => token.expiration !== void 0 && token.expiration.getTime() - Date.now() < 3e5,
      (token) => token.expiration !== void 0
    ), "nodeProvider");
  }
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/index.js
var require_dist_cjs51 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-sso/dist-cjs/index.js"(exports6, module) {
    "use strict";
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __esm3 = (fn, res) => function __init() {
      return fn && (res = (0, fn[__getOwnPropNames3(fn)[0]])(fn = 0)), res;
    };
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var loadSso_exports = {};
    __export3(loadSso_exports, {
      GetRoleCredentialsCommand: () => import_client_sso.GetRoleCredentialsCommand,
      SSOClient: () => import_client_sso.SSOClient
    });
    var import_client_sso;
    var init_loadSso = __esm3({
      "src/loadSso.ts"() {
        "use strict";
        import_client_sso = require_dist_cjs42();
      }
    });
    var src_exports = {};
    __export3(src_exports, {
      fromSSO: () => fromSSO2,
      isSsoProfile: () => isSsoProfile,
      validateSsoProfile: () => validateSsoProfile
    });
    module.exports = __toCommonJS3(src_exports);
    var isSsoProfile = /* @__PURE__ */ __name((arg) => arg && (typeof arg.sso_start_url === "string" || typeof arg.sso_account_id === "string" || typeof arg.sso_session === "string" || typeof arg.sso_region === "string" || typeof arg.sso_role_name === "string"), "isSsoProfile");
    var import_client3 = (init_client(), __toCommonJS(client_exports));
    var import_token_providers = require_dist_cjs50();
    var import_property_provider3 = require_dist_cjs20();
    var import_shared_ini_file_loader = require_dist_cjs28();
    var SHOULD_FAIL_CREDENTIAL_CHAIN = false;
    var resolveSSOCredentials = /* @__PURE__ */ __name(async ({
      ssoStartUrl,
      ssoSession,
      ssoAccountId,
      ssoRegion,
      ssoRoleName,
      ssoClient,
      clientConfig,
      parentClientConfig,
      profile,
      logger
    }) => {
      let token;
      const refreshMessage = `To refresh this SSO session run aws sso login with the corresponding profile.`;
      if (ssoSession) {
        try {
          const _token = await (0, import_token_providers.fromSso)({ profile })();
          token = {
            accessToken: _token.token,
            expiresAt: new Date(_token.expiration).toISOString()
          };
        } catch (e) {
          throw new import_property_provider3.CredentialsProviderError(e.message, {
            tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,
            logger
          });
        }
      } else {
        try {
          token = await (0, import_shared_ini_file_loader.getSSOTokenFromFile)(ssoStartUrl);
        } catch (e) {
          throw new import_property_provider3.CredentialsProviderError(`The SSO session associated with this profile is invalid. ${refreshMessage}`, {
            tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,
            logger
          });
        }
      }
      if (new Date(token.expiresAt).getTime() - Date.now() <= 0) {
        throw new import_property_provider3.CredentialsProviderError(`The SSO session associated with this profile has expired. ${refreshMessage}`, {
          tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,
          logger
        });
      }
      const { accessToken } = token;
      const { SSOClient: SSOClient2, GetRoleCredentialsCommand: GetRoleCredentialsCommand2 } = await Promise.resolve().then(() => (init_loadSso(), loadSso_exports));
      const sso = ssoClient || new SSOClient2(
        Object.assign({}, clientConfig ?? {}, {
          logger: (clientConfig == null ? void 0 : clientConfig.logger) ?? (parentClientConfig == null ? void 0 : parentClientConfig.logger),
          region: (clientConfig == null ? void 0 : clientConfig.region) ?? ssoRegion
        })
      );
      let ssoResp;
      try {
        ssoResp = await sso.send(
          new GetRoleCredentialsCommand2({
            accountId: ssoAccountId,
            roleName: ssoRoleName,
            accessToken
          })
        );
      } catch (e) {
        throw new import_property_provider3.CredentialsProviderError(e, {
          tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,
          logger
        });
      }
      const {
        roleCredentials: { accessKeyId, secretAccessKey, sessionToken, expiration, credentialScope, accountId } = {}
      } = ssoResp;
      if (!accessKeyId || !secretAccessKey || !sessionToken || !expiration) {
        throw new import_property_provider3.CredentialsProviderError("SSO returns an invalid temporary credential.", {
          tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,
          logger
        });
      }
      const credentials = {
        accessKeyId,
        secretAccessKey,
        sessionToken,
        expiration: new Date(expiration),
        ...credentialScope && { credentialScope },
        ...accountId && { accountId }
      };
      if (ssoSession) {
        (0, import_client3.setCredentialFeature)(credentials, "CREDENTIALS_SSO", "s");
      } else {
        (0, import_client3.setCredentialFeature)(credentials, "CREDENTIALS_SSO_LEGACY", "u");
      }
      return credentials;
    }, "resolveSSOCredentials");
    var validateSsoProfile = /* @__PURE__ */ __name((profile, logger) => {
      const { sso_start_url, sso_account_id, sso_region, sso_role_name } = profile;
      if (!sso_start_url || !sso_account_id || !sso_region || !sso_role_name) {
        throw new import_property_provider3.CredentialsProviderError(
          `Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(profile).join(
            ", "
          )}
Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`,
          { tryNextLink: false, logger }
        );
      }
      return profile;
    }, "validateSsoProfile");
    var fromSSO2 = /* @__PURE__ */ __name((init = {}) => async () => {
      var _a;
      (_a = init.logger) == null ? void 0 : _a.debug("@aws-sdk/credential-provider-sso - fromSSO");
      const { ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoSession } = init;
      const { ssoClient } = init;
      const profileName = (0, import_shared_ini_file_loader.getProfileName)(init);
      if (!ssoStartUrl && !ssoAccountId && !ssoRegion && !ssoRoleName && !ssoSession) {
        const profiles = await (0, import_shared_ini_file_loader.parseKnownFiles)(init);
        const profile = profiles[profileName];
        if (!profile) {
          throw new import_property_provider3.CredentialsProviderError(`Profile ${profileName} was not found.`, { logger: init.logger });
        }
        if (!isSsoProfile(profile)) {
          throw new import_property_provider3.CredentialsProviderError(`Profile ${profileName} is not configured with SSO credentials.`, {
            logger: init.logger
          });
        }
        if (profile == null ? void 0 : profile.sso_session) {
          const ssoSessions = await (0, import_shared_ini_file_loader.loadSsoSessionData)(init);
          const session = ssoSessions[profile.sso_session];
          const conflictMsg = ` configurations in profile ${profileName} and sso-session ${profile.sso_session}`;
          if (ssoRegion && ssoRegion !== session.sso_region) {
            throw new import_property_provider3.CredentialsProviderError(`Conflicting SSO region` + conflictMsg, {
              tryNextLink: false,
              logger: init.logger
            });
          }
          if (ssoStartUrl && ssoStartUrl !== session.sso_start_url) {
            throw new import_property_provider3.CredentialsProviderError(`Conflicting SSO start_url` + conflictMsg, {
              tryNextLink: false,
              logger: init.logger
            });
          }
          profile.sso_region = session.sso_region;
          profile.sso_start_url = session.sso_start_url;
        }
        const { sso_start_url, sso_account_id, sso_region, sso_role_name, sso_session } = validateSsoProfile(
          profile,
          init.logger
        );
        return resolveSSOCredentials({
          ssoStartUrl: sso_start_url,
          ssoSession: sso_session,
          ssoAccountId: sso_account_id,
          ssoRegion: sso_region,
          ssoRoleName: sso_role_name,
          ssoClient,
          clientConfig: init.clientConfig,
          parentClientConfig: init.parentClientConfig,
          profile: profileName
        });
      } else if (!ssoStartUrl || !ssoAccountId || !ssoRegion || !ssoRoleName) {
        throw new import_property_provider3.CredentialsProviderError(
          'Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"',
          { tryNextLink: false, logger: init.logger }
        );
      } else {
        return resolveSSOCredentials({
          ssoStartUrl,
          ssoSession,
          ssoAccountId,
          ssoRegion,
          ssoRoleName,
          ssoClient,
          clientConfig: init.clientConfig,
          parentClientConfig: init.parentClientConfig,
          profile: profileName
        });
      }
    }, "fromSSO");
  }
});

// node_modules/@smithy/eventstream-serde-config-resolver/dist-cjs/index.js
var require_dist_cjs52 = __commonJS({
  "node_modules/@smithy/eventstream-serde-config-resolver/dist-cjs/index.js"(exports6, module) {
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      resolveEventStreamSerdeConfig: () => resolveEventStreamSerdeConfig
    });
    module.exports = __toCommonJS3(src_exports);
    var resolveEventStreamSerdeConfig = /* @__PURE__ */ __name((input) => ({
      ...input,
      eventStreamMarshaller: input.eventStreamSerdeProvider(input)
    }), "resolveEventStreamSerdeConfig");
  }
});

// node_modules/@aws-sdk/client-bedrock-runtime/dist-cjs/auth/httpAuthSchemeProvider.js
var require_httpAuthSchemeProvider4 = __commonJS({
  "node_modules/@aws-sdk/client-bedrock-runtime/dist-cjs/auth/httpAuthSchemeProvider.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.resolveHttpAuthSchemeConfig = exports6.defaultBedrockRuntimeHttpAuthSchemeProvider = exports6.defaultBedrockRuntimeHttpAuthSchemeParametersProvider = void 0;
    var core_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var util_middleware_1 = require_dist_cjs6();
    var defaultBedrockRuntimeHttpAuthSchemeParametersProvider = async (config2, context, input) => {
      return {
        operation: (0, util_middleware_1.getSmithyContext)(context).operation,
        region: await (0, util_middleware_1.normalizeProvider)(config2.region)() || (() => {
          throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
        })()
      };
    };
    exports6.defaultBedrockRuntimeHttpAuthSchemeParametersProvider = defaultBedrockRuntimeHttpAuthSchemeParametersProvider;
    function createAwsAuthSigv4HttpAuthOption(authParameters) {
      return {
        schemeId: "aws.auth#sigv4",
        signingProperties: {
          name: "bedrock",
          region: authParameters.region
        },
        propertiesExtractor: (config2, context) => ({
          signingProperties: {
            config: config2,
            context
          }
        })
      };
    }
    var defaultBedrockRuntimeHttpAuthSchemeProvider = (authParameters) => {
      const options = [];
      switch (authParameters.operation) {
        default: {
          options.push(createAwsAuthSigv4HttpAuthOption(authParameters));
        }
      }
      return options;
    };
    exports6.defaultBedrockRuntimeHttpAuthSchemeProvider = defaultBedrockRuntimeHttpAuthSchemeProvider;
    var resolveHttpAuthSchemeConfig = (config2) => {
      const config_0 = (0, core_1.resolveAwsSdkSigV4Config)(config2);
      return {
        ...config_0
      };
    };
    exports6.resolveHttpAuthSchemeConfig = resolveHttpAuthSchemeConfig;
  }
});

// node_modules/@aws-sdk/client-bedrock-runtime/package.json
var require_package4 = __commonJS({
  "node_modules/@aws-sdk/client-bedrock-runtime/package.json"(exports6, module) {
    module.exports = {
      name: "@aws-sdk/client-bedrock-runtime",
      description: "AWS SDK for JavaScript Bedrock Runtime Client for Node.js, Browser and React Native",
      version: "3.712.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "node ../../scripts/compilation/inline client-bedrock-runtime",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "extract:docs": "api-extractor run --local",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo bedrock-runtime"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "5.2.0",
        "@aws-crypto/sha256-js": "5.2.0",
        "@aws-sdk/client-sso-oidc": "3.712.0",
        "@aws-sdk/client-sts": "3.712.0",
        "@aws-sdk/core": "3.709.0",
        "@aws-sdk/credential-provider-node": "3.712.0",
        "@aws-sdk/middleware-host-header": "3.709.0",
        "@aws-sdk/middleware-logger": "3.709.0",
        "@aws-sdk/middleware-recursion-detection": "3.709.0",
        "@aws-sdk/middleware-user-agent": "3.709.0",
        "@aws-sdk/region-config-resolver": "3.709.0",
        "@aws-sdk/types": "3.709.0",
        "@aws-sdk/util-endpoints": "3.709.0",
        "@aws-sdk/util-user-agent-browser": "3.709.0",
        "@aws-sdk/util-user-agent-node": "3.712.0",
        "@smithy/config-resolver": "^3.0.13",
        "@smithy/core": "^2.5.5",
        "@smithy/eventstream-serde-browser": "^3.0.14",
        "@smithy/eventstream-serde-config-resolver": "^3.0.11",
        "@smithy/eventstream-serde-node": "^3.0.13",
        "@smithy/fetch-http-handler": "^4.1.2",
        "@smithy/hash-node": "^3.0.11",
        "@smithy/invalid-dependency": "^3.0.11",
        "@smithy/middleware-content-length": "^3.0.13",
        "@smithy/middleware-endpoint": "^3.2.5",
        "@smithy/middleware-retry": "^3.0.30",
        "@smithy/middleware-serde": "^3.0.11",
        "@smithy/middleware-stack": "^3.0.11",
        "@smithy/node-config-provider": "^3.1.12",
        "@smithy/node-http-handler": "^3.3.2",
        "@smithy/protocol-http": "^4.1.8",
        "@smithy/smithy-client": "^3.5.0",
        "@smithy/types": "^3.7.2",
        "@smithy/url-parser": "^3.0.11",
        "@smithy/util-base64": "^3.0.0",
        "@smithy/util-body-length-browser": "^3.0.0",
        "@smithy/util-body-length-node": "^3.0.0",
        "@smithy/util-defaults-mode-browser": "^3.0.30",
        "@smithy/util-defaults-mode-node": "^3.0.30",
        "@smithy/util-endpoints": "^2.1.7",
        "@smithy/util-middleware": "^3.0.11",
        "@smithy/util-retry": "^3.0.11",
        "@smithy/util-stream": "^3.3.2",
        "@smithy/util-utf8": "^3.0.0",
        "@types/uuid": "^9.0.1",
        tslib: "^2.6.2",
        uuid: "^9.0.1"
      },
      devDependencies: {
        "@tsconfig/node16": "16.1.3",
        "@types/node": "^16.18.96",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typescript: "~4.9.5"
      },
      engines: {
        node: ">=16.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*/**"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-bedrock-runtime",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-bedrock-runtime"
      }
    };
  }
});

// node_modules/@aws-crypto/util/node_modules/@smithy/is-array-buffer/dist-cjs/index.js
var require_dist_cjs53 = __commonJS({
  "node_modules/@aws-crypto/util/node_modules/@smithy/is-array-buffer/dist-cjs/index.js"(exports6, module) {
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      isArrayBuffer: () => isArrayBuffer
    });
    module.exports = __toCommonJS3(src_exports);
    var isArrayBuffer = /* @__PURE__ */ __name((arg) => typeof ArrayBuffer === "function" && arg instanceof ArrayBuffer || Object.prototype.toString.call(arg) === "[object ArrayBuffer]", "isArrayBuffer");
  }
});

// node_modules/@aws-crypto/util/node_modules/@smithy/util-buffer-from/dist-cjs/index.js
var require_dist_cjs54 = __commonJS({
  "node_modules/@aws-crypto/util/node_modules/@smithy/util-buffer-from/dist-cjs/index.js"(exports6, module) {
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      fromArrayBuffer: () => fromArrayBuffer,
      fromString: () => fromString
    });
    module.exports = __toCommonJS3(src_exports);
    var import_is_array_buffer = require_dist_cjs53();
    var import_buffer = __require("buffer");
    var fromArrayBuffer = /* @__PURE__ */ __name((input, offset = 0, length = input.byteLength - offset) => {
      if (!(0, import_is_array_buffer.isArrayBuffer)(input)) {
        throw new TypeError(`The "input" argument must be ArrayBuffer. Received type ${typeof input} (${input})`);
      }
      return import_buffer.Buffer.from(input, offset, length);
    }, "fromArrayBuffer");
    var fromString = /* @__PURE__ */ __name((input, encoding) => {
      if (typeof input !== "string") {
        throw new TypeError(`The "input" argument must be of type string. Received type ${typeof input} (${input})`);
      }
      return encoding ? import_buffer.Buffer.from(input, encoding) : import_buffer.Buffer.from(input);
    }, "fromString");
  }
});

// node_modules/@aws-crypto/util/node_modules/@smithy/util-utf8/dist-cjs/index.js
var require_dist_cjs55 = __commonJS({
  "node_modules/@aws-crypto/util/node_modules/@smithy/util-utf8/dist-cjs/index.js"(exports6, module) {
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      fromUtf8: () => fromUtf8,
      toUint8Array: () => toUint8Array,
      toUtf8: () => toUtf8
    });
    module.exports = __toCommonJS3(src_exports);
    var import_util_buffer_from = require_dist_cjs54();
    var fromUtf8 = /* @__PURE__ */ __name((input) => {
      const buf = (0, import_util_buffer_from.fromString)(input, "utf8");
      return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    }, "fromUtf8");
    var toUint8Array = /* @__PURE__ */ __name((data) => {
      if (typeof data === "string") {
        return fromUtf8(data);
      }
      if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
      }
      return new Uint8Array(data);
    }, "toUint8Array");
    var toUtf8 = /* @__PURE__ */ __name((input) => {
      if (typeof input === "string") {
        return input;
      }
      if (typeof input !== "object" || typeof input.byteOffset !== "number" || typeof input.byteLength !== "number") {
        throw new Error("@smithy/util-utf8: toUtf8 encoder function only accepts string | Uint8Array.");
      }
      return (0, import_util_buffer_from.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString("utf8");
    }, "toUtf8");
  }
});

// node_modules/@aws-crypto/util/build/main/convertToBuffer.js
var require_convertToBuffer = __commonJS({
  "node_modules/@aws-crypto/util/build/main/convertToBuffer.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.convertToBuffer = void 0;
    var util_utf8_1 = require_dist_cjs55();
    var fromUtf8 = typeof Buffer !== "undefined" && Buffer.from ? function(input) {
      return Buffer.from(input, "utf8");
    } : util_utf8_1.fromUtf8;
    function convertToBuffer(data) {
      if (data instanceof Uint8Array)
        return data;
      if (typeof data === "string") {
        return fromUtf8(data);
      }
      if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
      }
      return new Uint8Array(data);
    }
    exports6.convertToBuffer = convertToBuffer;
  }
});

// node_modules/@aws-crypto/util/build/main/isEmptyData.js
var require_isEmptyData = __commonJS({
  "node_modules/@aws-crypto/util/build/main/isEmptyData.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.isEmptyData = void 0;
    function isEmptyData(data) {
      if (typeof data === "string") {
        return data.length === 0;
      }
      return data.byteLength === 0;
    }
    exports6.isEmptyData = isEmptyData;
  }
});

// node_modules/@aws-crypto/util/build/main/numToUint8.js
var require_numToUint8 = __commonJS({
  "node_modules/@aws-crypto/util/build/main/numToUint8.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.numToUint8 = void 0;
    function numToUint8(num) {
      return new Uint8Array([
        (num & 4278190080) >> 24,
        (num & 16711680) >> 16,
        (num & 65280) >> 8,
        num & 255
      ]);
    }
    exports6.numToUint8 = numToUint8;
  }
});

// node_modules/@aws-crypto/util/build/main/uint32ArrayFrom.js
var require_uint32ArrayFrom = __commonJS({
  "node_modules/@aws-crypto/util/build/main/uint32ArrayFrom.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.uint32ArrayFrom = void 0;
    function uint32ArrayFrom(a_lookUpTable) {
      if (!Uint32Array.from) {
        var return_array = new Uint32Array(a_lookUpTable.length);
        var a_index = 0;
        while (a_index < a_lookUpTable.length) {
          return_array[a_index] = a_lookUpTable[a_index];
          a_index += 1;
        }
        return return_array;
      }
      return Uint32Array.from(a_lookUpTable);
    }
    exports6.uint32ArrayFrom = uint32ArrayFrom;
  }
});

// node_modules/@aws-crypto/util/build/main/index.js
var require_main = __commonJS({
  "node_modules/@aws-crypto/util/build/main/index.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.uint32ArrayFrom = exports6.numToUint8 = exports6.isEmptyData = exports6.convertToBuffer = void 0;
    var convertToBuffer_1 = require_convertToBuffer();
    Object.defineProperty(exports6, "convertToBuffer", { enumerable: true, get: function() {
      return convertToBuffer_1.convertToBuffer;
    } });
    var isEmptyData_1 = require_isEmptyData();
    Object.defineProperty(exports6, "isEmptyData", { enumerable: true, get: function() {
      return isEmptyData_1.isEmptyData;
    } });
    var numToUint8_1 = require_numToUint8();
    Object.defineProperty(exports6, "numToUint8", { enumerable: true, get: function() {
      return numToUint8_1.numToUint8;
    } });
    var uint32ArrayFrom_1 = require_uint32ArrayFrom();
    Object.defineProperty(exports6, "uint32ArrayFrom", { enumerable: true, get: function() {
      return uint32ArrayFrom_1.uint32ArrayFrom;
    } });
  }
});

// node_modules/@aws-crypto/crc32/build/main/aws_crc32.js
var require_aws_crc32 = __commonJS({
  "node_modules/@aws-crypto/crc32/build/main/aws_crc32.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.AwsCrc32 = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var util_1 = require_main();
    var index_1 = require_main2();
    var AwsCrc32 = (
      /** @class */
      function() {
        function AwsCrc322() {
          this.crc32 = new index_1.Crc32();
        }
        AwsCrc322.prototype.update = function(toHash) {
          if ((0, util_1.isEmptyData)(toHash))
            return;
          this.crc32.update((0, util_1.convertToBuffer)(toHash));
        };
        AwsCrc322.prototype.digest = function() {
          return tslib_1.__awaiter(this, void 0, void 0, function() {
            return tslib_1.__generator(this, function(_a) {
              return [2, (0, util_1.numToUint8)(this.crc32.digest())];
            });
          });
        };
        AwsCrc322.prototype.reset = function() {
          this.crc32 = new index_1.Crc32();
        };
        return AwsCrc322;
      }()
    );
    exports6.AwsCrc32 = AwsCrc32;
  }
});

// node_modules/@aws-crypto/crc32/build/main/index.js
var require_main2 = __commonJS({
  "node_modules/@aws-crypto/crc32/build/main/index.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.AwsCrc32 = exports6.Crc32 = exports6.crc32 = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var util_1 = require_main();
    function crc32(data) {
      return new Crc32().update(data).digest();
    }
    exports6.crc32 = crc32;
    var Crc32 = (
      /** @class */
      function() {
        function Crc322() {
          this.checksum = 4294967295;
        }
        Crc322.prototype.update = function(data) {
          var e_1, _a;
          try {
            for (var data_1 = tslib_1.__values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {
              var byte = data_1_1.value;
              this.checksum = this.checksum >>> 8 ^ lookupTable[(this.checksum ^ byte) & 255];
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (data_1_1 && !data_1_1.done && (_a = data_1.return)) _a.call(data_1);
            } finally {
              if (e_1) throw e_1.error;
            }
          }
          return this;
        };
        Crc322.prototype.digest = function() {
          return (this.checksum ^ 4294967295) >>> 0;
        };
        return Crc322;
      }()
    );
    exports6.Crc32 = Crc32;
    var a_lookUpTable = [
      0,
      1996959894,
      3993919788,
      2567524794,
      124634137,
      1886057615,
      3915621685,
      2657392035,
      249268274,
      2044508324,
      3772115230,
      2547177864,
      162941995,
      2125561021,
      3887607047,
      2428444049,
      498536548,
      1789927666,
      4089016648,
      2227061214,
      450548861,
      1843258603,
      4107580753,
      2211677639,
      325883990,
      1684777152,
      4251122042,
      2321926636,
      335633487,
      1661365465,
      4195302755,
      2366115317,
      997073096,
      1281953886,
      3579855332,
      2724688242,
      1006888145,
      1258607687,
      3524101629,
      2768942443,
      901097722,
      1119000684,
      3686517206,
      2898065728,
      853044451,
      1172266101,
      3705015759,
      2882616665,
      651767980,
      1373503546,
      3369554304,
      3218104598,
      565507253,
      1454621731,
      3485111705,
      3099436303,
      671266974,
      1594198024,
      3322730930,
      2970347812,
      795835527,
      1483230225,
      3244367275,
      3060149565,
      1994146192,
      31158534,
      2563907772,
      4023717930,
      1907459465,
      112637215,
      2680153253,
      3904427059,
      2013776290,
      251722036,
      2517215374,
      3775830040,
      2137656763,
      141376813,
      2439277719,
      3865271297,
      1802195444,
      476864866,
      2238001368,
      4066508878,
      1812370925,
      453092731,
      2181625025,
      4111451223,
      1706088902,
      314042704,
      2344532202,
      4240017532,
      1658658271,
      366619977,
      2362670323,
      4224994405,
      1303535960,
      984961486,
      2747007092,
      3569037538,
      1256170817,
      1037604311,
      2765210733,
      3554079995,
      1131014506,
      879679996,
      2909243462,
      3663771856,
      1141124467,
      855842277,
      2852801631,
      3708648649,
      1342533948,
      654459306,
      3188396048,
      3373015174,
      1466479909,
      544179635,
      3110523913,
      3462522015,
      1591671054,
      702138776,
      2966460450,
      3352799412,
      1504918807,
      783551873,
      3082640443,
      3233442989,
      3988292384,
      2596254646,
      62317068,
      1957810842,
      3939845945,
      2647816111,
      81470997,
      1943803523,
      3814918930,
      2489596804,
      225274430,
      2053790376,
      3826175755,
      2466906013,
      167816743,
      2097651377,
      4027552580,
      2265490386,
      503444072,
      1762050814,
      4150417245,
      2154129355,
      426522225,
      1852507879,
      4275313526,
      2312317920,
      282753626,
      1742555852,
      4189708143,
      2394877945,
      397917763,
      1622183637,
      3604390888,
      2714866558,
      953729732,
      1340076626,
      3518719985,
      2797360999,
      1068828381,
      1219638859,
      3624741850,
      2936675148,
      906185462,
      1090812512,
      3747672003,
      2825379669,
      829329135,
      1181335161,
      3412177804,
      3160834842,
      628085408,
      1382605366,
      3423369109,
      3138078467,
      570562233,
      1426400815,
      3317316542,
      2998733608,
      733239954,
      1555261956,
      3268935591,
      3050360625,
      752459403,
      1541320221,
      2607071920,
      3965973030,
      1969922972,
      40735498,
      2617837225,
      3943577151,
      1913087877,
      83908371,
      2512341634,
      3803740692,
      2075208622,
      213261112,
      2463272603,
      3855990285,
      2094854071,
      198958881,
      2262029012,
      4057260610,
      1759359992,
      534414190,
      2176718541,
      4139329115,
      1873836001,
      414664567,
      2282248934,
      4279200368,
      1711684554,
      285281116,
      2405801727,
      4167216745,
      1634467795,
      376229701,
      2685067896,
      3608007406,
      1308918612,
      956543938,
      2808555105,
      3495958263,
      1231636301,
      1047427035,
      2932959818,
      3654703836,
      1088359270,
      936918e3,
      2847714899,
      3736837829,
      1202900863,
      817233897,
      3183342108,
      3401237130,
      1404277552,
      615818150,
      3134207493,
      3453421203,
      1423857449,
      601450431,
      3009837614,
      3294710456,
      1567103746,
      711928724,
      3020668471,
      3272380065,
      1510334235,
      755167117
    ];
    var lookupTable = (0, util_1.uint32ArrayFrom)(a_lookUpTable);
    var aws_crc32_1 = require_aws_crc32();
    Object.defineProperty(exports6, "AwsCrc32", { enumerable: true, get: function() {
      return aws_crc32_1.AwsCrc32;
    } });
  }
});

// node_modules/@smithy/eventstream-codec/dist-cjs/index.js
var require_dist_cjs56 = __commonJS({
  "node_modules/@smithy/eventstream-codec/dist-cjs/index.js"(exports6, module) {
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      EventStreamCodec: () => EventStreamCodec,
      HeaderMarshaller: () => HeaderMarshaller,
      Int64: () => Int64,
      MessageDecoderStream: () => MessageDecoderStream,
      MessageEncoderStream: () => MessageEncoderStream,
      SmithyMessageDecoderStream: () => SmithyMessageDecoderStream,
      SmithyMessageEncoderStream: () => SmithyMessageEncoderStream
    });
    module.exports = __toCommonJS3(src_exports);
    var import_crc322 = require_main2();
    var import_util_hex_encoding = require_dist_cjs16();
    var _Int64 = class _Int642 {
      constructor(bytes) {
        this.bytes = bytes;
        if (bytes.byteLength !== 8) {
          throw new Error("Int64 buffers must be exactly 8 bytes");
        }
      }
      static fromNumber(number) {
        if (number > 9223372036854776e3 || number < -9223372036854776e3) {
          throw new Error(`${number} is too large (or, if negative, too small) to represent as an Int64`);
        }
        const bytes = new Uint8Array(8);
        for (let i = 7, remaining = Math.abs(Math.round(number)); i > -1 && remaining > 0; i--, remaining /= 256) {
          bytes[i] = remaining;
        }
        if (number < 0) {
          negate(bytes);
        }
        return new _Int642(bytes);
      }
      /**
       * Called implicitly by infix arithmetic operators.
       */
      valueOf() {
        const bytes = this.bytes.slice(0);
        const negative = bytes[0] & 128;
        if (negative) {
          negate(bytes);
        }
        return parseInt((0, import_util_hex_encoding.toHex)(bytes), 16) * (negative ? -1 : 1);
      }
      toString() {
        return String(this.valueOf());
      }
    };
    __name(_Int64, "Int64");
    var Int64 = _Int64;
    function negate(bytes) {
      for (let i = 0; i < 8; i++) {
        bytes[i] ^= 255;
      }
      for (let i = 7; i > -1; i--) {
        bytes[i]++;
        if (bytes[i] !== 0)
          break;
      }
    }
    __name(negate, "negate");
    var _HeaderMarshaller = class _HeaderMarshaller {
      constructor(toUtf8, fromUtf8) {
        this.toUtf8 = toUtf8;
        this.fromUtf8 = fromUtf8;
      }
      format(headers) {
        const chunks = [];
        for (const headerName of Object.keys(headers)) {
          const bytes = this.fromUtf8(headerName);
          chunks.push(Uint8Array.from([bytes.byteLength]), bytes, this.formatHeaderValue(headers[headerName]));
        }
        const out = new Uint8Array(chunks.reduce((carry, bytes) => carry + bytes.byteLength, 0));
        let position = 0;
        for (const chunk of chunks) {
          out.set(chunk, position);
          position += chunk.byteLength;
        }
        return out;
      }
      formatHeaderValue(header) {
        switch (header.type) {
          case "boolean":
            return Uint8Array.from([
              header.value ? 0 : 1
              /* boolFalse */
            ]);
          case "byte":
            return Uint8Array.from([2, header.value]);
          case "short":
            const shortView = new DataView(new ArrayBuffer(3));
            shortView.setUint8(
              0,
              3
              /* short */
            );
            shortView.setInt16(1, header.value, false);
            return new Uint8Array(shortView.buffer);
          case "integer":
            const intView = new DataView(new ArrayBuffer(5));
            intView.setUint8(
              0,
              4
              /* integer */
            );
            intView.setInt32(1, header.value, false);
            return new Uint8Array(intView.buffer);
          case "long":
            const longBytes = new Uint8Array(9);
            longBytes[0] = 5;
            longBytes.set(header.value.bytes, 1);
            return longBytes;
          case "binary":
            const binView = new DataView(new ArrayBuffer(3 + header.value.byteLength));
            binView.setUint8(
              0,
              6
              /* byteArray */
            );
            binView.setUint16(1, header.value.byteLength, false);
            const binBytes = new Uint8Array(binView.buffer);
            binBytes.set(header.value, 3);
            return binBytes;
          case "string":
            const utf8Bytes = this.fromUtf8(header.value);
            const strView = new DataView(new ArrayBuffer(3 + utf8Bytes.byteLength));
            strView.setUint8(
              0,
              7
              /* string */
            );
            strView.setUint16(1, utf8Bytes.byteLength, false);
            const strBytes = new Uint8Array(strView.buffer);
            strBytes.set(utf8Bytes, 3);
            return strBytes;
          case "timestamp":
            const tsBytes = new Uint8Array(9);
            tsBytes[0] = 8;
            tsBytes.set(Int64.fromNumber(header.value.valueOf()).bytes, 1);
            return tsBytes;
          case "uuid":
            if (!UUID_PATTERN.test(header.value)) {
              throw new Error(`Invalid UUID received: ${header.value}`);
            }
            const uuidBytes = new Uint8Array(17);
            uuidBytes[0] = 9;
            uuidBytes.set((0, import_util_hex_encoding.fromHex)(header.value.replace(/\-/g, "")), 1);
            return uuidBytes;
        }
      }
      parse(headers) {
        const out = {};
        let position = 0;
        while (position < headers.byteLength) {
          const nameLength = headers.getUint8(position++);
          const name = this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, nameLength));
          position += nameLength;
          switch (headers.getUint8(position++)) {
            case 0:
              out[name] = {
                type: BOOLEAN_TAG,
                value: true
              };
              break;
            case 1:
              out[name] = {
                type: BOOLEAN_TAG,
                value: false
              };
              break;
            case 2:
              out[name] = {
                type: BYTE_TAG,
                value: headers.getInt8(position++)
              };
              break;
            case 3:
              out[name] = {
                type: SHORT_TAG,
                value: headers.getInt16(position, false)
              };
              position += 2;
              break;
            case 4:
              out[name] = {
                type: INT_TAG,
                value: headers.getInt32(position, false)
              };
              position += 4;
              break;
            case 5:
              out[name] = {
                type: LONG_TAG,
                value: new Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8))
              };
              position += 8;
              break;
            case 6:
              const binaryLength = headers.getUint16(position, false);
              position += 2;
              out[name] = {
                type: BINARY_TAG,
                value: new Uint8Array(headers.buffer, headers.byteOffset + position, binaryLength)
              };
              position += binaryLength;
              break;
            case 7:
              const stringLength = headers.getUint16(position, false);
              position += 2;
              out[name] = {
                type: STRING_TAG,
                value: this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, stringLength))
              };
              position += stringLength;
              break;
            case 8:
              out[name] = {
                type: TIMESTAMP_TAG,
                value: new Date(new Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8)).valueOf())
              };
              position += 8;
              break;
            case 9:
              const uuidBytes = new Uint8Array(headers.buffer, headers.byteOffset + position, 16);
              position += 16;
              out[name] = {
                type: UUID_TAG,
                value: `${(0, import_util_hex_encoding.toHex)(uuidBytes.subarray(0, 4))}-${(0, import_util_hex_encoding.toHex)(uuidBytes.subarray(4, 6))}-${(0, import_util_hex_encoding.toHex)(
                  uuidBytes.subarray(6, 8)
                )}-${(0, import_util_hex_encoding.toHex)(uuidBytes.subarray(8, 10))}-${(0, import_util_hex_encoding.toHex)(uuidBytes.subarray(10))}`
              };
              break;
            default:
              throw new Error(`Unrecognized header type tag`);
          }
        }
        return out;
      }
    };
    __name(_HeaderMarshaller, "HeaderMarshaller");
    var HeaderMarshaller = _HeaderMarshaller;
    var BOOLEAN_TAG = "boolean";
    var BYTE_TAG = "byte";
    var SHORT_TAG = "short";
    var INT_TAG = "integer";
    var LONG_TAG = "long";
    var BINARY_TAG = "binary";
    var STRING_TAG = "string";
    var TIMESTAMP_TAG = "timestamp";
    var UUID_TAG = "uuid";
    var UUID_PATTERN = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;
    var import_crc32 = require_main2();
    var PRELUDE_MEMBER_LENGTH = 4;
    var PRELUDE_LENGTH = PRELUDE_MEMBER_LENGTH * 2;
    var CHECKSUM_LENGTH = 4;
    var MINIMUM_MESSAGE_LENGTH = PRELUDE_LENGTH + CHECKSUM_LENGTH * 2;
    function splitMessage({ byteLength, byteOffset, buffer }) {
      if (byteLength < MINIMUM_MESSAGE_LENGTH) {
        throw new Error("Provided message too short to accommodate event stream message overhead");
      }
      const view = new DataView(buffer, byteOffset, byteLength);
      const messageLength = view.getUint32(0, false);
      if (byteLength !== messageLength) {
        throw new Error("Reported message length does not match received message length");
      }
      const headerLength = view.getUint32(PRELUDE_MEMBER_LENGTH, false);
      const expectedPreludeChecksum = view.getUint32(PRELUDE_LENGTH, false);
      const expectedMessageChecksum = view.getUint32(byteLength - CHECKSUM_LENGTH, false);
      const checksummer = new import_crc32.Crc32().update(new Uint8Array(buffer, byteOffset, PRELUDE_LENGTH));
      if (expectedPreludeChecksum !== checksummer.digest()) {
        throw new Error(
          `The prelude checksum specified in the message (${expectedPreludeChecksum}) does not match the calculated CRC32 checksum (${checksummer.digest()})`
        );
      }
      checksummer.update(
        new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH, byteLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH))
      );
      if (expectedMessageChecksum !== checksummer.digest()) {
        throw new Error(
          `The message checksum (${checksummer.digest()}) did not match the expected value of ${expectedMessageChecksum}`
        );
      }
      return {
        headers: new DataView(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH, headerLength),
        body: new Uint8Array(
          buffer,
          byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH + headerLength,
          messageLength - headerLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH + CHECKSUM_LENGTH)
        )
      };
    }
    __name(splitMessage, "splitMessage");
    var _EventStreamCodec = class _EventStreamCodec {
      constructor(toUtf8, fromUtf8) {
        this.headerMarshaller = new HeaderMarshaller(toUtf8, fromUtf8);
        this.messageBuffer = [];
        this.isEndOfStream = false;
      }
      feed(message) {
        this.messageBuffer.push(this.decode(message));
      }
      endOfStream() {
        this.isEndOfStream = true;
      }
      getMessage() {
        const message = this.messageBuffer.pop();
        const isEndOfStream = this.isEndOfStream;
        return {
          getMessage() {
            return message;
          },
          isEndOfStream() {
            return isEndOfStream;
          }
        };
      }
      getAvailableMessages() {
        const messages = this.messageBuffer;
        this.messageBuffer = [];
        const isEndOfStream = this.isEndOfStream;
        return {
          getMessages() {
            return messages;
          },
          isEndOfStream() {
            return isEndOfStream;
          }
        };
      }
      /**
       * Convert a structured JavaScript object with tagged headers into a binary
       * event stream message.
       */
      encode({ headers: rawHeaders, body }) {
        const headers = this.headerMarshaller.format(rawHeaders);
        const length = headers.byteLength + body.byteLength + 16;
        const out = new Uint8Array(length);
        const view = new DataView(out.buffer, out.byteOffset, out.byteLength);
        const checksum = new import_crc322.Crc32();
        view.setUint32(0, length, false);
        view.setUint32(4, headers.byteLength, false);
        view.setUint32(8, checksum.update(out.subarray(0, 8)).digest(), false);
        out.set(headers, 12);
        out.set(body, headers.byteLength + 12);
        view.setUint32(length - 4, checksum.update(out.subarray(8, length - 4)).digest(), false);
        return out;
      }
      /**
       * Convert a binary event stream message into a JavaScript object with an
       * opaque, binary body and tagged, parsed headers.
       */
      decode(message) {
        const { headers, body } = splitMessage(message);
        return { headers: this.headerMarshaller.parse(headers), body };
      }
      /**
       * Convert a structured JavaScript object with tagged headers into a binary
       * event stream message header.
       */
      formatHeaders(rawHeaders) {
        return this.headerMarshaller.format(rawHeaders);
      }
    };
    __name(_EventStreamCodec, "EventStreamCodec");
    var EventStreamCodec = _EventStreamCodec;
    var _MessageDecoderStream = class _MessageDecoderStream {
      constructor(options) {
        this.options = options;
      }
      [Symbol.asyncIterator]() {
        return this.asyncIterator();
      }
      async *asyncIterator() {
        for await (const bytes of this.options.inputStream) {
          const decoded = this.options.decoder.decode(bytes);
          yield decoded;
        }
      }
    };
    __name(_MessageDecoderStream, "MessageDecoderStream");
    var MessageDecoderStream = _MessageDecoderStream;
    var _MessageEncoderStream = class _MessageEncoderStream {
      constructor(options) {
        this.options = options;
      }
      [Symbol.asyncIterator]() {
        return this.asyncIterator();
      }
      async *asyncIterator() {
        for await (const msg of this.options.messageStream) {
          const encoded = this.options.encoder.encode(msg);
          yield encoded;
        }
        if (this.options.includeEndFrame) {
          yield new Uint8Array(0);
        }
      }
    };
    __name(_MessageEncoderStream, "MessageEncoderStream");
    var MessageEncoderStream = _MessageEncoderStream;
    var _SmithyMessageDecoderStream = class _SmithyMessageDecoderStream {
      constructor(options) {
        this.options = options;
      }
      [Symbol.asyncIterator]() {
        return this.asyncIterator();
      }
      async *asyncIterator() {
        for await (const message of this.options.messageStream) {
          const deserialized = await this.options.deserializer(message);
          if (deserialized === void 0)
            continue;
          yield deserialized;
        }
      }
    };
    __name(_SmithyMessageDecoderStream, "SmithyMessageDecoderStream");
    var SmithyMessageDecoderStream = _SmithyMessageDecoderStream;
    var _SmithyMessageEncoderStream = class _SmithyMessageEncoderStream {
      constructor(options) {
        this.options = options;
      }
      [Symbol.asyncIterator]() {
        return this.asyncIterator();
      }
      async *asyncIterator() {
        for await (const chunk of this.options.inputStream) {
          const payloadBuf = this.options.serializer(chunk);
          yield payloadBuf;
        }
      }
    };
    __name(_SmithyMessageEncoderStream, "SmithyMessageEncoderStream");
    var SmithyMessageEncoderStream = _SmithyMessageEncoderStream;
  }
});

// node_modules/@smithy/eventstream-serde-universal/dist-cjs/index.js
var require_dist_cjs57 = __commonJS({
  "node_modules/@smithy/eventstream-serde-universal/dist-cjs/index.js"(exports6, module) {
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      EventStreamMarshaller: () => EventStreamMarshaller,
      eventStreamSerdeProvider: () => eventStreamSerdeProvider
    });
    module.exports = __toCommonJS3(src_exports);
    var import_eventstream_codec = require_dist_cjs56();
    function getChunkedStream(source) {
      let currentMessageTotalLength = 0;
      let currentMessagePendingLength = 0;
      let currentMessage = null;
      let messageLengthBuffer = null;
      const allocateMessage = /* @__PURE__ */ __name((size) => {
        if (typeof size !== "number") {
          throw new Error("Attempted to allocate an event message where size was not a number: " + size);
        }
        currentMessageTotalLength = size;
        currentMessagePendingLength = 4;
        currentMessage = new Uint8Array(size);
        const currentMessageView = new DataView(currentMessage.buffer);
        currentMessageView.setUint32(0, size, false);
      }, "allocateMessage");
      const iterator = /* @__PURE__ */ __name(async function* () {
        const sourceIterator = source[Symbol.asyncIterator]();
        while (true) {
          const { value, done } = await sourceIterator.next();
          if (done) {
            if (!currentMessageTotalLength) {
              return;
            } else if (currentMessageTotalLength === currentMessagePendingLength) {
              yield currentMessage;
            } else {
              throw new Error("Truncated event message received.");
            }
            return;
          }
          const chunkLength = value.length;
          let currentOffset = 0;
          while (currentOffset < chunkLength) {
            if (!currentMessage) {
              const bytesRemaining = chunkLength - currentOffset;
              if (!messageLengthBuffer) {
                messageLengthBuffer = new Uint8Array(4);
              }
              const numBytesForTotal = Math.min(
                4 - currentMessagePendingLength,
                // remaining bytes to fill the messageLengthBuffer
                bytesRemaining
                // bytes left in chunk
              );
              messageLengthBuffer.set(
                // @ts-ignore error TS2532: Object is possibly 'undefined' for value
                value.slice(currentOffset, currentOffset + numBytesForTotal),
                currentMessagePendingLength
              );
              currentMessagePendingLength += numBytesForTotal;
              currentOffset += numBytesForTotal;
              if (currentMessagePendingLength < 4) {
                break;
              }
              allocateMessage(new DataView(messageLengthBuffer.buffer).getUint32(0, false));
              messageLengthBuffer = null;
            }
            const numBytesToWrite = Math.min(
              currentMessageTotalLength - currentMessagePendingLength,
              // number of bytes left to complete message
              chunkLength - currentOffset
              // number of bytes left in the original chunk
            );
            currentMessage.set(
              // @ts-ignore error TS2532: Object is possibly 'undefined' for value
              value.slice(currentOffset, currentOffset + numBytesToWrite),
              currentMessagePendingLength
            );
            currentMessagePendingLength += numBytesToWrite;
            currentOffset += numBytesToWrite;
            if (currentMessageTotalLength && currentMessageTotalLength === currentMessagePendingLength) {
              yield currentMessage;
              currentMessage = null;
              currentMessageTotalLength = 0;
              currentMessagePendingLength = 0;
            }
          }
        }
      }, "iterator");
      return {
        [Symbol.asyncIterator]: iterator
      };
    }
    __name(getChunkedStream, "getChunkedStream");
    function getMessageUnmarshaller(deserializer, toUtf8) {
      return async function(message) {
        const { value: messageType } = message.headers[":message-type"];
        if (messageType === "error") {
          const unmodeledError = new Error(message.headers[":error-message"].value || "UnknownError");
          unmodeledError.name = message.headers[":error-code"].value;
          throw unmodeledError;
        } else if (messageType === "exception") {
          const code = message.headers[":exception-type"].value;
          const exception = { [code]: message };
          const deserializedException = await deserializer(exception);
          if (deserializedException.$unknown) {
            const error = new Error(toUtf8(message.body));
            error.name = code;
            throw error;
          }
          throw deserializedException[code];
        } else if (messageType === "event") {
          const event = {
            [message.headers[":event-type"].value]: message
          };
          const deserialized = await deserializer(event);
          if (deserialized.$unknown)
            return;
          return deserialized;
        } else {
          throw Error(`Unrecognizable event type: ${message.headers[":event-type"].value}`);
        }
      };
    }
    __name(getMessageUnmarshaller, "getMessageUnmarshaller");
    var _EventStreamMarshaller = class _EventStreamMarshaller {
      constructor({ utf8Encoder, utf8Decoder }) {
        this.eventStreamCodec = new import_eventstream_codec.EventStreamCodec(utf8Encoder, utf8Decoder);
        this.utfEncoder = utf8Encoder;
      }
      deserialize(body, deserializer) {
        const inputStream = getChunkedStream(body);
        return new import_eventstream_codec.SmithyMessageDecoderStream({
          messageStream: new import_eventstream_codec.MessageDecoderStream({ inputStream, decoder: this.eventStreamCodec }),
          // @ts-expect-error Type 'T' is not assignable to type 'Record<string, any>'
          deserializer: getMessageUnmarshaller(deserializer, this.utfEncoder)
        });
      }
      serialize(inputStream, serializer) {
        return new import_eventstream_codec.MessageEncoderStream({
          messageStream: new import_eventstream_codec.SmithyMessageEncoderStream({ inputStream, serializer }),
          encoder: this.eventStreamCodec,
          includeEndFrame: true
        });
      }
    };
    __name(_EventStreamMarshaller, "EventStreamMarshaller");
    var EventStreamMarshaller = _EventStreamMarshaller;
    var eventStreamSerdeProvider = /* @__PURE__ */ __name((options) => new EventStreamMarshaller(options), "eventStreamSerdeProvider");
  }
});

// node_modules/@smithy/eventstream-serde-node/dist-cjs/index.js
var require_dist_cjs58 = __commonJS({
  "node_modules/@smithy/eventstream-serde-node/dist-cjs/index.js"(exports6, module) {
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      EventStreamMarshaller: () => EventStreamMarshaller,
      eventStreamSerdeProvider: () => eventStreamSerdeProvider
    });
    module.exports = __toCommonJS3(src_exports);
    var import_eventstream_serde_universal = require_dist_cjs57();
    var import_stream = (init_stream(), __toCommonJS(stream_exports));
    async function* readabletoIterable(readStream) {
      let streamEnded = false;
      let generationEnded = false;
      const records = new Array();
      readStream.on("error", (err) => {
        if (!streamEnded) {
          streamEnded = true;
        }
        if (err) {
          throw err;
        }
      });
      readStream.on("data", (data) => {
        records.push(data);
      });
      readStream.on("end", () => {
        streamEnded = true;
      });
      while (!generationEnded) {
        const value = await new Promise((resolve) => setTimeout(() => resolve(records.shift()), 0));
        if (value) {
          yield value;
        }
        generationEnded = streamEnded && records.length === 0;
      }
    }
    __name(readabletoIterable, "readabletoIterable");
    var _EventStreamMarshaller = class _EventStreamMarshaller {
      constructor({ utf8Encoder, utf8Decoder }) {
        this.universalMarshaller = new import_eventstream_serde_universal.EventStreamMarshaller({
          utf8Decoder,
          utf8Encoder
        });
      }
      deserialize(body, deserializer) {
        const bodyIterable = typeof body[Symbol.asyncIterator] === "function" ? body : readabletoIterable(body);
        return this.universalMarshaller.deserialize(bodyIterable, deserializer);
      }
      serialize(input, serializer) {
        return import_stream.Readable.from(this.universalMarshaller.serialize(input, serializer));
      }
    };
    __name(_EventStreamMarshaller, "EventStreamMarshaller");
    var EventStreamMarshaller = _EventStreamMarshaller;
    var eventStreamSerdeProvider = /* @__PURE__ */ __name((options) => new EventStreamMarshaller(options), "eventStreamSerdeProvider");
  }
});

// node_modules/@aws-sdk/client-bedrock-runtime/dist-cjs/endpoint/ruleset.js
var require_ruleset4 = __commonJS({
  "node_modules/@aws-sdk/client-bedrock-runtime/dist-cjs/endpoint/ruleset.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.ruleSet = void 0;
    var s = "required";
    var t = "fn";
    var u = "argv";
    var v = "ref";
    var a = true;
    var b = "isSet";
    var c = "booleanEquals";
    var d = "error";
    var e = "endpoint";
    var f = "tree";
    var g = "PartitionResult";
    var h = { [s]: false, "type": "String" };
    var i = { [s]: true, "default": false, "type": "Boolean" };
    var j = { [v]: "Endpoint" };
    var k = { [t]: c, [u]: [{ [v]: "UseFIPS" }, true] };
    var l = { [t]: c, [u]: [{ [v]: "UseDualStack" }, true] };
    var m = {};
    var n = { [t]: "getAttr", [u]: [{ [v]: g }, "supportsFIPS"] };
    var o = { [t]: c, [u]: [true, { [t]: "getAttr", [u]: [{ [v]: g }, "supportsDualStack"] }] };
    var p = [k];
    var q = [l];
    var r = [{ [v]: "Region" }];
    var _data = { version: "1.0", parameters: { Region: h, UseDualStack: i, UseFIPS: i, Endpoint: h }, rules: [{ conditions: [{ [t]: b, [u]: [j] }], rules: [{ conditions: p, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: d }, { rules: [{ conditions: q, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: d }, { endpoint: { url: j, properties: m, headers: m }, type: e }], type: f }], type: f }, { rules: [{ conditions: [{ [t]: b, [u]: r }], rules: [{ conditions: [{ [t]: "aws.partition", [u]: r, assign: g }], rules: [{ conditions: [k, l], rules: [{ conditions: [{ [t]: c, [u]: [a, n] }, o], rules: [{ rules: [{ endpoint: { url: "https://bedrock-runtime-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: m, headers: m }, type: e }], type: f }], type: f }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: d }], type: f }, { conditions: p, rules: [{ conditions: [{ [t]: c, [u]: [n, a] }], rules: [{ rules: [{ endpoint: { url: "https://bedrock-runtime-fips.{Region}.{PartitionResult#dnsSuffix}", properties: m, headers: m }, type: e }], type: f }], type: f }, { error: "FIPS is enabled but this partition does not support FIPS", type: d }], type: f }, { conditions: q, rules: [{ conditions: [o], rules: [{ rules: [{ endpoint: { url: "https://bedrock-runtime.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: m, headers: m }, type: e }], type: f }], type: f }, { error: "DualStack is enabled but this partition does not support DualStack", type: d }], type: f }, { rules: [{ endpoint: { url: "https://bedrock-runtime.{Region}.{PartitionResult#dnsSuffix}", properties: m, headers: m }, type: e }], type: f }], type: f }], type: f }, { error: "Invalid Configuration: Missing Region", type: d }], type: f }] };
    exports6.ruleSet = _data;
  }
});

// node_modules/@aws-sdk/client-bedrock-runtime/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver4 = __commonJS({
  "node_modules/@aws-sdk/client-bedrock-runtime/dist-cjs/endpoint/endpointResolver.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs19();
    var util_endpoints_2 = require_dist_cjs18();
    var ruleset_1 = require_ruleset4();
    var cache = new util_endpoints_2.EndpointCache({
      size: 50,
      params: ["Endpoint", "Region", "UseDualStack", "UseFIPS"]
    });
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return cache.get(endpointParams, () => (0, util_endpoints_2.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      }));
    };
    exports6.defaultEndpointResolver = defaultEndpointResolver;
    util_endpoints_2.customEndpointFunctions.aws = util_endpoints_1.awsEndpointFunctions;
  }
});

// node_modules/@aws-sdk/client-bedrock-runtime/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared4 = __commonJS({
  "node_modules/@aws-sdk/client-bedrock-runtime/dist-cjs/runtimeConfig.shared.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.getRuntimeConfig = void 0;
    var core_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var smithy_client_1 = require_dist_cjs23();
    var url_parser_1 = require_dist_cjs31();
    var util_base64_1 = require_dist_cjs11();
    var util_utf8_1 = require_dist_cjs10();
    var httpAuthSchemeProvider_1 = require_httpAuthSchemeProvider4();
    var endpointResolver_1 = require_endpointResolver4();
    var getRuntimeConfig = (config2) => {
      return {
        apiVersion: "2023-09-30",
        base64Decoder: config2?.base64Decoder ?? util_base64_1.fromBase64,
        base64Encoder: config2?.base64Encoder ?? util_base64_1.toBase64,
        disableHostPrefix: config2?.disableHostPrefix ?? false,
        endpointProvider: config2?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
        extensions: config2?.extensions ?? [],
        httpAuthSchemeProvider: config2?.httpAuthSchemeProvider ?? httpAuthSchemeProvider_1.defaultBedrockRuntimeHttpAuthSchemeProvider,
        httpAuthSchemes: config2?.httpAuthSchemes ?? [
          {
            schemeId: "aws.auth#sigv4",
            identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4"),
            signer: new core_1.AwsSdkSigV4Signer()
          }
        ],
        logger: config2?.logger ?? new smithy_client_1.NoOpLogger(),
        serviceId: config2?.serviceId ?? "Bedrock Runtime",
        urlParser: config2?.urlParser ?? url_parser_1.parseUrl,
        utf8Decoder: config2?.utf8Decoder ?? util_utf8_1.fromUtf8,
        utf8Encoder: config2?.utf8Encoder ?? util_utf8_1.toUtf8
      };
    };
    exports6.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-bedrock-runtime/dist-cjs/runtimeConfig.js
var require_runtimeConfig4 = __commonJS({
  "node_modules/@aws-sdk/client-bedrock-runtime/dist-cjs/runtimeConfig.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package4());
    var core_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var credential_provider_node_1 = require_dist_cjs48();
    var util_user_agent_node_1 = require_dist_cjs36();
    var config_resolver_1 = require_dist_cjs26();
    var eventstream_serde_node_1 = require_dist_cjs58();
    var hash_node_1 = require_dist_cjs37();
    var middleware_retry_1 = require_dist_cjs35();
    var node_config_provider_1 = require_dist_cjs29();
    var node_http_handler_1 = require_dist_cjs14();
    var util_body_length_node_1 = require_dist_cjs38();
    var util_retry_1 = require_dist_cjs34();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared4();
    var smithy_client_1 = require_dist_cjs23();
    var util_defaults_mode_node_1 = require_dist_cjs40();
    var smithy_client_2 = require_dist_cjs23();
    var getRuntimeConfig = (config2) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config2);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config2);
      (0, core_1.emitWarningIfUnsupportedVersion)(process.version);
      return {
        ...clientSharedValues,
        ...config2,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config2?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider: config2?.credentialDefaultProvider ?? credential_provider_node_1.defaultProvider,
        defaultUserAgentProvider: config2?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.createDefaultUserAgentProvider)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        eventStreamSerdeProvider: config2?.eventStreamSerdeProvider ?? eventstream_serde_node_1.eventStreamSerdeProvider,
        maxAttempts: config2?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: config2?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: node_http_handler_1.NodeHttpHandler.create(config2?.requestHandler ?? defaultConfigProvider),
        retryMode: config2?.retryMode ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: config2?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: config2?.streamCollector ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: config2?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: config2?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS),
        userAgentAppId: config2?.userAgentAppId ?? (0, node_config_provider_1.loadConfig)(util_user_agent_node_1.NODE_APP_ID_CONFIG_OPTIONS)
      };
    };
    exports6.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-bedrock-runtime/dist-cjs/index.js
var require_dist_cjs59 = __commonJS({
  "node_modules/@aws-sdk/client-bedrock-runtime/dist-cjs/index.js"(exports6, module) {
    "use strict";
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      AccessDeniedException: () => AccessDeniedException,
      ApplyGuardrailCommand: () => ApplyGuardrailCommand,
      ApplyGuardrailRequestFilterSensitiveLog: () => ApplyGuardrailRequestFilterSensitiveLog,
      AsyncInvokeOutputDataConfig: () => AsyncInvokeOutputDataConfig,
      AsyncInvokeStatus: () => AsyncInvokeStatus,
      AsyncInvokeSummaryFilterSensitiveLog: () => AsyncInvokeSummaryFilterSensitiveLog,
      BedrockRuntime: () => BedrockRuntime,
      BedrockRuntimeClient: () => BedrockRuntimeClient2,
      BedrockRuntimeServiceException: () => BedrockRuntimeServiceException,
      ConflictException: () => ConflictException,
      ContentBlock: () => ContentBlock,
      ContentBlockDelta: () => ContentBlockDelta,
      ContentBlockFilterSensitiveLog: () => ContentBlockFilterSensitiveLog,
      ContentBlockStart: () => ContentBlockStart,
      ConversationRole: () => ConversationRole,
      ConverseCommand: () => ConverseCommand2,
      ConverseOutput: () => ConverseOutput,
      ConverseOutputFilterSensitiveLog: () => ConverseOutputFilterSensitiveLog,
      ConverseRequestFilterSensitiveLog: () => ConverseRequestFilterSensitiveLog,
      ConverseResponseFilterSensitiveLog: () => ConverseResponseFilterSensitiveLog,
      ConverseStreamCommand: () => ConverseStreamCommand,
      ConverseStreamOutput: () => ConverseStreamOutput,
      ConverseStreamOutputFilterSensitiveLog: () => ConverseStreamOutputFilterSensitiveLog,
      ConverseStreamRequestFilterSensitiveLog: () => ConverseStreamRequestFilterSensitiveLog,
      ConverseStreamResponseFilterSensitiveLog: () => ConverseStreamResponseFilterSensitiveLog,
      DocumentFormat: () => DocumentFormat,
      DocumentSource: () => DocumentSource,
      GetAsyncInvokeCommand: () => GetAsyncInvokeCommand,
      GetAsyncInvokeResponseFilterSensitiveLog: () => GetAsyncInvokeResponseFilterSensitiveLog,
      GuardrailAction: () => GuardrailAction,
      GuardrailContentBlock: () => GuardrailContentBlock,
      GuardrailContentBlockFilterSensitiveLog: () => GuardrailContentBlockFilterSensitiveLog,
      GuardrailContentFilterConfidence: () => GuardrailContentFilterConfidence,
      GuardrailContentFilterStrength: () => GuardrailContentFilterStrength,
      GuardrailContentFilterType: () => GuardrailContentFilterType,
      GuardrailContentPolicyAction: () => GuardrailContentPolicyAction,
      GuardrailContentQualifier: () => GuardrailContentQualifier,
      GuardrailContentSource: () => GuardrailContentSource,
      GuardrailContextualGroundingFilterType: () => GuardrailContextualGroundingFilterType,
      GuardrailContextualGroundingPolicyAction: () => GuardrailContextualGroundingPolicyAction,
      GuardrailConverseContentBlock: () => GuardrailConverseContentBlock,
      GuardrailConverseContentBlockFilterSensitiveLog: () => GuardrailConverseContentBlockFilterSensitiveLog,
      GuardrailConverseContentQualifier: () => GuardrailConverseContentQualifier,
      GuardrailConverseImageBlockFilterSensitiveLog: () => GuardrailConverseImageBlockFilterSensitiveLog,
      GuardrailConverseImageFormat: () => GuardrailConverseImageFormat,
      GuardrailConverseImageSource: () => GuardrailConverseImageSource,
      GuardrailConverseImageSourceFilterSensitiveLog: () => GuardrailConverseImageSourceFilterSensitiveLog,
      GuardrailImageBlockFilterSensitiveLog: () => GuardrailImageBlockFilterSensitiveLog,
      GuardrailImageFormat: () => GuardrailImageFormat,
      GuardrailImageSource: () => GuardrailImageSource,
      GuardrailImageSourceFilterSensitiveLog: () => GuardrailImageSourceFilterSensitiveLog,
      GuardrailManagedWordType: () => GuardrailManagedWordType,
      GuardrailPiiEntityType: () => GuardrailPiiEntityType,
      GuardrailSensitiveInformationPolicyAction: () => GuardrailSensitiveInformationPolicyAction,
      GuardrailStreamProcessingMode: () => GuardrailStreamProcessingMode,
      GuardrailTopicPolicyAction: () => GuardrailTopicPolicyAction,
      GuardrailTopicType: () => GuardrailTopicType,
      GuardrailTrace: () => GuardrailTrace,
      GuardrailWordPolicyAction: () => GuardrailWordPolicyAction,
      ImageFormat: () => ImageFormat,
      ImageSource: () => ImageSource,
      InternalServerException: () => InternalServerException,
      InvokeModelCommand: () => InvokeModelCommand,
      InvokeModelRequestFilterSensitiveLog: () => InvokeModelRequestFilterSensitiveLog,
      InvokeModelResponseFilterSensitiveLog: () => InvokeModelResponseFilterSensitiveLog,
      InvokeModelWithResponseStreamCommand: () => InvokeModelWithResponseStreamCommand,
      InvokeModelWithResponseStreamRequestFilterSensitiveLog: () => InvokeModelWithResponseStreamRequestFilterSensitiveLog,
      InvokeModelWithResponseStreamResponseFilterSensitiveLog: () => InvokeModelWithResponseStreamResponseFilterSensitiveLog,
      ListAsyncInvokesCommand: () => ListAsyncInvokesCommand,
      ListAsyncInvokesResponseFilterSensitiveLog: () => ListAsyncInvokesResponseFilterSensitiveLog,
      MessageFilterSensitiveLog: () => MessageFilterSensitiveLog,
      ModelErrorException: () => ModelErrorException,
      ModelNotReadyException: () => ModelNotReadyException,
      ModelStreamErrorException: () => ModelStreamErrorException,
      ModelTimeoutException: () => ModelTimeoutException,
      PayloadPartFilterSensitiveLog: () => PayloadPartFilterSensitiveLog,
      PerformanceConfigLatency: () => PerformanceConfigLatency,
      PromptVariableValues: () => PromptVariableValues,
      ResourceNotFoundException: () => ResourceNotFoundException,
      ResponseStream: () => ResponseStream,
      ResponseStreamFilterSensitiveLog: () => ResponseStreamFilterSensitiveLog,
      ServiceQuotaExceededException: () => ServiceQuotaExceededException,
      ServiceUnavailableException: () => ServiceUnavailableException,
      SortAsyncInvocationBy: () => SortAsyncInvocationBy,
      SortOrder: () => SortOrder,
      StartAsyncInvokeCommand: () => StartAsyncInvokeCommand,
      StartAsyncInvokeRequestFilterSensitiveLog: () => StartAsyncInvokeRequestFilterSensitiveLog,
      StopReason: () => StopReason,
      SystemContentBlock: () => SystemContentBlock,
      SystemContentBlockFilterSensitiveLog: () => SystemContentBlockFilterSensitiveLog,
      ThrottlingException: () => ThrottlingException,
      Tool: () => Tool,
      ToolChoice: () => ToolChoice,
      ToolInputSchema: () => ToolInputSchema,
      ToolResultContentBlock: () => ToolResultContentBlock,
      ToolResultStatus: () => ToolResultStatus,
      Trace: () => Trace,
      ValidationException: () => ValidationException,
      VideoFormat: () => VideoFormat,
      VideoSource: () => VideoSource,
      __Client: () => import_smithy_client7.Client,
      paginateListAsyncInvokes: () => paginateListAsyncInvokes
    });
    module.exports = __toCommonJS3(src_exports);
    var import_middleware_host_header = require_dist_cjs3();
    var import_middleware_logger = require_dist_cjs4();
    var import_middleware_recursion_detection = require_dist_cjs5();
    var import_middleware_user_agent = require_dist_cjs24();
    var import_config_resolver = require_dist_cjs26();
    var import_core5 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var import_eventstream_serde_config_resolver = require_dist_cjs52();
    var import_middleware_content_length = require_dist_cjs27();
    var import_middleware_endpoint = require_dist_cjs32();
    var import_middleware_retry = require_dist_cjs35();
    var import_httpAuthSchemeProvider = require_httpAuthSchemeProvider4();
    var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "bedrock"
      };
    }, "resolveClientEndpointParameters");
    var commonParams = {
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
    var import_runtimeConfig = require_runtimeConfig4();
    var import_region_config_resolver = require_dist_cjs41();
    var import_protocol_http11 = require_dist_cjs2();
    var import_smithy_client7 = require_dist_cjs23();
    var getHttpAuthExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
      const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
      let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
      let _credentials = runtimeConfig.credentials;
      return {
        setHttpAuthScheme(httpAuthScheme) {
          const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
          if (index === -1) {
            _httpAuthSchemes.push(httpAuthScheme);
          } else {
            _httpAuthSchemes.splice(index, 1, httpAuthScheme);
          }
        },
        httpAuthSchemes() {
          return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
          _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
          return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
          _credentials = credentials;
        },
        credentials() {
          return _credentials;
        }
      };
    }, "getHttpAuthExtensionConfiguration");
    var resolveHttpAuthRuntimeConfig = /* @__PURE__ */ __name((config2) => {
      return {
        httpAuthSchemes: config2.httpAuthSchemes(),
        httpAuthSchemeProvider: config2.httpAuthSchemeProvider(),
        credentials: config2.credentials()
      };
    }, "resolveHttpAuthRuntimeConfig");
    var asPartial = /* @__PURE__ */ __name((t) => t, "asPartial");
    var resolveRuntimeExtensions = /* @__PURE__ */ __name((runtimeConfig, extensions) => {
      const extensionConfiguration = {
        ...asPartial((0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig)),
        ...asPartial((0, import_smithy_client7.getDefaultExtensionConfiguration)(runtimeConfig)),
        ...asPartial((0, import_protocol_http11.getHttpHandlerExtensionConfiguration)(runtimeConfig)),
        ...asPartial(getHttpAuthExtensionConfiguration(runtimeConfig))
      };
      extensions.forEach((extension) => extension.configure(extensionConfiguration));
      return {
        ...runtimeConfig,
        ...(0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
        ...(0, import_smithy_client7.resolveDefaultRuntimeConfig)(extensionConfiguration),
        ...(0, import_protocol_http11.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),
        ...resolveHttpAuthRuntimeConfig(extensionConfiguration)
      };
    }, "resolveRuntimeExtensions");
    var _BedrockRuntimeClient = class _BedrockRuntimeClient extends import_smithy_client7.Client {
      constructor(...[configuration]) {
        const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});
        const _config_1 = resolveClientEndpointParameters(_config_0);
        const _config_2 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_1);
        const _config_3 = (0, import_middleware_retry.resolveRetryConfig)(_config_2);
        const _config_4 = (0, import_config_resolver.resolveRegionConfig)(_config_3);
        const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, import_middleware_endpoint.resolveEndpointConfig)(_config_5);
        const _config_7 = (0, import_eventstream_serde_config_resolver.resolveEventStreamSerdeConfig)(_config_6);
        const _config_8 = (0, import_httpAuthSchemeProvider.resolveHttpAuthSchemeConfig)(_config_7);
        const _config_9 = resolveRuntimeExtensions(_config_8, (configuration == null ? void 0 : configuration.extensions) || []);
        super(_config_9);
        this.config = _config_9;
        this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_retry.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_content_length.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_host_header.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use(
          (0, import_core5.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
            httpAuthSchemeParametersProvider: import_httpAuthSchemeProvider.defaultBedrockRuntimeHttpAuthSchemeParametersProvider,
            identityProviderConfigProvider: async (config2) => new import_core5.DefaultIdentityProviderConfig({
              "aws.auth#sigv4": config2.credentials
            })
          })
        );
        this.middlewareStack.use((0, import_core5.getHttpSigningPlugin)(this.config));
      }
      /**
       * Destroy underlying resources, like sockets. It's usually not necessary to do this.
       * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
       * Otherwise, sockets might stay open for quite a long time before the server terminates them.
       */
      destroy() {
        super.destroy();
      }
    };
    __name(_BedrockRuntimeClient, "BedrockRuntimeClient");
    var BedrockRuntimeClient2 = _BedrockRuntimeClient;
    var import_middleware_serde2 = require_dist_cjs7();
    var _BedrockRuntimeServiceException = class _BedrockRuntimeServiceException2 extends import_smithy_client7.ServiceException {
      /**
       * @internal
       */
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, _BedrockRuntimeServiceException2.prototype);
      }
    };
    __name(_BedrockRuntimeServiceException, "BedrockRuntimeServiceException");
    var BedrockRuntimeServiceException = _BedrockRuntimeServiceException;
    var _AccessDeniedException = class _AccessDeniedException2 extends BedrockRuntimeServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "AccessDeniedException",
          $fault: "client",
          ...opts
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _AccessDeniedException2.prototype);
      }
    };
    __name(_AccessDeniedException, "AccessDeniedException");
    var AccessDeniedException = _AccessDeniedException;
    var AsyncInvokeOutputDataConfig;
    ((AsyncInvokeOutputDataConfig3) => {
      AsyncInvokeOutputDataConfig3.visit = /* @__PURE__ */ __name((value, visitor) => {
        if (value.s3OutputDataConfig !== void 0)
          return visitor.s3OutputDataConfig(value.s3OutputDataConfig);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      }, "visit");
    })(AsyncInvokeOutputDataConfig || (AsyncInvokeOutputDataConfig = {}));
    var AsyncInvokeStatus = {
      COMPLETED: "Completed",
      FAILED: "Failed",
      IN_PROGRESS: "InProgress"
    };
    var _InternalServerException = class _InternalServerException2 extends BedrockRuntimeServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InternalServerException",
          $fault: "server",
          ...opts
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, _InternalServerException2.prototype);
      }
    };
    __name(_InternalServerException, "InternalServerException");
    var InternalServerException = _InternalServerException;
    var _ThrottlingException = class _ThrottlingException2 extends BedrockRuntimeServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ThrottlingException",
          $fault: "client",
          ...opts
        });
        this.name = "ThrottlingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ThrottlingException2.prototype);
      }
    };
    __name(_ThrottlingException, "ThrottlingException");
    var ThrottlingException = _ThrottlingException;
    var _ValidationException = class _ValidationException2 extends BedrockRuntimeServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ValidationException",
          $fault: "client",
          ...opts
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ValidationException2.prototype);
      }
    };
    __name(_ValidationException, "ValidationException");
    var ValidationException = _ValidationException;
    var SortAsyncInvocationBy = {
      SUBMISSION_TIME: "SubmissionTime"
    };
    var SortOrder = {
      ASCENDING: "Ascending",
      DESCENDING: "Descending"
    };
    var _ConflictException = class _ConflictException2 extends BedrockRuntimeServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ConflictException",
          $fault: "client",
          ...opts
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ConflictException2.prototype);
      }
    };
    __name(_ConflictException, "ConflictException");
    var ConflictException = _ConflictException;
    var _ResourceNotFoundException = class _ResourceNotFoundException2 extends BedrockRuntimeServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ResourceNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ResourceNotFoundException2.prototype);
      }
    };
    __name(_ResourceNotFoundException, "ResourceNotFoundException");
    var ResourceNotFoundException = _ResourceNotFoundException;
    var _ServiceQuotaExceededException = class _ServiceQuotaExceededException2 extends BedrockRuntimeServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ServiceQuotaExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "ServiceQuotaExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ServiceQuotaExceededException2.prototype);
      }
    };
    __name(_ServiceQuotaExceededException, "ServiceQuotaExceededException");
    var ServiceQuotaExceededException = _ServiceQuotaExceededException;
    var _ServiceUnavailableException = class _ServiceUnavailableException2 extends BedrockRuntimeServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ServiceUnavailableException",
          $fault: "server",
          ...opts
        });
        this.name = "ServiceUnavailableException";
        this.$fault = "server";
        Object.setPrototypeOf(this, _ServiceUnavailableException2.prototype);
      }
    };
    __name(_ServiceUnavailableException, "ServiceUnavailableException");
    var ServiceUnavailableException = _ServiceUnavailableException;
    var GuardrailImageFormat = {
      JPEG: "jpeg",
      PNG: "png"
    };
    var GuardrailImageSource;
    ((GuardrailImageSource2) => {
      GuardrailImageSource2.visit = /* @__PURE__ */ __name((value, visitor) => {
        if (value.bytes !== void 0)
          return visitor.bytes(value.bytes);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      }, "visit");
    })(GuardrailImageSource || (GuardrailImageSource = {}));
    var GuardrailContentQualifier = {
      GROUNDING_SOURCE: "grounding_source",
      GUARD_CONTENT: "guard_content",
      QUERY: "query"
    };
    var GuardrailContentBlock;
    ((GuardrailContentBlock2) => {
      GuardrailContentBlock2.visit = /* @__PURE__ */ __name((value, visitor) => {
        if (value.text !== void 0)
          return visitor.text(value.text);
        if (value.image !== void 0)
          return visitor.image(value.image);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      }, "visit");
    })(GuardrailContentBlock || (GuardrailContentBlock = {}));
    var GuardrailContentSource = {
      INPUT: "INPUT",
      OUTPUT: "OUTPUT"
    };
    var GuardrailAction = {
      GUARDRAIL_INTERVENED: "GUARDRAIL_INTERVENED",
      NONE: "NONE"
    };
    var GuardrailContentPolicyAction = {
      BLOCKED: "BLOCKED"
    };
    var GuardrailContentFilterConfidence = {
      HIGH: "HIGH",
      LOW: "LOW",
      MEDIUM: "MEDIUM",
      NONE: "NONE"
    };
    var GuardrailContentFilterStrength = {
      HIGH: "HIGH",
      LOW: "LOW",
      MEDIUM: "MEDIUM",
      NONE: "NONE"
    };
    var GuardrailContentFilterType = {
      HATE: "HATE",
      INSULTS: "INSULTS",
      MISCONDUCT: "MISCONDUCT",
      PROMPT_ATTACK: "PROMPT_ATTACK",
      SEXUAL: "SEXUAL",
      VIOLENCE: "VIOLENCE"
    };
    var GuardrailContextualGroundingPolicyAction = {
      BLOCKED: "BLOCKED",
      NONE: "NONE"
    };
    var GuardrailContextualGroundingFilterType = {
      GROUNDING: "GROUNDING",
      RELEVANCE: "RELEVANCE"
    };
    var GuardrailSensitiveInformationPolicyAction = {
      ANONYMIZED: "ANONYMIZED",
      BLOCKED: "BLOCKED"
    };
    var GuardrailPiiEntityType = {
      ADDRESS: "ADDRESS",
      AGE: "AGE",
      AWS_ACCESS_KEY: "AWS_ACCESS_KEY",
      AWS_SECRET_KEY: "AWS_SECRET_KEY",
      CA_HEALTH_NUMBER: "CA_HEALTH_NUMBER",
      CA_SOCIAL_INSURANCE_NUMBER: "CA_SOCIAL_INSURANCE_NUMBER",
      CREDIT_DEBIT_CARD_CVV: "CREDIT_DEBIT_CARD_CVV",
      CREDIT_DEBIT_CARD_EXPIRY: "CREDIT_DEBIT_CARD_EXPIRY",
      CREDIT_DEBIT_CARD_NUMBER: "CREDIT_DEBIT_CARD_NUMBER",
      DRIVER_ID: "DRIVER_ID",
      EMAIL: "EMAIL",
      INTERNATIONAL_BANK_ACCOUNT_NUMBER: "INTERNATIONAL_BANK_ACCOUNT_NUMBER",
      IP_ADDRESS: "IP_ADDRESS",
      LICENSE_PLATE: "LICENSE_PLATE",
      MAC_ADDRESS: "MAC_ADDRESS",
      NAME: "NAME",
      PASSWORD: "PASSWORD",
      PHONE: "PHONE",
      PIN: "PIN",
      SWIFT_CODE: "SWIFT_CODE",
      UK_NATIONAL_HEALTH_SERVICE_NUMBER: "UK_NATIONAL_HEALTH_SERVICE_NUMBER",
      UK_NATIONAL_INSURANCE_NUMBER: "UK_NATIONAL_INSURANCE_NUMBER",
      UK_UNIQUE_TAXPAYER_REFERENCE_NUMBER: "UK_UNIQUE_TAXPAYER_REFERENCE_NUMBER",
      URL: "URL",
      USERNAME: "USERNAME",
      US_BANK_ACCOUNT_NUMBER: "US_BANK_ACCOUNT_NUMBER",
      US_BANK_ROUTING_NUMBER: "US_BANK_ROUTING_NUMBER",
      US_INDIVIDUAL_TAX_IDENTIFICATION_NUMBER: "US_INDIVIDUAL_TAX_IDENTIFICATION_NUMBER",
      US_PASSPORT_NUMBER: "US_PASSPORT_NUMBER",
      US_SOCIAL_SECURITY_NUMBER: "US_SOCIAL_SECURITY_NUMBER",
      VEHICLE_IDENTIFICATION_NUMBER: "VEHICLE_IDENTIFICATION_NUMBER"
    };
    var GuardrailTopicPolicyAction = {
      BLOCKED: "BLOCKED"
    };
    var GuardrailTopicType = {
      DENY: "DENY"
    };
    var GuardrailWordPolicyAction = {
      BLOCKED: "BLOCKED"
    };
    var GuardrailManagedWordType = {
      PROFANITY: "PROFANITY"
    };
    var GuardrailTrace = {
      DISABLED: "disabled",
      ENABLED: "enabled"
    };
    var DocumentFormat = {
      CSV: "csv",
      DOC: "doc",
      DOCX: "docx",
      HTML: "html",
      MD: "md",
      PDF: "pdf",
      TXT: "txt",
      XLS: "xls",
      XLSX: "xlsx"
    };
    var DocumentSource;
    ((DocumentSource2) => {
      DocumentSource2.visit = /* @__PURE__ */ __name((value, visitor) => {
        if (value.bytes !== void 0)
          return visitor.bytes(value.bytes);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      }, "visit");
    })(DocumentSource || (DocumentSource = {}));
    var GuardrailConverseImageFormat = {
      JPEG: "jpeg",
      PNG: "png"
    };
    var GuardrailConverseImageSource;
    ((GuardrailConverseImageSource2) => {
      GuardrailConverseImageSource2.visit = /* @__PURE__ */ __name((value, visitor) => {
        if (value.bytes !== void 0)
          return visitor.bytes(value.bytes);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      }, "visit");
    })(GuardrailConverseImageSource || (GuardrailConverseImageSource = {}));
    var GuardrailConverseContentQualifier = {
      GROUNDING_SOURCE: "grounding_source",
      GUARD_CONTENT: "guard_content",
      QUERY: "query"
    };
    var GuardrailConverseContentBlock;
    ((GuardrailConverseContentBlock2) => {
      GuardrailConverseContentBlock2.visit = /* @__PURE__ */ __name((value, visitor) => {
        if (value.text !== void 0)
          return visitor.text(value.text);
        if (value.image !== void 0)
          return visitor.image(value.image);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      }, "visit");
    })(GuardrailConverseContentBlock || (GuardrailConverseContentBlock = {}));
    var ImageFormat = {
      GIF: "gif",
      JPEG: "jpeg",
      PNG: "png",
      WEBP: "webp"
    };
    var ImageSource;
    ((ImageSource2) => {
      ImageSource2.visit = /* @__PURE__ */ __name((value, visitor) => {
        if (value.bytes !== void 0)
          return visitor.bytes(value.bytes);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      }, "visit");
    })(ImageSource || (ImageSource = {}));
    var VideoFormat = {
      FLV: "flv",
      MKV: "mkv",
      MOV: "mov",
      MP4: "mp4",
      MPEG: "mpeg",
      MPG: "mpg",
      THREE_GP: "three_gp",
      WEBM: "webm",
      WMV: "wmv"
    };
    var VideoSource;
    ((VideoSource2) => {
      VideoSource2.visit = /* @__PURE__ */ __name((value, visitor) => {
        if (value.bytes !== void 0)
          return visitor.bytes(value.bytes);
        if (value.s3Location !== void 0)
          return visitor.s3Location(value.s3Location);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      }, "visit");
    })(VideoSource || (VideoSource = {}));
    var ToolResultContentBlock;
    ((ToolResultContentBlock2) => {
      ToolResultContentBlock2.visit = /* @__PURE__ */ __name((value, visitor) => {
        if (value.json !== void 0)
          return visitor.json(value.json);
        if (value.text !== void 0)
          return visitor.text(value.text);
        if (value.image !== void 0)
          return visitor.image(value.image);
        if (value.document !== void 0)
          return visitor.document(value.document);
        if (value.video !== void 0)
          return visitor.video(value.video);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      }, "visit");
    })(ToolResultContentBlock || (ToolResultContentBlock = {}));
    var ToolResultStatus = {
      ERROR: "error",
      SUCCESS: "success"
    };
    var ContentBlock;
    ((ContentBlock2) => {
      ContentBlock2.visit = /* @__PURE__ */ __name((value, visitor) => {
        if (value.text !== void 0)
          return visitor.text(value.text);
        if (value.image !== void 0)
          return visitor.image(value.image);
        if (value.document !== void 0)
          return visitor.document(value.document);
        if (value.video !== void 0)
          return visitor.video(value.video);
        if (value.toolUse !== void 0)
          return visitor.toolUse(value.toolUse);
        if (value.toolResult !== void 0)
          return visitor.toolResult(value.toolResult);
        if (value.guardContent !== void 0)
          return visitor.guardContent(value.guardContent);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      }, "visit");
    })(ContentBlock || (ContentBlock = {}));
    var ConversationRole = {
      ASSISTANT: "assistant",
      USER: "user"
    };
    var PerformanceConfigLatency = {
      OPTIMIZED: "optimized",
      STANDARD: "standard"
    };
    var PromptVariableValues;
    ((PromptVariableValues3) => {
      PromptVariableValues3.visit = /* @__PURE__ */ __name((value, visitor) => {
        if (value.text !== void 0)
          return visitor.text(value.text);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      }, "visit");
    })(PromptVariableValues || (PromptVariableValues = {}));
    var SystemContentBlock;
    ((SystemContentBlock2) => {
      SystemContentBlock2.visit = /* @__PURE__ */ __name((value, visitor) => {
        if (value.text !== void 0)
          return visitor.text(value.text);
        if (value.guardContent !== void 0)
          return visitor.guardContent(value.guardContent);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      }, "visit");
    })(SystemContentBlock || (SystemContentBlock = {}));
    var ToolChoice;
    ((ToolChoice3) => {
      ToolChoice3.visit = /* @__PURE__ */ __name((value, visitor) => {
        if (value.auto !== void 0)
          return visitor.auto(value.auto);
        if (value.any !== void 0)
          return visitor.any(value.any);
        if (value.tool !== void 0)
          return visitor.tool(value.tool);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      }, "visit");
    })(ToolChoice || (ToolChoice = {}));
    var ToolInputSchema;
    ((ToolInputSchema2) => {
      ToolInputSchema2.visit = /* @__PURE__ */ __name((value, visitor) => {
        if (value.json !== void 0)
          return visitor.json(value.json);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      }, "visit");
    })(ToolInputSchema || (ToolInputSchema = {}));
    var Tool;
    ((Tool2) => {
      Tool2.visit = /* @__PURE__ */ __name((value, visitor) => {
        if (value.toolSpec !== void 0)
          return visitor.toolSpec(value.toolSpec);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      }, "visit");
    })(Tool || (Tool = {}));
    var ConverseOutput;
    ((ConverseOutput3) => {
      ConverseOutput3.visit = /* @__PURE__ */ __name((value, visitor) => {
        if (value.message !== void 0)
          return visitor.message(value.message);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      }, "visit");
    })(ConverseOutput || (ConverseOutput = {}));
    var StopReason = {
      CONTENT_FILTERED: "content_filtered",
      END_TURN: "end_turn",
      GUARDRAIL_INTERVENED: "guardrail_intervened",
      MAX_TOKENS: "max_tokens",
      STOP_SEQUENCE: "stop_sequence",
      TOOL_USE: "tool_use"
    };
    var _ModelErrorException = class _ModelErrorException2 extends BedrockRuntimeServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ModelErrorException",
          $fault: "client",
          ...opts
        });
        this.name = "ModelErrorException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ModelErrorException2.prototype);
        this.originalStatusCode = opts.originalStatusCode;
        this.resourceName = opts.resourceName;
      }
    };
    __name(_ModelErrorException, "ModelErrorException");
    var ModelErrorException = _ModelErrorException;
    var _ModelNotReadyException = class _ModelNotReadyException2 extends BedrockRuntimeServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ModelNotReadyException",
          $fault: "client",
          ...opts
        });
        this.name = "ModelNotReadyException";
        this.$fault = "client";
        this.$retryable = {};
        Object.setPrototypeOf(this, _ModelNotReadyException2.prototype);
      }
    };
    __name(_ModelNotReadyException, "ModelNotReadyException");
    var ModelNotReadyException = _ModelNotReadyException;
    var _ModelTimeoutException = class _ModelTimeoutException2 extends BedrockRuntimeServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ModelTimeoutException",
          $fault: "client",
          ...opts
        });
        this.name = "ModelTimeoutException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ModelTimeoutException2.prototype);
      }
    };
    __name(_ModelTimeoutException, "ModelTimeoutException");
    var ModelTimeoutException = _ModelTimeoutException;
    var GuardrailStreamProcessingMode = {
      ASYNC: "async",
      SYNC: "sync"
    };
    var ContentBlockDelta;
    ((ContentBlockDelta2) => {
      ContentBlockDelta2.visit = /* @__PURE__ */ __name((value, visitor) => {
        if (value.text !== void 0)
          return visitor.text(value.text);
        if (value.toolUse !== void 0)
          return visitor.toolUse(value.toolUse);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      }, "visit");
    })(ContentBlockDelta || (ContentBlockDelta = {}));
    var ContentBlockStart;
    ((ContentBlockStart2) => {
      ContentBlockStart2.visit = /* @__PURE__ */ __name((value, visitor) => {
        if (value.toolUse !== void 0)
          return visitor.toolUse(value.toolUse);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      }, "visit");
    })(ContentBlockStart || (ContentBlockStart = {}));
    var _ModelStreamErrorException = class _ModelStreamErrorException2 extends BedrockRuntimeServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ModelStreamErrorException",
          $fault: "client",
          ...opts
        });
        this.name = "ModelStreamErrorException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ModelStreamErrorException2.prototype);
        this.originalStatusCode = opts.originalStatusCode;
        this.originalMessage = opts.originalMessage;
      }
    };
    __name(_ModelStreamErrorException, "ModelStreamErrorException");
    var ModelStreamErrorException = _ModelStreamErrorException;
    var ConverseStreamOutput;
    ((ConverseStreamOutput3) => {
      ConverseStreamOutput3.visit = /* @__PURE__ */ __name((value, visitor) => {
        if (value.messageStart !== void 0)
          return visitor.messageStart(value.messageStart);
        if (value.contentBlockStart !== void 0)
          return visitor.contentBlockStart(value.contentBlockStart);
        if (value.contentBlockDelta !== void 0)
          return visitor.contentBlockDelta(value.contentBlockDelta);
        if (value.contentBlockStop !== void 0)
          return visitor.contentBlockStop(value.contentBlockStop);
        if (value.messageStop !== void 0)
          return visitor.messageStop(value.messageStop);
        if (value.metadata !== void 0)
          return visitor.metadata(value.metadata);
        if (value.internalServerException !== void 0)
          return visitor.internalServerException(value.internalServerException);
        if (value.modelStreamErrorException !== void 0)
          return visitor.modelStreamErrorException(value.modelStreamErrorException);
        if (value.validationException !== void 0)
          return visitor.validationException(value.validationException);
        if (value.throttlingException !== void 0)
          return visitor.throttlingException(value.throttlingException);
        if (value.serviceUnavailableException !== void 0)
          return visitor.serviceUnavailableException(value.serviceUnavailableException);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      }, "visit");
    })(ConverseStreamOutput || (ConverseStreamOutput = {}));
    var Trace = {
      DISABLED: "DISABLED",
      ENABLED: "ENABLED"
    };
    var ResponseStream;
    ((ResponseStream3) => {
      ResponseStream3.visit = /* @__PURE__ */ __name((value, visitor) => {
        if (value.chunk !== void 0)
          return visitor.chunk(value.chunk);
        if (value.internalServerException !== void 0)
          return visitor.internalServerException(value.internalServerException);
        if (value.modelStreamErrorException !== void 0)
          return visitor.modelStreamErrorException(value.modelStreamErrorException);
        if (value.validationException !== void 0)
          return visitor.validationException(value.validationException);
        if (value.throttlingException !== void 0)
          return visitor.throttlingException(value.throttlingException);
        if (value.modelTimeoutException !== void 0)
          return visitor.modelTimeoutException(value.modelTimeoutException);
        if (value.serviceUnavailableException !== void 0)
          return visitor.serviceUnavailableException(value.serviceUnavailableException);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      }, "visit");
    })(ResponseStream || (ResponseStream = {}));
    var GetAsyncInvokeResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.failureMessage && { failureMessage: import_smithy_client7.SENSITIVE_STRING },
      ...obj.outputDataConfig && { outputDataConfig: obj.outputDataConfig }
    }), "GetAsyncInvokeResponseFilterSensitiveLog");
    var AsyncInvokeSummaryFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.failureMessage && { failureMessage: import_smithy_client7.SENSITIVE_STRING },
      ...obj.outputDataConfig && { outputDataConfig: obj.outputDataConfig }
    }), "AsyncInvokeSummaryFilterSensitiveLog");
    var ListAsyncInvokesResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.asyncInvokeSummaries && {
        asyncInvokeSummaries: obj.asyncInvokeSummaries.map((item) => AsyncInvokeSummaryFilterSensitiveLog(item))
      }
    }), "ListAsyncInvokesResponseFilterSensitiveLog");
    var StartAsyncInvokeRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.modelInput && { modelInput: import_smithy_client7.SENSITIVE_STRING },
      ...obj.outputDataConfig && { outputDataConfig: obj.outputDataConfig }
    }), "StartAsyncInvokeRequestFilterSensitiveLog");
    var GuardrailImageSourceFilterSensitiveLog = /* @__PURE__ */ __name((obj) => {
      if (obj.bytes !== void 0)
        return { bytes: obj.bytes };
      if (obj.$unknown !== void 0)
        return { [obj.$unknown[0]]: "UNKNOWN" };
    }, "GuardrailImageSourceFilterSensitiveLog");
    var GuardrailImageBlockFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.source && { source: import_smithy_client7.SENSITIVE_STRING }
    }), "GuardrailImageBlockFilterSensitiveLog");
    var GuardrailContentBlockFilterSensitiveLog = /* @__PURE__ */ __name((obj) => {
      if (obj.text !== void 0)
        return { text: obj.text };
      if (obj.image !== void 0)
        return { image: import_smithy_client7.SENSITIVE_STRING };
      if (obj.$unknown !== void 0)
        return { [obj.$unknown[0]]: "UNKNOWN" };
    }, "GuardrailContentBlockFilterSensitiveLog");
    var ApplyGuardrailRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.content && { content: obj.content.map((item) => GuardrailContentBlockFilterSensitiveLog(item)) }
    }), "ApplyGuardrailRequestFilterSensitiveLog");
    var GuardrailConverseImageSourceFilterSensitiveLog = /* @__PURE__ */ __name((obj) => {
      if (obj.bytes !== void 0)
        return { bytes: obj.bytes };
      if (obj.$unknown !== void 0)
        return { [obj.$unknown[0]]: "UNKNOWN" };
    }, "GuardrailConverseImageSourceFilterSensitiveLog");
    var GuardrailConverseImageBlockFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.source && { source: import_smithy_client7.SENSITIVE_STRING }
    }), "GuardrailConverseImageBlockFilterSensitiveLog");
    var GuardrailConverseContentBlockFilterSensitiveLog = /* @__PURE__ */ __name((obj) => {
      if (obj.text !== void 0)
        return { text: obj.text };
      if (obj.image !== void 0)
        return { image: import_smithy_client7.SENSITIVE_STRING };
      if (obj.$unknown !== void 0)
        return { [obj.$unknown[0]]: "UNKNOWN" };
    }, "GuardrailConverseContentBlockFilterSensitiveLog");
    var ContentBlockFilterSensitiveLog = /* @__PURE__ */ __name((obj) => {
      if (obj.text !== void 0)
        return { text: obj.text };
      if (obj.image !== void 0)
        return { image: obj.image };
      if (obj.document !== void 0)
        return { document: obj.document };
      if (obj.video !== void 0)
        return { video: obj.video };
      if (obj.toolUse !== void 0)
        return { toolUse: obj.toolUse };
      if (obj.toolResult !== void 0)
        return { toolResult: obj.toolResult };
      if (obj.guardContent !== void 0)
        return { guardContent: GuardrailConverseContentBlockFilterSensitiveLog(obj.guardContent) };
      if (obj.$unknown !== void 0)
        return { [obj.$unknown[0]]: "UNKNOWN" };
    }, "ContentBlockFilterSensitiveLog");
    var MessageFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.content && { content: obj.content.map((item) => ContentBlockFilterSensitiveLog(item)) }
    }), "MessageFilterSensitiveLog");
    var SystemContentBlockFilterSensitiveLog = /* @__PURE__ */ __name((obj) => {
      if (obj.text !== void 0)
        return { text: obj.text };
      if (obj.guardContent !== void 0)
        return { guardContent: GuardrailConverseContentBlockFilterSensitiveLog(obj.guardContent) };
      if (obj.$unknown !== void 0)
        return { [obj.$unknown[0]]: "UNKNOWN" };
    }, "SystemContentBlockFilterSensitiveLog");
    var ConverseRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.messages && { messages: obj.messages.map((item) => MessageFilterSensitiveLog(item)) },
      ...obj.system && { system: obj.system.map((item) => SystemContentBlockFilterSensitiveLog(item)) },
      ...obj.toolConfig && { toolConfig: obj.toolConfig },
      ...obj.promptVariables && { promptVariables: import_smithy_client7.SENSITIVE_STRING },
      ...obj.requestMetadata && { requestMetadata: import_smithy_client7.SENSITIVE_STRING }
    }), "ConverseRequestFilterSensitiveLog");
    var ConverseOutputFilterSensitiveLog = /* @__PURE__ */ __name((obj) => {
      if (obj.message !== void 0)
        return { message: MessageFilterSensitiveLog(obj.message) };
      if (obj.$unknown !== void 0)
        return { [obj.$unknown[0]]: "UNKNOWN" };
    }, "ConverseOutputFilterSensitiveLog");
    var ConverseResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.output && { output: ConverseOutputFilterSensitiveLog(obj.output) }
    }), "ConverseResponseFilterSensitiveLog");
    var ConverseStreamRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.messages && { messages: obj.messages.map((item) => MessageFilterSensitiveLog(item)) },
      ...obj.system && { system: obj.system.map((item) => SystemContentBlockFilterSensitiveLog(item)) },
      ...obj.toolConfig && { toolConfig: obj.toolConfig },
      ...obj.promptVariables && { promptVariables: import_smithy_client7.SENSITIVE_STRING },
      ...obj.requestMetadata && { requestMetadata: import_smithy_client7.SENSITIVE_STRING }
    }), "ConverseStreamRequestFilterSensitiveLog");
    var ConverseStreamOutputFilterSensitiveLog = /* @__PURE__ */ __name((obj) => {
      if (obj.messageStart !== void 0)
        return { messageStart: obj.messageStart };
      if (obj.contentBlockStart !== void 0)
        return { contentBlockStart: obj.contentBlockStart };
      if (obj.contentBlockDelta !== void 0)
        return { contentBlockDelta: obj.contentBlockDelta };
      if (obj.contentBlockStop !== void 0)
        return { contentBlockStop: obj.contentBlockStop };
      if (obj.messageStop !== void 0)
        return { messageStop: obj.messageStop };
      if (obj.metadata !== void 0)
        return { metadata: obj.metadata };
      if (obj.internalServerException !== void 0)
        return { internalServerException: obj.internalServerException };
      if (obj.modelStreamErrorException !== void 0)
        return { modelStreamErrorException: obj.modelStreamErrorException };
      if (obj.validationException !== void 0)
        return { validationException: obj.validationException };
      if (obj.throttlingException !== void 0)
        return { throttlingException: obj.throttlingException };
      if (obj.serviceUnavailableException !== void 0)
        return { serviceUnavailableException: obj.serviceUnavailableException };
      if (obj.$unknown !== void 0)
        return { [obj.$unknown[0]]: "UNKNOWN" };
    }, "ConverseStreamOutputFilterSensitiveLog");
    var ConverseStreamResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.stream && { stream: "STREAMING_CONTENT" }
    }), "ConverseStreamResponseFilterSensitiveLog");
    var InvokeModelRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.body && { body: import_smithy_client7.SENSITIVE_STRING }
    }), "InvokeModelRequestFilterSensitiveLog");
    var InvokeModelResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.body && { body: import_smithy_client7.SENSITIVE_STRING }
    }), "InvokeModelResponseFilterSensitiveLog");
    var InvokeModelWithResponseStreamRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.body && { body: import_smithy_client7.SENSITIVE_STRING }
    }), "InvokeModelWithResponseStreamRequestFilterSensitiveLog");
    var PayloadPartFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.bytes && { bytes: import_smithy_client7.SENSITIVE_STRING }
    }), "PayloadPartFilterSensitiveLog");
    var ResponseStreamFilterSensitiveLog = /* @__PURE__ */ __name((obj) => {
      if (obj.chunk !== void 0)
        return { chunk: import_smithy_client7.SENSITIVE_STRING };
      if (obj.internalServerException !== void 0)
        return { internalServerException: obj.internalServerException };
      if (obj.modelStreamErrorException !== void 0)
        return { modelStreamErrorException: obj.modelStreamErrorException };
      if (obj.validationException !== void 0)
        return { validationException: obj.validationException };
      if (obj.throttlingException !== void 0)
        return { throttlingException: obj.throttlingException };
      if (obj.modelTimeoutException !== void 0)
        return { modelTimeoutException: obj.modelTimeoutException };
      if (obj.serviceUnavailableException !== void 0)
        return { serviceUnavailableException: obj.serviceUnavailableException };
      if (obj.$unknown !== void 0)
        return { [obj.$unknown[0]]: "UNKNOWN" };
    }, "ResponseStreamFilterSensitiveLog");
    var InvokeModelWithResponseStreamResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.body && { body: "STREAMING_CONTENT" }
    }), "InvokeModelWithResponseStreamResponseFilterSensitiveLog");
    var import_core22 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var import_uuid = (init_esm_node(), __toCommonJS(esm_node_exports));
    var se_ApplyGuardrailCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {
        "content-type": "application/json"
      };
      b.bp("/guardrail/{guardrailIdentifier}/version/{guardrailVersion}/apply");
      b.p("guardrailIdentifier", () => input.guardrailIdentifier, "{guardrailIdentifier}", false);
      b.p("guardrailVersion", () => input.guardrailVersion, "{guardrailVersion}", false);
      let body;
      body = JSON.stringify(
        (0, import_smithy_client7.take)(input, {
          content: (_) => se_GuardrailContentBlockList(_, context),
          source: []
        })
      );
      b.m("POST").h(headers).b(body);
      return b.build();
    }, "se_ApplyGuardrailCommand");
    var se_ConverseCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {
        "content-type": "application/json"
      };
      b.bp("/model/{modelId}/converse");
      b.p("modelId", () => input.modelId, "{modelId}", false);
      let body;
      body = JSON.stringify(
        (0, import_smithy_client7.take)(input, {
          additionalModelRequestFields: (_) => se_Document(_, context),
          additionalModelResponseFieldPaths: (_) => (0, import_smithy_client7._json)(_),
          guardrailConfig: (_) => (0, import_smithy_client7._json)(_),
          inferenceConfig: (_) => se_InferenceConfiguration(_, context),
          messages: (_) => se_Messages(_, context),
          performanceConfig: (_) => (0, import_smithy_client7._json)(_),
          promptVariables: (_) => (0, import_smithy_client7._json)(_),
          requestMetadata: (_) => (0, import_smithy_client7._json)(_),
          system: (_) => se_SystemContentBlocks(_, context),
          toolConfig: (_) => se_ToolConfiguration(_, context)
        })
      );
      b.m("POST").h(headers).b(body);
      return b.build();
    }, "se_ConverseCommand");
    var se_ConverseStreamCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {
        "content-type": "application/json"
      };
      b.bp("/model/{modelId}/converse-stream");
      b.p("modelId", () => input.modelId, "{modelId}", false);
      let body;
      body = JSON.stringify(
        (0, import_smithy_client7.take)(input, {
          additionalModelRequestFields: (_) => se_Document(_, context),
          additionalModelResponseFieldPaths: (_) => (0, import_smithy_client7._json)(_),
          guardrailConfig: (_) => (0, import_smithy_client7._json)(_),
          inferenceConfig: (_) => se_InferenceConfiguration(_, context),
          messages: (_) => se_Messages(_, context),
          performanceConfig: (_) => (0, import_smithy_client7._json)(_),
          promptVariables: (_) => (0, import_smithy_client7._json)(_),
          requestMetadata: (_) => (0, import_smithy_client7._json)(_),
          system: (_) => se_SystemContentBlocks(_, context),
          toolConfig: (_) => se_ToolConfiguration(_, context)
        })
      );
      b.m("POST").h(headers).b(body);
      return b.build();
    }, "se_ConverseStreamCommand");
    var se_GetAsyncInvokeCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {};
      b.bp("/async-invoke/{invocationArn}");
      b.p("invocationArn", () => input.invocationArn, "{invocationArn}", false);
      let body;
      b.m("GET").h(headers).b(body);
      return b.build();
    }, "se_GetAsyncInvokeCommand");
    var se_InvokeModelCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = (0, import_smithy_client7.map)({}, import_smithy_client7.isSerializableHeaderValue, {
        [_ct]: input[_cT] || "application/octet-stream",
        [_a]: input[_a],
        [_xabt]: input[_t],
        [_xabg]: input[_gI],
        [_xabg_]: input[_gV],
        [_xabpl]: input[_pCL]
      });
      b.bp("/model/{modelId}/invoke");
      b.p("modelId", () => input.modelId, "{modelId}", false);
      let body;
      if (input.body !== void 0) {
        body = input.body;
      }
      b.m("POST").h(headers).b(body);
      return b.build();
    }, "se_InvokeModelCommand");
    var se_InvokeModelWithResponseStreamCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = (0, import_smithy_client7.map)({}, import_smithy_client7.isSerializableHeaderValue, {
        [_ct]: input[_cT] || "application/octet-stream",
        [_xaba]: input[_a],
        [_xabt]: input[_t],
        [_xabg]: input[_gI],
        [_xabg_]: input[_gV],
        [_xabpl]: input[_pCL]
      });
      b.bp("/model/{modelId}/invoke-with-response-stream");
      b.p("modelId", () => input.modelId, "{modelId}", false);
      let body;
      if (input.body !== void 0) {
        body = input.body;
      }
      b.m("POST").h(headers).b(body);
      return b.build();
    }, "se_InvokeModelWithResponseStreamCommand");
    var se_ListAsyncInvokesCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {};
      b.bp("/async-invoke");
      const query = (0, import_smithy_client7.map)({
        [_sTA]: [() => input.submitTimeAfter !== void 0, () => (0, import_smithy_client7.serializeDateTime)(input[_sTA]).toString()],
        [_sTB]: [() => input.submitTimeBefore !== void 0, () => (0, import_smithy_client7.serializeDateTime)(input[_sTB]).toString()],
        [_sE]: [, input[_sE]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
        [_sB]: [, input[_sB]],
        [_sO]: [, input[_sO]]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_ListAsyncInvokesCommand");
    var se_StartAsyncInvokeCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {
        "content-type": "application/json"
      };
      b.bp("/async-invoke");
      let body;
      body = JSON.stringify(
        (0, import_smithy_client7.take)(input, {
          clientRequestToken: [true, (_) => _ ?? (0, import_uuid.v4)()],
          modelId: [],
          modelInput: (_) => se_ModelInputPayload(_, context),
          outputDataConfig: (_) => (0, import_smithy_client7._json)(_),
          tags: (_) => (0, import_smithy_client7._json)(_)
        })
      );
      b.m("POST").h(headers).b(body);
      return b.build();
    }, "se_StartAsyncInvokeCommand");
    var de_ApplyGuardrailCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client7.take)(data, {
        action: import_smithy_client7.expectString,
        assessments: (_) => de_GuardrailAssessmentList(_, context),
        guardrailCoverage: import_smithy_client7._json,
        outputs: import_smithy_client7._json,
        usage: import_smithy_client7._json
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_ApplyGuardrailCommand");
    var de_ConverseCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client7.take)(data, {
        additionalModelResponseFields: (_) => de_Document(_, context),
        metrics: import_smithy_client7._json,
        output: (_) => de_ConverseOutput((0, import_core22.awsExpectUnion)(_), context),
        performanceConfig: import_smithy_client7._json,
        stopReason: import_smithy_client7.expectString,
        trace: (_) => de_ConverseTrace(_, context),
        usage: import_smithy_client7._json
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_ConverseCommand");
    var de_ConverseStreamCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = output.body;
      contents.stream = de_ConverseStreamOutput(data, context);
      return contents;
    }, "de_ConverseStreamCommand");
    var de_GetAsyncInvokeCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client7.take)(data, {
        clientRequestToken: import_smithy_client7.expectString,
        endTime: (_) => (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.parseRfc3339DateTimeWithOffset)(_)),
        failureMessage: import_smithy_client7.expectString,
        invocationArn: import_smithy_client7.expectString,
        lastModifiedTime: (_) => (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.parseRfc3339DateTimeWithOffset)(_)),
        modelArn: import_smithy_client7.expectString,
        outputDataConfig: (_) => (0, import_smithy_client7._json)((0, import_core22.awsExpectUnion)(_)),
        status: import_smithy_client7.expectString,
        submitTime: (_) => (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.parseRfc3339DateTimeWithOffset)(_))
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_GetAsyncInvokeCommand");
    var de_InvokeModelCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output),
        [_cT]: [, output.headers[_ct]],
        [_pCL]: [, output.headers[_xabpl]]
      });
      const data = await (0, import_smithy_client7.collectBody)(output.body, context);
      contents.body = data;
      return contents;
    }, "de_InvokeModelCommand");
    var de_InvokeModelWithResponseStreamCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output),
        [_cT]: [, output.headers[_xabct]],
        [_pCL]: [, output.headers[_xabpl]]
      });
      const data = output.body;
      contents.body = de_ResponseStream(data, context);
      return contents;
    }, "de_InvokeModelWithResponseStreamCommand");
    var de_ListAsyncInvokesCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client7.take)(data, {
        asyncInvokeSummaries: (_) => de_AsyncInvokeSummaries(_, context),
        nextToken: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_ListAsyncInvokesCommand");
    var de_StartAsyncInvokeCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client7.take)(data, {
        invocationArn: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_StartAsyncInvokeCommand");
    var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await (0, import_core22.parseJsonErrorBody)(output.body, context)
      };
      const errorCode = (0, import_core22.loadRestJsonErrorCode)(output, parsedOutput.body);
      switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.bedrockruntime#AccessDeniedException":
          throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.bedrockruntime#InternalServerException":
          throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.bedrockruntime#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.bedrockruntime#ServiceQuotaExceededException":
          throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.bedrockruntime#ThrottlingException":
          throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.bedrockruntime#ValidationException":
          throw await de_ValidationExceptionRes(parsedOutput, context);
        case "ModelErrorException":
        case "com.amazonaws.bedrockruntime#ModelErrorException":
          throw await de_ModelErrorExceptionRes(parsedOutput, context);
        case "ModelNotReadyException":
        case "com.amazonaws.bedrockruntime#ModelNotReadyException":
          throw await de_ModelNotReadyExceptionRes(parsedOutput, context);
        case "ModelTimeoutException":
        case "com.amazonaws.bedrockruntime#ModelTimeoutException":
          throw await de_ModelTimeoutExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.bedrockruntime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ModelStreamErrorException":
        case "com.amazonaws.bedrockruntime#ModelStreamErrorException":
          throw await de_ModelStreamErrorExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.bedrockruntime#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    }, "de_CommandError");
    var throwDefaultError = (0, import_smithy_client7.withBaseException)(BedrockRuntimeServiceException);
    var de_AccessDeniedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client7.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client7.take)(data, {
        message: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, parsedOutput.body);
    }, "de_AccessDeniedExceptionRes");
    var de_ConflictExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client7.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client7.take)(data, {
        message: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, parsedOutput.body);
    }, "de_ConflictExceptionRes");
    var de_InternalServerExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client7.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client7.take)(data, {
        message: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, parsedOutput.body);
    }, "de_InternalServerExceptionRes");
    var de_ModelErrorExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client7.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client7.take)(data, {
        message: import_smithy_client7.expectString,
        originalStatusCode: import_smithy_client7.expectInt32,
        resourceName: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      const exception = new ModelErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, parsedOutput.body);
    }, "de_ModelErrorExceptionRes");
    var de_ModelNotReadyExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client7.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client7.take)(data, {
        message: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      const exception = new ModelNotReadyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, parsedOutput.body);
    }, "de_ModelNotReadyExceptionRes");
    var de_ModelStreamErrorExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client7.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client7.take)(data, {
        message: import_smithy_client7.expectString,
        originalMessage: import_smithy_client7.expectString,
        originalStatusCode: import_smithy_client7.expectInt32
      });
      Object.assign(contents, doc);
      const exception = new ModelStreamErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, parsedOutput.body);
    }, "de_ModelStreamErrorExceptionRes");
    var de_ModelTimeoutExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client7.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client7.take)(data, {
        message: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      const exception = new ModelTimeoutException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, parsedOutput.body);
    }, "de_ModelTimeoutExceptionRes");
    var de_ResourceNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client7.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client7.take)(data, {
        message: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, parsedOutput.body);
    }, "de_ResourceNotFoundExceptionRes");
    var de_ServiceQuotaExceededExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client7.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client7.take)(data, {
        message: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, parsedOutput.body);
    }, "de_ServiceQuotaExceededExceptionRes");
    var de_ServiceUnavailableExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client7.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client7.take)(data, {
        message: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      const exception = new ServiceUnavailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, parsedOutput.body);
    }, "de_ServiceUnavailableExceptionRes");
    var de_ThrottlingExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client7.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client7.take)(data, {
        message: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, parsedOutput.body);
    }, "de_ThrottlingExceptionRes");
    var de_ValidationExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client7.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client7.take)(data, {
        message: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, parsedOutput.body);
    }, "de_ValidationExceptionRes");
    var de_ConverseStreamOutput = /* @__PURE__ */ __name((output, context) => {
      return context.eventStreamMarshaller.deserialize(output, async (event) => {
        if (event["messageStart"] != null) {
          return {
            messageStart: await de_MessageStartEvent_event(event["messageStart"], context)
          };
        }
        if (event["contentBlockStart"] != null) {
          return {
            contentBlockStart: await de_ContentBlockStartEvent_event(event["contentBlockStart"], context)
          };
        }
        if (event["contentBlockDelta"] != null) {
          return {
            contentBlockDelta: await de_ContentBlockDeltaEvent_event(event["contentBlockDelta"], context)
          };
        }
        if (event["contentBlockStop"] != null) {
          return {
            contentBlockStop: await de_ContentBlockStopEvent_event(event["contentBlockStop"], context)
          };
        }
        if (event["messageStop"] != null) {
          return {
            messageStop: await de_MessageStopEvent_event(event["messageStop"], context)
          };
        }
        if (event["metadata"] != null) {
          return {
            metadata: await de_ConverseStreamMetadataEvent_event(event["metadata"], context)
          };
        }
        if (event["internalServerException"] != null) {
          return {
            internalServerException: await de_InternalServerException_event(event["internalServerException"], context)
          };
        }
        if (event["modelStreamErrorException"] != null) {
          return {
            modelStreamErrorException: await de_ModelStreamErrorException_event(
              event["modelStreamErrorException"],
              context
            )
          };
        }
        if (event["validationException"] != null) {
          return {
            validationException: await de_ValidationException_event(event["validationException"], context)
          };
        }
        if (event["throttlingException"] != null) {
          return {
            throttlingException: await de_ThrottlingException_event(event["throttlingException"], context)
          };
        }
        if (event["serviceUnavailableException"] != null) {
          return {
            serviceUnavailableException: await de_ServiceUnavailableException_event(
              event["serviceUnavailableException"],
              context
            )
          };
        }
        return { $unknown: output };
      });
    }, "de_ConverseStreamOutput");
    var de_ResponseStream = /* @__PURE__ */ __name((output, context) => {
      return context.eventStreamMarshaller.deserialize(output, async (event) => {
        if (event["chunk"] != null) {
          return {
            chunk: await de_PayloadPart_event(event["chunk"], context)
          };
        }
        if (event["internalServerException"] != null) {
          return {
            internalServerException: await de_InternalServerException_event(event["internalServerException"], context)
          };
        }
        if (event["modelStreamErrorException"] != null) {
          return {
            modelStreamErrorException: await de_ModelStreamErrorException_event(
              event["modelStreamErrorException"],
              context
            )
          };
        }
        if (event["validationException"] != null) {
          return {
            validationException: await de_ValidationException_event(event["validationException"], context)
          };
        }
        if (event["throttlingException"] != null) {
          return {
            throttlingException: await de_ThrottlingException_event(event["throttlingException"], context)
          };
        }
        if (event["modelTimeoutException"] != null) {
          return {
            modelTimeoutException: await de_ModelTimeoutException_event(event["modelTimeoutException"], context)
          };
        }
        if (event["serviceUnavailableException"] != null) {
          return {
            serviceUnavailableException: await de_ServiceUnavailableException_event(
              event["serviceUnavailableException"],
              context
            )
          };
        }
        return { $unknown: output };
      });
    }, "de_ResponseStream");
    var de_ContentBlockDeltaEvent_event = /* @__PURE__ */ __name(async (output, context) => {
      const contents = {};
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      Object.assign(contents, (0, import_smithy_client7._json)(data));
      return contents;
    }, "de_ContentBlockDeltaEvent_event");
    var de_ContentBlockStartEvent_event = /* @__PURE__ */ __name(async (output, context) => {
      const contents = {};
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      Object.assign(contents, (0, import_smithy_client7._json)(data));
      return contents;
    }, "de_ContentBlockStartEvent_event");
    var de_ContentBlockStopEvent_event = /* @__PURE__ */ __name(async (output, context) => {
      const contents = {};
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      Object.assign(contents, (0, import_smithy_client7._json)(data));
      return contents;
    }, "de_ContentBlockStopEvent_event");
    var de_ConverseStreamMetadataEvent_event = /* @__PURE__ */ __name(async (output, context) => {
      const contents = {};
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      Object.assign(contents, de_ConverseStreamMetadataEvent(data, context));
      return contents;
    }, "de_ConverseStreamMetadataEvent_event");
    var de_InternalServerException_event = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await (0, import_core22.parseJsonBody)(output.body, context)
      };
      return de_InternalServerExceptionRes(parsedOutput, context);
    }, "de_InternalServerException_event");
    var de_MessageStartEvent_event = /* @__PURE__ */ __name(async (output, context) => {
      const contents = {};
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      Object.assign(contents, (0, import_smithy_client7._json)(data));
      return contents;
    }, "de_MessageStartEvent_event");
    var de_MessageStopEvent_event = /* @__PURE__ */ __name(async (output, context) => {
      const contents = {};
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      Object.assign(contents, de_MessageStopEvent(data, context));
      return contents;
    }, "de_MessageStopEvent_event");
    var de_ModelStreamErrorException_event = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await (0, import_core22.parseJsonBody)(output.body, context)
      };
      return de_ModelStreamErrorExceptionRes(parsedOutput, context);
    }, "de_ModelStreamErrorException_event");
    var de_ModelTimeoutException_event = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await (0, import_core22.parseJsonBody)(output.body, context)
      };
      return de_ModelTimeoutExceptionRes(parsedOutput, context);
    }, "de_ModelTimeoutException_event");
    var de_PayloadPart_event = /* @__PURE__ */ __name(async (output, context) => {
      const contents = {};
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      Object.assign(contents, de_PayloadPart(data, context));
      return contents;
    }, "de_PayloadPart_event");
    var de_ServiceUnavailableException_event = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await (0, import_core22.parseJsonBody)(output.body, context)
      };
      return de_ServiceUnavailableExceptionRes(parsedOutput, context);
    }, "de_ServiceUnavailableException_event");
    var de_ThrottlingException_event = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await (0, import_core22.parseJsonBody)(output.body, context)
      };
      return de_ThrottlingExceptionRes(parsedOutput, context);
    }, "de_ThrottlingException_event");
    var de_ValidationException_event = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await (0, import_core22.parseJsonBody)(output.body, context)
      };
      return de_ValidationExceptionRes(parsedOutput, context);
    }, "de_ValidationException_event");
    var se_ContentBlock = /* @__PURE__ */ __name((input, context) => {
      return ContentBlock.visit(input, {
        document: (value) => ({ document: se_DocumentBlock(value, context) }),
        guardContent: (value) => ({ guardContent: se_GuardrailConverseContentBlock(value, context) }),
        image: (value) => ({ image: se_ImageBlock(value, context) }),
        text: (value) => ({ text: value }),
        toolResult: (value) => ({ toolResult: se_ToolResultBlock(value, context) }),
        toolUse: (value) => ({ toolUse: se_ToolUseBlock(value, context) }),
        video: (value) => ({ video: se_VideoBlock(value, context) }),
        _: (name, value) => ({ name: value })
      });
    }, "se_ContentBlock");
    var se_ContentBlocks = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return se_ContentBlock(entry, context);
      });
    }, "se_ContentBlocks");
    var se_DocumentBlock = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client7.take)(input, {
        format: [],
        name: [],
        source: (_) => se_DocumentSource(_, context)
      });
    }, "se_DocumentBlock");
    var se_DocumentSource = /* @__PURE__ */ __name((input, context) => {
      return DocumentSource.visit(input, {
        bytes: (value) => ({ bytes: context.base64Encoder(value) }),
        _: (name, value) => ({ name: value })
      });
    }, "se_DocumentSource");
    var se_GuardrailContentBlock = /* @__PURE__ */ __name((input, context) => {
      return GuardrailContentBlock.visit(input, {
        image: (value) => ({ image: se_GuardrailImageBlock(value, context) }),
        text: (value) => ({ text: (0, import_smithy_client7._json)(value) }),
        _: (name, value) => ({ name: value })
      });
    }, "se_GuardrailContentBlock");
    var se_GuardrailContentBlockList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return se_GuardrailContentBlock(entry, context);
      });
    }, "se_GuardrailContentBlockList");
    var se_GuardrailConverseContentBlock = /* @__PURE__ */ __name((input, context) => {
      return GuardrailConverseContentBlock.visit(input, {
        image: (value) => ({ image: se_GuardrailConverseImageBlock(value, context) }),
        text: (value) => ({ text: (0, import_smithy_client7._json)(value) }),
        _: (name, value) => ({ name: value })
      });
    }, "se_GuardrailConverseContentBlock");
    var se_GuardrailConverseImageBlock = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client7.take)(input, {
        format: [],
        source: (_) => se_GuardrailConverseImageSource(_, context)
      });
    }, "se_GuardrailConverseImageBlock");
    var se_GuardrailConverseImageSource = /* @__PURE__ */ __name((input, context) => {
      return GuardrailConverseImageSource.visit(input, {
        bytes: (value) => ({ bytes: context.base64Encoder(value) }),
        _: (name, value) => ({ name: value })
      });
    }, "se_GuardrailConverseImageSource");
    var se_GuardrailImageBlock = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client7.take)(input, {
        format: [],
        source: (_) => se_GuardrailImageSource(_, context)
      });
    }, "se_GuardrailImageBlock");
    var se_GuardrailImageSource = /* @__PURE__ */ __name((input, context) => {
      return GuardrailImageSource.visit(input, {
        bytes: (value) => ({ bytes: context.base64Encoder(value) }),
        _: (name, value) => ({ name: value })
      });
    }, "se_GuardrailImageSource");
    var se_ImageBlock = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client7.take)(input, {
        format: [],
        source: (_) => se_ImageSource(_, context)
      });
    }, "se_ImageBlock");
    var se_ImageSource = /* @__PURE__ */ __name((input, context) => {
      return ImageSource.visit(input, {
        bytes: (value) => ({ bytes: context.base64Encoder(value) }),
        _: (name, value) => ({ name: value })
      });
    }, "se_ImageSource");
    var se_InferenceConfiguration = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client7.take)(input, {
        maxTokens: [],
        stopSequences: import_smithy_client7._json,
        temperature: import_smithy_client7.serializeFloat,
        topP: import_smithy_client7.serializeFloat
      });
    }, "se_InferenceConfiguration");
    var se_Message = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client7.take)(input, {
        content: (_) => se_ContentBlocks(_, context),
        role: []
      });
    }, "se_Message");
    var se_Messages = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return se_Message(entry, context);
      });
    }, "se_Messages");
    var se_ModelInputPayload = /* @__PURE__ */ __name((input, context) => {
      return input;
    }, "se_ModelInputPayload");
    var se_SystemContentBlock = /* @__PURE__ */ __name((input, context) => {
      return SystemContentBlock.visit(input, {
        guardContent: (value) => ({ guardContent: se_GuardrailConverseContentBlock(value, context) }),
        text: (value) => ({ text: value }),
        _: (name, value) => ({ name: value })
      });
    }, "se_SystemContentBlock");
    var se_SystemContentBlocks = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return se_SystemContentBlock(entry, context);
      });
    }, "se_SystemContentBlocks");
    var se_Tool = /* @__PURE__ */ __name((input, context) => {
      return Tool.visit(input, {
        toolSpec: (value) => ({ toolSpec: se_ToolSpecification(value, context) }),
        _: (name, value) => ({ name: value })
      });
    }, "se_Tool");
    var se_ToolConfiguration = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client7.take)(input, {
        toolChoice: import_smithy_client7._json,
        tools: (_) => se_Tools(_, context)
      });
    }, "se_ToolConfiguration");
    var se_ToolInputSchema = /* @__PURE__ */ __name((input, context) => {
      return ToolInputSchema.visit(input, {
        json: (value) => ({ json: se_Document(value, context) }),
        _: (name, value) => ({ name: value })
      });
    }, "se_ToolInputSchema");
    var se_ToolResultBlock = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client7.take)(input, {
        content: (_) => se_ToolResultContentBlocks(_, context),
        status: [],
        toolUseId: []
      });
    }, "se_ToolResultBlock");
    var se_ToolResultContentBlock = /* @__PURE__ */ __name((input, context) => {
      return ToolResultContentBlock.visit(input, {
        document: (value) => ({ document: se_DocumentBlock(value, context) }),
        image: (value) => ({ image: se_ImageBlock(value, context) }),
        json: (value) => ({ json: se_Document(value, context) }),
        text: (value) => ({ text: value }),
        video: (value) => ({ video: se_VideoBlock(value, context) }),
        _: (name, value) => ({ name: value })
      });
    }, "se_ToolResultContentBlock");
    var se_ToolResultContentBlocks = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return se_ToolResultContentBlock(entry, context);
      });
    }, "se_ToolResultContentBlocks");
    var se_Tools = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return se_Tool(entry, context);
      });
    }, "se_Tools");
    var se_ToolSpecification = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client7.take)(input, {
        description: [],
        inputSchema: (_) => se_ToolInputSchema(_, context),
        name: []
      });
    }, "se_ToolSpecification");
    var se_ToolUseBlock = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client7.take)(input, {
        input: (_) => se_Document(_, context),
        name: [],
        toolUseId: []
      });
    }, "se_ToolUseBlock");
    var se_VideoBlock = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client7.take)(input, {
        format: [],
        source: (_) => se_VideoSource(_, context)
      });
    }, "se_VideoBlock");
    var se_VideoSource = /* @__PURE__ */ __name((input, context) => {
      return VideoSource.visit(input, {
        bytes: (value) => ({ bytes: context.base64Encoder(value) }),
        s3Location: (value) => ({ s3Location: (0, import_smithy_client7._json)(value) }),
        _: (name, value) => ({ name: value })
      });
    }, "se_VideoSource");
    var se_Document = /* @__PURE__ */ __name((input, context) => {
      return input;
    }, "se_Document");
    var de_AsyncInvokeSummaries = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_AsyncInvokeSummary(entry, context);
      });
      return retVal;
    }, "de_AsyncInvokeSummaries");
    var de_AsyncInvokeSummary = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client7.take)(output, {
        clientRequestToken: import_smithy_client7.expectString,
        endTime: (_) => (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.parseRfc3339DateTimeWithOffset)(_)),
        failureMessage: import_smithy_client7.expectString,
        invocationArn: import_smithy_client7.expectString,
        lastModifiedTime: (_) => (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.parseRfc3339DateTimeWithOffset)(_)),
        modelArn: import_smithy_client7.expectString,
        outputDataConfig: (_) => (0, import_smithy_client7._json)((0, import_core22.awsExpectUnion)(_)),
        status: import_smithy_client7.expectString,
        submitTime: (_) => (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.parseRfc3339DateTimeWithOffset)(_))
      });
    }, "de_AsyncInvokeSummary");
    var de_ContentBlock = /* @__PURE__ */ __name((output, context) => {
      if (output.document != null) {
        return {
          document: de_DocumentBlock(output.document, context)
        };
      }
      if (output.guardContent != null) {
        return {
          guardContent: de_GuardrailConverseContentBlock((0, import_core22.awsExpectUnion)(output.guardContent), context)
        };
      }
      if (output.image != null) {
        return {
          image: de_ImageBlock(output.image, context)
        };
      }
      if ((0, import_smithy_client7.expectString)(output.text) !== void 0) {
        return { text: (0, import_smithy_client7.expectString)(output.text) };
      }
      if (output.toolResult != null) {
        return {
          toolResult: de_ToolResultBlock(output.toolResult, context)
        };
      }
      if (output.toolUse != null) {
        return {
          toolUse: de_ToolUseBlock(output.toolUse, context)
        };
      }
      if (output.video != null) {
        return {
          video: de_VideoBlock(output.video, context)
        };
      }
      return { $unknown: Object.entries(output)[0] };
    }, "de_ContentBlock");
    var de_ContentBlocks = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_ContentBlock((0, import_core22.awsExpectUnion)(entry), context);
      });
      return retVal;
    }, "de_ContentBlocks");
    var de_ConverseOutput = /* @__PURE__ */ __name((output, context) => {
      if (output.message != null) {
        return {
          message: de_Message(output.message, context)
        };
      }
      return { $unknown: Object.entries(output)[0] };
    }, "de_ConverseOutput");
    var de_ConverseStreamMetadataEvent = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client7.take)(output, {
        metrics: import_smithy_client7._json,
        performanceConfig: import_smithy_client7._json,
        trace: (_) => de_ConverseStreamTrace(_, context),
        usage: import_smithy_client7._json
      });
    }, "de_ConverseStreamMetadataEvent");
    var de_ConverseStreamTrace = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client7.take)(output, {
        guardrail: (_) => de_GuardrailTraceAssessment(_, context),
        promptRouter: import_smithy_client7._json
      });
    }, "de_ConverseStreamTrace");
    var de_ConverseTrace = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client7.take)(output, {
        guardrail: (_) => de_GuardrailTraceAssessment(_, context),
        promptRouter: import_smithy_client7._json
      });
    }, "de_ConverseTrace");
    var de_DocumentBlock = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client7.take)(output, {
        format: import_smithy_client7.expectString,
        name: import_smithy_client7.expectString,
        source: (_) => de_DocumentSource((0, import_core22.awsExpectUnion)(_), context)
      });
    }, "de_DocumentBlock");
    var de_DocumentSource = /* @__PURE__ */ __name((output, context) => {
      if (output.bytes != null) {
        return {
          bytes: context.base64Decoder(output.bytes)
        };
      }
      return { $unknown: Object.entries(output)[0] };
    }, "de_DocumentSource");
    var de_GuardrailAssessment = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client7.take)(output, {
        contentPolicy: import_smithy_client7._json,
        contextualGroundingPolicy: (_) => de_GuardrailContextualGroundingPolicyAssessment(_, context),
        invocationMetrics: import_smithy_client7._json,
        sensitiveInformationPolicy: import_smithy_client7._json,
        topicPolicy: import_smithy_client7._json,
        wordPolicy: import_smithy_client7._json
      });
    }, "de_GuardrailAssessment");
    var de_GuardrailAssessmentList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_GuardrailAssessment(entry, context);
      });
      return retVal;
    }, "de_GuardrailAssessmentList");
    var de_GuardrailAssessmentListMap = /* @__PURE__ */ __name((output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = de_GuardrailAssessmentList(value, context);
        return acc;
      }, {});
    }, "de_GuardrailAssessmentListMap");
    var de_GuardrailAssessmentMap = /* @__PURE__ */ __name((output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = de_GuardrailAssessment(value, context);
        return acc;
      }, {});
    }, "de_GuardrailAssessmentMap");
    var de_GuardrailContextualGroundingFilter = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client7.take)(output, {
        action: import_smithy_client7.expectString,
        score: import_smithy_client7.limitedParseDouble,
        threshold: import_smithy_client7.limitedParseDouble,
        type: import_smithy_client7.expectString
      });
    }, "de_GuardrailContextualGroundingFilter");
    var de_GuardrailContextualGroundingFilters = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_GuardrailContextualGroundingFilter(entry, context);
      });
      return retVal;
    }, "de_GuardrailContextualGroundingFilters");
    var de_GuardrailContextualGroundingPolicyAssessment = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client7.take)(output, {
        filters: (_) => de_GuardrailContextualGroundingFilters(_, context)
      });
    }, "de_GuardrailContextualGroundingPolicyAssessment");
    var de_GuardrailConverseContentBlock = /* @__PURE__ */ __name((output, context) => {
      if (output.image != null) {
        return {
          image: de_GuardrailConverseImageBlock(output.image, context)
        };
      }
      if (output.text != null) {
        return {
          text: (0, import_smithy_client7._json)(output.text)
        };
      }
      return { $unknown: Object.entries(output)[0] };
    }, "de_GuardrailConverseContentBlock");
    var de_GuardrailConverseImageBlock = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client7.take)(output, {
        format: import_smithy_client7.expectString,
        source: (_) => de_GuardrailConverseImageSource((0, import_core22.awsExpectUnion)(_), context)
      });
    }, "de_GuardrailConverseImageBlock");
    var de_GuardrailConverseImageSource = /* @__PURE__ */ __name((output, context) => {
      if (output.bytes != null) {
        return {
          bytes: context.base64Decoder(output.bytes)
        };
      }
      return { $unknown: Object.entries(output)[0] };
    }, "de_GuardrailConverseImageSource");
    var de_GuardrailTraceAssessment = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client7.take)(output, {
        inputAssessment: (_) => de_GuardrailAssessmentMap(_, context),
        modelOutput: import_smithy_client7._json,
        outputAssessments: (_) => de_GuardrailAssessmentListMap(_, context)
      });
    }, "de_GuardrailTraceAssessment");
    var de_ImageBlock = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client7.take)(output, {
        format: import_smithy_client7.expectString,
        source: (_) => de_ImageSource((0, import_core22.awsExpectUnion)(_), context)
      });
    }, "de_ImageBlock");
    var de_ImageSource = /* @__PURE__ */ __name((output, context) => {
      if (output.bytes != null) {
        return {
          bytes: context.base64Decoder(output.bytes)
        };
      }
      return { $unknown: Object.entries(output)[0] };
    }, "de_ImageSource");
    var de_Message = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client7.take)(output, {
        content: (_) => de_ContentBlocks(_, context),
        role: import_smithy_client7.expectString
      });
    }, "de_Message");
    var de_MessageStopEvent = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client7.take)(output, {
        additionalModelResponseFields: (_) => de_Document(_, context),
        stopReason: import_smithy_client7.expectString
      });
    }, "de_MessageStopEvent");
    var de_PayloadPart = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client7.take)(output, {
        bytes: context.base64Decoder
      });
    }, "de_PayloadPart");
    var de_ToolResultBlock = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client7.take)(output, {
        content: (_) => de_ToolResultContentBlocks(_, context),
        status: import_smithy_client7.expectString,
        toolUseId: import_smithy_client7.expectString
      });
    }, "de_ToolResultBlock");
    var de_ToolResultContentBlock = /* @__PURE__ */ __name((output, context) => {
      if (output.document != null) {
        return {
          document: de_DocumentBlock(output.document, context)
        };
      }
      if (output.image != null) {
        return {
          image: de_ImageBlock(output.image, context)
        };
      }
      if (output.json != null) {
        return {
          json: de_Document(output.json, context)
        };
      }
      if ((0, import_smithy_client7.expectString)(output.text) !== void 0) {
        return { text: (0, import_smithy_client7.expectString)(output.text) };
      }
      if (output.video != null) {
        return {
          video: de_VideoBlock(output.video, context)
        };
      }
      return { $unknown: Object.entries(output)[0] };
    }, "de_ToolResultContentBlock");
    var de_ToolResultContentBlocks = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_ToolResultContentBlock((0, import_core22.awsExpectUnion)(entry), context);
      });
      return retVal;
    }, "de_ToolResultContentBlocks");
    var de_ToolUseBlock = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client7.take)(output, {
        input: (_) => de_Document(_, context),
        name: import_smithy_client7.expectString,
        toolUseId: import_smithy_client7.expectString
      });
    }, "de_ToolUseBlock");
    var de_VideoBlock = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client7.take)(output, {
        format: import_smithy_client7.expectString,
        source: (_) => de_VideoSource((0, import_core22.awsExpectUnion)(_), context)
      });
    }, "de_VideoBlock");
    var de_VideoSource = /* @__PURE__ */ __name((output, context) => {
      if (output.bytes != null) {
        return {
          bytes: context.base64Decoder(output.bytes)
        };
      }
      if (output.s3Location != null) {
        return {
          s3Location: (0, import_smithy_client7._json)(output.s3Location)
        };
      }
      return { $unknown: Object.entries(output)[0] };
    }, "de_VideoSource");
    var de_Document = /* @__PURE__ */ __name((output, context) => {
      return output;
    }, "de_Document");
    var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    }), "deserializeMetadata");
    var _a = "accept";
    var _cT = "contentType";
    var _ct = "content-type";
    var _gI = "guardrailIdentifier";
    var _gV = "guardrailVersion";
    var _mR = "maxResults";
    var _nT = "nextToken";
    var _pCL = "performanceConfigLatency";
    var _sB = "sortBy";
    var _sE = "statusEquals";
    var _sO = "sortOrder";
    var _sTA = "submitTimeAfter";
    var _sTB = "submitTimeBefore";
    var _t = "trace";
    var _xaba = "x-amzn-bedrock-accept";
    var _xabct = "x-amzn-bedrock-content-type";
    var _xabg = "x-amzn-bedrock-guardrailidentifier";
    var _xabg_ = "x-amzn-bedrock-guardrailversion";
    var _xabpl = "x-amzn-bedrock-performanceconfig-latency";
    var _xabt = "x-amzn-bedrock-trace";
    var _ApplyGuardrailCommand = class _ApplyGuardrailCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockFrontendService", "ApplyGuardrail", {}).n("BedrockRuntimeClient", "ApplyGuardrailCommand").f(ApplyGuardrailRequestFilterSensitiveLog, void 0).ser(se_ApplyGuardrailCommand).de(de_ApplyGuardrailCommand).build() {
    };
    __name(_ApplyGuardrailCommand, "ApplyGuardrailCommand");
    var ApplyGuardrailCommand = _ApplyGuardrailCommand;
    var _ConverseCommand = class _ConverseCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockFrontendService", "Converse", {}).n("BedrockRuntimeClient", "ConverseCommand").f(ConverseRequestFilterSensitiveLog, ConverseResponseFilterSensitiveLog).ser(se_ConverseCommand).de(de_ConverseCommand).build() {
    };
    __name(_ConverseCommand, "ConverseCommand");
    var ConverseCommand2 = _ConverseCommand;
    var _ConverseStreamCommand = class _ConverseStreamCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockFrontendService", "ConverseStream", {
      /**
       * @internal
       */
      eventStream: {
        output: true
      }
    }).n("BedrockRuntimeClient", "ConverseStreamCommand").f(ConverseStreamRequestFilterSensitiveLog, ConverseStreamResponseFilterSensitiveLog).ser(se_ConverseStreamCommand).de(de_ConverseStreamCommand).build() {
    };
    __name(_ConverseStreamCommand, "ConverseStreamCommand");
    var ConverseStreamCommand = _ConverseStreamCommand;
    var _GetAsyncInvokeCommand = class _GetAsyncInvokeCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockFrontendService", "GetAsyncInvoke", {}).n("BedrockRuntimeClient", "GetAsyncInvokeCommand").f(void 0, GetAsyncInvokeResponseFilterSensitiveLog).ser(se_GetAsyncInvokeCommand).de(de_GetAsyncInvokeCommand).build() {
    };
    __name(_GetAsyncInvokeCommand, "GetAsyncInvokeCommand");
    var GetAsyncInvokeCommand = _GetAsyncInvokeCommand;
    var _InvokeModelCommand = class _InvokeModelCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockFrontendService", "InvokeModel", {}).n("BedrockRuntimeClient", "InvokeModelCommand").f(InvokeModelRequestFilterSensitiveLog, InvokeModelResponseFilterSensitiveLog).ser(se_InvokeModelCommand).de(de_InvokeModelCommand).build() {
    };
    __name(_InvokeModelCommand, "InvokeModelCommand");
    var InvokeModelCommand = _InvokeModelCommand;
    var _InvokeModelWithResponseStreamCommand = class _InvokeModelWithResponseStreamCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockFrontendService", "InvokeModelWithResponseStream", {
      /**
       * @internal
       */
      eventStream: {
        output: true
      }
    }).n("BedrockRuntimeClient", "InvokeModelWithResponseStreamCommand").f(InvokeModelWithResponseStreamRequestFilterSensitiveLog, InvokeModelWithResponseStreamResponseFilterSensitiveLog).ser(se_InvokeModelWithResponseStreamCommand).de(de_InvokeModelWithResponseStreamCommand).build() {
    };
    __name(_InvokeModelWithResponseStreamCommand, "InvokeModelWithResponseStreamCommand");
    var InvokeModelWithResponseStreamCommand = _InvokeModelWithResponseStreamCommand;
    var _ListAsyncInvokesCommand = class _ListAsyncInvokesCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockFrontendService", "ListAsyncInvokes", {}).n("BedrockRuntimeClient", "ListAsyncInvokesCommand").f(void 0, ListAsyncInvokesResponseFilterSensitiveLog).ser(se_ListAsyncInvokesCommand).de(de_ListAsyncInvokesCommand).build() {
    };
    __name(_ListAsyncInvokesCommand, "ListAsyncInvokesCommand");
    var ListAsyncInvokesCommand = _ListAsyncInvokesCommand;
    var _StartAsyncInvokeCommand = class _StartAsyncInvokeCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockFrontendService", "StartAsyncInvoke", {}).n("BedrockRuntimeClient", "StartAsyncInvokeCommand").f(StartAsyncInvokeRequestFilterSensitiveLog, void 0).ser(se_StartAsyncInvokeCommand).de(de_StartAsyncInvokeCommand).build() {
    };
    __name(_StartAsyncInvokeCommand, "StartAsyncInvokeCommand");
    var StartAsyncInvokeCommand = _StartAsyncInvokeCommand;
    var commands = {
      ApplyGuardrailCommand,
      ConverseCommand: ConverseCommand2,
      ConverseStreamCommand,
      GetAsyncInvokeCommand,
      InvokeModelCommand,
      InvokeModelWithResponseStreamCommand,
      ListAsyncInvokesCommand,
      StartAsyncInvokeCommand
    };
    var _BedrockRuntime = class _BedrockRuntime extends BedrockRuntimeClient2 {
    };
    __name(_BedrockRuntime, "BedrockRuntime");
    var BedrockRuntime = _BedrockRuntime;
    (0, import_smithy_client7.createAggregatedClient)(commands, BedrockRuntime);
    var paginateListAsyncInvokes = (0, import_core5.createPaginator)(BedrockRuntimeClient2, ListAsyncInvokesCommand, "nextToken", "nextToken", "maxResults");
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js
var require_dist_cjs60 = __commonJS({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js"(exports6, module) {
    "use strict";
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      getHostHeaderPlugin: () => getHostHeaderPlugin,
      hostHeaderMiddleware: () => hostHeaderMiddleware,
      hostHeaderMiddlewareOptions: () => hostHeaderMiddlewareOptions,
      resolveHostHeaderConfig: () => resolveHostHeaderConfig
    });
    module.exports = __toCommonJS3(src_exports);
    var import_protocol_http11 = require_dist_cjs2();
    function resolveHostHeaderConfig(input) {
      return input;
    }
    __name(resolveHostHeaderConfig, "resolveHostHeaderConfig");
    var hostHeaderMiddleware = /* @__PURE__ */ __name((options) => (next) => async (args) => {
      if (!import_protocol_http11.HttpRequest.isInstance(args.request))
        return next(args);
      const { request } = args;
      const { handlerProtocol = "" } = options.requestHandler.metadata || {};
      if (handlerProtocol.indexOf("h2") >= 0 && !request.headers[":authority"]) {
        delete request.headers["host"];
        request.headers[":authority"] = request.hostname + (request.port ? ":" + request.port : "");
      } else if (!request.headers["host"]) {
        let host = request.hostname;
        if (request.port != null)
          host += `:${request.port}`;
        request.headers["host"] = host;
      }
      return next(args);
    }, "hostHeaderMiddleware");
    var hostHeaderMiddlewareOptions = {
      name: "hostHeaderMiddleware",
      step: "build",
      priority: "low",
      tags: ["HOST"],
      override: true
    };
    var getHostHeaderPlugin = /* @__PURE__ */ __name((options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(hostHeaderMiddleware(options), hostHeaderMiddlewareOptions);
      }
    }), "getHostHeaderPlugin");
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js
var require_dist_cjs61 = __commonJS({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js"(exports6, module) {
    "use strict";
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      getLoggerPlugin: () => getLoggerPlugin,
      loggerMiddleware: () => loggerMiddleware,
      loggerMiddlewareOptions: () => loggerMiddlewareOptions
    });
    module.exports = __toCommonJS3(src_exports);
    var loggerMiddleware = /* @__PURE__ */ __name(() => (next, context) => async (args) => {
      var _a, _b;
      try {
        const response = await next(args);
        const { clientName, commandName, logger, dynamoDbDocumentClientOptions = {} } = context;
        const { overrideInputFilterSensitiveLog, overrideOutputFilterSensitiveLog } = dynamoDbDocumentClientOptions;
        const inputFilterSensitiveLog = overrideInputFilterSensitiveLog ?? context.inputFilterSensitiveLog;
        const outputFilterSensitiveLog = overrideOutputFilterSensitiveLog ?? context.outputFilterSensitiveLog;
        const { $metadata, ...outputWithoutMetadata } = response.output;
        (_a = logger == null ? void 0 : logger.info) == null ? void 0 : _a.call(logger, {
          clientName,
          commandName,
          input: inputFilterSensitiveLog(args.input),
          output: outputFilterSensitiveLog(outputWithoutMetadata),
          metadata: $metadata
        });
        return response;
      } catch (error) {
        const { clientName, commandName, logger, dynamoDbDocumentClientOptions = {} } = context;
        const { overrideInputFilterSensitiveLog } = dynamoDbDocumentClientOptions;
        const inputFilterSensitiveLog = overrideInputFilterSensitiveLog ?? context.inputFilterSensitiveLog;
        (_b = logger == null ? void 0 : logger.error) == null ? void 0 : _b.call(logger, {
          clientName,
          commandName,
          input: inputFilterSensitiveLog(args.input),
          error,
          metadata: error.$metadata
        });
        throw error;
      }
    }, "loggerMiddleware");
    var loggerMiddlewareOptions = {
      name: "loggerMiddleware",
      tags: ["LOGGER"],
      step: "initialize",
      override: true
    };
    var getLoggerPlugin = /* @__PURE__ */ __name((options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(loggerMiddleware(), loggerMiddlewareOptions);
      }
    }), "getLoggerPlugin");
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js
var require_dist_cjs62 = __commonJS({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js"(exports6, module) {
    "use strict";
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      addRecursionDetectionMiddlewareOptions: () => addRecursionDetectionMiddlewareOptions,
      getRecursionDetectionPlugin: () => getRecursionDetectionPlugin,
      recursionDetectionMiddleware: () => recursionDetectionMiddleware
    });
    module.exports = __toCommonJS3(src_exports);
    var import_protocol_http11 = require_dist_cjs2();
    var TRACE_ID_HEADER_NAME = "X-Amzn-Trace-Id";
    var ENV_LAMBDA_FUNCTION_NAME = "AWS_LAMBDA_FUNCTION_NAME";
    var ENV_TRACE_ID = "_X_AMZN_TRACE_ID";
    var recursionDetectionMiddleware = /* @__PURE__ */ __name((options) => (next) => async (args) => {
      const { request } = args;
      if (!import_protocol_http11.HttpRequest.isInstance(request) || options.runtime !== "node" || request.headers.hasOwnProperty(TRACE_ID_HEADER_NAME)) {
        return next(args);
      }
      const functionName = process.env[ENV_LAMBDA_FUNCTION_NAME];
      const traceId = process.env[ENV_TRACE_ID];
      const nonEmptyString = /* @__PURE__ */ __name((str) => typeof str === "string" && str.length > 0, "nonEmptyString");
      if (nonEmptyString(functionName) && nonEmptyString(traceId)) {
        request.headers[TRACE_ID_HEADER_NAME] = traceId;
      }
      return next({
        ...args,
        request
      });
    }, "recursionDetectionMiddleware");
    var addRecursionDetectionMiddlewareOptions = {
      step: "build",
      tags: ["RECURSION_DETECTION"],
      name: "recursionDetectionMiddleware",
      override: true,
      priority: "low"
    };
    var getRecursionDetectionPlugin = /* @__PURE__ */ __name((options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(recursionDetectionMiddleware(options), addRecursionDetectionMiddlewareOptions);
      }
    }), "getRecursionDetectionPlugin");
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/util-endpoints/dist-cjs/index.js
var require_dist_cjs63 = __commonJS({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/util-endpoints/dist-cjs/index.js"(exports6, module) {
    "use strict";
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      ConditionObject: () => import_util_endpoints.ConditionObject,
      DeprecatedObject: () => import_util_endpoints.DeprecatedObject,
      EndpointError: () => import_util_endpoints.EndpointError,
      EndpointObject: () => import_util_endpoints.EndpointObject,
      EndpointObjectHeaders: () => import_util_endpoints.EndpointObjectHeaders,
      EndpointObjectProperties: () => import_util_endpoints.EndpointObjectProperties,
      EndpointParams: () => import_util_endpoints.EndpointParams,
      EndpointResolverOptions: () => import_util_endpoints.EndpointResolverOptions,
      EndpointRuleObject: () => import_util_endpoints.EndpointRuleObject,
      ErrorRuleObject: () => import_util_endpoints.ErrorRuleObject,
      EvaluateOptions: () => import_util_endpoints.EvaluateOptions,
      Expression: () => import_util_endpoints.Expression,
      FunctionArgv: () => import_util_endpoints.FunctionArgv,
      FunctionObject: () => import_util_endpoints.FunctionObject,
      FunctionReturn: () => import_util_endpoints.FunctionReturn,
      ParameterObject: () => import_util_endpoints.ParameterObject,
      ReferenceObject: () => import_util_endpoints.ReferenceObject,
      ReferenceRecord: () => import_util_endpoints.ReferenceRecord,
      RuleSetObject: () => import_util_endpoints.RuleSetObject,
      RuleSetRules: () => import_util_endpoints.RuleSetRules,
      TreeRuleObject: () => import_util_endpoints.TreeRuleObject,
      awsEndpointFunctions: () => awsEndpointFunctions,
      getUserAgentPrefix: () => getUserAgentPrefix,
      isIpAddress: () => import_util_endpoints.isIpAddress,
      partition: () => partition,
      resolveEndpoint: () => import_util_endpoints.resolveEndpoint,
      setPartitionInfo: () => setPartitionInfo,
      useDefaultPartitionInfo: () => useDefaultPartitionInfo
    });
    module.exports = __toCommonJS3(src_exports);
    var import_util_endpoints = require_dist_cjs18();
    var isVirtualHostableS3Bucket = /* @__PURE__ */ __name((value, allowSubDomains = false) => {
      if (allowSubDomains) {
        for (const label of value.split(".")) {
          if (!isVirtualHostableS3Bucket(label)) {
            return false;
          }
        }
        return true;
      }
      if (!(0, import_util_endpoints.isValidHostLabel)(value)) {
        return false;
      }
      if (value.length < 3 || value.length > 63) {
        return false;
      }
      if (value !== value.toLowerCase()) {
        return false;
      }
      if ((0, import_util_endpoints.isIpAddress)(value)) {
        return false;
      }
      return true;
    }, "isVirtualHostableS3Bucket");
    var ARN_DELIMITER = ":";
    var RESOURCE_DELIMITER = "/";
    var parseArn = /* @__PURE__ */ __name((value) => {
      const segments = value.split(ARN_DELIMITER);
      if (segments.length < 6)
        return null;
      const [arn, partition2, service, region, accountId, ...resourcePath] = segments;
      if (arn !== "arn" || partition2 === "" || service === "" || resourcePath.join(ARN_DELIMITER) === "")
        return null;
      const resourceId = resourcePath.map((resource) => resource.split(RESOURCE_DELIMITER)).flat();
      return {
        partition: partition2,
        service,
        region,
        accountId,
        resourceId
      };
    }, "parseArn");
    var partitions_default = {
      partitions: [{
        id: "aws",
        outputs: {
          dnsSuffix: "amazonaws.com",
          dualStackDnsSuffix: "api.aws",
          implicitGlobalRegion: "us-east-1",
          name: "aws",
          supportsDualStack: true,
          supportsFIPS: true
        },
        regionRegex: "^(us|eu|ap|sa|ca|me|af|il|mx)\\-\\w+\\-\\d+$",
        regions: {
          "af-south-1": {
            description: "Africa (Cape Town)"
          },
          "ap-east-1": {
            description: "Asia Pacific (Hong Kong)"
          },
          "ap-northeast-1": {
            description: "Asia Pacific (Tokyo)"
          },
          "ap-northeast-2": {
            description: "Asia Pacific (Seoul)"
          },
          "ap-northeast-3": {
            description: "Asia Pacific (Osaka)"
          },
          "ap-south-1": {
            description: "Asia Pacific (Mumbai)"
          },
          "ap-south-2": {
            description: "Asia Pacific (Hyderabad)"
          },
          "ap-southeast-1": {
            description: "Asia Pacific (Singapore)"
          },
          "ap-southeast-2": {
            description: "Asia Pacific (Sydney)"
          },
          "ap-southeast-3": {
            description: "Asia Pacific (Jakarta)"
          },
          "ap-southeast-4": {
            description: "Asia Pacific (Melbourne)"
          },
          "ap-southeast-5": {
            description: "Asia Pacific (Malaysia)"
          },
          "aws-global": {
            description: "AWS Standard global region"
          },
          "ca-central-1": {
            description: "Canada (Central)"
          },
          "ca-west-1": {
            description: "Canada West (Calgary)"
          },
          "eu-central-1": {
            description: "Europe (Frankfurt)"
          },
          "eu-central-2": {
            description: "Europe (Zurich)"
          },
          "eu-north-1": {
            description: "Europe (Stockholm)"
          },
          "eu-south-1": {
            description: "Europe (Milan)"
          },
          "eu-south-2": {
            description: "Europe (Spain)"
          },
          "eu-west-1": {
            description: "Europe (Ireland)"
          },
          "eu-west-2": {
            description: "Europe (London)"
          },
          "eu-west-3": {
            description: "Europe (Paris)"
          },
          "il-central-1": {
            description: "Israel (Tel Aviv)"
          },
          "me-central-1": {
            description: "Middle East (UAE)"
          },
          "me-south-1": {
            description: "Middle East (Bahrain)"
          },
          "sa-east-1": {
            description: "South America (Sao Paulo)"
          },
          "us-east-1": {
            description: "US East (N. Virginia)"
          },
          "us-east-2": {
            description: "US East (Ohio)"
          },
          "us-west-1": {
            description: "US West (N. California)"
          },
          "us-west-2": {
            description: "US West (Oregon)"
          }
        }
      }, {
        id: "aws-cn",
        outputs: {
          dnsSuffix: "amazonaws.com.cn",
          dualStackDnsSuffix: "api.amazonwebservices.com.cn",
          implicitGlobalRegion: "cn-northwest-1",
          name: "aws-cn",
          supportsDualStack: true,
          supportsFIPS: true
        },
        regionRegex: "^cn\\-\\w+\\-\\d+$",
        regions: {
          "aws-cn-global": {
            description: "AWS China global region"
          },
          "cn-north-1": {
            description: "China (Beijing)"
          },
          "cn-northwest-1": {
            description: "China (Ningxia)"
          }
        }
      }, {
        id: "aws-us-gov",
        outputs: {
          dnsSuffix: "amazonaws.com",
          dualStackDnsSuffix: "api.aws",
          implicitGlobalRegion: "us-gov-west-1",
          name: "aws-us-gov",
          supportsDualStack: true,
          supportsFIPS: true
        },
        regionRegex: "^us\\-gov\\-\\w+\\-\\d+$",
        regions: {
          "aws-us-gov-global": {
            description: "AWS GovCloud (US) global region"
          },
          "us-gov-east-1": {
            description: "AWS GovCloud (US-East)"
          },
          "us-gov-west-1": {
            description: "AWS GovCloud (US-West)"
          }
        }
      }, {
        id: "aws-iso",
        outputs: {
          dnsSuffix: "c2s.ic.gov",
          dualStackDnsSuffix: "c2s.ic.gov",
          implicitGlobalRegion: "us-iso-east-1",
          name: "aws-iso",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^us\\-iso\\-\\w+\\-\\d+$",
        regions: {
          "aws-iso-global": {
            description: "AWS ISO (US) global region"
          },
          "us-iso-east-1": {
            description: "US ISO East"
          },
          "us-iso-west-1": {
            description: "US ISO WEST"
          }
        }
      }, {
        id: "aws-iso-b",
        outputs: {
          dnsSuffix: "sc2s.sgov.gov",
          dualStackDnsSuffix: "sc2s.sgov.gov",
          implicitGlobalRegion: "us-isob-east-1",
          name: "aws-iso-b",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^us\\-isob\\-\\w+\\-\\d+$",
        regions: {
          "aws-iso-b-global": {
            description: "AWS ISOB (US) global region"
          },
          "us-isob-east-1": {
            description: "US ISOB East (Ohio)"
          }
        }
      }, {
        id: "aws-iso-e",
        outputs: {
          dnsSuffix: "cloud.adc-e.uk",
          dualStackDnsSuffix: "cloud.adc-e.uk",
          implicitGlobalRegion: "eu-isoe-west-1",
          name: "aws-iso-e",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^eu\\-isoe\\-\\w+\\-\\d+$",
        regions: {
          "eu-isoe-west-1": {
            description: "EU ISOE West"
          }
        }
      }, {
        id: "aws-iso-f",
        outputs: {
          dnsSuffix: "csp.hci.ic.gov",
          dualStackDnsSuffix: "csp.hci.ic.gov",
          implicitGlobalRegion: "us-isof-south-1",
          name: "aws-iso-f",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^us\\-isof\\-\\w+\\-\\d+$",
        regions: {}
      }],
      version: "1.1"
    };
    var selectedPartitionsInfo = partitions_default;
    var selectedUserAgentPrefix = "";
    var partition = /* @__PURE__ */ __name((value) => {
      const { partitions } = selectedPartitionsInfo;
      for (const partition2 of partitions) {
        const { regions, outputs } = partition2;
        for (const [region, regionData] of Object.entries(regions)) {
          if (region === value) {
            return {
              ...outputs,
              ...regionData
            };
          }
        }
      }
      for (const partition2 of partitions) {
        const { regionRegex, outputs } = partition2;
        if (new RegExp(regionRegex).test(value)) {
          return {
            ...outputs
          };
        }
      }
      const DEFAULT_PARTITION = partitions.find((partition2) => partition2.id === "aws");
      if (!DEFAULT_PARTITION) {
        throw new Error(
          "Provided region was not found in the partition array or regex, and default partition with id 'aws' doesn't exist."
        );
      }
      return {
        ...DEFAULT_PARTITION.outputs
      };
    }, "partition");
    var setPartitionInfo = /* @__PURE__ */ __name((partitionsInfo, userAgentPrefix = "") => {
      selectedPartitionsInfo = partitionsInfo;
      selectedUserAgentPrefix = userAgentPrefix;
    }, "setPartitionInfo");
    var useDefaultPartitionInfo = /* @__PURE__ */ __name(() => {
      setPartitionInfo(partitions_default, "");
    }, "useDefaultPartitionInfo");
    var getUserAgentPrefix = /* @__PURE__ */ __name(() => selectedUserAgentPrefix, "getUserAgentPrefix");
    var awsEndpointFunctions = {
      isVirtualHostableS3Bucket,
      parseArn,
      partition
    };
    import_util_endpoints.customEndpointFunctions.aws = awsEndpointFunctions;
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/core/dist-es/submodules/client/emitWarningIfUnsupportedVersion.js
var state2, emitWarningIfUnsupportedVersion2;
var init_emitWarningIfUnsupportedVersion2 = __esm({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/core/dist-es/submodules/client/emitWarningIfUnsupportedVersion.js"() {
    init_dirname();
    state2 = {
      warningEmitted: false
    };
    emitWarningIfUnsupportedVersion2 = (version3) => {
      if (version3 && !state2.warningEmitted && parseInt(version3.substring(1, version3.indexOf("."))) < 18) {
        state2.warningEmitted = true;
        process.emitWarning(`NodeDeprecationWarning: The AWS SDK for JavaScript (v3) will
no longer support Node.js 16.x on January 6, 2025.

To continue receiving updates to AWS services, bug fixes, and security
updates please upgrade to a supported Node.js LTS version.

More information can be found at: https://a.co/74kJMmI`);
      }
    };
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/core/dist-es/submodules/client/setCredentialFeature.js
function setCredentialFeature2(credentials, feature, value) {
  if (!credentials.$source) {
    credentials.$source = {};
  }
  credentials.$source[feature] = value;
  return credentials;
}
var init_setCredentialFeature2 = __esm({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/core/dist-es/submodules/client/setCredentialFeature.js"() {
    init_dirname();
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/core/dist-es/submodules/client/setFeature.js
function setFeature3(context, feature, value) {
  if (!context.__aws_sdk_context) {
    context.__aws_sdk_context = {
      features: {}
    };
  } else if (!context.__aws_sdk_context.features) {
    context.__aws_sdk_context.features = {};
  }
  context.__aws_sdk_context.features[feature] = value;
}
var init_setFeature3 = __esm({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/core/dist-es/submodules/client/setFeature.js"() {
    init_dirname();
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/core/dist-es/submodules/client/index.js
var client_exports2 = {};
__export(client_exports2, {
  emitWarningIfUnsupportedVersion: () => emitWarningIfUnsupportedVersion2,
  setCredentialFeature: () => setCredentialFeature2,
  setFeature: () => setFeature3,
  state: () => state2
});
var init_client2 = __esm({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/core/dist-es/submodules/client/index.js"() {
    init_dirname();
    init_emitWarningIfUnsupportedVersion2();
    init_setCredentialFeature2();
    init_setFeature3();
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getDateHeader.js
var import_protocol_http8, getDateHeader2;
var init_getDateHeader2 = __esm({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getDateHeader.js"() {
    init_dirname();
    import_protocol_http8 = __toESM(require_dist_cjs2());
    getDateHeader2 = (response) => import_protocol_http8.HttpResponse.isInstance(response) ? response.headers?.date ?? response.headers?.Date : void 0;
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getSkewCorrectedDate.js
var getSkewCorrectedDate2;
var init_getSkewCorrectedDate2 = __esm({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getSkewCorrectedDate.js"() {
    init_dirname();
    getSkewCorrectedDate2 = (systemClockOffset) => new Date(Date.now() + systemClockOffset);
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/isClockSkewed.js
var isClockSkewed2;
var init_isClockSkewed2 = __esm({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/isClockSkewed.js"() {
    init_dirname();
    init_getSkewCorrectedDate2();
    isClockSkewed2 = (clockTime, systemClockOffset) => Math.abs(getSkewCorrectedDate2(systemClockOffset).getTime() - clockTime) >= 3e5;
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getUpdatedSystemClockOffset.js
var getUpdatedSystemClockOffset2;
var init_getUpdatedSystemClockOffset2 = __esm({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getUpdatedSystemClockOffset.js"() {
    init_dirname();
    init_isClockSkewed2();
    getUpdatedSystemClockOffset2 = (clockTime, currentSystemClockOffset) => {
      const clockTimeInMs = Date.parse(clockTime);
      if (isClockSkewed2(clockTimeInMs, currentSystemClockOffset)) {
        return clockTimeInMs - Date.now();
      }
      return currentSystemClockOffset;
    };
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/index.js
var init_utils2 = __esm({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/index.js"() {
    init_dirname();
    init_getDateHeader2();
    init_getSkewCorrectedDate2();
    init_getUpdatedSystemClockOffset2();
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/AwsSdkSigV4Signer.js
var import_protocol_http9, throwSigningPropertyError2, validateSigningProperties2, AwsSdkSigV4Signer2, AWSSDKSigV4Signer2;
var init_AwsSdkSigV4Signer2 = __esm({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/AwsSdkSigV4Signer.js"() {
    init_dirname();
    import_protocol_http9 = __toESM(require_dist_cjs2());
    init_utils2();
    throwSigningPropertyError2 = (name, property) => {
      if (!property) {
        throw new Error(`Property \`${name}\` is not resolved for AWS SDK SigV4Auth`);
      }
      return property;
    };
    validateSigningProperties2 = async (signingProperties) => {
      const context = throwSigningPropertyError2("context", signingProperties.context);
      const config2 = throwSigningPropertyError2("config", signingProperties.config);
      const authScheme = context.endpointV2?.properties?.authSchemes?.[0];
      const signerFunction = throwSigningPropertyError2("signer", config2.signer);
      const signer = await signerFunction(authScheme);
      const signingRegion = signingProperties?.signingRegion;
      const signingRegionSet = signingProperties?.signingRegionSet;
      const signingName = signingProperties?.signingName;
      return {
        config: config2,
        signer,
        signingRegion,
        signingRegionSet,
        signingName
      };
    };
    AwsSdkSigV4Signer2 = class {
      async sign(httpRequest, identity, signingProperties) {
        if (!import_protocol_http9.HttpRequest.isInstance(httpRequest)) {
          throw new Error("The request is not an instance of `HttpRequest` and cannot be signed");
        }
        const validatedProps = await validateSigningProperties2(signingProperties);
        const { config: config2, signer } = validatedProps;
        let { signingRegion, signingName } = validatedProps;
        const handlerExecutionContext = signingProperties.context;
        if (handlerExecutionContext?.authSchemes?.length ?? 0 > 1) {
          const [first, second] = handlerExecutionContext.authSchemes;
          if (first?.name === "sigv4a" && second?.name === "sigv4") {
            signingRegion = second?.signingRegion ?? signingRegion;
            signingName = second?.signingName ?? signingName;
          }
        }
        const signedRequest = await signer.sign(httpRequest, {
          signingDate: getSkewCorrectedDate2(config2.systemClockOffset),
          signingRegion,
          signingService: signingName
        });
        return signedRequest;
      }
      errorHandler(signingProperties) {
        return (error) => {
          const serverTime = error.ServerTime ?? getDateHeader2(error.$response);
          if (serverTime) {
            const config2 = throwSigningPropertyError2("config", signingProperties.config);
            const initialSystemClockOffset = config2.systemClockOffset;
            config2.systemClockOffset = getUpdatedSystemClockOffset2(serverTime, config2.systemClockOffset);
            const clockSkewCorrected = config2.systemClockOffset !== initialSystemClockOffset;
            if (clockSkewCorrected && error.$metadata) {
              error.$metadata.clockSkewCorrected = true;
            }
          }
          throw error;
        };
      }
      successHandler(httpResponse, signingProperties) {
        const dateHeader = getDateHeader2(httpResponse);
        if (dateHeader) {
          const config2 = throwSigningPropertyError2("config", signingProperties.config);
          config2.systemClockOffset = getUpdatedSystemClockOffset2(dateHeader, config2.systemClockOffset);
        }
      }
    };
    AWSSDKSigV4Signer2 = AwsSdkSigV4Signer2;
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/AwsSdkSigV4ASigner.js
var import_protocol_http10, AwsSdkSigV4ASigner2;
var init_AwsSdkSigV4ASigner2 = __esm({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/AwsSdkSigV4ASigner.js"() {
    init_dirname();
    import_protocol_http10 = __toESM(require_dist_cjs2());
    init_utils2();
    init_AwsSdkSigV4Signer2();
    AwsSdkSigV4ASigner2 = class extends AwsSdkSigV4Signer2 {
      async sign(httpRequest, identity, signingProperties) {
        if (!import_protocol_http10.HttpRequest.isInstance(httpRequest)) {
          throw new Error("The request is not an instance of `HttpRequest` and cannot be signed");
        }
        const { config: config2, signer, signingRegion, signingRegionSet, signingName } = await validateSigningProperties2(signingProperties);
        const configResolvedSigningRegionSet = await config2.sigv4aSigningRegionSet?.();
        const multiRegionOverride = (configResolvedSigningRegionSet ?? signingRegionSet ?? [signingRegion]).join(",");
        const signedRequest = await signer.sign(httpRequest, {
          signingDate: getSkewCorrectedDate2(config2.systemClockOffset),
          signingRegion: multiRegionOverride,
          signingService: signingName
        });
        return signedRequest;
      }
    };
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/resolveAwsSdkSigV4AConfig.js
var import_property_provider2, resolveAwsSdkSigV4AConfig2, NODE_SIGV4A_CONFIG_OPTIONS2;
var init_resolveAwsSdkSigV4AConfig2 = __esm({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/resolveAwsSdkSigV4AConfig.js"() {
    init_dirname();
    init_dist_es();
    import_property_provider2 = __toESM(require_dist_cjs20());
    resolveAwsSdkSigV4AConfig2 = (config2) => {
      config2.sigv4aSigningRegionSet = normalizeProvider(config2.sigv4aSigningRegionSet);
      return config2;
    };
    NODE_SIGV4A_CONFIG_OPTIONS2 = {
      environmentVariableSelector(env2) {
        if (env2.AWS_SIGV4A_SIGNING_REGION_SET) {
          return env2.AWS_SIGV4A_SIGNING_REGION_SET.split(",").map((_) => _.trim());
        }
        throw new import_property_provider2.ProviderError("AWS_SIGV4A_SIGNING_REGION_SET not set in env.", {
          tryNextLink: true
        });
      },
      configFileSelector(profile) {
        if (profile.sigv4a_signing_region_set) {
          return (profile.sigv4a_signing_region_set ?? "").split(",").map((_) => _.trim());
        }
        throw new import_property_provider2.ProviderError("sigv4a_signing_region_set not set in profile.", {
          tryNextLink: true
        });
      },
      default: void 0
    };
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/resolveAwsSdkSigV4Config.js
var import_signature_v42, resolveAwsSdkSigV4Config2, resolveAWSSDKSigV4Config2;
var init_resolveAwsSdkSigV4Config2 = __esm({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/resolveAwsSdkSigV4Config.js"() {
    init_dirname();
    init_client2();
    init_dist_es();
    import_signature_v42 = __toESM(require_dist_cjs21());
    resolveAwsSdkSigV4Config2 = (config2) => {
      let isUserSupplied = false;
      let credentialsProvider;
      if (config2.credentials) {
        isUserSupplied = true;
        credentialsProvider = memoizeIdentityProvider(config2.credentials, isIdentityExpired, doesIdentityRequireRefresh);
      }
      if (!credentialsProvider) {
        if (config2.credentialDefaultProvider) {
          credentialsProvider = normalizeProvider(config2.credentialDefaultProvider(Object.assign({}, config2, {
            parentClientConfig: config2
          })));
        } else {
          credentialsProvider = async () => {
            throw new Error("`credentials` is missing");
          };
        }
      }
      const boundCredentialsProvider = async () => credentialsProvider({ callerClientConfig: config2 });
      const { signingEscapePath = true, systemClockOffset = config2.systemClockOffset || 0, sha256 } = config2;
      let signer;
      if (config2.signer) {
        signer = normalizeProvider(config2.signer);
      } else if (config2.regionInfoProvider) {
        signer = () => normalizeProvider(config2.region)().then(async (region) => [
          await config2.regionInfoProvider(region, {
            useFipsEndpoint: await config2.useFipsEndpoint(),
            useDualstackEndpoint: await config2.useDualstackEndpoint()
          }) || {},
          region
        ]).then(([regionInfo, region]) => {
          const { signingRegion, signingService } = regionInfo;
          config2.signingRegion = config2.signingRegion || signingRegion || region;
          config2.signingName = config2.signingName || signingService || config2.serviceId;
          const params = {
            ...config2,
            credentials: boundCredentialsProvider,
            region: config2.signingRegion,
            service: config2.signingName,
            sha256,
            uriEscapePath: signingEscapePath
          };
          const SignerCtor = config2.signerConstructor || import_signature_v42.SignatureV4;
          return new SignerCtor(params);
        });
      } else {
        signer = async (authScheme) => {
          authScheme = Object.assign({}, {
            name: "sigv4",
            signingName: config2.signingName || config2.defaultSigningName,
            signingRegion: await normalizeProvider(config2.region)(),
            properties: {}
          }, authScheme);
          const signingRegion = authScheme.signingRegion;
          const signingService = authScheme.signingName;
          config2.signingRegion = config2.signingRegion || signingRegion;
          config2.signingName = config2.signingName || signingService || config2.serviceId;
          const params = {
            ...config2,
            credentials: boundCredentialsProvider,
            region: config2.signingRegion,
            service: config2.signingName,
            sha256,
            uriEscapePath: signingEscapePath
          };
          const SignerCtor = config2.signerConstructor || import_signature_v42.SignatureV4;
          return new SignerCtor(params);
        };
      }
      return {
        ...config2,
        systemClockOffset,
        signingEscapePath,
        credentials: isUserSupplied ? async () => boundCredentialsProvider().then((creds) => setCredentialFeature2(creds, "CREDENTIALS_CODE", "e")) : boundCredentialsProvider,
        signer
      };
    };
    resolveAWSSDKSigV4Config2 = resolveAwsSdkSigV4Config2;
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/index.js
var init_aws_sdk2 = __esm({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/index.js"() {
    init_dirname();
    init_AwsSdkSigV4Signer2();
    init_AwsSdkSigV4ASigner2();
    init_resolveAwsSdkSigV4AConfig2();
    init_resolveAwsSdkSigV4Config2();
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/index.js
var init_httpAuthSchemes3 = __esm({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/index.js"() {
    init_dirname();
    init_aws_sdk2();
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/core/dist-es/submodules/protocols/coercing-serializers.js
var _toStr2, _toBool2, _toNum2;
var init_coercing_serializers2 = __esm({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/core/dist-es/submodules/protocols/coercing-serializers.js"() {
    init_dirname();
    _toStr2 = (val2) => {
      if (val2 == null) {
        return val2;
      }
      if (typeof val2 === "number" || typeof val2 === "bigint") {
        const warning = new Error(`Received number ${val2} where a string was expected.`);
        warning.name = "Warning";
        console.warn(warning);
        return String(val2);
      }
      if (typeof val2 === "boolean") {
        const warning = new Error(`Received boolean ${val2} where a string was expected.`);
        warning.name = "Warning";
        console.warn(warning);
        return String(val2);
      }
      return val2;
    };
    _toBool2 = (val2) => {
      if (val2 == null) {
        return val2;
      }
      if (typeof val2 === "number") {
      }
      if (typeof val2 === "string") {
        const lowercase = val2.toLowerCase();
        if (val2 !== "" && lowercase !== "false" && lowercase !== "true") {
          const warning = new Error(`Received string "${val2}" where a boolean was expected.`);
          warning.name = "Warning";
          console.warn(warning);
        }
        return val2 !== "" && lowercase !== "false";
      }
      return val2;
    };
    _toNum2 = (val2) => {
      if (val2 == null) {
        return val2;
      }
      if (typeof val2 === "boolean") {
      }
      if (typeof val2 === "string") {
        const num = Number(val2);
        if (num.toString() !== val2) {
          const warning = new Error(`Received string "${val2}" where a number was expected.`);
          warning.name = "Warning";
          console.warn(warning);
          return val2;
        }
        return num;
      }
      return val2;
    };
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/awsExpectUnion.js
var import_smithy_client4, awsExpectUnion2;
var init_awsExpectUnion2 = __esm({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/awsExpectUnion.js"() {
    init_dirname();
    import_smithy_client4 = __toESM(require_dist_cjs23());
    awsExpectUnion2 = (value) => {
      if (value == null) {
        return void 0;
      }
      if (typeof value === "object" && "__type" in value) {
        delete value.__type;
      }
      return (0, import_smithy_client4.expectUnion)(value);
    };
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/core/dist-es/submodules/protocols/common.js
var import_smithy_client5, collectBodyString2;
var init_common2 = __esm({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/core/dist-es/submodules/protocols/common.js"() {
    init_dirname();
    import_smithy_client5 = __toESM(require_dist_cjs23());
    collectBodyString2 = (streamBody, context) => (0, import_smithy_client5.collectBody)(streamBody, context).then((body) => context.utf8Encoder(body));
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/parseJsonBody.js
var parseJsonBody2, parseJsonErrorBody2, loadRestJsonErrorCode2;
var init_parseJsonBody2 = __esm({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/parseJsonBody.js"() {
    init_dirname();
    init_common2();
    parseJsonBody2 = (streamBody, context) => collectBodyString2(streamBody, context).then((encoded) => {
      if (encoded.length) {
        try {
          return JSON.parse(encoded);
        } catch (e) {
          if (e?.name === "SyntaxError") {
            Object.defineProperty(e, "$responseBodyText", {
              value: encoded
            });
          }
          throw e;
        }
      }
      return {};
    });
    parseJsonErrorBody2 = async (errorBody, context) => {
      const value = await parseJsonBody2(errorBody, context);
      value.message = value.message ?? value.Message;
      return value;
    };
    loadRestJsonErrorCode2 = (output, data) => {
      const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
      const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
          cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
          cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
          cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
          cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
      };
      const headerKey = findKey(output.headers, "x-amzn-errortype");
      if (headerKey !== void 0) {
        return sanitizeErrorCode(output.headers[headerKey]);
      }
      if (data.code !== void 0) {
        return sanitizeErrorCode(data.code);
      }
      if (data["__type"] !== void 0) {
        return sanitizeErrorCode(data["__type"]);
      }
    };
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/core/dist-es/submodules/protocols/xml/parseXmlBody.js
var import_smithy_client6, import_fast_xml_parser2, parseXmlBody2, parseXmlErrorBody2, loadRestXmlErrorCode2;
var init_parseXmlBody2 = __esm({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/core/dist-es/submodules/protocols/xml/parseXmlBody.js"() {
    init_dirname();
    import_smithy_client6 = __toESM(require_dist_cjs23());
    import_fast_xml_parser2 = __toESM(require_fxp());
    init_common2();
    parseXmlBody2 = (streamBody, context) => collectBodyString2(streamBody, context).then((encoded) => {
      if (encoded.length) {
        const parser = new import_fast_xml_parser2.XMLParser({
          attributeNamePrefix: "",
          htmlEntities: true,
          ignoreAttributes: false,
          ignoreDeclaration: true,
          parseTagValue: false,
          trimValues: false,
          tagValueProcessor: (_, val2) => val2.trim() === "" && val2.includes("\n") ? "" : void 0
        });
        parser.addEntity("#xD", "\r");
        parser.addEntity("#10", "\n");
        let parsedObj;
        try {
          parsedObj = parser.parse(encoded, true);
        } catch (e) {
          if (e && typeof e === "object") {
            Object.defineProperty(e, "$responseBodyText", {
              value: encoded
            });
          }
          throw e;
        }
        const textNodeName = "#text";
        const key = Object.keys(parsedObj)[0];
        const parsedObjToReturn = parsedObj[key];
        if (parsedObjToReturn[textNodeName]) {
          parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
          delete parsedObjToReturn[textNodeName];
        }
        return (0, import_smithy_client6.getValueFromTextNode)(parsedObjToReturn);
      }
      return {};
    });
    parseXmlErrorBody2 = async (errorBody, context) => {
      const value = await parseXmlBody2(errorBody, context);
      if (value.Error) {
        value.Error.message = value.Error.message ?? value.Error.Message;
      }
      return value;
    };
    loadRestXmlErrorCode2 = (output, data) => {
      if (data?.Error?.Code !== void 0) {
        return data.Error.Code;
      }
      if (data?.Code !== void 0) {
        return data.Code;
      }
      if (output.statusCode == 404) {
        return "NotFound";
      }
    };
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/core/dist-es/submodules/protocols/index.js
var init_protocols3 = __esm({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/core/dist-es/submodules/protocols/index.js"() {
    init_dirname();
    init_coercing_serializers2();
    init_awsExpectUnion2();
    init_parseJsonBody2();
    init_parseXmlBody2();
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/core/dist-es/index.js
var dist_es_exports3 = {};
__export(dist_es_exports3, {
  AWSSDKSigV4Signer: () => AWSSDKSigV4Signer2,
  AwsSdkSigV4ASigner: () => AwsSdkSigV4ASigner2,
  AwsSdkSigV4Signer: () => AwsSdkSigV4Signer2,
  NODE_SIGV4A_CONFIG_OPTIONS: () => NODE_SIGV4A_CONFIG_OPTIONS2,
  _toBool: () => _toBool2,
  _toNum: () => _toNum2,
  _toStr: () => _toStr2,
  awsExpectUnion: () => awsExpectUnion2,
  emitWarningIfUnsupportedVersion: () => emitWarningIfUnsupportedVersion2,
  loadRestJsonErrorCode: () => loadRestJsonErrorCode2,
  loadRestXmlErrorCode: () => loadRestXmlErrorCode2,
  parseJsonBody: () => parseJsonBody2,
  parseJsonErrorBody: () => parseJsonErrorBody2,
  parseXmlBody: () => parseXmlBody2,
  parseXmlErrorBody: () => parseXmlErrorBody2,
  resolveAWSSDKSigV4Config: () => resolveAWSSDKSigV4Config2,
  resolveAwsSdkSigV4AConfig: () => resolveAwsSdkSigV4AConfig2,
  resolveAwsSdkSigV4Config: () => resolveAwsSdkSigV4Config2,
  setCredentialFeature: () => setCredentialFeature2,
  setFeature: () => setFeature3,
  state: () => state2,
  validateSigningProperties: () => validateSigningProperties2
});
var init_dist_es3 = __esm({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/core/dist-es/index.js"() {
    init_dirname();
    init_client2();
    init_httpAuthSchemes3();
    init_protocols3();
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js
var require_dist_cjs64 = __commonJS({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js"(exports6, module) {
    "use strict";
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      DEFAULT_UA_APP_ID: () => DEFAULT_UA_APP_ID,
      getUserAgentMiddlewareOptions: () => getUserAgentMiddlewareOptions,
      getUserAgentPlugin: () => getUserAgentPlugin,
      resolveUserAgentConfig: () => resolveUserAgentConfig,
      userAgentMiddleware: () => userAgentMiddleware
    });
    module.exports = __toCommonJS3(src_exports);
    var import_core5 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var DEFAULT_UA_APP_ID = void 0;
    function isValidUserAgentAppId(appId) {
      if (appId === void 0) {
        return true;
      }
      return typeof appId === "string" && appId.length <= 50;
    }
    __name(isValidUserAgentAppId, "isValidUserAgentAppId");
    function resolveUserAgentConfig(input) {
      const normalizedAppIdProvider = (0, import_core5.normalizeProvider)(input.userAgentAppId ?? DEFAULT_UA_APP_ID);
      return {
        ...input,
        customUserAgent: typeof input.customUserAgent === "string" ? [[input.customUserAgent]] : input.customUserAgent,
        userAgentAppId: async () => {
          var _a, _b;
          const appId = await normalizedAppIdProvider();
          if (!isValidUserAgentAppId(appId)) {
            const logger = ((_b = (_a = input.logger) == null ? void 0 : _a.constructor) == null ? void 0 : _b.name) === "NoOpLogger" || !input.logger ? console : input.logger;
            if (typeof appId !== "string") {
              logger == null ? void 0 : logger.warn("userAgentAppId must be a string or undefined.");
            } else if (appId.length > 50) {
              logger == null ? void 0 : logger.warn("The provided userAgentAppId exceeds the maximum length of 50 characters.");
            }
          }
          return appId;
        }
      };
    }
    __name(resolveUserAgentConfig, "resolveUserAgentConfig");
    var import_util_endpoints = require_dist_cjs63();
    var import_protocol_http11 = require_dist_cjs2();
    var import_core22 = (init_dist_es3(), __toCommonJS(dist_es_exports3));
    var ACCOUNT_ID_ENDPOINT_REGEX = /\d{12}\.ddb/;
    async function checkFeatures(context, config2, args) {
      var _a, _b, _c, _d, _e, _f, _g;
      const request = args.request;
      if (((_a = request == null ? void 0 : request.headers) == null ? void 0 : _a["smithy-protocol"]) === "rpc-v2-cbor") {
        (0, import_core22.setFeature)(context, "PROTOCOL_RPC_V2_CBOR", "M");
      }
      if (typeof config2.retryStrategy === "function") {
        const retryStrategy = await config2.retryStrategy();
        if (typeof retryStrategy.acquireInitialRetryToken === "function") {
          if ((_c = (_b = retryStrategy.constructor) == null ? void 0 : _b.name) == null ? void 0 : _c.includes("Adaptive")) {
            (0, import_core22.setFeature)(context, "RETRY_MODE_ADAPTIVE", "F");
          } else {
            (0, import_core22.setFeature)(context, "RETRY_MODE_STANDARD", "E");
          }
        } else {
          (0, import_core22.setFeature)(context, "RETRY_MODE_LEGACY", "D");
        }
      }
      if (typeof config2.accountIdEndpointMode === "function") {
        const endpointV2 = context.endpointV2;
        if (String((_d = endpointV2 == null ? void 0 : endpointV2.url) == null ? void 0 : _d.hostname).match(ACCOUNT_ID_ENDPOINT_REGEX)) {
          (0, import_core22.setFeature)(context, "ACCOUNT_ID_ENDPOINT", "O");
        }
        switch (await ((_e = config2.accountIdEndpointMode) == null ? void 0 : _e.call(config2))) {
          case "disabled":
            (0, import_core22.setFeature)(context, "ACCOUNT_ID_MODE_DISABLED", "Q");
            break;
          case "preferred":
            (0, import_core22.setFeature)(context, "ACCOUNT_ID_MODE_PREFERRED", "P");
            break;
          case "required":
            (0, import_core22.setFeature)(context, "ACCOUNT_ID_MODE_REQUIRED", "R");
            break;
        }
      }
      const identity = (_g = (_f = context.__smithy_context) == null ? void 0 : _f.selectedHttpAuthScheme) == null ? void 0 : _g.identity;
      if (identity == null ? void 0 : identity.$source) {
        const credentials = identity;
        if (credentials.accountId) {
          (0, import_core22.setFeature)(context, "RESOLVED_ACCOUNT_ID", "T");
        }
        for (const [key, value] of Object.entries(credentials.$source ?? {})) {
          (0, import_core22.setFeature)(context, key, value);
        }
      }
    }
    __name(checkFeatures, "checkFeatures");
    var USER_AGENT = "user-agent";
    var X_AMZ_USER_AGENT = "x-amz-user-agent";
    var SPACE = " ";
    var UA_NAME_SEPARATOR = "/";
    var UA_NAME_ESCAPE_REGEX = /[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g;
    var UA_VALUE_ESCAPE_REGEX = /[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w\#]/g;
    var UA_ESCAPE_CHAR = "-";
    var BYTE_LIMIT = 1024;
    function encodeFeatures(features2) {
      let buffer = "";
      for (const key in features2) {
        const val2 = features2[key];
        if (buffer.length + val2.length + 1 <= BYTE_LIMIT) {
          if (buffer.length) {
            buffer += "," + val2;
          } else {
            buffer += val2;
          }
          continue;
        }
        break;
      }
      return buffer;
    }
    __name(encodeFeatures, "encodeFeatures");
    var userAgentMiddleware = /* @__PURE__ */ __name((options) => (next, context) => async (args) => {
      var _a, _b, _c, _d;
      const { request } = args;
      if (!import_protocol_http11.HttpRequest.isInstance(request)) {
        return next(args);
      }
      const { headers } = request;
      const userAgent = ((_a = context == null ? void 0 : context.userAgent) == null ? void 0 : _a.map(escapeUserAgent)) || [];
      const defaultUserAgent = (await options.defaultUserAgentProvider()).map(escapeUserAgent);
      await checkFeatures(context, options, args);
      const awsContext = context;
      defaultUserAgent.push(
        `m/${encodeFeatures(
          Object.assign({}, (_b = context.__smithy_context) == null ? void 0 : _b.features, (_c = awsContext.__aws_sdk_context) == null ? void 0 : _c.features)
        )}`
      );
      const customUserAgent = ((_d = options == null ? void 0 : options.customUserAgent) == null ? void 0 : _d.map(escapeUserAgent)) || [];
      const appId = await options.userAgentAppId();
      if (appId) {
        defaultUserAgent.push(escapeUserAgent([`app/${appId}`]));
      }
      const prefix = (0, import_util_endpoints.getUserAgentPrefix)();
      const sdkUserAgentValue = (prefix ? [prefix] : []).concat([...defaultUserAgent, ...userAgent, ...customUserAgent]).join(SPACE);
      const normalUAValue = [
        ...defaultUserAgent.filter((section) => section.startsWith("aws-sdk-")),
        ...customUserAgent
      ].join(SPACE);
      if (options.runtime !== "browser") {
        if (normalUAValue) {
          headers[X_AMZ_USER_AGENT] = headers[X_AMZ_USER_AGENT] ? `${headers[USER_AGENT]} ${normalUAValue}` : normalUAValue;
        }
        headers[USER_AGENT] = sdkUserAgentValue;
      } else {
        headers[X_AMZ_USER_AGENT] = sdkUserAgentValue;
      }
      return next({
        ...args,
        request
      });
    }, "userAgentMiddleware");
    var escapeUserAgent = /* @__PURE__ */ __name((userAgentPair) => {
      var _a;
      const name = userAgentPair[0].split(UA_NAME_SEPARATOR).map((part) => part.replace(UA_NAME_ESCAPE_REGEX, UA_ESCAPE_CHAR)).join(UA_NAME_SEPARATOR);
      const version3 = (_a = userAgentPair[1]) == null ? void 0 : _a.replace(UA_VALUE_ESCAPE_REGEX, UA_ESCAPE_CHAR);
      const prefixSeparatorIndex = name.indexOf(UA_NAME_SEPARATOR);
      const prefix = name.substring(0, prefixSeparatorIndex);
      let uaName = name.substring(prefixSeparatorIndex + 1);
      if (prefix === "api") {
        uaName = uaName.toLowerCase();
      }
      return [prefix, uaName, version3].filter((item) => item && item.length > 0).reduce((acc, item, index) => {
        switch (index) {
          case 0:
            return item;
          case 1:
            return `${acc}/${item}`;
          default:
            return `${acc}#${item}`;
        }
      }, "");
    }, "escapeUserAgent");
    var getUserAgentMiddlewareOptions = {
      name: "getUserAgentMiddleware",
      step: "build",
      priority: "low",
      tags: ["SET_USER_AGENT", "USER_AGENT"],
      override: true
    };
    var getUserAgentPlugin = /* @__PURE__ */ __name((config2) => ({
      applyToStack: (clientStack) => {
        clientStack.add(userAgentMiddleware(config2), getUserAgentMiddlewareOptions);
      }
    }), "getUserAgentPlugin");
  }
});

// node_modules/@aws-sdk/client-bedrock/dist-cjs/auth/httpAuthSchemeProvider.js
var require_httpAuthSchemeProvider5 = __commonJS({
  "node_modules/@aws-sdk/client-bedrock/dist-cjs/auth/httpAuthSchemeProvider.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.resolveHttpAuthSchemeConfig = exports6.defaultBedrockHttpAuthSchemeProvider = exports6.defaultBedrockHttpAuthSchemeParametersProvider = void 0;
    var core_1 = (init_dist_es3(), __toCommonJS(dist_es_exports3));
    var util_middleware_1 = require_dist_cjs6();
    var defaultBedrockHttpAuthSchemeParametersProvider = async (config2, context, input) => {
      return {
        operation: (0, util_middleware_1.getSmithyContext)(context).operation,
        region: await (0, util_middleware_1.normalizeProvider)(config2.region)() || (() => {
          throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
        })()
      };
    };
    exports6.defaultBedrockHttpAuthSchemeParametersProvider = defaultBedrockHttpAuthSchemeParametersProvider;
    function createAwsAuthSigv4HttpAuthOption(authParameters) {
      return {
        schemeId: "aws.auth#sigv4",
        signingProperties: {
          name: "bedrock",
          region: authParameters.region
        },
        propertiesExtractor: (config2, context) => ({
          signingProperties: {
            config: config2,
            context
          }
        })
      };
    }
    var defaultBedrockHttpAuthSchemeProvider = (authParameters) => {
      const options = [];
      switch (authParameters.operation) {
        default: {
          options.push(createAwsAuthSigv4HttpAuthOption(authParameters));
        }
      }
      return options;
    };
    exports6.defaultBedrockHttpAuthSchemeProvider = defaultBedrockHttpAuthSchemeProvider;
    var resolveHttpAuthSchemeConfig = (config2) => {
      const config_0 = (0, core_1.resolveAwsSdkSigV4Config)(config2);
      return {
        ...config_0
      };
    };
    exports6.resolveHttpAuthSchemeConfig = resolveHttpAuthSchemeConfig;
  }
});

// node_modules/@aws-sdk/client-bedrock/package.json
var require_package5 = __commonJS({
  "node_modules/@aws-sdk/client-bedrock/package.json"(exports6, module) {
    module.exports = {
      name: "@aws-sdk/client-bedrock",
      description: "AWS SDK for JavaScript Bedrock Client for Node.js, Browser and React Native",
      version: "3.716.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "node ../../scripts/compilation/inline client-bedrock",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "extract:docs": "api-extractor run --local",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo bedrock"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "5.2.0",
        "@aws-crypto/sha256-js": "5.2.0",
        "@aws-sdk/client-sso-oidc": "3.716.0",
        "@aws-sdk/client-sts": "3.716.0",
        "@aws-sdk/core": "3.716.0",
        "@aws-sdk/credential-provider-node": "3.716.0",
        "@aws-sdk/middleware-host-header": "3.714.0",
        "@aws-sdk/middleware-logger": "3.714.0",
        "@aws-sdk/middleware-recursion-detection": "3.714.0",
        "@aws-sdk/middleware-user-agent": "3.716.0",
        "@aws-sdk/region-config-resolver": "3.714.0",
        "@aws-sdk/types": "3.714.0",
        "@aws-sdk/util-endpoints": "3.714.0",
        "@aws-sdk/util-user-agent-browser": "3.714.0",
        "@aws-sdk/util-user-agent-node": "3.716.0",
        "@smithy/config-resolver": "^3.0.13",
        "@smithy/core": "^2.5.5",
        "@smithy/fetch-http-handler": "^4.1.2",
        "@smithy/hash-node": "^3.0.11",
        "@smithy/invalid-dependency": "^3.0.11",
        "@smithy/middleware-content-length": "^3.0.13",
        "@smithy/middleware-endpoint": "^3.2.6",
        "@smithy/middleware-retry": "^3.0.31",
        "@smithy/middleware-serde": "^3.0.11",
        "@smithy/middleware-stack": "^3.0.11",
        "@smithy/node-config-provider": "^3.1.12",
        "@smithy/node-http-handler": "^3.3.2",
        "@smithy/protocol-http": "^4.1.8",
        "@smithy/smithy-client": "^3.5.1",
        "@smithy/types": "^3.7.2",
        "@smithy/url-parser": "^3.0.11",
        "@smithy/util-base64": "^3.0.0",
        "@smithy/util-body-length-browser": "^3.0.0",
        "@smithy/util-body-length-node": "^3.0.0",
        "@smithy/util-defaults-mode-browser": "^3.0.31",
        "@smithy/util-defaults-mode-node": "^3.0.31",
        "@smithy/util-endpoints": "^2.1.7",
        "@smithy/util-middleware": "^3.0.11",
        "@smithy/util-retry": "^3.0.11",
        "@smithy/util-utf8": "^3.0.0",
        "@types/uuid": "^9.0.1",
        tslib: "^2.6.2",
        uuid: "^9.0.1"
      },
      devDependencies: {
        "@tsconfig/node16": "16.1.3",
        "@types/node": "^16.18.96",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typescript: "~4.9.5"
      },
      engines: {
        node: ">=16.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*/**"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-bedrock",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-bedrock"
      }
    };
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/credential-provider-env/dist-cjs/index.js
var require_dist_cjs65 = __commonJS({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/credential-provider-env/dist-cjs/index.js"(exports6, module) {
    "use strict";
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      ENV_ACCOUNT_ID: () => ENV_ACCOUNT_ID,
      ENV_CREDENTIAL_SCOPE: () => ENV_CREDENTIAL_SCOPE,
      ENV_EXPIRATION: () => ENV_EXPIRATION,
      ENV_KEY: () => ENV_KEY,
      ENV_SECRET: () => ENV_SECRET,
      ENV_SESSION: () => ENV_SESSION,
      fromEnv: () => fromEnv
    });
    module.exports = __toCommonJS3(src_exports);
    var import_client3 = (init_client2(), __toCommonJS(client_exports2));
    var import_property_provider3 = require_dist_cjs20();
    var ENV_KEY = "AWS_ACCESS_KEY_ID";
    var ENV_SECRET = "AWS_SECRET_ACCESS_KEY";
    var ENV_SESSION = "AWS_SESSION_TOKEN";
    var ENV_EXPIRATION = "AWS_CREDENTIAL_EXPIRATION";
    var ENV_CREDENTIAL_SCOPE = "AWS_CREDENTIAL_SCOPE";
    var ENV_ACCOUNT_ID = "AWS_ACCOUNT_ID";
    var fromEnv = /* @__PURE__ */ __name((init) => async () => {
      var _a;
      (_a = init == null ? void 0 : init.logger) == null ? void 0 : _a.debug("@aws-sdk/credential-provider-env - fromEnv");
      const accessKeyId = process.env[ENV_KEY];
      const secretAccessKey = process.env[ENV_SECRET];
      const sessionToken = process.env[ENV_SESSION];
      const expiry = process.env[ENV_EXPIRATION];
      const credentialScope = process.env[ENV_CREDENTIAL_SCOPE];
      const accountId = process.env[ENV_ACCOUNT_ID];
      if (accessKeyId && secretAccessKey) {
        const credentials = {
          accessKeyId,
          secretAccessKey,
          ...sessionToken && { sessionToken },
          ...expiry && { expiration: new Date(expiry) },
          ...credentialScope && { credentialScope },
          ...accountId && { accountId }
        };
        (0, import_client3.setCredentialFeature)(credentials, "CREDENTIALS_ENV_VARS", "g");
        return credentials;
      }
      throw new import_property_provider3.CredentialsProviderError("Unable to find environment variable credentials.", { logger: init == null ? void 0 : init.logger });
    }, "fromEnv");
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/client-sso/dist-cjs/auth/httpAuthSchemeProvider.js
var require_httpAuthSchemeProvider6 = __commonJS({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/client-sso/dist-cjs/auth/httpAuthSchemeProvider.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.resolveHttpAuthSchemeConfig = exports6.defaultSSOHttpAuthSchemeProvider = exports6.defaultSSOHttpAuthSchemeParametersProvider = void 0;
    var core_1 = (init_dist_es3(), __toCommonJS(dist_es_exports3));
    var util_middleware_1 = require_dist_cjs6();
    var defaultSSOHttpAuthSchemeParametersProvider = async (config2, context, input) => {
      return {
        operation: (0, util_middleware_1.getSmithyContext)(context).operation,
        region: await (0, util_middleware_1.normalizeProvider)(config2.region)() || (() => {
          throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
        })()
      };
    };
    exports6.defaultSSOHttpAuthSchemeParametersProvider = defaultSSOHttpAuthSchemeParametersProvider;
    function createAwsAuthSigv4HttpAuthOption(authParameters) {
      return {
        schemeId: "aws.auth#sigv4",
        signingProperties: {
          name: "awsssoportal",
          region: authParameters.region
        },
        propertiesExtractor: (config2, context) => ({
          signingProperties: {
            config: config2,
            context
          }
        })
      };
    }
    function createSmithyApiNoAuthHttpAuthOption(authParameters) {
      return {
        schemeId: "smithy.api#noAuth"
      };
    }
    var defaultSSOHttpAuthSchemeProvider = (authParameters) => {
      const options = [];
      switch (authParameters.operation) {
        case "GetRoleCredentials": {
          options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
          break;
        }
        case "ListAccountRoles": {
          options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
          break;
        }
        case "ListAccounts": {
          options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
          break;
        }
        case "Logout": {
          options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
          break;
        }
        default: {
          options.push(createAwsAuthSigv4HttpAuthOption(authParameters));
        }
      }
      return options;
    };
    exports6.defaultSSOHttpAuthSchemeProvider = defaultSSOHttpAuthSchemeProvider;
    var resolveHttpAuthSchemeConfig = (config2) => {
      const config_0 = (0, core_1.resolveAwsSdkSigV4Config)(config2);
      return {
        ...config_0
      };
    };
    exports6.resolveHttpAuthSchemeConfig = resolveHttpAuthSchemeConfig;
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/client-sso/package.json
var require_package6 = __commonJS({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/client-sso/package.json"(exports6, module) {
    module.exports = {
      name: "@aws-sdk/client-sso",
      description: "AWS SDK for JavaScript Sso Client for Node.js, Browser and React Native",
      version: "3.716.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "node ../../scripts/compilation/inline client-sso",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "extract:docs": "api-extractor run --local",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo sso"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "5.2.0",
        "@aws-crypto/sha256-js": "5.2.0",
        "@aws-sdk/core": "3.716.0",
        "@aws-sdk/middleware-host-header": "3.714.0",
        "@aws-sdk/middleware-logger": "3.714.0",
        "@aws-sdk/middleware-recursion-detection": "3.714.0",
        "@aws-sdk/middleware-user-agent": "3.716.0",
        "@aws-sdk/region-config-resolver": "3.714.0",
        "@aws-sdk/types": "3.714.0",
        "@aws-sdk/util-endpoints": "3.714.0",
        "@aws-sdk/util-user-agent-browser": "3.714.0",
        "@aws-sdk/util-user-agent-node": "3.716.0",
        "@smithy/config-resolver": "^3.0.13",
        "@smithy/core": "^2.5.5",
        "@smithy/fetch-http-handler": "^4.1.2",
        "@smithy/hash-node": "^3.0.11",
        "@smithy/invalid-dependency": "^3.0.11",
        "@smithy/middleware-content-length": "^3.0.13",
        "@smithy/middleware-endpoint": "^3.2.6",
        "@smithy/middleware-retry": "^3.0.31",
        "@smithy/middleware-serde": "^3.0.11",
        "@smithy/middleware-stack": "^3.0.11",
        "@smithy/node-config-provider": "^3.1.12",
        "@smithy/node-http-handler": "^3.3.2",
        "@smithy/protocol-http": "^4.1.8",
        "@smithy/smithy-client": "^3.5.1",
        "@smithy/types": "^3.7.2",
        "@smithy/url-parser": "^3.0.11",
        "@smithy/util-base64": "^3.0.0",
        "@smithy/util-body-length-browser": "^3.0.0",
        "@smithy/util-body-length-node": "^3.0.0",
        "@smithy/util-defaults-mode-browser": "^3.0.31",
        "@smithy/util-defaults-mode-node": "^3.0.31",
        "@smithy/util-endpoints": "^2.1.7",
        "@smithy/util-middleware": "^3.0.11",
        "@smithy/util-retry": "^3.0.11",
        "@smithy/util-utf8": "^3.0.0",
        tslib: "^2.6.2"
      },
      devDependencies: {
        "@tsconfig/node16": "16.1.3",
        "@types/node": "^16.18.96",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typescript: "~4.9.5"
      },
      engines: {
        node: ">=16.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*/**"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sso",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-sso"
      }
    };
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/util-user-agent-node/dist-cjs/index.js
var require_dist_cjs66 = __commonJS({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/util-user-agent-node/dist-cjs/index.js"(exports6, module) {
    "use strict";
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      NODE_APP_ID_CONFIG_OPTIONS: () => NODE_APP_ID_CONFIG_OPTIONS,
      UA_APP_ID_ENV_NAME: () => UA_APP_ID_ENV_NAME,
      UA_APP_ID_INI_NAME: () => UA_APP_ID_INI_NAME,
      createDefaultUserAgentProvider: () => createDefaultUserAgentProvider,
      crtAvailability: () => crtAvailability,
      defaultUserAgent: () => defaultUserAgent
    });
    module.exports = __toCommonJS3(src_exports);
    var import_os = __require("os");
    var import_process = __require("process");
    var crtAvailability = {
      isCrtAvailable: false
    };
    var isCrtAvailable = /* @__PURE__ */ __name(() => {
      if (crtAvailability.isCrtAvailable) {
        return ["md/crt-avail"];
      }
      return null;
    }, "isCrtAvailable");
    var createDefaultUserAgentProvider = /* @__PURE__ */ __name(({ serviceId, clientVersion }) => {
      return async (config2) => {
        var _a;
        const sections = [
          // sdk-metadata
          ["aws-sdk-js", clientVersion],
          // ua-metadata
          ["ua", "2.1"],
          // os-metadata
          [`os/${(0, import_os.platform)()}`, (0, import_os.release)()],
          // language-metadata
          // ECMAScript edition doesn't matter in JS, so no version needed.
          ["lang/js"],
          ["md/nodejs", `${import_process.versions.node}`]
        ];
        const crtAvailable = isCrtAvailable();
        if (crtAvailable) {
          sections.push(crtAvailable);
        }
        if (serviceId) {
          sections.push([`api/${serviceId}`, clientVersion]);
        }
        if (import_process.env.AWS_EXECUTION_ENV) {
          sections.push([`exec-env/${import_process.env.AWS_EXECUTION_ENV}`]);
        }
        const appId = await ((_a = config2 == null ? void 0 : config2.userAgentAppId) == null ? void 0 : _a.call(config2));
        const resolvedUserAgent = appId ? [...sections, [`app/${appId}`]] : [...sections];
        return resolvedUserAgent;
      };
    }, "createDefaultUserAgentProvider");
    var defaultUserAgent = createDefaultUserAgentProvider;
    var import_middleware_user_agent = require_dist_cjs64();
    var UA_APP_ID_ENV_NAME = "AWS_SDK_UA_APP_ID";
    var UA_APP_ID_INI_NAME = "sdk_ua_app_id";
    var UA_APP_ID_INI_NAME_DEPRECATED = "sdk-ua-app-id";
    var NODE_APP_ID_CONFIG_OPTIONS = {
      environmentVariableSelector: (env2) => env2[UA_APP_ID_ENV_NAME],
      configFileSelector: (profile) => profile[UA_APP_ID_INI_NAME] ?? profile[UA_APP_ID_INI_NAME_DEPRECATED],
      default: import_middleware_user_agent.DEFAULT_UA_APP_ID
    };
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.js
var require_ruleset5 = __commonJS({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.ruleSet = void 0;
    var u = "required";
    var v = "fn";
    var w = "argv";
    var x = "ref";
    var a = true;
    var b = "isSet";
    var c = "booleanEquals";
    var d = "error";
    var e = "endpoint";
    var f = "tree";
    var g = "PartitionResult";
    var h = "getAttr";
    var i = { [u]: false, "type": "String" };
    var j = { [u]: true, "default": false, "type": "Boolean" };
    var k = { [x]: "Endpoint" };
    var l = { [v]: c, [w]: [{ [x]: "UseFIPS" }, true] };
    var m = { [v]: c, [w]: [{ [x]: "UseDualStack" }, true] };
    var n = {};
    var o = { [v]: h, [w]: [{ [x]: g }, "supportsFIPS"] };
    var p = { [x]: g };
    var q = { [v]: c, [w]: [true, { [v]: h, [w]: [p, "supportsDualStack"] }] };
    var r = [l];
    var s = [m];
    var t = [{ [x]: "Region" }];
    var _data = { version: "1.0", parameters: { Region: i, UseDualStack: j, UseFIPS: j, Endpoint: i }, rules: [{ conditions: [{ [v]: b, [w]: [k] }], rules: [{ conditions: r, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: d }, { conditions: s, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: d }, { endpoint: { url: k, properties: n, headers: n }, type: e }], type: f }, { conditions: [{ [v]: b, [w]: t }], rules: [{ conditions: [{ [v]: "aws.partition", [w]: t, assign: g }], rules: [{ conditions: [l, m], rules: [{ conditions: [{ [v]: c, [w]: [a, o] }, q], rules: [{ endpoint: { url: "https://portal.sso-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: d }], type: f }, { conditions: r, rules: [{ conditions: [{ [v]: c, [w]: [o, a] }], rules: [{ conditions: [{ [v]: "stringEquals", [w]: [{ [v]: h, [w]: [p, "name"] }, "aws-us-gov"] }], endpoint: { url: "https://portal.sso.{Region}.amazonaws.com", properties: n, headers: n }, type: e }, { endpoint: { url: "https://portal.sso-fips.{Region}.{PartitionResult#dnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "FIPS is enabled but this partition does not support FIPS", type: d }], type: f }, { conditions: s, rules: [{ conditions: [q], rules: [{ endpoint: { url: "https://portal.sso.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "DualStack is enabled but this partition does not support DualStack", type: d }], type: f }, { endpoint: { url: "https://portal.sso.{Region}.{PartitionResult#dnsSuffix}", properties: n, headers: n }, type: e }], type: f }], type: f }, { error: "Invalid Configuration: Missing Region", type: d }] };
    exports6.ruleSet = _data;
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver5 = __commonJS({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/endpointResolver.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs63();
    var util_endpoints_2 = require_dist_cjs18();
    var ruleset_1 = require_ruleset5();
    var cache = new util_endpoints_2.EndpointCache({
      size: 50,
      params: ["Endpoint", "Region", "UseDualStack", "UseFIPS"]
    });
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return cache.get(endpointParams, () => (0, util_endpoints_2.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      }));
    };
    exports6.defaultEndpointResolver = defaultEndpointResolver;
    util_endpoints_2.customEndpointFunctions.aws = util_endpoints_1.awsEndpointFunctions;
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared5 = __commonJS({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.shared.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.getRuntimeConfig = void 0;
    var core_1 = (init_dist_es3(), __toCommonJS(dist_es_exports3));
    var core_2 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var smithy_client_1 = require_dist_cjs23();
    var url_parser_1 = require_dist_cjs31();
    var util_base64_1 = require_dist_cjs11();
    var util_utf8_1 = require_dist_cjs10();
    var httpAuthSchemeProvider_1 = require_httpAuthSchemeProvider6();
    var endpointResolver_1 = require_endpointResolver5();
    var getRuntimeConfig = (config2) => {
      return {
        apiVersion: "2019-06-10",
        base64Decoder: config2?.base64Decoder ?? util_base64_1.fromBase64,
        base64Encoder: config2?.base64Encoder ?? util_base64_1.toBase64,
        disableHostPrefix: config2?.disableHostPrefix ?? false,
        endpointProvider: config2?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
        extensions: config2?.extensions ?? [],
        httpAuthSchemeProvider: config2?.httpAuthSchemeProvider ?? httpAuthSchemeProvider_1.defaultSSOHttpAuthSchemeProvider,
        httpAuthSchemes: config2?.httpAuthSchemes ?? [
          {
            schemeId: "aws.auth#sigv4",
            identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4"),
            signer: new core_1.AwsSdkSigV4Signer()
          },
          {
            schemeId: "smithy.api#noAuth",
            identityProvider: (ipc) => ipc.getIdentityProvider("smithy.api#noAuth") || (async () => ({})),
            signer: new core_2.NoAuthSigner()
          }
        ],
        logger: config2?.logger ?? new smithy_client_1.NoOpLogger(),
        serviceId: config2?.serviceId ?? "SSO",
        urlParser: config2?.urlParser ?? url_parser_1.parseUrl,
        utf8Decoder: config2?.utf8Decoder ?? util_utf8_1.fromUtf8,
        utf8Encoder: config2?.utf8Encoder ?? util_utf8_1.toUtf8
      };
    };
    exports6.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.js
var require_runtimeConfig5 = __commonJS({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package6());
    var core_1 = (init_dist_es3(), __toCommonJS(dist_es_exports3));
    var util_user_agent_node_1 = require_dist_cjs66();
    var config_resolver_1 = require_dist_cjs26();
    var hash_node_1 = require_dist_cjs37();
    var middleware_retry_1 = require_dist_cjs35();
    var node_config_provider_1 = require_dist_cjs29();
    var node_http_handler_1 = require_dist_cjs14();
    var util_body_length_node_1 = require_dist_cjs38();
    var util_retry_1 = require_dist_cjs34();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared5();
    var smithy_client_1 = require_dist_cjs23();
    var util_defaults_mode_node_1 = require_dist_cjs40();
    var smithy_client_2 = require_dist_cjs23();
    var getRuntimeConfig = (config2) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config2);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config2);
      (0, core_1.emitWarningIfUnsupportedVersion)(process.version);
      const profileConfig = { profile: config2?.profile };
      return {
        ...clientSharedValues,
        ...config2,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config2?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
        defaultUserAgentProvider: config2?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.createDefaultUserAgentProvider)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: config2?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS, config2),
        region: config2?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, { ...config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS, ...profileConfig }),
        requestHandler: node_http_handler_1.NodeHttpHandler.create(config2?.requestHandler ?? defaultConfigProvider),
        retryMode: config2?.retryMode ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }, config2),
        sha256: config2?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: config2?.streamCollector ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: config2?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS, profileConfig),
        useFipsEndpoint: config2?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS, profileConfig),
        userAgentAppId: config2?.userAgentAppId ?? (0, node_config_provider_1.loadConfig)(util_user_agent_node_1.NODE_APP_ID_CONFIG_OPTIONS, profileConfig)
      };
    };
    exports6.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/region-config-resolver/dist-cjs/index.js
var require_dist_cjs67 = __commonJS({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/region-config-resolver/dist-cjs/index.js"(exports6, module) {
    "use strict";
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      NODE_REGION_CONFIG_FILE_OPTIONS: () => NODE_REGION_CONFIG_FILE_OPTIONS,
      NODE_REGION_CONFIG_OPTIONS: () => NODE_REGION_CONFIG_OPTIONS,
      REGION_ENV_NAME: () => REGION_ENV_NAME,
      REGION_INI_NAME: () => REGION_INI_NAME,
      getAwsRegionExtensionConfiguration: () => getAwsRegionExtensionConfiguration,
      resolveAwsRegionExtensionConfiguration: () => resolveAwsRegionExtensionConfiguration,
      resolveRegionConfig: () => resolveRegionConfig
    });
    module.exports = __toCommonJS3(src_exports);
    var getAwsRegionExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
      let runtimeConfigRegion = /* @__PURE__ */ __name(async () => {
        if (runtimeConfig.region === void 0) {
          throw new Error("Region is missing from runtimeConfig");
        }
        const region = runtimeConfig.region;
        if (typeof region === "string") {
          return region;
        }
        return region();
      }, "runtimeConfigRegion");
      return {
        setRegion(region) {
          runtimeConfigRegion = region;
        },
        region() {
          return runtimeConfigRegion;
        }
      };
    }, "getAwsRegionExtensionConfiguration");
    var resolveAwsRegionExtensionConfiguration = /* @__PURE__ */ __name((awsRegionExtensionConfiguration) => {
      return {
        region: awsRegionExtensionConfiguration.region()
      };
    }, "resolveAwsRegionExtensionConfiguration");
    var REGION_ENV_NAME = "AWS_REGION";
    var REGION_INI_NAME = "region";
    var NODE_REGION_CONFIG_OPTIONS = {
      environmentVariableSelector: (env2) => env2[REGION_ENV_NAME],
      configFileSelector: (profile) => profile[REGION_INI_NAME],
      default: () => {
        throw new Error("Region is missing");
      }
    };
    var NODE_REGION_CONFIG_FILE_OPTIONS = {
      preferredFile: "credentials"
    };
    var isFipsRegion = /* @__PURE__ */ __name((region) => typeof region === "string" && (region.startsWith("fips-") || region.endsWith("-fips")), "isFipsRegion");
    var getRealRegion = /* @__PURE__ */ __name((region) => isFipsRegion(region) ? ["fips-aws-global", "aws-fips"].includes(region) ? "us-east-1" : region.replace(/fips-(dkr-|prod-)?|-fips/, "") : region, "getRealRegion");
    var resolveRegionConfig = /* @__PURE__ */ __name((input) => {
      const { region, useFipsEndpoint } = input;
      if (!region) {
        throw new Error("Region is missing");
      }
      return {
        ...input,
        region: async () => {
          if (typeof region === "string") {
            return getRealRegion(region);
          }
          const providedRegion = await region();
          return getRealRegion(providedRegion);
        },
        useFipsEndpoint: async () => {
          const providedRegion = typeof region === "string" ? region : await region();
          if (isFipsRegion(providedRegion)) {
            return true;
          }
          return typeof useFipsEndpoint !== "function" ? Promise.resolve(!!useFipsEndpoint) : useFipsEndpoint();
        }
      };
    }, "resolveRegionConfig");
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/client-sso/dist-cjs/index.js
var require_dist_cjs68 = __commonJS({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/client-sso/dist-cjs/index.js"(exports6, module) {
    "use strict";
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      GetRoleCredentialsCommand: () => GetRoleCredentialsCommand,
      GetRoleCredentialsRequestFilterSensitiveLog: () => GetRoleCredentialsRequestFilterSensitiveLog,
      GetRoleCredentialsResponseFilterSensitiveLog: () => GetRoleCredentialsResponseFilterSensitiveLog,
      InvalidRequestException: () => InvalidRequestException,
      ListAccountRolesCommand: () => ListAccountRolesCommand,
      ListAccountRolesRequestFilterSensitiveLog: () => ListAccountRolesRequestFilterSensitiveLog,
      ListAccountsCommand: () => ListAccountsCommand,
      ListAccountsRequestFilterSensitiveLog: () => ListAccountsRequestFilterSensitiveLog,
      LogoutCommand: () => LogoutCommand,
      LogoutRequestFilterSensitiveLog: () => LogoutRequestFilterSensitiveLog,
      ResourceNotFoundException: () => ResourceNotFoundException,
      RoleCredentialsFilterSensitiveLog: () => RoleCredentialsFilterSensitiveLog,
      SSO: () => SSO,
      SSOClient: () => SSOClient,
      SSOServiceException: () => SSOServiceException,
      TooManyRequestsException: () => TooManyRequestsException,
      UnauthorizedException: () => UnauthorizedException,
      __Client: () => import_smithy_client7.Client,
      paginateListAccountRoles: () => paginateListAccountRoles,
      paginateListAccounts: () => paginateListAccounts
    });
    module.exports = __toCommonJS3(src_exports);
    var import_middleware_host_header = require_dist_cjs60();
    var import_middleware_logger = require_dist_cjs61();
    var import_middleware_recursion_detection = require_dist_cjs62();
    var import_middleware_user_agent = require_dist_cjs64();
    var import_config_resolver = require_dist_cjs26();
    var import_core5 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var import_middleware_content_length = require_dist_cjs27();
    var import_middleware_endpoint = require_dist_cjs32();
    var import_middleware_retry = require_dist_cjs35();
    var import_httpAuthSchemeProvider = require_httpAuthSchemeProvider6();
    var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "awsssoportal"
      };
    }, "resolveClientEndpointParameters");
    var commonParams = {
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
    var import_runtimeConfig = require_runtimeConfig5();
    var import_region_config_resolver = require_dist_cjs67();
    var import_protocol_http11 = require_dist_cjs2();
    var import_smithy_client7 = require_dist_cjs23();
    var getHttpAuthExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
      const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
      let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
      let _credentials = runtimeConfig.credentials;
      return {
        setHttpAuthScheme(httpAuthScheme) {
          const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
          if (index === -1) {
            _httpAuthSchemes.push(httpAuthScheme);
          } else {
            _httpAuthSchemes.splice(index, 1, httpAuthScheme);
          }
        },
        httpAuthSchemes() {
          return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
          _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
          return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
          _credentials = credentials;
        },
        credentials() {
          return _credentials;
        }
      };
    }, "getHttpAuthExtensionConfiguration");
    var resolveHttpAuthRuntimeConfig = /* @__PURE__ */ __name((config2) => {
      return {
        httpAuthSchemes: config2.httpAuthSchemes(),
        httpAuthSchemeProvider: config2.httpAuthSchemeProvider(),
        credentials: config2.credentials()
      };
    }, "resolveHttpAuthRuntimeConfig");
    var asPartial = /* @__PURE__ */ __name((t) => t, "asPartial");
    var resolveRuntimeExtensions = /* @__PURE__ */ __name((runtimeConfig, extensions) => {
      const extensionConfiguration = {
        ...asPartial((0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig)),
        ...asPartial((0, import_smithy_client7.getDefaultExtensionConfiguration)(runtimeConfig)),
        ...asPartial((0, import_protocol_http11.getHttpHandlerExtensionConfiguration)(runtimeConfig)),
        ...asPartial(getHttpAuthExtensionConfiguration(runtimeConfig))
      };
      extensions.forEach((extension) => extension.configure(extensionConfiguration));
      return {
        ...runtimeConfig,
        ...(0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
        ...(0, import_smithy_client7.resolveDefaultRuntimeConfig)(extensionConfiguration),
        ...(0, import_protocol_http11.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),
        ...resolveHttpAuthRuntimeConfig(extensionConfiguration)
      };
    }, "resolveRuntimeExtensions");
    var _SSOClient = class _SSOClient extends import_smithy_client7.Client {
      constructor(...[configuration]) {
        const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});
        const _config_1 = resolveClientEndpointParameters(_config_0);
        const _config_2 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_1);
        const _config_3 = (0, import_middleware_retry.resolveRetryConfig)(_config_2);
        const _config_4 = (0, import_config_resolver.resolveRegionConfig)(_config_3);
        const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, import_middleware_endpoint.resolveEndpointConfig)(_config_5);
        const _config_7 = (0, import_httpAuthSchemeProvider.resolveHttpAuthSchemeConfig)(_config_6);
        const _config_8 = resolveRuntimeExtensions(_config_7, (configuration == null ? void 0 : configuration.extensions) || []);
        super(_config_8);
        this.config = _config_8;
        this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_retry.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_content_length.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_host_header.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use(
          (0, import_core5.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
            httpAuthSchemeParametersProvider: import_httpAuthSchemeProvider.defaultSSOHttpAuthSchemeParametersProvider,
            identityProviderConfigProvider: async (config2) => new import_core5.DefaultIdentityProviderConfig({
              "aws.auth#sigv4": config2.credentials
            })
          })
        );
        this.middlewareStack.use((0, import_core5.getHttpSigningPlugin)(this.config));
      }
      /**
       * Destroy underlying resources, like sockets. It's usually not necessary to do this.
       * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
       * Otherwise, sockets might stay open for quite a long time before the server terminates them.
       */
      destroy() {
        super.destroy();
      }
    };
    __name(_SSOClient, "SSOClient");
    var SSOClient = _SSOClient;
    var import_middleware_serde2 = require_dist_cjs7();
    var _SSOServiceException = class _SSOServiceException2 extends import_smithy_client7.ServiceException {
      /**
       * @internal
       */
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, _SSOServiceException2.prototype);
      }
    };
    __name(_SSOServiceException, "SSOServiceException");
    var SSOServiceException = _SSOServiceException;
    var _InvalidRequestException = class _InvalidRequestException2 extends SSOServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidRequestException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidRequestException2.prototype);
      }
    };
    __name(_InvalidRequestException, "InvalidRequestException");
    var InvalidRequestException = _InvalidRequestException;
    var _ResourceNotFoundException = class _ResourceNotFoundException2 extends SSOServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ResourceNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ResourceNotFoundException2.prototype);
      }
    };
    __name(_ResourceNotFoundException, "ResourceNotFoundException");
    var ResourceNotFoundException = _ResourceNotFoundException;
    var _TooManyRequestsException = class _TooManyRequestsException2 extends SSOServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "TooManyRequestsException",
          $fault: "client",
          ...opts
        });
        this.name = "TooManyRequestsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _TooManyRequestsException2.prototype);
      }
    };
    __name(_TooManyRequestsException, "TooManyRequestsException");
    var TooManyRequestsException = _TooManyRequestsException;
    var _UnauthorizedException = class _UnauthorizedException2 extends SSOServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "UnauthorizedException",
          $fault: "client",
          ...opts
        });
        this.name = "UnauthorizedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UnauthorizedException2.prototype);
      }
    };
    __name(_UnauthorizedException, "UnauthorizedException");
    var UnauthorizedException = _UnauthorizedException;
    var GetRoleCredentialsRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: import_smithy_client7.SENSITIVE_STRING }
    }), "GetRoleCredentialsRequestFilterSensitiveLog");
    var RoleCredentialsFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.secretAccessKey && { secretAccessKey: import_smithy_client7.SENSITIVE_STRING },
      ...obj.sessionToken && { sessionToken: import_smithy_client7.SENSITIVE_STRING }
    }), "RoleCredentialsFilterSensitiveLog");
    var GetRoleCredentialsResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.roleCredentials && { roleCredentials: RoleCredentialsFilterSensitiveLog(obj.roleCredentials) }
    }), "GetRoleCredentialsResponseFilterSensitiveLog");
    var ListAccountRolesRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: import_smithy_client7.SENSITIVE_STRING }
    }), "ListAccountRolesRequestFilterSensitiveLog");
    var ListAccountsRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: import_smithy_client7.SENSITIVE_STRING }
    }), "ListAccountsRequestFilterSensitiveLog");
    var LogoutRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: import_smithy_client7.SENSITIVE_STRING }
    }), "LogoutRequestFilterSensitiveLog");
    var import_core22 = (init_dist_es3(), __toCommonJS(dist_es_exports3));
    var se_GetRoleCredentialsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = (0, import_smithy_client7.map)({}, import_smithy_client7.isSerializableHeaderValue, {
        [_xasbt]: input[_aT]
      });
      b.bp("/federation/credentials");
      const query = (0, import_smithy_client7.map)({
        [_rn]: [, (0, import_smithy_client7.expectNonNull)(input[_rN], `roleName`)],
        [_ai]: [, (0, import_smithy_client7.expectNonNull)(input[_aI], `accountId`)]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_GetRoleCredentialsCommand");
    var se_ListAccountRolesCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = (0, import_smithy_client7.map)({}, import_smithy_client7.isSerializableHeaderValue, {
        [_xasbt]: input[_aT]
      });
      b.bp("/assignment/roles");
      const query = (0, import_smithy_client7.map)({
        [_nt]: [, input[_nT]],
        [_mr]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_ai]: [, (0, import_smithy_client7.expectNonNull)(input[_aI], `accountId`)]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_ListAccountRolesCommand");
    var se_ListAccountsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = (0, import_smithy_client7.map)({}, import_smithy_client7.isSerializableHeaderValue, {
        [_xasbt]: input[_aT]
      });
      b.bp("/assignment/accounts");
      const query = (0, import_smithy_client7.map)({
        [_nt]: [, input[_nT]],
        [_mr]: [() => input.maxResults !== void 0, () => input[_mR].toString()]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_ListAccountsCommand");
    var se_LogoutCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = (0, import_smithy_client7.map)({}, import_smithy_client7.isSerializableHeaderValue, {
        [_xasbt]: input[_aT]
      });
      b.bp("/logout");
      let body;
      b.m("POST").h(headers).b(body);
      return b.build();
    }, "se_LogoutCommand");
    var de_GetRoleCredentialsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client7.take)(data, {
        roleCredentials: import_smithy_client7._json
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_GetRoleCredentialsCommand");
    var de_ListAccountRolesCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client7.take)(data, {
        nextToken: import_smithy_client7.expectString,
        roleList: import_smithy_client7._json
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_ListAccountRolesCommand");
    var de_ListAccountsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client7.take)(data, {
        accountList: import_smithy_client7._json,
        nextToken: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_ListAccountsCommand");
    var de_LogoutCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, import_smithy_client7.collectBody)(output.body, context);
      return contents;
    }, "de_LogoutCommand");
    var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await (0, import_core22.parseJsonErrorBody)(output.body, context)
      };
      const errorCode = (0, import_core22.loadRestJsonErrorCode)(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.sso#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await de_UnauthorizedExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    }, "de_CommandError");
    var throwDefaultError = (0, import_smithy_client7.withBaseException)(SSOServiceException);
    var de_InvalidRequestExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client7.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client7.take)(data, {
        message: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, parsedOutput.body);
    }, "de_InvalidRequestExceptionRes");
    var de_ResourceNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client7.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client7.take)(data, {
        message: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, parsedOutput.body);
    }, "de_ResourceNotFoundExceptionRes");
    var de_TooManyRequestsExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client7.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client7.take)(data, {
        message: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      const exception = new TooManyRequestsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, parsedOutput.body);
    }, "de_TooManyRequestsExceptionRes");
    var de_UnauthorizedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client7.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client7.take)(data, {
        message: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      const exception = new UnauthorizedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, parsedOutput.body);
    }, "de_UnauthorizedExceptionRes");
    var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    }), "deserializeMetadata");
    var _aI = "accountId";
    var _aT = "accessToken";
    var _ai = "account_id";
    var _mR = "maxResults";
    var _mr = "max_result";
    var _nT = "nextToken";
    var _nt = "next_token";
    var _rN = "roleName";
    var _rn = "role_name";
    var _xasbt = "x-amz-sso_bearer_token";
    var _GetRoleCredentialsCommand = class _GetRoleCredentialsCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("SWBPortalService", "GetRoleCredentials", {}).n("SSOClient", "GetRoleCredentialsCommand").f(GetRoleCredentialsRequestFilterSensitiveLog, GetRoleCredentialsResponseFilterSensitiveLog).ser(se_GetRoleCredentialsCommand).de(de_GetRoleCredentialsCommand).build() {
    };
    __name(_GetRoleCredentialsCommand, "GetRoleCredentialsCommand");
    var GetRoleCredentialsCommand = _GetRoleCredentialsCommand;
    var _ListAccountRolesCommand = class _ListAccountRolesCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("SWBPortalService", "ListAccountRoles", {}).n("SSOClient", "ListAccountRolesCommand").f(ListAccountRolesRequestFilterSensitiveLog, void 0).ser(se_ListAccountRolesCommand).de(de_ListAccountRolesCommand).build() {
    };
    __name(_ListAccountRolesCommand, "ListAccountRolesCommand");
    var ListAccountRolesCommand = _ListAccountRolesCommand;
    var _ListAccountsCommand = class _ListAccountsCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("SWBPortalService", "ListAccounts", {}).n("SSOClient", "ListAccountsCommand").f(ListAccountsRequestFilterSensitiveLog, void 0).ser(se_ListAccountsCommand).de(de_ListAccountsCommand).build() {
    };
    __name(_ListAccountsCommand, "ListAccountsCommand");
    var ListAccountsCommand = _ListAccountsCommand;
    var _LogoutCommand = class _LogoutCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("SWBPortalService", "Logout", {}).n("SSOClient", "LogoutCommand").f(LogoutRequestFilterSensitiveLog, void 0).ser(se_LogoutCommand).de(de_LogoutCommand).build() {
    };
    __name(_LogoutCommand, "LogoutCommand");
    var LogoutCommand = _LogoutCommand;
    var commands = {
      GetRoleCredentialsCommand,
      ListAccountRolesCommand,
      ListAccountsCommand,
      LogoutCommand
    };
    var _SSO = class _SSO extends SSOClient {
    };
    __name(_SSO, "SSO");
    var SSO = _SSO;
    (0, import_smithy_client7.createAggregatedClient)(commands, SSO);
    var paginateListAccountRoles = (0, import_core5.createPaginator)(SSOClient, ListAccountRolesCommand, "nextToken", "nextToken", "maxResults");
    var paginateListAccounts = (0, import_core5.createPaginator)(SSOClient, ListAccountsCommand, "nextToken", "nextToken", "maxResults");
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/auth/httpAuthSchemeProvider.js
var require_httpAuthSchemeProvider7 = __commonJS({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/auth/httpAuthSchemeProvider.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.resolveHttpAuthSchemeConfig = exports6.defaultSSOOIDCHttpAuthSchemeProvider = exports6.defaultSSOOIDCHttpAuthSchemeParametersProvider = void 0;
    var core_1 = (init_dist_es3(), __toCommonJS(dist_es_exports3));
    var util_middleware_1 = require_dist_cjs6();
    var defaultSSOOIDCHttpAuthSchemeParametersProvider = async (config2, context, input) => {
      return {
        operation: (0, util_middleware_1.getSmithyContext)(context).operation,
        region: await (0, util_middleware_1.normalizeProvider)(config2.region)() || (() => {
          throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
        })()
      };
    };
    exports6.defaultSSOOIDCHttpAuthSchemeParametersProvider = defaultSSOOIDCHttpAuthSchemeParametersProvider;
    function createAwsAuthSigv4HttpAuthOption(authParameters) {
      return {
        schemeId: "aws.auth#sigv4",
        signingProperties: {
          name: "sso-oauth",
          region: authParameters.region
        },
        propertiesExtractor: (config2, context) => ({
          signingProperties: {
            config: config2,
            context
          }
        })
      };
    }
    function createSmithyApiNoAuthHttpAuthOption(authParameters) {
      return {
        schemeId: "smithy.api#noAuth"
      };
    }
    var defaultSSOOIDCHttpAuthSchemeProvider = (authParameters) => {
      const options = [];
      switch (authParameters.operation) {
        case "CreateToken": {
          options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
          break;
        }
        case "RegisterClient": {
          options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
          break;
        }
        case "StartDeviceAuthorization": {
          options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
          break;
        }
        default: {
          options.push(createAwsAuthSigv4HttpAuthOption(authParameters));
        }
      }
      return options;
    };
    exports6.defaultSSOOIDCHttpAuthSchemeProvider = defaultSSOOIDCHttpAuthSchemeProvider;
    var resolveHttpAuthSchemeConfig = (config2) => {
      const config_0 = (0, core_1.resolveAwsSdkSigV4Config)(config2);
      return {
        ...config_0
      };
    };
    exports6.resolveHttpAuthSchemeConfig = resolveHttpAuthSchemeConfig;
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/client-sso-oidc/package.json
var require_package7 = __commonJS({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/client-sso-oidc/package.json"(exports6, module) {
    module.exports = {
      name: "@aws-sdk/client-sso-oidc",
      description: "AWS SDK for JavaScript Sso Oidc Client for Node.js, Browser and React Native",
      version: "3.716.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "node ../../scripts/compilation/inline client-sso-oidc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "extract:docs": "api-extractor run --local",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo sso-oidc"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "5.2.0",
        "@aws-crypto/sha256-js": "5.2.0",
        "@aws-sdk/core": "3.716.0",
        "@aws-sdk/credential-provider-node": "3.716.0",
        "@aws-sdk/middleware-host-header": "3.714.0",
        "@aws-sdk/middleware-logger": "3.714.0",
        "@aws-sdk/middleware-recursion-detection": "3.714.0",
        "@aws-sdk/middleware-user-agent": "3.716.0",
        "@aws-sdk/region-config-resolver": "3.714.0",
        "@aws-sdk/types": "3.714.0",
        "@aws-sdk/util-endpoints": "3.714.0",
        "@aws-sdk/util-user-agent-browser": "3.714.0",
        "@aws-sdk/util-user-agent-node": "3.716.0",
        "@smithy/config-resolver": "^3.0.13",
        "@smithy/core": "^2.5.5",
        "@smithy/fetch-http-handler": "^4.1.2",
        "@smithy/hash-node": "^3.0.11",
        "@smithy/invalid-dependency": "^3.0.11",
        "@smithy/middleware-content-length": "^3.0.13",
        "@smithy/middleware-endpoint": "^3.2.6",
        "@smithy/middleware-retry": "^3.0.31",
        "@smithy/middleware-serde": "^3.0.11",
        "@smithy/middleware-stack": "^3.0.11",
        "@smithy/node-config-provider": "^3.1.12",
        "@smithy/node-http-handler": "^3.3.2",
        "@smithy/protocol-http": "^4.1.8",
        "@smithy/smithy-client": "^3.5.1",
        "@smithy/types": "^3.7.2",
        "@smithy/url-parser": "^3.0.11",
        "@smithy/util-base64": "^3.0.0",
        "@smithy/util-body-length-browser": "^3.0.0",
        "@smithy/util-body-length-node": "^3.0.0",
        "@smithy/util-defaults-mode-browser": "^3.0.31",
        "@smithy/util-defaults-mode-node": "^3.0.31",
        "@smithy/util-endpoints": "^2.1.7",
        "@smithy/util-middleware": "^3.0.11",
        "@smithy/util-retry": "^3.0.11",
        "@smithy/util-utf8": "^3.0.0",
        tslib: "^2.6.2"
      },
      devDependencies: {
        "@tsconfig/node16": "16.1.3",
        "@types/node": "^16.18.96",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typescript: "~4.9.5"
      },
      engines: {
        node: ">=16.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*/**"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      peerDependencies: {
        "@aws-sdk/client-sts": "^3.716.0"
      },
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sso-oidc",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-sso-oidc"
      }
    };
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/ruleset.js
var require_ruleset6 = __commonJS({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/ruleset.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.ruleSet = void 0;
    var u = "required";
    var v = "fn";
    var w = "argv";
    var x = "ref";
    var a = true;
    var b = "isSet";
    var c = "booleanEquals";
    var d = "error";
    var e = "endpoint";
    var f = "tree";
    var g = "PartitionResult";
    var h = "getAttr";
    var i = { [u]: false, "type": "String" };
    var j = { [u]: true, "default": false, "type": "Boolean" };
    var k = { [x]: "Endpoint" };
    var l = { [v]: c, [w]: [{ [x]: "UseFIPS" }, true] };
    var m = { [v]: c, [w]: [{ [x]: "UseDualStack" }, true] };
    var n = {};
    var o = { [v]: h, [w]: [{ [x]: g }, "supportsFIPS"] };
    var p = { [x]: g };
    var q = { [v]: c, [w]: [true, { [v]: h, [w]: [p, "supportsDualStack"] }] };
    var r = [l];
    var s = [m];
    var t = [{ [x]: "Region" }];
    var _data = { version: "1.0", parameters: { Region: i, UseDualStack: j, UseFIPS: j, Endpoint: i }, rules: [{ conditions: [{ [v]: b, [w]: [k] }], rules: [{ conditions: r, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: d }, { conditions: s, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: d }, { endpoint: { url: k, properties: n, headers: n }, type: e }], type: f }, { conditions: [{ [v]: b, [w]: t }], rules: [{ conditions: [{ [v]: "aws.partition", [w]: t, assign: g }], rules: [{ conditions: [l, m], rules: [{ conditions: [{ [v]: c, [w]: [a, o] }, q], rules: [{ endpoint: { url: "https://oidc-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: d }], type: f }, { conditions: r, rules: [{ conditions: [{ [v]: c, [w]: [o, a] }], rules: [{ conditions: [{ [v]: "stringEquals", [w]: [{ [v]: h, [w]: [p, "name"] }, "aws-us-gov"] }], endpoint: { url: "https://oidc.{Region}.amazonaws.com", properties: n, headers: n }, type: e }, { endpoint: { url: "https://oidc-fips.{Region}.{PartitionResult#dnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "FIPS is enabled but this partition does not support FIPS", type: d }], type: f }, { conditions: s, rules: [{ conditions: [q], rules: [{ endpoint: { url: "https://oidc.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "DualStack is enabled but this partition does not support DualStack", type: d }], type: f }, { endpoint: { url: "https://oidc.{Region}.{PartitionResult#dnsSuffix}", properties: n, headers: n }, type: e }], type: f }], type: f }, { error: "Invalid Configuration: Missing Region", type: d }] };
    exports6.ruleSet = _data;
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver6 = __commonJS({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/endpointResolver.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs63();
    var util_endpoints_2 = require_dist_cjs18();
    var ruleset_1 = require_ruleset6();
    var cache = new util_endpoints_2.EndpointCache({
      size: 50,
      params: ["Endpoint", "Region", "UseDualStack", "UseFIPS"]
    });
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return cache.get(endpointParams, () => (0, util_endpoints_2.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      }));
    };
    exports6.defaultEndpointResolver = defaultEndpointResolver;
    util_endpoints_2.customEndpointFunctions.aws = util_endpoints_1.awsEndpointFunctions;
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared6 = __commonJS({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/runtimeConfig.shared.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.getRuntimeConfig = void 0;
    var core_1 = (init_dist_es3(), __toCommonJS(dist_es_exports3));
    var core_2 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var smithy_client_1 = require_dist_cjs23();
    var url_parser_1 = require_dist_cjs31();
    var util_base64_1 = require_dist_cjs11();
    var util_utf8_1 = require_dist_cjs10();
    var httpAuthSchemeProvider_1 = require_httpAuthSchemeProvider7();
    var endpointResolver_1 = require_endpointResolver6();
    var getRuntimeConfig = (config2) => {
      return {
        apiVersion: "2019-06-10",
        base64Decoder: config2?.base64Decoder ?? util_base64_1.fromBase64,
        base64Encoder: config2?.base64Encoder ?? util_base64_1.toBase64,
        disableHostPrefix: config2?.disableHostPrefix ?? false,
        endpointProvider: config2?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
        extensions: config2?.extensions ?? [],
        httpAuthSchemeProvider: config2?.httpAuthSchemeProvider ?? httpAuthSchemeProvider_1.defaultSSOOIDCHttpAuthSchemeProvider,
        httpAuthSchemes: config2?.httpAuthSchemes ?? [
          {
            schemeId: "aws.auth#sigv4",
            identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4"),
            signer: new core_1.AwsSdkSigV4Signer()
          },
          {
            schemeId: "smithy.api#noAuth",
            identityProvider: (ipc) => ipc.getIdentityProvider("smithy.api#noAuth") || (async () => ({})),
            signer: new core_2.NoAuthSigner()
          }
        ],
        logger: config2?.logger ?? new smithy_client_1.NoOpLogger(),
        serviceId: config2?.serviceId ?? "SSO OIDC",
        urlParser: config2?.urlParser ?? url_parser_1.parseUrl,
        utf8Decoder: config2?.utf8Decoder ?? util_utf8_1.fromUtf8,
        utf8Encoder: config2?.utf8Encoder ?? util_utf8_1.toUtf8
      };
    };
    exports6.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/runtimeConfig.js
var require_runtimeConfig6 = __commonJS({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/runtimeConfig.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package7());
    var core_1 = (init_dist_es3(), __toCommonJS(dist_es_exports3));
    var credential_provider_node_1 = require_dist_cjs76();
    var util_user_agent_node_1 = require_dist_cjs66();
    var config_resolver_1 = require_dist_cjs26();
    var hash_node_1 = require_dist_cjs37();
    var middleware_retry_1 = require_dist_cjs35();
    var node_config_provider_1 = require_dist_cjs29();
    var node_http_handler_1 = require_dist_cjs14();
    var util_body_length_node_1 = require_dist_cjs38();
    var util_retry_1 = require_dist_cjs34();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared6();
    var smithy_client_1 = require_dist_cjs23();
    var util_defaults_mode_node_1 = require_dist_cjs40();
    var smithy_client_2 = require_dist_cjs23();
    var getRuntimeConfig = (config2) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config2);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config2);
      (0, core_1.emitWarningIfUnsupportedVersion)(process.version);
      const profileConfig = { profile: config2?.profile };
      return {
        ...clientSharedValues,
        ...config2,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config2?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider: config2?.credentialDefaultProvider ?? credential_provider_node_1.defaultProvider,
        defaultUserAgentProvider: config2?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.createDefaultUserAgentProvider)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: config2?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS, config2),
        region: config2?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, { ...config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS, ...profileConfig }),
        requestHandler: node_http_handler_1.NodeHttpHandler.create(config2?.requestHandler ?? defaultConfigProvider),
        retryMode: config2?.retryMode ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }, config2),
        sha256: config2?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: config2?.streamCollector ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: config2?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS, profileConfig),
        useFipsEndpoint: config2?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS, profileConfig),
        userAgentAppId: config2?.userAgentAppId ?? (0, node_config_provider_1.loadConfig)(util_user_agent_node_1.NODE_APP_ID_CONFIG_OPTIONS, profileConfig)
      };
    };
    exports6.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/index.js
var require_dist_cjs69 = __commonJS({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/index.js"(exports6, module) {
    "use strict";
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      AccessDeniedException: () => AccessDeniedException,
      AuthorizationPendingException: () => AuthorizationPendingException,
      CreateTokenCommand: () => CreateTokenCommand,
      CreateTokenRequestFilterSensitiveLog: () => CreateTokenRequestFilterSensitiveLog,
      CreateTokenResponseFilterSensitiveLog: () => CreateTokenResponseFilterSensitiveLog,
      CreateTokenWithIAMCommand: () => CreateTokenWithIAMCommand,
      CreateTokenWithIAMRequestFilterSensitiveLog: () => CreateTokenWithIAMRequestFilterSensitiveLog,
      CreateTokenWithIAMResponseFilterSensitiveLog: () => CreateTokenWithIAMResponseFilterSensitiveLog,
      ExpiredTokenException: () => ExpiredTokenException,
      InternalServerException: () => InternalServerException,
      InvalidClientException: () => InvalidClientException,
      InvalidClientMetadataException: () => InvalidClientMetadataException,
      InvalidGrantException: () => InvalidGrantException,
      InvalidRedirectUriException: () => InvalidRedirectUriException,
      InvalidRequestException: () => InvalidRequestException,
      InvalidRequestRegionException: () => InvalidRequestRegionException,
      InvalidScopeException: () => InvalidScopeException,
      RegisterClientCommand: () => RegisterClientCommand,
      RegisterClientResponseFilterSensitiveLog: () => RegisterClientResponseFilterSensitiveLog,
      SSOOIDC: () => SSOOIDC,
      SSOOIDCClient: () => SSOOIDCClient,
      SSOOIDCServiceException: () => SSOOIDCServiceException,
      SlowDownException: () => SlowDownException,
      StartDeviceAuthorizationCommand: () => StartDeviceAuthorizationCommand,
      StartDeviceAuthorizationRequestFilterSensitiveLog: () => StartDeviceAuthorizationRequestFilterSensitiveLog,
      UnauthorizedClientException: () => UnauthorizedClientException,
      UnsupportedGrantTypeException: () => UnsupportedGrantTypeException,
      __Client: () => import_smithy_client7.Client
    });
    module.exports = __toCommonJS3(src_exports);
    var import_middleware_host_header = require_dist_cjs60();
    var import_middleware_logger = require_dist_cjs61();
    var import_middleware_recursion_detection = require_dist_cjs62();
    var import_middleware_user_agent = require_dist_cjs64();
    var import_config_resolver = require_dist_cjs26();
    var import_core5 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var import_middleware_content_length = require_dist_cjs27();
    var import_middleware_endpoint = require_dist_cjs32();
    var import_middleware_retry = require_dist_cjs35();
    var import_httpAuthSchemeProvider = require_httpAuthSchemeProvider7();
    var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "sso-oauth"
      };
    }, "resolveClientEndpointParameters");
    var commonParams = {
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
    var import_runtimeConfig = require_runtimeConfig6();
    var import_region_config_resolver = require_dist_cjs67();
    var import_protocol_http11 = require_dist_cjs2();
    var import_smithy_client7 = require_dist_cjs23();
    var getHttpAuthExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
      const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
      let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
      let _credentials = runtimeConfig.credentials;
      return {
        setHttpAuthScheme(httpAuthScheme) {
          const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
          if (index === -1) {
            _httpAuthSchemes.push(httpAuthScheme);
          } else {
            _httpAuthSchemes.splice(index, 1, httpAuthScheme);
          }
        },
        httpAuthSchemes() {
          return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
          _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
          return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
          _credentials = credentials;
        },
        credentials() {
          return _credentials;
        }
      };
    }, "getHttpAuthExtensionConfiguration");
    var resolveHttpAuthRuntimeConfig = /* @__PURE__ */ __name((config2) => {
      return {
        httpAuthSchemes: config2.httpAuthSchemes(),
        httpAuthSchemeProvider: config2.httpAuthSchemeProvider(),
        credentials: config2.credentials()
      };
    }, "resolveHttpAuthRuntimeConfig");
    var asPartial = /* @__PURE__ */ __name((t) => t, "asPartial");
    var resolveRuntimeExtensions = /* @__PURE__ */ __name((runtimeConfig, extensions) => {
      const extensionConfiguration = {
        ...asPartial((0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig)),
        ...asPartial((0, import_smithy_client7.getDefaultExtensionConfiguration)(runtimeConfig)),
        ...asPartial((0, import_protocol_http11.getHttpHandlerExtensionConfiguration)(runtimeConfig)),
        ...asPartial(getHttpAuthExtensionConfiguration(runtimeConfig))
      };
      extensions.forEach((extension) => extension.configure(extensionConfiguration));
      return {
        ...runtimeConfig,
        ...(0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
        ...(0, import_smithy_client7.resolveDefaultRuntimeConfig)(extensionConfiguration),
        ...(0, import_protocol_http11.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),
        ...resolveHttpAuthRuntimeConfig(extensionConfiguration)
      };
    }, "resolveRuntimeExtensions");
    var _SSOOIDCClient = class _SSOOIDCClient extends import_smithy_client7.Client {
      constructor(...[configuration]) {
        const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});
        const _config_1 = resolveClientEndpointParameters(_config_0);
        const _config_2 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_1);
        const _config_3 = (0, import_middleware_retry.resolveRetryConfig)(_config_2);
        const _config_4 = (0, import_config_resolver.resolveRegionConfig)(_config_3);
        const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, import_middleware_endpoint.resolveEndpointConfig)(_config_5);
        const _config_7 = (0, import_httpAuthSchemeProvider.resolveHttpAuthSchemeConfig)(_config_6);
        const _config_8 = resolveRuntimeExtensions(_config_7, (configuration == null ? void 0 : configuration.extensions) || []);
        super(_config_8);
        this.config = _config_8;
        this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_retry.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_content_length.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_host_header.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use(
          (0, import_core5.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
            httpAuthSchemeParametersProvider: import_httpAuthSchemeProvider.defaultSSOOIDCHttpAuthSchemeParametersProvider,
            identityProviderConfigProvider: async (config2) => new import_core5.DefaultIdentityProviderConfig({
              "aws.auth#sigv4": config2.credentials
            })
          })
        );
        this.middlewareStack.use((0, import_core5.getHttpSigningPlugin)(this.config));
      }
      /**
       * Destroy underlying resources, like sockets. It's usually not necessary to do this.
       * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
       * Otherwise, sockets might stay open for quite a long time before the server terminates them.
       */
      destroy() {
        super.destroy();
      }
    };
    __name(_SSOOIDCClient, "SSOOIDCClient");
    var SSOOIDCClient = _SSOOIDCClient;
    var import_middleware_serde2 = require_dist_cjs7();
    var _SSOOIDCServiceException = class _SSOOIDCServiceException2 extends import_smithy_client7.ServiceException {
      /**
       * @internal
       */
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, _SSOOIDCServiceException2.prototype);
      }
    };
    __name(_SSOOIDCServiceException, "SSOOIDCServiceException");
    var SSOOIDCServiceException = _SSOOIDCServiceException;
    var _AccessDeniedException = class _AccessDeniedException2 extends SSOOIDCServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "AccessDeniedException",
          $fault: "client",
          ...opts
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _AccessDeniedException2.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    __name(_AccessDeniedException, "AccessDeniedException");
    var AccessDeniedException = _AccessDeniedException;
    var _AuthorizationPendingException = class _AuthorizationPendingException2 extends SSOOIDCServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "AuthorizationPendingException",
          $fault: "client",
          ...opts
        });
        this.name = "AuthorizationPendingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _AuthorizationPendingException2.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    __name(_AuthorizationPendingException, "AuthorizationPendingException");
    var AuthorizationPendingException = _AuthorizationPendingException;
    var _ExpiredTokenException = class _ExpiredTokenException2 extends SSOOIDCServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ExpiredTokenException",
          $fault: "client",
          ...opts
        });
        this.name = "ExpiredTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ExpiredTokenException2.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    __name(_ExpiredTokenException, "ExpiredTokenException");
    var ExpiredTokenException = _ExpiredTokenException;
    var _InternalServerException = class _InternalServerException2 extends SSOOIDCServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InternalServerException",
          $fault: "server",
          ...opts
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, _InternalServerException2.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    __name(_InternalServerException, "InternalServerException");
    var InternalServerException = _InternalServerException;
    var _InvalidClientException = class _InvalidClientException2 extends SSOOIDCServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidClientException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidClientException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidClientException2.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    __name(_InvalidClientException, "InvalidClientException");
    var InvalidClientException = _InvalidClientException;
    var _InvalidGrantException = class _InvalidGrantException2 extends SSOOIDCServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidGrantException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidGrantException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidGrantException2.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    __name(_InvalidGrantException, "InvalidGrantException");
    var InvalidGrantException = _InvalidGrantException;
    var _InvalidRequestException = class _InvalidRequestException2 extends SSOOIDCServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidRequestException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidRequestException2.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    __name(_InvalidRequestException, "InvalidRequestException");
    var InvalidRequestException = _InvalidRequestException;
    var _InvalidScopeException = class _InvalidScopeException2 extends SSOOIDCServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidScopeException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidScopeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidScopeException2.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    __name(_InvalidScopeException, "InvalidScopeException");
    var InvalidScopeException = _InvalidScopeException;
    var _SlowDownException = class _SlowDownException2 extends SSOOIDCServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "SlowDownException",
          $fault: "client",
          ...opts
        });
        this.name = "SlowDownException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _SlowDownException2.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    __name(_SlowDownException, "SlowDownException");
    var SlowDownException = _SlowDownException;
    var _UnauthorizedClientException = class _UnauthorizedClientException2 extends SSOOIDCServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "UnauthorizedClientException",
          $fault: "client",
          ...opts
        });
        this.name = "UnauthorizedClientException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UnauthorizedClientException2.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    __name(_UnauthorizedClientException, "UnauthorizedClientException");
    var UnauthorizedClientException = _UnauthorizedClientException;
    var _UnsupportedGrantTypeException = class _UnsupportedGrantTypeException2 extends SSOOIDCServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "UnsupportedGrantTypeException",
          $fault: "client",
          ...opts
        });
        this.name = "UnsupportedGrantTypeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UnsupportedGrantTypeException2.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    __name(_UnsupportedGrantTypeException, "UnsupportedGrantTypeException");
    var UnsupportedGrantTypeException = _UnsupportedGrantTypeException;
    var _InvalidRequestRegionException = class _InvalidRequestRegionException2 extends SSOOIDCServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidRequestRegionException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidRequestRegionException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidRequestRegionException2.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
        this.endpoint = opts.endpoint;
        this.region = opts.region;
      }
    };
    __name(_InvalidRequestRegionException, "InvalidRequestRegionException");
    var InvalidRequestRegionException = _InvalidRequestRegionException;
    var _InvalidClientMetadataException = class _InvalidClientMetadataException2 extends SSOOIDCServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidClientMetadataException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidClientMetadataException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidClientMetadataException2.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    __name(_InvalidClientMetadataException, "InvalidClientMetadataException");
    var InvalidClientMetadataException = _InvalidClientMetadataException;
    var _InvalidRedirectUriException = class _InvalidRedirectUriException2 extends SSOOIDCServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidRedirectUriException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidRedirectUriException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidRedirectUriException2.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    __name(_InvalidRedirectUriException, "InvalidRedirectUriException");
    var InvalidRedirectUriException = _InvalidRedirectUriException;
    var CreateTokenRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.clientSecret && { clientSecret: import_smithy_client7.SENSITIVE_STRING },
      ...obj.refreshToken && { refreshToken: import_smithy_client7.SENSITIVE_STRING },
      ...obj.codeVerifier && { codeVerifier: import_smithy_client7.SENSITIVE_STRING }
    }), "CreateTokenRequestFilterSensitiveLog");
    var CreateTokenResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: import_smithy_client7.SENSITIVE_STRING },
      ...obj.refreshToken && { refreshToken: import_smithy_client7.SENSITIVE_STRING },
      ...obj.idToken && { idToken: import_smithy_client7.SENSITIVE_STRING }
    }), "CreateTokenResponseFilterSensitiveLog");
    var CreateTokenWithIAMRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.refreshToken && { refreshToken: import_smithy_client7.SENSITIVE_STRING },
      ...obj.assertion && { assertion: import_smithy_client7.SENSITIVE_STRING },
      ...obj.subjectToken && { subjectToken: import_smithy_client7.SENSITIVE_STRING },
      ...obj.codeVerifier && { codeVerifier: import_smithy_client7.SENSITIVE_STRING }
    }), "CreateTokenWithIAMRequestFilterSensitiveLog");
    var CreateTokenWithIAMResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: import_smithy_client7.SENSITIVE_STRING },
      ...obj.refreshToken && { refreshToken: import_smithy_client7.SENSITIVE_STRING },
      ...obj.idToken && { idToken: import_smithy_client7.SENSITIVE_STRING }
    }), "CreateTokenWithIAMResponseFilterSensitiveLog");
    var RegisterClientResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.clientSecret && { clientSecret: import_smithy_client7.SENSITIVE_STRING }
    }), "RegisterClientResponseFilterSensitiveLog");
    var StartDeviceAuthorizationRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.clientSecret && { clientSecret: import_smithy_client7.SENSITIVE_STRING }
    }), "StartDeviceAuthorizationRequestFilterSensitiveLog");
    var import_core22 = (init_dist_es3(), __toCommonJS(dist_es_exports3));
    var se_CreateTokenCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {
        "content-type": "application/json"
      };
      b.bp("/token");
      let body;
      body = JSON.stringify(
        (0, import_smithy_client7.take)(input, {
          clientId: [],
          clientSecret: [],
          code: [],
          codeVerifier: [],
          deviceCode: [],
          grantType: [],
          redirectUri: [],
          refreshToken: [],
          scope: (_) => (0, import_smithy_client7._json)(_)
        })
      );
      b.m("POST").h(headers).b(body);
      return b.build();
    }, "se_CreateTokenCommand");
    var se_CreateTokenWithIAMCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {
        "content-type": "application/json"
      };
      b.bp("/token");
      const query = (0, import_smithy_client7.map)({
        [_ai]: [, "t"]
      });
      let body;
      body = JSON.stringify(
        (0, import_smithy_client7.take)(input, {
          assertion: [],
          clientId: [],
          code: [],
          codeVerifier: [],
          grantType: [],
          redirectUri: [],
          refreshToken: [],
          requestedTokenType: [],
          scope: (_) => (0, import_smithy_client7._json)(_),
          subjectToken: [],
          subjectTokenType: []
        })
      );
      b.m("POST").h(headers).q(query).b(body);
      return b.build();
    }, "se_CreateTokenWithIAMCommand");
    var se_RegisterClientCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {
        "content-type": "application/json"
      };
      b.bp("/client/register");
      let body;
      body = JSON.stringify(
        (0, import_smithy_client7.take)(input, {
          clientName: [],
          clientType: [],
          entitledApplicationArn: [],
          grantTypes: (_) => (0, import_smithy_client7._json)(_),
          issuerUrl: [],
          redirectUris: (_) => (0, import_smithy_client7._json)(_),
          scopes: (_) => (0, import_smithy_client7._json)(_)
        })
      );
      b.m("POST").h(headers).b(body);
      return b.build();
    }, "se_RegisterClientCommand");
    var se_StartDeviceAuthorizationCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {
        "content-type": "application/json"
      };
      b.bp("/device_authorization");
      let body;
      body = JSON.stringify(
        (0, import_smithy_client7.take)(input, {
          clientId: [],
          clientSecret: [],
          startUrl: []
        })
      );
      b.m("POST").h(headers).b(body);
      return b.build();
    }, "se_StartDeviceAuthorizationCommand");
    var de_CreateTokenCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client7.take)(data, {
        accessToken: import_smithy_client7.expectString,
        expiresIn: import_smithy_client7.expectInt32,
        idToken: import_smithy_client7.expectString,
        refreshToken: import_smithy_client7.expectString,
        tokenType: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_CreateTokenCommand");
    var de_CreateTokenWithIAMCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client7.take)(data, {
        accessToken: import_smithy_client7.expectString,
        expiresIn: import_smithy_client7.expectInt32,
        idToken: import_smithy_client7.expectString,
        issuedTokenType: import_smithy_client7.expectString,
        refreshToken: import_smithy_client7.expectString,
        scope: import_smithy_client7._json,
        tokenType: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_CreateTokenWithIAMCommand");
    var de_RegisterClientCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client7.take)(data, {
        authorizationEndpoint: import_smithy_client7.expectString,
        clientId: import_smithy_client7.expectString,
        clientIdIssuedAt: import_smithy_client7.expectLong,
        clientSecret: import_smithy_client7.expectString,
        clientSecretExpiresAt: import_smithy_client7.expectLong,
        tokenEndpoint: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_RegisterClientCommand");
    var de_StartDeviceAuthorizationCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client7.take)(data, {
        deviceCode: import_smithy_client7.expectString,
        expiresIn: import_smithy_client7.expectInt32,
        interval: import_smithy_client7.expectInt32,
        userCode: import_smithy_client7.expectString,
        verificationUri: import_smithy_client7.expectString,
        verificationUriComplete: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_StartDeviceAuthorizationCommand");
    var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await (0, import_core22.parseJsonErrorBody)(output.body, context)
      };
      const errorCode = (0, import_core22.loadRestJsonErrorCode)(output, parsedOutput.body);
      switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.ssooidc#AccessDeniedException":
          throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AuthorizationPendingException":
        case "com.amazonaws.ssooidc#AuthorizationPendingException":
          throw await de_AuthorizationPendingExceptionRes(parsedOutput, context);
        case "ExpiredTokenException":
        case "com.amazonaws.ssooidc#ExpiredTokenException":
          throw await de_ExpiredTokenExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.ssooidc#InternalServerException":
          throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidClientException":
        case "com.amazonaws.ssooidc#InvalidClientException":
          throw await de_InvalidClientExceptionRes(parsedOutput, context);
        case "InvalidGrantException":
        case "com.amazonaws.ssooidc#InvalidGrantException":
          throw await de_InvalidGrantExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.ssooidc#InvalidRequestException":
          throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "InvalidScopeException":
        case "com.amazonaws.ssooidc#InvalidScopeException":
          throw await de_InvalidScopeExceptionRes(parsedOutput, context);
        case "SlowDownException":
        case "com.amazonaws.ssooidc#SlowDownException":
          throw await de_SlowDownExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.ssooidc#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        case "UnsupportedGrantTypeException":
        case "com.amazonaws.ssooidc#UnsupportedGrantTypeException":
          throw await de_UnsupportedGrantTypeExceptionRes(parsedOutput, context);
        case "InvalidRequestRegionException":
        case "com.amazonaws.ssooidc#InvalidRequestRegionException":
          throw await de_InvalidRequestRegionExceptionRes(parsedOutput, context);
        case "InvalidClientMetadataException":
        case "com.amazonaws.ssooidc#InvalidClientMetadataException":
          throw await de_InvalidClientMetadataExceptionRes(parsedOutput, context);
        case "InvalidRedirectUriException":
        case "com.amazonaws.ssooidc#InvalidRedirectUriException":
          throw await de_InvalidRedirectUriExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    }, "de_CommandError");
    var throwDefaultError = (0, import_smithy_client7.withBaseException)(SSOOIDCServiceException);
    var de_AccessDeniedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client7.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client7.take)(data, {
        error: import_smithy_client7.expectString,
        error_description: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, parsedOutput.body);
    }, "de_AccessDeniedExceptionRes");
    var de_AuthorizationPendingExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client7.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client7.take)(data, {
        error: import_smithy_client7.expectString,
        error_description: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      const exception = new AuthorizationPendingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, parsedOutput.body);
    }, "de_AuthorizationPendingExceptionRes");
    var de_ExpiredTokenExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client7.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client7.take)(data, {
        error: import_smithy_client7.expectString,
        error_description: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      const exception = new ExpiredTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, parsedOutput.body);
    }, "de_ExpiredTokenExceptionRes");
    var de_InternalServerExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client7.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client7.take)(data, {
        error: import_smithy_client7.expectString,
        error_description: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, parsedOutput.body);
    }, "de_InternalServerExceptionRes");
    var de_InvalidClientExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client7.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client7.take)(data, {
        error: import_smithy_client7.expectString,
        error_description: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidClientException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, parsedOutput.body);
    }, "de_InvalidClientExceptionRes");
    var de_InvalidClientMetadataExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client7.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client7.take)(data, {
        error: import_smithy_client7.expectString,
        error_description: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidClientMetadataException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, parsedOutput.body);
    }, "de_InvalidClientMetadataExceptionRes");
    var de_InvalidGrantExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client7.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client7.take)(data, {
        error: import_smithy_client7.expectString,
        error_description: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidGrantException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, parsedOutput.body);
    }, "de_InvalidGrantExceptionRes");
    var de_InvalidRedirectUriExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client7.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client7.take)(data, {
        error: import_smithy_client7.expectString,
        error_description: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidRedirectUriException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, parsedOutput.body);
    }, "de_InvalidRedirectUriExceptionRes");
    var de_InvalidRequestExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client7.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client7.take)(data, {
        error: import_smithy_client7.expectString,
        error_description: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, parsedOutput.body);
    }, "de_InvalidRequestExceptionRes");
    var de_InvalidRequestRegionExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client7.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client7.take)(data, {
        endpoint: import_smithy_client7.expectString,
        error: import_smithy_client7.expectString,
        error_description: import_smithy_client7.expectString,
        region: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidRequestRegionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, parsedOutput.body);
    }, "de_InvalidRequestRegionExceptionRes");
    var de_InvalidScopeExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client7.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client7.take)(data, {
        error: import_smithy_client7.expectString,
        error_description: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidScopeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, parsedOutput.body);
    }, "de_InvalidScopeExceptionRes");
    var de_SlowDownExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client7.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client7.take)(data, {
        error: import_smithy_client7.expectString,
        error_description: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      const exception = new SlowDownException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, parsedOutput.body);
    }, "de_SlowDownExceptionRes");
    var de_UnauthorizedClientExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client7.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client7.take)(data, {
        error: import_smithy_client7.expectString,
        error_description: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      const exception = new UnauthorizedClientException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, parsedOutput.body);
    }, "de_UnauthorizedClientExceptionRes");
    var de_UnsupportedGrantTypeExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client7.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client7.take)(data, {
        error: import_smithy_client7.expectString,
        error_description: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      const exception = new UnsupportedGrantTypeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, parsedOutput.body);
    }, "de_UnsupportedGrantTypeExceptionRes");
    var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    }), "deserializeMetadata");
    var _ai = "aws_iam";
    var _CreateTokenCommand = class _CreateTokenCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AWSSSOOIDCService", "CreateToken", {}).n("SSOOIDCClient", "CreateTokenCommand").f(CreateTokenRequestFilterSensitiveLog, CreateTokenResponseFilterSensitiveLog).ser(se_CreateTokenCommand).de(de_CreateTokenCommand).build() {
    };
    __name(_CreateTokenCommand, "CreateTokenCommand");
    var CreateTokenCommand = _CreateTokenCommand;
    var _CreateTokenWithIAMCommand = class _CreateTokenWithIAMCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AWSSSOOIDCService", "CreateTokenWithIAM", {}).n("SSOOIDCClient", "CreateTokenWithIAMCommand").f(CreateTokenWithIAMRequestFilterSensitiveLog, CreateTokenWithIAMResponseFilterSensitiveLog).ser(se_CreateTokenWithIAMCommand).de(de_CreateTokenWithIAMCommand).build() {
    };
    __name(_CreateTokenWithIAMCommand, "CreateTokenWithIAMCommand");
    var CreateTokenWithIAMCommand = _CreateTokenWithIAMCommand;
    var _RegisterClientCommand = class _RegisterClientCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AWSSSOOIDCService", "RegisterClient", {}).n("SSOOIDCClient", "RegisterClientCommand").f(void 0, RegisterClientResponseFilterSensitiveLog).ser(se_RegisterClientCommand).de(de_RegisterClientCommand).build() {
    };
    __name(_RegisterClientCommand, "RegisterClientCommand");
    var RegisterClientCommand = _RegisterClientCommand;
    var _StartDeviceAuthorizationCommand = class _StartDeviceAuthorizationCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AWSSSOOIDCService", "StartDeviceAuthorization", {}).n("SSOOIDCClient", "StartDeviceAuthorizationCommand").f(StartDeviceAuthorizationRequestFilterSensitiveLog, void 0).ser(se_StartDeviceAuthorizationCommand).de(de_StartDeviceAuthorizationCommand).build() {
    };
    __name(_StartDeviceAuthorizationCommand, "StartDeviceAuthorizationCommand");
    var StartDeviceAuthorizationCommand = _StartDeviceAuthorizationCommand;
    var commands = {
      CreateTokenCommand,
      CreateTokenWithIAMCommand,
      RegisterClientCommand,
      StartDeviceAuthorizationCommand
    };
    var _SSOOIDC = class _SSOOIDC extends SSOOIDCClient {
    };
    __name(_SSOOIDC, "SSOOIDC");
    var SSOOIDC = _SSOOIDC;
    (0, import_smithy_client7.createAggregatedClient)(commands, SSOOIDC);
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/token-providers/dist-cjs/index.js
var require_dist_cjs70 = __commonJS({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/token-providers/dist-cjs/index.js"(exports6, module) {
    "use strict";
    init_dirname();
    var __create3 = Object.create;
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __getProtoOf3 = Object.getPrototypeOf;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM3 = (mod, isNodeMode, target) => (target = mod != null ? __create3(__getProtoOf3(mod)) : {}, __copyProps3(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp3(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      fromSso: () => fromSso,
      fromStatic: () => fromStatic,
      nodeProvider: () => nodeProvider
    });
    module.exports = __toCommonJS3(src_exports);
    var EXPIRE_WINDOW_MS = 5 * 60 * 1e3;
    var REFRESH_MESSAGE = `To refresh this SSO session run 'aws sso login' with the corresponding profile.`;
    var getSsoOidcClient = /* @__PURE__ */ __name(async (ssoRegion, init = {}) => {
      var _a, _b, _c;
      const { SSOOIDCClient } = await Promise.resolve().then(() => __toESM3(require_dist_cjs69()));
      const ssoOidcClient = new SSOOIDCClient(
        Object.assign({}, init.clientConfig ?? {}, {
          region: ssoRegion ?? ((_a = init.clientConfig) == null ? void 0 : _a.region),
          logger: ((_b = init.clientConfig) == null ? void 0 : _b.logger) ?? ((_c = init.parentClientConfig) == null ? void 0 : _c.logger)
        })
      );
      return ssoOidcClient;
    }, "getSsoOidcClient");
    var getNewSsoOidcToken = /* @__PURE__ */ __name(async (ssoToken, ssoRegion, init = {}) => {
      const { CreateTokenCommand } = await Promise.resolve().then(() => __toESM3(require_dist_cjs69()));
      const ssoOidcClient = await getSsoOidcClient(ssoRegion, init);
      return ssoOidcClient.send(
        new CreateTokenCommand({
          clientId: ssoToken.clientId,
          clientSecret: ssoToken.clientSecret,
          refreshToken: ssoToken.refreshToken,
          grantType: "refresh_token"
        })
      );
    }, "getNewSsoOidcToken");
    var import_property_provider3 = require_dist_cjs20();
    var validateTokenExpiry = /* @__PURE__ */ __name((token) => {
      if (token.expiration && token.expiration.getTime() < Date.now()) {
        throw new import_property_provider3.TokenProviderError(`Token is expired. ${REFRESH_MESSAGE}`, false);
      }
    }, "validateTokenExpiry");
    var validateTokenKey = /* @__PURE__ */ __name((key, value, forRefresh = false) => {
      if (typeof value === "undefined") {
        throw new import_property_provider3.TokenProviderError(
          `Value not present for '${key}' in SSO Token${forRefresh ? ". Cannot refresh" : ""}. ${REFRESH_MESSAGE}`,
          false
        );
      }
    }, "validateTokenKey");
    var import_shared_ini_file_loader = require_dist_cjs28();
    var import_fs = __require("fs");
    var { writeFile } = import_fs.promises;
    var writeSSOTokenToFile = /* @__PURE__ */ __name((id, ssoToken) => {
      const tokenFilepath = (0, import_shared_ini_file_loader.getSSOTokenFilepath)(id);
      const tokenString = JSON.stringify(ssoToken, null, 2);
      return writeFile(tokenFilepath, tokenString);
    }, "writeSSOTokenToFile");
    var lastRefreshAttemptTime = /* @__PURE__ */ new Date(0);
    var fromSso = /* @__PURE__ */ __name((_init = {}) => async ({ callerClientConfig } = {}) => {
      var _a;
      const init = {
        ..._init,
        parentClientConfig: {
          ...callerClientConfig,
          ..._init.parentClientConfig
        }
      };
      (_a = init.logger) == null ? void 0 : _a.debug("@aws-sdk/token-providers - fromSso");
      const profiles = await (0, import_shared_ini_file_loader.parseKnownFiles)(init);
      const profileName = (0, import_shared_ini_file_loader.getProfileName)({
        profile: init.profile ?? (callerClientConfig == null ? void 0 : callerClientConfig.profile)
      });
      const profile = profiles[profileName];
      if (!profile) {
        throw new import_property_provider3.TokenProviderError(`Profile '${profileName}' could not be found in shared credentials file.`, false);
      } else if (!profile["sso_session"]) {
        throw new import_property_provider3.TokenProviderError(`Profile '${profileName}' is missing required property 'sso_session'.`);
      }
      const ssoSessionName = profile["sso_session"];
      const ssoSessions = await (0, import_shared_ini_file_loader.loadSsoSessionData)(init);
      const ssoSession = ssoSessions[ssoSessionName];
      if (!ssoSession) {
        throw new import_property_provider3.TokenProviderError(
          `Sso session '${ssoSessionName}' could not be found in shared credentials file.`,
          false
        );
      }
      for (const ssoSessionRequiredKey of ["sso_start_url", "sso_region"]) {
        if (!ssoSession[ssoSessionRequiredKey]) {
          throw new import_property_provider3.TokenProviderError(
            `Sso session '${ssoSessionName}' is missing required property '${ssoSessionRequiredKey}'.`,
            false
          );
        }
      }
      const ssoStartUrl = ssoSession["sso_start_url"];
      const ssoRegion = ssoSession["sso_region"];
      let ssoToken;
      try {
        ssoToken = await (0, import_shared_ini_file_loader.getSSOTokenFromFile)(ssoSessionName);
      } catch (e) {
        throw new import_property_provider3.TokenProviderError(
          `The SSO session token associated with profile=${profileName} was not found or is invalid. ${REFRESH_MESSAGE}`,
          false
        );
      }
      validateTokenKey("accessToken", ssoToken.accessToken);
      validateTokenKey("expiresAt", ssoToken.expiresAt);
      const { accessToken, expiresAt } = ssoToken;
      const existingToken = { token: accessToken, expiration: new Date(expiresAt) };
      if (existingToken.expiration.getTime() - Date.now() > EXPIRE_WINDOW_MS) {
        return existingToken;
      }
      if (Date.now() - lastRefreshAttemptTime.getTime() < 30 * 1e3) {
        validateTokenExpiry(existingToken);
        return existingToken;
      }
      validateTokenKey("clientId", ssoToken.clientId, true);
      validateTokenKey("clientSecret", ssoToken.clientSecret, true);
      validateTokenKey("refreshToken", ssoToken.refreshToken, true);
      try {
        lastRefreshAttemptTime.setTime(Date.now());
        const newSsoOidcToken = await getNewSsoOidcToken(ssoToken, ssoRegion, init);
        validateTokenKey("accessToken", newSsoOidcToken.accessToken);
        validateTokenKey("expiresIn", newSsoOidcToken.expiresIn);
        const newTokenExpiration = new Date(Date.now() + newSsoOidcToken.expiresIn * 1e3);
        try {
          await writeSSOTokenToFile(ssoSessionName, {
            ...ssoToken,
            accessToken: newSsoOidcToken.accessToken,
            expiresAt: newTokenExpiration.toISOString(),
            refreshToken: newSsoOidcToken.refreshToken
          });
        } catch (error) {
        }
        return {
          token: newSsoOidcToken.accessToken,
          expiration: newTokenExpiration
        };
      } catch (error) {
        validateTokenExpiry(existingToken);
        return existingToken;
      }
    }, "fromSso");
    var fromStatic = /* @__PURE__ */ __name(({ token, logger }) => async () => {
      logger == null ? void 0 : logger.debug("@aws-sdk/token-providers - fromStatic");
      if (!token || !token.token) {
        throw new import_property_provider3.TokenProviderError(`Please pass a valid token to fromStatic`, false);
      }
      return token;
    }, "fromStatic");
    var nodeProvider = /* @__PURE__ */ __name((init = {}) => (0, import_property_provider3.memoize)(
      (0, import_property_provider3.chain)(fromSso(init), async () => {
        throw new import_property_provider3.TokenProviderError("Could not load token from any providers", false);
      }),
      (token) => token.expiration !== void 0 && token.expiration.getTime() - Date.now() < 3e5,
      (token) => token.expiration !== void 0
    ), "nodeProvider");
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/index.js
var require_dist_cjs71 = __commonJS({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/index.js"(exports6, module) {
    "use strict";
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __esm3 = (fn, res) => function __init() {
      return fn && (res = (0, fn[__getOwnPropNames3(fn)[0]])(fn = 0)), res;
    };
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var loadSso_exports = {};
    __export3(loadSso_exports, {
      GetRoleCredentialsCommand: () => import_client_sso.GetRoleCredentialsCommand,
      SSOClient: () => import_client_sso.SSOClient
    });
    var import_client_sso;
    var init_loadSso = __esm3({
      "src/loadSso.ts"() {
        "use strict";
        import_client_sso = require_dist_cjs68();
      }
    });
    var src_exports = {};
    __export3(src_exports, {
      fromSSO: () => fromSSO2,
      isSsoProfile: () => isSsoProfile,
      validateSsoProfile: () => validateSsoProfile
    });
    module.exports = __toCommonJS3(src_exports);
    var isSsoProfile = /* @__PURE__ */ __name((arg) => arg && (typeof arg.sso_start_url === "string" || typeof arg.sso_account_id === "string" || typeof arg.sso_session === "string" || typeof arg.sso_region === "string" || typeof arg.sso_role_name === "string"), "isSsoProfile");
    var import_client3 = (init_client2(), __toCommonJS(client_exports2));
    var import_token_providers = require_dist_cjs70();
    var import_property_provider3 = require_dist_cjs20();
    var import_shared_ini_file_loader = require_dist_cjs28();
    var SHOULD_FAIL_CREDENTIAL_CHAIN = false;
    var resolveSSOCredentials = /* @__PURE__ */ __name(async ({
      ssoStartUrl,
      ssoSession,
      ssoAccountId,
      ssoRegion,
      ssoRoleName,
      ssoClient,
      clientConfig,
      parentClientConfig,
      profile,
      logger
    }) => {
      let token;
      const refreshMessage = `To refresh this SSO session run aws sso login with the corresponding profile.`;
      if (ssoSession) {
        try {
          const _token = await (0, import_token_providers.fromSso)({ profile })();
          token = {
            accessToken: _token.token,
            expiresAt: new Date(_token.expiration).toISOString()
          };
        } catch (e) {
          throw new import_property_provider3.CredentialsProviderError(e.message, {
            tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,
            logger
          });
        }
      } else {
        try {
          token = await (0, import_shared_ini_file_loader.getSSOTokenFromFile)(ssoStartUrl);
        } catch (e) {
          throw new import_property_provider3.CredentialsProviderError(`The SSO session associated with this profile is invalid. ${refreshMessage}`, {
            tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,
            logger
          });
        }
      }
      if (new Date(token.expiresAt).getTime() - Date.now() <= 0) {
        throw new import_property_provider3.CredentialsProviderError(`The SSO session associated with this profile has expired. ${refreshMessage}`, {
          tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,
          logger
        });
      }
      const { accessToken } = token;
      const { SSOClient: SSOClient2, GetRoleCredentialsCommand: GetRoleCredentialsCommand2 } = await Promise.resolve().then(() => (init_loadSso(), loadSso_exports));
      const sso = ssoClient || new SSOClient2(
        Object.assign({}, clientConfig ?? {}, {
          logger: (clientConfig == null ? void 0 : clientConfig.logger) ?? (parentClientConfig == null ? void 0 : parentClientConfig.logger),
          region: (clientConfig == null ? void 0 : clientConfig.region) ?? ssoRegion
        })
      );
      let ssoResp;
      try {
        ssoResp = await sso.send(
          new GetRoleCredentialsCommand2({
            accountId: ssoAccountId,
            roleName: ssoRoleName,
            accessToken
          })
        );
      } catch (e) {
        throw new import_property_provider3.CredentialsProviderError(e, {
          tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,
          logger
        });
      }
      const {
        roleCredentials: { accessKeyId, secretAccessKey, sessionToken, expiration, credentialScope, accountId } = {}
      } = ssoResp;
      if (!accessKeyId || !secretAccessKey || !sessionToken || !expiration) {
        throw new import_property_provider3.CredentialsProviderError("SSO returns an invalid temporary credential.", {
          tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,
          logger
        });
      }
      const credentials = {
        accessKeyId,
        secretAccessKey,
        sessionToken,
        expiration: new Date(expiration),
        ...credentialScope && { credentialScope },
        ...accountId && { accountId }
      };
      if (ssoSession) {
        (0, import_client3.setCredentialFeature)(credentials, "CREDENTIALS_SSO", "s");
      } else {
        (0, import_client3.setCredentialFeature)(credentials, "CREDENTIALS_SSO_LEGACY", "u");
      }
      return credentials;
    }, "resolveSSOCredentials");
    var validateSsoProfile = /* @__PURE__ */ __name((profile, logger) => {
      const { sso_start_url, sso_account_id, sso_region, sso_role_name } = profile;
      if (!sso_start_url || !sso_account_id || !sso_region || !sso_role_name) {
        throw new import_property_provider3.CredentialsProviderError(
          `Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(profile).join(
            ", "
          )}
Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`,
          { tryNextLink: false, logger }
        );
      }
      return profile;
    }, "validateSsoProfile");
    var fromSSO2 = /* @__PURE__ */ __name((init = {}) => async ({ callerClientConfig } = {}) => {
      var _a;
      (_a = init.logger) == null ? void 0 : _a.debug("@aws-sdk/credential-provider-sso - fromSSO");
      const { ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoSession } = init;
      const { ssoClient } = init;
      const profileName = (0, import_shared_ini_file_loader.getProfileName)({
        profile: init.profile ?? (callerClientConfig == null ? void 0 : callerClientConfig.profile)
      });
      if (!ssoStartUrl && !ssoAccountId && !ssoRegion && !ssoRoleName && !ssoSession) {
        const profiles = await (0, import_shared_ini_file_loader.parseKnownFiles)(init);
        const profile = profiles[profileName];
        if (!profile) {
          throw new import_property_provider3.CredentialsProviderError(`Profile ${profileName} was not found.`, { logger: init.logger });
        }
        if (!isSsoProfile(profile)) {
          throw new import_property_provider3.CredentialsProviderError(`Profile ${profileName} is not configured with SSO credentials.`, {
            logger: init.logger
          });
        }
        if (profile == null ? void 0 : profile.sso_session) {
          const ssoSessions = await (0, import_shared_ini_file_loader.loadSsoSessionData)(init);
          const session = ssoSessions[profile.sso_session];
          const conflictMsg = ` configurations in profile ${profileName} and sso-session ${profile.sso_session}`;
          if (ssoRegion && ssoRegion !== session.sso_region) {
            throw new import_property_provider3.CredentialsProviderError(`Conflicting SSO region` + conflictMsg, {
              tryNextLink: false,
              logger: init.logger
            });
          }
          if (ssoStartUrl && ssoStartUrl !== session.sso_start_url) {
            throw new import_property_provider3.CredentialsProviderError(`Conflicting SSO start_url` + conflictMsg, {
              tryNextLink: false,
              logger: init.logger
            });
          }
          profile.sso_region = session.sso_region;
          profile.sso_start_url = session.sso_start_url;
        }
        const { sso_start_url, sso_account_id, sso_region, sso_role_name, sso_session } = validateSsoProfile(
          profile,
          init.logger
        );
        return resolveSSOCredentials({
          ssoStartUrl: sso_start_url,
          ssoSession: sso_session,
          ssoAccountId: sso_account_id,
          ssoRegion: sso_region,
          ssoRoleName: sso_role_name,
          ssoClient,
          clientConfig: init.clientConfig,
          parentClientConfig: init.parentClientConfig,
          profile: profileName
        });
      } else if (!ssoStartUrl || !ssoAccountId || !ssoRegion || !ssoRoleName) {
        throw new import_property_provider3.CredentialsProviderError(
          'Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"',
          { tryNextLink: false, logger: init.logger }
        );
      } else {
        return resolveSSOCredentials({
          ssoStartUrl,
          ssoSession,
          ssoAccountId,
          ssoRegion,
          ssoRoleName,
          ssoClient,
          clientConfig: init.clientConfig,
          parentClientConfig: init.parentClientConfig,
          profile: profileName
        });
      }
    }, "fromSSO");
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/client-sts/dist-cjs/auth/httpAuthSchemeProvider.js
var require_httpAuthSchemeProvider8 = __commonJS({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/client-sts/dist-cjs/auth/httpAuthSchemeProvider.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.resolveHttpAuthSchemeConfig = exports6.resolveStsAuthConfig = exports6.defaultSTSHttpAuthSchemeProvider = exports6.defaultSTSHttpAuthSchemeParametersProvider = void 0;
    var core_1 = (init_dist_es3(), __toCommonJS(dist_es_exports3));
    var util_middleware_1 = require_dist_cjs6();
    var STSClient_1 = require_STSClient2();
    var defaultSTSHttpAuthSchemeParametersProvider = async (config2, context, input) => {
      return {
        operation: (0, util_middleware_1.getSmithyContext)(context).operation,
        region: await (0, util_middleware_1.normalizeProvider)(config2.region)() || (() => {
          throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
        })()
      };
    };
    exports6.defaultSTSHttpAuthSchemeParametersProvider = defaultSTSHttpAuthSchemeParametersProvider;
    function createAwsAuthSigv4HttpAuthOption(authParameters) {
      return {
        schemeId: "aws.auth#sigv4",
        signingProperties: {
          name: "sts",
          region: authParameters.region
        },
        propertiesExtractor: (config2, context) => ({
          signingProperties: {
            config: config2,
            context
          }
        })
      };
    }
    function createSmithyApiNoAuthHttpAuthOption(authParameters) {
      return {
        schemeId: "smithy.api#noAuth"
      };
    }
    var defaultSTSHttpAuthSchemeProvider = (authParameters) => {
      const options = [];
      switch (authParameters.operation) {
        case "AssumeRoleWithSAML": {
          options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
          break;
        }
        case "AssumeRoleWithWebIdentity": {
          options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
          break;
        }
        default: {
          options.push(createAwsAuthSigv4HttpAuthOption(authParameters));
        }
      }
      return options;
    };
    exports6.defaultSTSHttpAuthSchemeProvider = defaultSTSHttpAuthSchemeProvider;
    var resolveStsAuthConfig = (input) => ({
      ...input,
      stsClientCtor: STSClient_1.STSClient
    });
    exports6.resolveStsAuthConfig = resolveStsAuthConfig;
    var resolveHttpAuthSchemeConfig = (config2) => {
      const config_0 = (0, exports6.resolveStsAuthConfig)(config2);
      const config_1 = (0, core_1.resolveAwsSdkSigV4Config)(config_0);
      return {
        ...config_1
      };
    };
    exports6.resolveHttpAuthSchemeConfig = resolveHttpAuthSchemeConfig;
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/EndpointParameters.js
var require_EndpointParameters2 = __commonJS({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/EndpointParameters.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.commonParams = exports6.resolveClientEndpointParameters = void 0;
    var resolveClientEndpointParameters = (options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        useGlobalEndpoint: options.useGlobalEndpoint ?? false,
        defaultSigningName: "sts"
      };
    };
    exports6.resolveClientEndpointParameters = resolveClientEndpointParameters;
    exports6.commonParams = {
      UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/client-sts/package.json
var require_package8 = __commonJS({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/client-sts/package.json"(exports6, module) {
    module.exports = {
      name: "@aws-sdk/client-sts",
      description: "AWS SDK for JavaScript Sts Client for Node.js, Browser and React Native",
      version: "3.716.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "node ../../scripts/compilation/inline client-sts",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "rimraf ./dist-types tsconfig.types.tsbuildinfo && tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "extract:docs": "api-extractor run --local",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo sts",
        test: "yarn g:vitest run",
        "test:watch": "yarn g:vitest watch"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "5.2.0",
        "@aws-crypto/sha256-js": "5.2.0",
        "@aws-sdk/client-sso-oidc": "3.716.0",
        "@aws-sdk/core": "3.716.0",
        "@aws-sdk/credential-provider-node": "3.716.0",
        "@aws-sdk/middleware-host-header": "3.714.0",
        "@aws-sdk/middleware-logger": "3.714.0",
        "@aws-sdk/middleware-recursion-detection": "3.714.0",
        "@aws-sdk/middleware-user-agent": "3.716.0",
        "@aws-sdk/region-config-resolver": "3.714.0",
        "@aws-sdk/types": "3.714.0",
        "@aws-sdk/util-endpoints": "3.714.0",
        "@aws-sdk/util-user-agent-browser": "3.714.0",
        "@aws-sdk/util-user-agent-node": "3.716.0",
        "@smithy/config-resolver": "^3.0.13",
        "@smithy/core": "^2.5.5",
        "@smithy/fetch-http-handler": "^4.1.2",
        "@smithy/hash-node": "^3.0.11",
        "@smithy/invalid-dependency": "^3.0.11",
        "@smithy/middleware-content-length": "^3.0.13",
        "@smithy/middleware-endpoint": "^3.2.6",
        "@smithy/middleware-retry": "^3.0.31",
        "@smithy/middleware-serde": "^3.0.11",
        "@smithy/middleware-stack": "^3.0.11",
        "@smithy/node-config-provider": "^3.1.12",
        "@smithy/node-http-handler": "^3.3.2",
        "@smithy/protocol-http": "^4.1.8",
        "@smithy/smithy-client": "^3.5.1",
        "@smithy/types": "^3.7.2",
        "@smithy/url-parser": "^3.0.11",
        "@smithy/util-base64": "^3.0.0",
        "@smithy/util-body-length-browser": "^3.0.0",
        "@smithy/util-body-length-node": "^3.0.0",
        "@smithy/util-defaults-mode-browser": "^3.0.31",
        "@smithy/util-defaults-mode-node": "^3.0.31",
        "@smithy/util-endpoints": "^2.1.7",
        "@smithy/util-middleware": "^3.0.11",
        "@smithy/util-retry": "^3.0.11",
        "@smithy/util-utf8": "^3.0.0",
        tslib: "^2.6.2"
      },
      devDependencies: {
        "@tsconfig/node16": "16.1.3",
        "@types/node": "^16.18.96",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typescript: "~4.9.5"
      },
      engines: {
        node: ">=16.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*/**"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sts",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-sts"
      }
    };
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/ruleset.js
var require_ruleset7 = __commonJS({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/ruleset.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.ruleSet = void 0;
    var F = "required";
    var G = "type";
    var H = "fn";
    var I = "argv";
    var J = "ref";
    var a = false;
    var b = true;
    var c = "booleanEquals";
    var d = "stringEquals";
    var e = "sigv4";
    var f = "sts";
    var g = "us-east-1";
    var h = "endpoint";
    var i = "https://sts.{Region}.{PartitionResult#dnsSuffix}";
    var j = "tree";
    var k = "error";
    var l = "getAttr";
    var m = { [F]: false, [G]: "String" };
    var n = { [F]: true, "default": false, [G]: "Boolean" };
    var o = { [J]: "Endpoint" };
    var p = { [H]: "isSet", [I]: [{ [J]: "Region" }] };
    var q = { [J]: "Region" };
    var r = { [H]: "aws.partition", [I]: [q], "assign": "PartitionResult" };
    var s = { [J]: "UseFIPS" };
    var t = { [J]: "UseDualStack" };
    var u = { "url": "https://sts.amazonaws.com", "properties": { "authSchemes": [{ "name": e, "signingName": f, "signingRegion": g }] }, "headers": {} };
    var v = {};
    var w = { "conditions": [{ [H]: d, [I]: [q, "aws-global"] }], [h]: u, [G]: h };
    var x = { [H]: c, [I]: [s, true] };
    var y = { [H]: c, [I]: [t, true] };
    var z = { [H]: l, [I]: [{ [J]: "PartitionResult" }, "supportsFIPS"] };
    var A = { [J]: "PartitionResult" };
    var B = { [H]: c, [I]: [true, { [H]: l, [I]: [A, "supportsDualStack"] }] };
    var C = [{ [H]: "isSet", [I]: [o] }];
    var D = [x];
    var E = [y];
    var _data = { version: "1.0", parameters: { Region: m, UseDualStack: n, UseFIPS: n, Endpoint: m, UseGlobalEndpoint: n }, rules: [{ conditions: [{ [H]: c, [I]: [{ [J]: "UseGlobalEndpoint" }, b] }, { [H]: "not", [I]: C }, p, r, { [H]: c, [I]: [s, a] }, { [H]: c, [I]: [t, a] }], rules: [{ conditions: [{ [H]: d, [I]: [q, "ap-northeast-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "ap-south-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "ap-southeast-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "ap-southeast-2"] }], endpoint: u, [G]: h }, w, { conditions: [{ [H]: d, [I]: [q, "ca-central-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "eu-central-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "eu-north-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "eu-west-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "eu-west-2"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "eu-west-3"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "sa-east-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, g] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "us-east-2"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "us-west-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "us-west-2"] }], endpoint: u, [G]: h }, { endpoint: { url: i, properties: { authSchemes: [{ name: e, signingName: f, signingRegion: "{Region}" }] }, headers: v }, [G]: h }], [G]: j }, { conditions: C, rules: [{ conditions: D, error: "Invalid Configuration: FIPS and custom endpoint are not supported", [G]: k }, { conditions: E, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", [G]: k }, { endpoint: { url: o, properties: v, headers: v }, [G]: h }], [G]: j }, { conditions: [p], rules: [{ conditions: [r], rules: [{ conditions: [x, y], rules: [{ conditions: [{ [H]: c, [I]: [b, z] }, B], rules: [{ endpoint: { url: "https://sts-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: v, headers: v }, [G]: h }], [G]: j }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", [G]: k }], [G]: j }, { conditions: D, rules: [{ conditions: [{ [H]: c, [I]: [z, b] }], rules: [{ conditions: [{ [H]: d, [I]: [{ [H]: l, [I]: [A, "name"] }, "aws-us-gov"] }], endpoint: { url: "https://sts.{Region}.amazonaws.com", properties: v, headers: v }, [G]: h }, { endpoint: { url: "https://sts-fips.{Region}.{PartitionResult#dnsSuffix}", properties: v, headers: v }, [G]: h }], [G]: j }, { error: "FIPS is enabled but this partition does not support FIPS", [G]: k }], [G]: j }, { conditions: E, rules: [{ conditions: [B], rules: [{ endpoint: { url: "https://sts.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: v, headers: v }, [G]: h }], [G]: j }, { error: "DualStack is enabled but this partition does not support DualStack", [G]: k }], [G]: j }, w, { endpoint: { url: i, properties: v, headers: v }, [G]: h }], [G]: j }], [G]: j }, { error: "Invalid Configuration: Missing Region", [G]: k }] };
    exports6.ruleSet = _data;
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver7 = __commonJS({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/endpointResolver.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs63();
    var util_endpoints_2 = require_dist_cjs18();
    var ruleset_1 = require_ruleset7();
    var cache = new util_endpoints_2.EndpointCache({
      size: 50,
      params: ["Endpoint", "Region", "UseDualStack", "UseFIPS", "UseGlobalEndpoint"]
    });
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return cache.get(endpointParams, () => (0, util_endpoints_2.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      }));
    };
    exports6.defaultEndpointResolver = defaultEndpointResolver;
    util_endpoints_2.customEndpointFunctions.aws = util_endpoints_1.awsEndpointFunctions;
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared7 = __commonJS({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.shared.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.getRuntimeConfig = void 0;
    var core_1 = (init_dist_es3(), __toCommonJS(dist_es_exports3));
    var core_2 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var smithy_client_1 = require_dist_cjs23();
    var url_parser_1 = require_dist_cjs31();
    var util_base64_1 = require_dist_cjs11();
    var util_utf8_1 = require_dist_cjs10();
    var httpAuthSchemeProvider_1 = require_httpAuthSchemeProvider8();
    var endpointResolver_1 = require_endpointResolver7();
    var getRuntimeConfig = (config2) => {
      return {
        apiVersion: "2011-06-15",
        base64Decoder: config2?.base64Decoder ?? util_base64_1.fromBase64,
        base64Encoder: config2?.base64Encoder ?? util_base64_1.toBase64,
        disableHostPrefix: config2?.disableHostPrefix ?? false,
        endpointProvider: config2?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
        extensions: config2?.extensions ?? [],
        httpAuthSchemeProvider: config2?.httpAuthSchemeProvider ?? httpAuthSchemeProvider_1.defaultSTSHttpAuthSchemeProvider,
        httpAuthSchemes: config2?.httpAuthSchemes ?? [
          {
            schemeId: "aws.auth#sigv4",
            identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4"),
            signer: new core_1.AwsSdkSigV4Signer()
          },
          {
            schemeId: "smithy.api#noAuth",
            identityProvider: (ipc) => ipc.getIdentityProvider("smithy.api#noAuth") || (async () => ({})),
            signer: new core_2.NoAuthSigner()
          }
        ],
        logger: config2?.logger ?? new smithy_client_1.NoOpLogger(),
        serviceId: config2?.serviceId ?? "STS",
        urlParser: config2?.urlParser ?? url_parser_1.parseUrl,
        utf8Decoder: config2?.utf8Decoder ?? util_utf8_1.fromUtf8,
        utf8Encoder: config2?.utf8Encoder ?? util_utf8_1.toUtf8
      };
    };
    exports6.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.js
var require_runtimeConfig7 = __commonJS({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package8());
    var core_1 = (init_dist_es3(), __toCommonJS(dist_es_exports3));
    var credential_provider_node_1 = require_dist_cjs76();
    var util_user_agent_node_1 = require_dist_cjs66();
    var config_resolver_1 = require_dist_cjs26();
    var core_2 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var hash_node_1 = require_dist_cjs37();
    var middleware_retry_1 = require_dist_cjs35();
    var node_config_provider_1 = require_dist_cjs29();
    var node_http_handler_1 = require_dist_cjs14();
    var util_body_length_node_1 = require_dist_cjs38();
    var util_retry_1 = require_dist_cjs34();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared7();
    var smithy_client_1 = require_dist_cjs23();
    var util_defaults_mode_node_1 = require_dist_cjs40();
    var smithy_client_2 = require_dist_cjs23();
    var getRuntimeConfig = (config2) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config2);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config2);
      (0, core_1.emitWarningIfUnsupportedVersion)(process.version);
      const profileConfig = { profile: config2?.profile };
      return {
        ...clientSharedValues,
        ...config2,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config2?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider: config2?.credentialDefaultProvider ?? credential_provider_node_1.defaultProvider,
        defaultUserAgentProvider: config2?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.createDefaultUserAgentProvider)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        httpAuthSchemes: config2?.httpAuthSchemes ?? [
          {
            schemeId: "aws.auth#sigv4",
            identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4") || (async (idProps) => await (0, credential_provider_node_1.defaultProvider)(idProps?.__config || {})()),
            signer: new core_1.AwsSdkSigV4Signer()
          },
          {
            schemeId: "smithy.api#noAuth",
            identityProvider: (ipc) => ipc.getIdentityProvider("smithy.api#noAuth") || (async () => ({})),
            signer: new core_2.NoAuthSigner()
          }
        ],
        maxAttempts: config2?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS, config2),
        region: config2?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, { ...config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS, ...profileConfig }),
        requestHandler: node_http_handler_1.NodeHttpHandler.create(config2?.requestHandler ?? defaultConfigProvider),
        retryMode: config2?.retryMode ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }, config2),
        sha256: config2?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: config2?.streamCollector ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: config2?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS, profileConfig),
        useFipsEndpoint: config2?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS, profileConfig),
        userAgentAppId: config2?.userAgentAppId ?? (0, node_config_provider_1.loadConfig)(util_user_agent_node_1.NODE_APP_ID_CONFIG_OPTIONS, profileConfig)
      };
    };
    exports6.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/client-sts/dist-cjs/auth/httpAuthExtensionConfiguration.js
var require_httpAuthExtensionConfiguration2 = __commonJS({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/client-sts/dist-cjs/auth/httpAuthExtensionConfiguration.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.resolveHttpAuthRuntimeConfig = exports6.getHttpAuthExtensionConfiguration = void 0;
    var getHttpAuthExtensionConfiguration = (runtimeConfig) => {
      const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
      let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
      let _credentials = runtimeConfig.credentials;
      return {
        setHttpAuthScheme(httpAuthScheme) {
          const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
          if (index === -1) {
            _httpAuthSchemes.push(httpAuthScheme);
          } else {
            _httpAuthSchemes.splice(index, 1, httpAuthScheme);
          }
        },
        httpAuthSchemes() {
          return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
          _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
          return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
          _credentials = credentials;
        },
        credentials() {
          return _credentials;
        }
      };
    };
    exports6.getHttpAuthExtensionConfiguration = getHttpAuthExtensionConfiguration;
    var resolveHttpAuthRuntimeConfig = (config2) => {
      return {
        httpAuthSchemes: config2.httpAuthSchemes(),
        httpAuthSchemeProvider: config2.httpAuthSchemeProvider(),
        credentials: config2.credentials()
      };
    };
    exports6.resolveHttpAuthRuntimeConfig = resolveHttpAuthRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/client-sts/dist-cjs/runtimeExtensions.js
var require_runtimeExtensions2 = __commonJS({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/client-sts/dist-cjs/runtimeExtensions.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.resolveRuntimeExtensions = void 0;
    var region_config_resolver_1 = require_dist_cjs67();
    var protocol_http_1 = require_dist_cjs2();
    var smithy_client_1 = require_dist_cjs23();
    var httpAuthExtensionConfiguration_1 = require_httpAuthExtensionConfiguration2();
    var asPartial = (t) => t;
    var resolveRuntimeExtensions = (runtimeConfig, extensions) => {
      const extensionConfiguration = {
        ...asPartial((0, region_config_resolver_1.getAwsRegionExtensionConfiguration)(runtimeConfig)),
        ...asPartial((0, smithy_client_1.getDefaultExtensionConfiguration)(runtimeConfig)),
        ...asPartial((0, protocol_http_1.getHttpHandlerExtensionConfiguration)(runtimeConfig)),
        ...asPartial((0, httpAuthExtensionConfiguration_1.getHttpAuthExtensionConfiguration)(runtimeConfig))
      };
      extensions.forEach((extension) => extension.configure(extensionConfiguration));
      return {
        ...runtimeConfig,
        ...(0, region_config_resolver_1.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
        ...(0, smithy_client_1.resolveDefaultRuntimeConfig)(extensionConfiguration),
        ...(0, protocol_http_1.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),
        ...(0, httpAuthExtensionConfiguration_1.resolveHttpAuthRuntimeConfig)(extensionConfiguration)
      };
    };
    exports6.resolveRuntimeExtensions = resolveRuntimeExtensions;
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/client-sts/dist-cjs/STSClient.js
var require_STSClient2 = __commonJS({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/client-sts/dist-cjs/STSClient.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.STSClient = exports6.__Client = void 0;
    var middleware_host_header_1 = require_dist_cjs60();
    var middleware_logger_1 = require_dist_cjs61();
    var middleware_recursion_detection_1 = require_dist_cjs62();
    var middleware_user_agent_1 = require_dist_cjs64();
    var config_resolver_1 = require_dist_cjs26();
    var core_1 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var middleware_content_length_1 = require_dist_cjs27();
    var middleware_endpoint_1 = require_dist_cjs32();
    var middleware_retry_1 = require_dist_cjs35();
    var smithy_client_1 = require_dist_cjs23();
    Object.defineProperty(exports6, "__Client", { enumerable: true, get: function() {
      return smithy_client_1.Client;
    } });
    var httpAuthSchemeProvider_1 = require_httpAuthSchemeProvider8();
    var EndpointParameters_1 = require_EndpointParameters2();
    var runtimeConfig_1 = require_runtimeConfig7();
    var runtimeExtensions_1 = require_runtimeExtensions2();
    var STSClient2 = class extends smithy_client_1.Client {
      constructor(...[configuration]) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration || {});
        const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_1);
        const _config_3 = (0, middleware_retry_1.resolveRetryConfig)(_config_2);
        const _config_4 = (0, config_resolver_1.resolveRegionConfig)(_config_3);
        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_5);
        const _config_7 = (0, httpAuthSchemeProvider_1.resolveHttpAuthSchemeConfig)(_config_6);
        const _config_8 = (0, runtimeExtensions_1.resolveRuntimeExtensions)(_config_7, configuration?.extensions || []);
        super(_config_8);
        this.config = _config_8;
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, core_1.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
          httpAuthSchemeParametersProvider: httpAuthSchemeProvider_1.defaultSTSHttpAuthSchemeParametersProvider,
          identityProviderConfigProvider: async (config2) => new core_1.DefaultIdentityProviderConfig({
            "aws.auth#sigv4": config2.credentials
          })
        }));
        this.middlewareStack.use((0, core_1.getHttpSigningPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports6.STSClient = STSClient2;
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/client-sts/dist-cjs/index.js
var require_dist_cjs72 = __commonJS({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/client-sts/dist-cjs/index.js"(exports6, module) {
    "use strict";
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __reExport = (target, mod, secondTarget) => (__copyProps3(target, mod, "default"), secondTarget && __copyProps3(secondTarget, mod, "default"));
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      AssumeRoleCommand: () => AssumeRoleCommand,
      AssumeRoleResponseFilterSensitiveLog: () => AssumeRoleResponseFilterSensitiveLog,
      AssumeRoleWithSAMLCommand: () => AssumeRoleWithSAMLCommand,
      AssumeRoleWithSAMLRequestFilterSensitiveLog: () => AssumeRoleWithSAMLRequestFilterSensitiveLog,
      AssumeRoleWithSAMLResponseFilterSensitiveLog: () => AssumeRoleWithSAMLResponseFilterSensitiveLog,
      AssumeRoleWithWebIdentityCommand: () => AssumeRoleWithWebIdentityCommand,
      AssumeRoleWithWebIdentityRequestFilterSensitiveLog: () => AssumeRoleWithWebIdentityRequestFilterSensitiveLog,
      AssumeRoleWithWebIdentityResponseFilterSensitiveLog: () => AssumeRoleWithWebIdentityResponseFilterSensitiveLog,
      AssumeRootCommand: () => AssumeRootCommand,
      AssumeRootResponseFilterSensitiveLog: () => AssumeRootResponseFilterSensitiveLog,
      ClientInputEndpointParameters: () => import_EndpointParameters10.ClientInputEndpointParameters,
      CredentialsFilterSensitiveLog: () => CredentialsFilterSensitiveLog,
      DecodeAuthorizationMessageCommand: () => DecodeAuthorizationMessageCommand,
      ExpiredTokenException: () => ExpiredTokenException,
      GetAccessKeyInfoCommand: () => GetAccessKeyInfoCommand,
      GetCallerIdentityCommand: () => GetCallerIdentityCommand,
      GetFederationTokenCommand: () => GetFederationTokenCommand,
      GetFederationTokenResponseFilterSensitiveLog: () => GetFederationTokenResponseFilterSensitiveLog,
      GetSessionTokenCommand: () => GetSessionTokenCommand,
      GetSessionTokenResponseFilterSensitiveLog: () => GetSessionTokenResponseFilterSensitiveLog,
      IDPCommunicationErrorException: () => IDPCommunicationErrorException,
      IDPRejectedClaimException: () => IDPRejectedClaimException,
      InvalidAuthorizationMessageException: () => InvalidAuthorizationMessageException,
      InvalidIdentityTokenException: () => InvalidIdentityTokenException,
      MalformedPolicyDocumentException: () => MalformedPolicyDocumentException,
      PackedPolicyTooLargeException: () => PackedPolicyTooLargeException,
      RegionDisabledException: () => RegionDisabledException,
      STS: () => STS,
      STSServiceException: () => STSServiceException,
      decorateDefaultCredentialProvider: () => decorateDefaultCredentialProvider,
      getDefaultRoleAssumer: () => getDefaultRoleAssumer2,
      getDefaultRoleAssumerWithWebIdentity: () => getDefaultRoleAssumerWithWebIdentity2
    });
    module.exports = __toCommonJS3(src_exports);
    __reExport(src_exports, require_STSClient2(), module.exports);
    var import_middleware_endpoint = require_dist_cjs32();
    var import_middleware_serde2 = require_dist_cjs7();
    var import_EndpointParameters = require_EndpointParameters2();
    var import_smithy_client7 = require_dist_cjs23();
    var _STSServiceException = class _STSServiceException2 extends import_smithy_client7.ServiceException {
      /**
       * @internal
       */
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, _STSServiceException2.prototype);
      }
    };
    __name(_STSServiceException, "STSServiceException");
    var STSServiceException = _STSServiceException;
    var _ExpiredTokenException = class _ExpiredTokenException2 extends STSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ExpiredTokenException",
          $fault: "client",
          ...opts
        });
        this.name = "ExpiredTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ExpiredTokenException2.prototype);
      }
    };
    __name(_ExpiredTokenException, "ExpiredTokenException");
    var ExpiredTokenException = _ExpiredTokenException;
    var _MalformedPolicyDocumentException = class _MalformedPolicyDocumentException2 extends STSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "MalformedPolicyDocumentException",
          $fault: "client",
          ...opts
        });
        this.name = "MalformedPolicyDocumentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _MalformedPolicyDocumentException2.prototype);
      }
    };
    __name(_MalformedPolicyDocumentException, "MalformedPolicyDocumentException");
    var MalformedPolicyDocumentException = _MalformedPolicyDocumentException;
    var _PackedPolicyTooLargeException = class _PackedPolicyTooLargeException2 extends STSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "PackedPolicyTooLargeException",
          $fault: "client",
          ...opts
        });
        this.name = "PackedPolicyTooLargeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _PackedPolicyTooLargeException2.prototype);
      }
    };
    __name(_PackedPolicyTooLargeException, "PackedPolicyTooLargeException");
    var PackedPolicyTooLargeException = _PackedPolicyTooLargeException;
    var _RegionDisabledException = class _RegionDisabledException2 extends STSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "RegionDisabledException",
          $fault: "client",
          ...opts
        });
        this.name = "RegionDisabledException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _RegionDisabledException2.prototype);
      }
    };
    __name(_RegionDisabledException, "RegionDisabledException");
    var RegionDisabledException = _RegionDisabledException;
    var _IDPRejectedClaimException = class _IDPRejectedClaimException2 extends STSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "IDPRejectedClaimException",
          $fault: "client",
          ...opts
        });
        this.name = "IDPRejectedClaimException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _IDPRejectedClaimException2.prototype);
      }
    };
    __name(_IDPRejectedClaimException, "IDPRejectedClaimException");
    var IDPRejectedClaimException = _IDPRejectedClaimException;
    var _InvalidIdentityTokenException = class _InvalidIdentityTokenException2 extends STSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidIdentityTokenException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidIdentityTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidIdentityTokenException2.prototype);
      }
    };
    __name(_InvalidIdentityTokenException, "InvalidIdentityTokenException");
    var InvalidIdentityTokenException = _InvalidIdentityTokenException;
    var _IDPCommunicationErrorException = class _IDPCommunicationErrorException2 extends STSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "IDPCommunicationErrorException",
          $fault: "client",
          ...opts
        });
        this.name = "IDPCommunicationErrorException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _IDPCommunicationErrorException2.prototype);
      }
    };
    __name(_IDPCommunicationErrorException, "IDPCommunicationErrorException");
    var IDPCommunicationErrorException = _IDPCommunicationErrorException;
    var _InvalidAuthorizationMessageException = class _InvalidAuthorizationMessageException2 extends STSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidAuthorizationMessageException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidAuthorizationMessageException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidAuthorizationMessageException2.prototype);
      }
    };
    __name(_InvalidAuthorizationMessageException, "InvalidAuthorizationMessageException");
    var InvalidAuthorizationMessageException = _InvalidAuthorizationMessageException;
    var CredentialsFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.SecretAccessKey && { SecretAccessKey: import_smithy_client7.SENSITIVE_STRING }
    }), "CredentialsFilterSensitiveLog");
    var AssumeRoleResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) }
    }), "AssumeRoleResponseFilterSensitiveLog");
    var AssumeRoleWithSAMLRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.SAMLAssertion && { SAMLAssertion: import_smithy_client7.SENSITIVE_STRING }
    }), "AssumeRoleWithSAMLRequestFilterSensitiveLog");
    var AssumeRoleWithSAMLResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) }
    }), "AssumeRoleWithSAMLResponseFilterSensitiveLog");
    var AssumeRoleWithWebIdentityRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.WebIdentityToken && { WebIdentityToken: import_smithy_client7.SENSITIVE_STRING }
    }), "AssumeRoleWithWebIdentityRequestFilterSensitiveLog");
    var AssumeRoleWithWebIdentityResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) }
    }), "AssumeRoleWithWebIdentityResponseFilterSensitiveLog");
    var AssumeRootResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) }
    }), "AssumeRootResponseFilterSensitiveLog");
    var GetFederationTokenResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) }
    }), "GetFederationTokenResponseFilterSensitiveLog");
    var GetSessionTokenResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) }
    }), "GetSessionTokenResponseFilterSensitiveLog");
    var import_core5 = (init_dist_es3(), __toCommonJS(dist_es_exports3));
    var import_protocol_http11 = require_dist_cjs2();
    var se_AssumeRoleCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_AssumeRoleRequest(input, context),
        [_A]: _AR,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_AssumeRoleCommand");
    var se_AssumeRoleWithSAMLCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_AssumeRoleWithSAMLRequest(input, context),
        [_A]: _ARWSAML,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_AssumeRoleWithSAMLCommand");
    var se_AssumeRoleWithWebIdentityCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_AssumeRoleWithWebIdentityRequest(input, context),
        [_A]: _ARWWI,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_AssumeRoleWithWebIdentityCommand");
    var se_AssumeRootCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_AssumeRootRequest(input, context),
        [_A]: _ARs,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_AssumeRootCommand");
    var se_DecodeAuthorizationMessageCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DecodeAuthorizationMessageRequest(input, context),
        [_A]: _DAM,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DecodeAuthorizationMessageCommand");
    var se_GetAccessKeyInfoCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_GetAccessKeyInfoRequest(input, context),
        [_A]: _GAKI,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_GetAccessKeyInfoCommand");
    var se_GetCallerIdentityCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_GetCallerIdentityRequest(input, context),
        [_A]: _GCI,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_GetCallerIdentityCommand");
    var se_GetFederationTokenCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_GetFederationTokenRequest(input, context),
        [_A]: _GFT,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_GetFederationTokenCommand");
    var se_GetSessionTokenCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_GetSessionTokenRequest(input, context),
        [_A]: _GST,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_GetSessionTokenCommand");
    var de_AssumeRoleCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core5.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_AssumeRoleResponse(data.AssumeRoleResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_AssumeRoleCommand");
    var de_AssumeRoleWithSAMLCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core5.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_AssumeRoleWithSAMLResponse(data.AssumeRoleWithSAMLResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_AssumeRoleWithSAMLCommand");
    var de_AssumeRoleWithWebIdentityCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core5.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_AssumeRoleWithWebIdentityResponse(data.AssumeRoleWithWebIdentityResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_AssumeRoleWithWebIdentityCommand");
    var de_AssumeRootCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core5.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_AssumeRootResponse(data.AssumeRootResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_AssumeRootCommand");
    var de_DecodeAuthorizationMessageCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core5.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_DecodeAuthorizationMessageResponse(data.DecodeAuthorizationMessageResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DecodeAuthorizationMessageCommand");
    var de_GetAccessKeyInfoCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core5.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_GetAccessKeyInfoResponse(data.GetAccessKeyInfoResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_GetAccessKeyInfoCommand");
    var de_GetCallerIdentityCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core5.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_GetCallerIdentityResponse(data.GetCallerIdentityResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_GetCallerIdentityCommand");
    var de_GetFederationTokenCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core5.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_GetFederationTokenResponse(data.GetFederationTokenResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_GetFederationTokenCommand");
    var de_GetSessionTokenCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core5.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_GetSessionTokenResponse(data.GetSessionTokenResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_GetSessionTokenCommand");
    var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await (0, import_core5.parseXmlErrorBody)(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ExpiredTokenException":
        case "com.amazonaws.sts#ExpiredTokenException":
          throw await de_ExpiredTokenExceptionRes(parsedOutput, context);
        case "MalformedPolicyDocument":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);
        case "PackedPolicyTooLarge":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw await de_PackedPolicyTooLargeExceptionRes(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await de_RegionDisabledExceptionRes(parsedOutput, context);
        case "IDPRejectedClaim":
        case "com.amazonaws.sts#IDPRejectedClaimException":
          throw await de_IDPRejectedClaimExceptionRes(parsedOutput, context);
        case "InvalidIdentityToken":
        case "com.amazonaws.sts#InvalidIdentityTokenException":
          throw await de_InvalidIdentityTokenExceptionRes(parsedOutput, context);
        case "IDPCommunicationError":
        case "com.amazonaws.sts#IDPCommunicationErrorException":
          throw await de_IDPCommunicationErrorExceptionRes(parsedOutput, context);
        case "InvalidAuthorizationMessageException":
        case "com.amazonaws.sts#InvalidAuthorizationMessageException":
          throw await de_InvalidAuthorizationMessageExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    }, "de_CommandError");
    var de_ExpiredTokenExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_ExpiredTokenException(body.Error, context);
      const exception = new ExpiredTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, body);
    }, "de_ExpiredTokenExceptionRes");
    var de_IDPCommunicationErrorExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_IDPCommunicationErrorException(body.Error, context);
      const exception = new IDPCommunicationErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, body);
    }, "de_IDPCommunicationErrorExceptionRes");
    var de_IDPRejectedClaimExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_IDPRejectedClaimException(body.Error, context);
      const exception = new IDPRejectedClaimException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, body);
    }, "de_IDPRejectedClaimExceptionRes");
    var de_InvalidAuthorizationMessageExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_InvalidAuthorizationMessageException(body.Error, context);
      const exception = new InvalidAuthorizationMessageException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, body);
    }, "de_InvalidAuthorizationMessageExceptionRes");
    var de_InvalidIdentityTokenExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_InvalidIdentityTokenException(body.Error, context);
      const exception = new InvalidIdentityTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, body);
    }, "de_InvalidIdentityTokenExceptionRes");
    var de_MalformedPolicyDocumentExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_MalformedPolicyDocumentException(body.Error, context);
      const exception = new MalformedPolicyDocumentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, body);
    }, "de_MalformedPolicyDocumentExceptionRes");
    var de_PackedPolicyTooLargeExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_PackedPolicyTooLargeException(body.Error, context);
      const exception = new PackedPolicyTooLargeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, body);
    }, "de_PackedPolicyTooLargeExceptionRes");
    var de_RegionDisabledExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_RegionDisabledException(body.Error, context);
      const exception = new RegionDisabledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, body);
    }, "de_RegionDisabledExceptionRes");
    var se_AssumeRoleRequest = /* @__PURE__ */ __name((input, context) => {
      var _a2, _b, _c, _d;
      const entries = {};
      if (input[_RA] != null) {
        entries[_RA] = input[_RA];
      }
      if (input[_RSN] != null) {
        entries[_RSN] = input[_RSN];
      }
      if (input[_PA] != null) {
        const memberEntries = se_policyDescriptorListType(input[_PA], context);
        if (((_a2 = input[_PA]) == null ? void 0 : _a2.length) === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_P] != null) {
        entries[_P] = input[_P];
      }
      if (input[_DS] != null) {
        entries[_DS] = input[_DS];
      }
      if (input[_T] != null) {
        const memberEntries = se_tagListType(input[_T], context);
        if (((_b = input[_T]) == null ? void 0 : _b.length) === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_TTK] != null) {
        const memberEntries = se_tagKeyListType(input[_TTK], context);
        if (((_c = input[_TTK]) == null ? void 0 : _c.length) === 0) {
          entries.TransitiveTagKeys = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `TransitiveTagKeys.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_EI] != null) {
        entries[_EI] = input[_EI];
      }
      if (input[_SN] != null) {
        entries[_SN] = input[_SN];
      }
      if (input[_TC] != null) {
        entries[_TC] = input[_TC];
      }
      if (input[_SI] != null) {
        entries[_SI] = input[_SI];
      }
      if (input[_PC] != null) {
        const memberEntries = se_ProvidedContextsListType(input[_PC], context);
        if (((_d = input[_PC]) == null ? void 0 : _d.length) === 0) {
          entries.ProvidedContexts = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ProvidedContexts.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    }, "se_AssumeRoleRequest");
    var se_AssumeRoleWithSAMLRequest = /* @__PURE__ */ __name((input, context) => {
      var _a2;
      const entries = {};
      if (input[_RA] != null) {
        entries[_RA] = input[_RA];
      }
      if (input[_PAr] != null) {
        entries[_PAr] = input[_PAr];
      }
      if (input[_SAMLA] != null) {
        entries[_SAMLA] = input[_SAMLA];
      }
      if (input[_PA] != null) {
        const memberEntries = se_policyDescriptorListType(input[_PA], context);
        if (((_a2 = input[_PA]) == null ? void 0 : _a2.length) === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_P] != null) {
        entries[_P] = input[_P];
      }
      if (input[_DS] != null) {
        entries[_DS] = input[_DS];
      }
      return entries;
    }, "se_AssumeRoleWithSAMLRequest");
    var se_AssumeRoleWithWebIdentityRequest = /* @__PURE__ */ __name((input, context) => {
      var _a2;
      const entries = {};
      if (input[_RA] != null) {
        entries[_RA] = input[_RA];
      }
      if (input[_RSN] != null) {
        entries[_RSN] = input[_RSN];
      }
      if (input[_WIT] != null) {
        entries[_WIT] = input[_WIT];
      }
      if (input[_PI] != null) {
        entries[_PI] = input[_PI];
      }
      if (input[_PA] != null) {
        const memberEntries = se_policyDescriptorListType(input[_PA], context);
        if (((_a2 = input[_PA]) == null ? void 0 : _a2.length) === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_P] != null) {
        entries[_P] = input[_P];
      }
      if (input[_DS] != null) {
        entries[_DS] = input[_DS];
      }
      return entries;
    }, "se_AssumeRoleWithWebIdentityRequest");
    var se_AssumeRootRequest = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_TP] != null) {
        entries[_TP] = input[_TP];
      }
      if (input[_TPA] != null) {
        const memberEntries = se_PolicyDescriptorType(input[_TPA], context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `TaskPolicyArn.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_DS] != null) {
        entries[_DS] = input[_DS];
      }
      return entries;
    }, "se_AssumeRootRequest");
    var se_DecodeAuthorizationMessageRequest = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_EM] != null) {
        entries[_EM] = input[_EM];
      }
      return entries;
    }, "se_DecodeAuthorizationMessageRequest");
    var se_GetAccessKeyInfoRequest = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_AKI] != null) {
        entries[_AKI] = input[_AKI];
      }
      return entries;
    }, "se_GetAccessKeyInfoRequest");
    var se_GetCallerIdentityRequest = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      return entries;
    }, "se_GetCallerIdentityRequest");
    var se_GetFederationTokenRequest = /* @__PURE__ */ __name((input, context) => {
      var _a2, _b;
      const entries = {};
      if (input[_N] != null) {
        entries[_N] = input[_N];
      }
      if (input[_P] != null) {
        entries[_P] = input[_P];
      }
      if (input[_PA] != null) {
        const memberEntries = se_policyDescriptorListType(input[_PA], context);
        if (((_a2 = input[_PA]) == null ? void 0 : _a2.length) === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_DS] != null) {
        entries[_DS] = input[_DS];
      }
      if (input[_T] != null) {
        const memberEntries = se_tagListType(input[_T], context);
        if (((_b = input[_T]) == null ? void 0 : _b.length) === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    }, "se_GetFederationTokenRequest");
    var se_GetSessionTokenRequest = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_DS] != null) {
        entries[_DS] = input[_DS];
      }
      if (input[_SN] != null) {
        entries[_SN] = input[_SN];
      }
      if (input[_TC] != null) {
        entries[_TC] = input[_TC];
      }
      return entries;
    }, "se_GetSessionTokenRequest");
    var se_policyDescriptorListType = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = se_PolicyDescriptorType(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    }, "se_policyDescriptorListType");
    var se_PolicyDescriptorType = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_a] != null) {
        entries[_a] = input[_a];
      }
      return entries;
    }, "se_PolicyDescriptorType");
    var se_ProvidedContext = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_PAro] != null) {
        entries[_PAro] = input[_PAro];
      }
      if (input[_CA] != null) {
        entries[_CA] = input[_CA];
      }
      return entries;
    }, "se_ProvidedContext");
    var se_ProvidedContextsListType = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = se_ProvidedContext(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    }, "se_ProvidedContextsListType");
    var se_Tag = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_K] != null) {
        entries[_K] = input[_K];
      }
      if (input[_Va] != null) {
        entries[_Va] = input[_Va];
      }
      return entries;
    }, "se_Tag");
    var se_tagKeyListType = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    }, "se_tagKeyListType");
    var se_tagListType = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = se_Tag(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    }, "se_tagListType");
    var de_AssumedRoleUser = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_ARI] != null) {
        contents[_ARI] = (0, import_smithy_client7.expectString)(output[_ARI]);
      }
      if (output[_Ar] != null) {
        contents[_Ar] = (0, import_smithy_client7.expectString)(output[_Ar]);
      }
      return contents;
    }, "de_AssumedRoleUser");
    var de_AssumeRoleResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_C] != null) {
        contents[_C] = de_Credentials(output[_C], context);
      }
      if (output[_ARU] != null) {
        contents[_ARU] = de_AssumedRoleUser(output[_ARU], context);
      }
      if (output[_PPS] != null) {
        contents[_PPS] = (0, import_smithy_client7.strictParseInt32)(output[_PPS]);
      }
      if (output[_SI] != null) {
        contents[_SI] = (0, import_smithy_client7.expectString)(output[_SI]);
      }
      return contents;
    }, "de_AssumeRoleResponse");
    var de_AssumeRoleWithSAMLResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_C] != null) {
        contents[_C] = de_Credentials(output[_C], context);
      }
      if (output[_ARU] != null) {
        contents[_ARU] = de_AssumedRoleUser(output[_ARU], context);
      }
      if (output[_PPS] != null) {
        contents[_PPS] = (0, import_smithy_client7.strictParseInt32)(output[_PPS]);
      }
      if (output[_S] != null) {
        contents[_S] = (0, import_smithy_client7.expectString)(output[_S]);
      }
      if (output[_ST] != null) {
        contents[_ST] = (0, import_smithy_client7.expectString)(output[_ST]);
      }
      if (output[_I] != null) {
        contents[_I] = (0, import_smithy_client7.expectString)(output[_I]);
      }
      if (output[_Au] != null) {
        contents[_Au] = (0, import_smithy_client7.expectString)(output[_Au]);
      }
      if (output[_NQ] != null) {
        contents[_NQ] = (0, import_smithy_client7.expectString)(output[_NQ]);
      }
      if (output[_SI] != null) {
        contents[_SI] = (0, import_smithy_client7.expectString)(output[_SI]);
      }
      return contents;
    }, "de_AssumeRoleWithSAMLResponse");
    var de_AssumeRoleWithWebIdentityResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_C] != null) {
        contents[_C] = de_Credentials(output[_C], context);
      }
      if (output[_SFWIT] != null) {
        contents[_SFWIT] = (0, import_smithy_client7.expectString)(output[_SFWIT]);
      }
      if (output[_ARU] != null) {
        contents[_ARU] = de_AssumedRoleUser(output[_ARU], context);
      }
      if (output[_PPS] != null) {
        contents[_PPS] = (0, import_smithy_client7.strictParseInt32)(output[_PPS]);
      }
      if (output[_Pr] != null) {
        contents[_Pr] = (0, import_smithy_client7.expectString)(output[_Pr]);
      }
      if (output[_Au] != null) {
        contents[_Au] = (0, import_smithy_client7.expectString)(output[_Au]);
      }
      if (output[_SI] != null) {
        contents[_SI] = (0, import_smithy_client7.expectString)(output[_SI]);
      }
      return contents;
    }, "de_AssumeRoleWithWebIdentityResponse");
    var de_AssumeRootResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_C] != null) {
        contents[_C] = de_Credentials(output[_C], context);
      }
      if (output[_SI] != null) {
        contents[_SI] = (0, import_smithy_client7.expectString)(output[_SI]);
      }
      return contents;
    }, "de_AssumeRootResponse");
    var de_Credentials = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_AKI] != null) {
        contents[_AKI] = (0, import_smithy_client7.expectString)(output[_AKI]);
      }
      if (output[_SAK] != null) {
        contents[_SAK] = (0, import_smithy_client7.expectString)(output[_SAK]);
      }
      if (output[_STe] != null) {
        contents[_STe] = (0, import_smithy_client7.expectString)(output[_STe]);
      }
      if (output[_E] != null) {
        contents[_E] = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.parseRfc3339DateTimeWithOffset)(output[_E]));
      }
      return contents;
    }, "de_Credentials");
    var de_DecodeAuthorizationMessageResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_DM] != null) {
        contents[_DM] = (0, import_smithy_client7.expectString)(output[_DM]);
      }
      return contents;
    }, "de_DecodeAuthorizationMessageResponse");
    var de_ExpiredTokenException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client7.expectString)(output[_m]);
      }
      return contents;
    }, "de_ExpiredTokenException");
    var de_FederatedUser = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_FUI] != null) {
        contents[_FUI] = (0, import_smithy_client7.expectString)(output[_FUI]);
      }
      if (output[_Ar] != null) {
        contents[_Ar] = (0, import_smithy_client7.expectString)(output[_Ar]);
      }
      return contents;
    }, "de_FederatedUser");
    var de_GetAccessKeyInfoResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_Ac] != null) {
        contents[_Ac] = (0, import_smithy_client7.expectString)(output[_Ac]);
      }
      return contents;
    }, "de_GetAccessKeyInfoResponse");
    var de_GetCallerIdentityResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_UI] != null) {
        contents[_UI] = (0, import_smithy_client7.expectString)(output[_UI]);
      }
      if (output[_Ac] != null) {
        contents[_Ac] = (0, import_smithy_client7.expectString)(output[_Ac]);
      }
      if (output[_Ar] != null) {
        contents[_Ar] = (0, import_smithy_client7.expectString)(output[_Ar]);
      }
      return contents;
    }, "de_GetCallerIdentityResponse");
    var de_GetFederationTokenResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_C] != null) {
        contents[_C] = de_Credentials(output[_C], context);
      }
      if (output[_FU] != null) {
        contents[_FU] = de_FederatedUser(output[_FU], context);
      }
      if (output[_PPS] != null) {
        contents[_PPS] = (0, import_smithy_client7.strictParseInt32)(output[_PPS]);
      }
      return contents;
    }, "de_GetFederationTokenResponse");
    var de_GetSessionTokenResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_C] != null) {
        contents[_C] = de_Credentials(output[_C], context);
      }
      return contents;
    }, "de_GetSessionTokenResponse");
    var de_IDPCommunicationErrorException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client7.expectString)(output[_m]);
      }
      return contents;
    }, "de_IDPCommunicationErrorException");
    var de_IDPRejectedClaimException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client7.expectString)(output[_m]);
      }
      return contents;
    }, "de_IDPRejectedClaimException");
    var de_InvalidAuthorizationMessageException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client7.expectString)(output[_m]);
      }
      return contents;
    }, "de_InvalidAuthorizationMessageException");
    var de_InvalidIdentityTokenException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client7.expectString)(output[_m]);
      }
      return contents;
    }, "de_InvalidIdentityTokenException");
    var de_MalformedPolicyDocumentException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client7.expectString)(output[_m]);
      }
      return contents;
    }, "de_MalformedPolicyDocumentException");
    var de_PackedPolicyTooLargeException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client7.expectString)(output[_m]);
      }
      return contents;
    }, "de_PackedPolicyTooLargeException");
    var de_RegionDisabledException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client7.expectString)(output[_m]);
      }
      return contents;
    }, "de_RegionDisabledException");
    var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    }), "deserializeMetadata");
    var throwDefaultError = (0, import_smithy_client7.withBaseException)(STSServiceException);
    var buildHttpRpcRequest = /* @__PURE__ */ __name(async (context, headers, path, resolvedHostname, body) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers
      };
      if (resolvedHostname !== void 0) {
        contents.hostname = resolvedHostname;
      }
      if (body !== void 0) {
        contents.body = body;
      }
      return new import_protocol_http11.HttpRequest(contents);
    }, "buildHttpRpcRequest");
    var SHARED_HEADERS = {
      "content-type": "application/x-www-form-urlencoded"
    };
    var _ = "2011-06-15";
    var _A = "Action";
    var _AKI = "AccessKeyId";
    var _AR = "AssumeRole";
    var _ARI = "AssumedRoleId";
    var _ARU = "AssumedRoleUser";
    var _ARWSAML = "AssumeRoleWithSAML";
    var _ARWWI = "AssumeRoleWithWebIdentity";
    var _ARs = "AssumeRoot";
    var _Ac = "Account";
    var _Ar = "Arn";
    var _Au = "Audience";
    var _C = "Credentials";
    var _CA = "ContextAssertion";
    var _DAM = "DecodeAuthorizationMessage";
    var _DM = "DecodedMessage";
    var _DS = "DurationSeconds";
    var _E = "Expiration";
    var _EI = "ExternalId";
    var _EM = "EncodedMessage";
    var _FU = "FederatedUser";
    var _FUI = "FederatedUserId";
    var _GAKI = "GetAccessKeyInfo";
    var _GCI = "GetCallerIdentity";
    var _GFT = "GetFederationToken";
    var _GST = "GetSessionToken";
    var _I = "Issuer";
    var _K = "Key";
    var _N = "Name";
    var _NQ = "NameQualifier";
    var _P = "Policy";
    var _PA = "PolicyArns";
    var _PAr = "PrincipalArn";
    var _PAro = "ProviderArn";
    var _PC = "ProvidedContexts";
    var _PI = "ProviderId";
    var _PPS = "PackedPolicySize";
    var _Pr = "Provider";
    var _RA = "RoleArn";
    var _RSN = "RoleSessionName";
    var _S = "Subject";
    var _SAK = "SecretAccessKey";
    var _SAMLA = "SAMLAssertion";
    var _SFWIT = "SubjectFromWebIdentityToken";
    var _SI = "SourceIdentity";
    var _SN = "SerialNumber";
    var _ST = "SubjectType";
    var _STe = "SessionToken";
    var _T = "Tags";
    var _TC = "TokenCode";
    var _TP = "TargetPrincipal";
    var _TPA = "TaskPolicyArn";
    var _TTK = "TransitiveTagKeys";
    var _UI = "UserId";
    var _V = "Version";
    var _Va = "Value";
    var _WIT = "WebIdentityToken";
    var _a = "arn";
    var _m = "message";
    var buildFormUrlencodedString = /* @__PURE__ */ __name((formEntries) => Object.entries(formEntries).map(([key, value]) => (0, import_smithy_client7.extendedEncodeURIComponent)(key) + "=" + (0, import_smithy_client7.extendedEncodeURIComponent)(value)).join("&"), "buildFormUrlencodedString");
    var loadQueryErrorCode = /* @__PURE__ */ __name((output, data) => {
      var _a2;
      if (((_a2 = data.Error) == null ? void 0 : _a2.Code) !== void 0) {
        return data.Error.Code;
      }
      if (output.statusCode == 404) {
        return "NotFound";
      }
    }, "loadQueryErrorCode");
    var _AssumeRoleCommand = class _AssumeRoleCommand extends import_smithy_client7.Command.classBuilder().ep(import_EndpointParameters.commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AWSSecurityTokenServiceV20110615", "AssumeRole", {}).n("STSClient", "AssumeRoleCommand").f(void 0, AssumeRoleResponseFilterSensitiveLog).ser(se_AssumeRoleCommand).de(de_AssumeRoleCommand).build() {
    };
    __name(_AssumeRoleCommand, "AssumeRoleCommand");
    var AssumeRoleCommand = _AssumeRoleCommand;
    var import_EndpointParameters2 = require_EndpointParameters2();
    var _AssumeRoleWithSAMLCommand = class _AssumeRoleWithSAMLCommand extends import_smithy_client7.Command.classBuilder().ep(import_EndpointParameters2.commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AWSSecurityTokenServiceV20110615", "AssumeRoleWithSAML", {}).n("STSClient", "AssumeRoleWithSAMLCommand").f(AssumeRoleWithSAMLRequestFilterSensitiveLog, AssumeRoleWithSAMLResponseFilterSensitiveLog).ser(se_AssumeRoleWithSAMLCommand).de(de_AssumeRoleWithSAMLCommand).build() {
    };
    __name(_AssumeRoleWithSAMLCommand, "AssumeRoleWithSAMLCommand");
    var AssumeRoleWithSAMLCommand = _AssumeRoleWithSAMLCommand;
    var import_EndpointParameters3 = require_EndpointParameters2();
    var _AssumeRoleWithWebIdentityCommand = class _AssumeRoleWithWebIdentityCommand extends import_smithy_client7.Command.classBuilder().ep(import_EndpointParameters3.commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AWSSecurityTokenServiceV20110615", "AssumeRoleWithWebIdentity", {}).n("STSClient", "AssumeRoleWithWebIdentityCommand").f(AssumeRoleWithWebIdentityRequestFilterSensitiveLog, AssumeRoleWithWebIdentityResponseFilterSensitiveLog).ser(se_AssumeRoleWithWebIdentityCommand).de(de_AssumeRoleWithWebIdentityCommand).build() {
    };
    __name(_AssumeRoleWithWebIdentityCommand, "AssumeRoleWithWebIdentityCommand");
    var AssumeRoleWithWebIdentityCommand = _AssumeRoleWithWebIdentityCommand;
    var import_EndpointParameters4 = require_EndpointParameters2();
    var _AssumeRootCommand = class _AssumeRootCommand extends import_smithy_client7.Command.classBuilder().ep(import_EndpointParameters4.commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AWSSecurityTokenServiceV20110615", "AssumeRoot", {}).n("STSClient", "AssumeRootCommand").f(void 0, AssumeRootResponseFilterSensitiveLog).ser(se_AssumeRootCommand).de(de_AssumeRootCommand).build() {
    };
    __name(_AssumeRootCommand, "AssumeRootCommand");
    var AssumeRootCommand = _AssumeRootCommand;
    var import_EndpointParameters5 = require_EndpointParameters2();
    var _DecodeAuthorizationMessageCommand = class _DecodeAuthorizationMessageCommand extends import_smithy_client7.Command.classBuilder().ep(import_EndpointParameters5.commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AWSSecurityTokenServiceV20110615", "DecodeAuthorizationMessage", {}).n("STSClient", "DecodeAuthorizationMessageCommand").f(void 0, void 0).ser(se_DecodeAuthorizationMessageCommand).de(de_DecodeAuthorizationMessageCommand).build() {
    };
    __name(_DecodeAuthorizationMessageCommand, "DecodeAuthorizationMessageCommand");
    var DecodeAuthorizationMessageCommand = _DecodeAuthorizationMessageCommand;
    var import_EndpointParameters6 = require_EndpointParameters2();
    var _GetAccessKeyInfoCommand = class _GetAccessKeyInfoCommand extends import_smithy_client7.Command.classBuilder().ep(import_EndpointParameters6.commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AWSSecurityTokenServiceV20110615", "GetAccessKeyInfo", {}).n("STSClient", "GetAccessKeyInfoCommand").f(void 0, void 0).ser(se_GetAccessKeyInfoCommand).de(de_GetAccessKeyInfoCommand).build() {
    };
    __name(_GetAccessKeyInfoCommand, "GetAccessKeyInfoCommand");
    var GetAccessKeyInfoCommand = _GetAccessKeyInfoCommand;
    var import_EndpointParameters7 = require_EndpointParameters2();
    var _GetCallerIdentityCommand = class _GetCallerIdentityCommand extends import_smithy_client7.Command.classBuilder().ep(import_EndpointParameters7.commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AWSSecurityTokenServiceV20110615", "GetCallerIdentity", {}).n("STSClient", "GetCallerIdentityCommand").f(void 0, void 0).ser(se_GetCallerIdentityCommand).de(de_GetCallerIdentityCommand).build() {
    };
    __name(_GetCallerIdentityCommand, "GetCallerIdentityCommand");
    var GetCallerIdentityCommand = _GetCallerIdentityCommand;
    var import_EndpointParameters8 = require_EndpointParameters2();
    var _GetFederationTokenCommand = class _GetFederationTokenCommand extends import_smithy_client7.Command.classBuilder().ep(import_EndpointParameters8.commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AWSSecurityTokenServiceV20110615", "GetFederationToken", {}).n("STSClient", "GetFederationTokenCommand").f(void 0, GetFederationTokenResponseFilterSensitiveLog).ser(se_GetFederationTokenCommand).de(de_GetFederationTokenCommand).build() {
    };
    __name(_GetFederationTokenCommand, "GetFederationTokenCommand");
    var GetFederationTokenCommand = _GetFederationTokenCommand;
    var import_EndpointParameters9 = require_EndpointParameters2();
    var _GetSessionTokenCommand = class _GetSessionTokenCommand extends import_smithy_client7.Command.classBuilder().ep(import_EndpointParameters9.commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AWSSecurityTokenServiceV20110615", "GetSessionToken", {}).n("STSClient", "GetSessionTokenCommand").f(void 0, GetSessionTokenResponseFilterSensitiveLog).ser(se_GetSessionTokenCommand).de(de_GetSessionTokenCommand).build() {
    };
    __name(_GetSessionTokenCommand, "GetSessionTokenCommand");
    var GetSessionTokenCommand = _GetSessionTokenCommand;
    var import_STSClient = require_STSClient2();
    var commands = {
      AssumeRoleCommand,
      AssumeRoleWithSAMLCommand,
      AssumeRoleWithWebIdentityCommand,
      AssumeRootCommand,
      DecodeAuthorizationMessageCommand,
      GetAccessKeyInfoCommand,
      GetCallerIdentityCommand,
      GetFederationTokenCommand,
      GetSessionTokenCommand
    };
    var _STS = class _STS extends import_STSClient.STSClient {
    };
    __name(_STS, "STS");
    var STS = _STS;
    (0, import_smithy_client7.createAggregatedClient)(commands, STS);
    var import_EndpointParameters10 = require_EndpointParameters2();
    var import_client3 = (init_client2(), __toCommonJS(client_exports2));
    var ASSUME_ROLE_DEFAULT_REGION = "us-east-1";
    var getAccountIdFromAssumedRoleUser = /* @__PURE__ */ __name((assumedRoleUser) => {
      if (typeof (assumedRoleUser == null ? void 0 : assumedRoleUser.Arn) === "string") {
        const arnComponents = assumedRoleUser.Arn.split(":");
        if (arnComponents.length > 4 && arnComponents[4] !== "") {
          return arnComponents[4];
        }
      }
      return void 0;
    }, "getAccountIdFromAssumedRoleUser");
    var resolveRegion = /* @__PURE__ */ __name(async (_region, _parentRegion, credentialProviderLogger) => {
      var _a2;
      const region = typeof _region === "function" ? await _region() : _region;
      const parentRegion = typeof _parentRegion === "function" ? await _parentRegion() : _parentRegion;
      (_a2 = credentialProviderLogger == null ? void 0 : credentialProviderLogger.debug) == null ? void 0 : _a2.call(
        credentialProviderLogger,
        "@aws-sdk/client-sts::resolveRegion",
        "accepting first of:",
        `${region} (provider)`,
        `${parentRegion} (parent client)`,
        `${ASSUME_ROLE_DEFAULT_REGION} (STS default)`
      );
      return region ?? parentRegion ?? ASSUME_ROLE_DEFAULT_REGION;
    }, "resolveRegion");
    var getDefaultRoleAssumer = /* @__PURE__ */ __name((stsOptions, stsClientCtor) => {
      let stsClient;
      let closureSourceCreds;
      return async (sourceCreds, params) => {
        var _a2, _b, _c;
        closureSourceCreds = sourceCreds;
        if (!stsClient) {
          const {
            logger = (_a2 = stsOptions == null ? void 0 : stsOptions.parentClientConfig) == null ? void 0 : _a2.logger,
            region,
            requestHandler = (_b = stsOptions == null ? void 0 : stsOptions.parentClientConfig) == null ? void 0 : _b.requestHandler,
            credentialProviderLogger
          } = stsOptions;
          const resolvedRegion = await resolveRegion(
            region,
            (_c = stsOptions == null ? void 0 : stsOptions.parentClientConfig) == null ? void 0 : _c.region,
            credentialProviderLogger
          );
          const isCompatibleRequestHandler = !isH2(requestHandler);
          stsClient = new stsClientCtor({
            // A hack to make sts client uses the credential in current closure.
            credentialDefaultProvider: () => async () => closureSourceCreds,
            region: resolvedRegion,
            requestHandler: isCompatibleRequestHandler ? requestHandler : void 0,
            logger
          });
        }
        const { Credentials: Credentials2, AssumedRoleUser: AssumedRoleUser2 } = await stsClient.send(new AssumeRoleCommand(params));
        if (!Credentials2 || !Credentials2.AccessKeyId || !Credentials2.SecretAccessKey) {
          throw new Error(`Invalid response from STS.assumeRole call with role ${params.RoleArn}`);
        }
        const accountId = getAccountIdFromAssumedRoleUser(AssumedRoleUser2);
        const credentials = {
          accessKeyId: Credentials2.AccessKeyId,
          secretAccessKey: Credentials2.SecretAccessKey,
          sessionToken: Credentials2.SessionToken,
          expiration: Credentials2.Expiration,
          // TODO(credentialScope): access normally when shape is updated.
          ...Credentials2.CredentialScope && { credentialScope: Credentials2.CredentialScope },
          ...accountId && { accountId }
        };
        (0, import_client3.setCredentialFeature)(credentials, "CREDENTIALS_STS_ASSUME_ROLE", "i");
        return credentials;
      };
    }, "getDefaultRoleAssumer");
    var getDefaultRoleAssumerWithWebIdentity = /* @__PURE__ */ __name((stsOptions, stsClientCtor) => {
      let stsClient;
      return async (params) => {
        var _a2, _b, _c;
        if (!stsClient) {
          const {
            logger = (_a2 = stsOptions == null ? void 0 : stsOptions.parentClientConfig) == null ? void 0 : _a2.logger,
            region,
            requestHandler = (_b = stsOptions == null ? void 0 : stsOptions.parentClientConfig) == null ? void 0 : _b.requestHandler,
            credentialProviderLogger
          } = stsOptions;
          const resolvedRegion = await resolveRegion(
            region,
            (_c = stsOptions == null ? void 0 : stsOptions.parentClientConfig) == null ? void 0 : _c.region,
            credentialProviderLogger
          );
          const isCompatibleRequestHandler = !isH2(requestHandler);
          stsClient = new stsClientCtor({
            region: resolvedRegion,
            requestHandler: isCompatibleRequestHandler ? requestHandler : void 0,
            logger
          });
        }
        const { Credentials: Credentials2, AssumedRoleUser: AssumedRoleUser2 } = await stsClient.send(new AssumeRoleWithWebIdentityCommand(params));
        if (!Credentials2 || !Credentials2.AccessKeyId || !Credentials2.SecretAccessKey) {
          throw new Error(`Invalid response from STS.assumeRoleWithWebIdentity call with role ${params.RoleArn}`);
        }
        const accountId = getAccountIdFromAssumedRoleUser(AssumedRoleUser2);
        const credentials = {
          accessKeyId: Credentials2.AccessKeyId,
          secretAccessKey: Credentials2.SecretAccessKey,
          sessionToken: Credentials2.SessionToken,
          expiration: Credentials2.Expiration,
          // TODO(credentialScope): access normally when shape is updated.
          ...Credentials2.CredentialScope && { credentialScope: Credentials2.CredentialScope },
          ...accountId && { accountId }
        };
        if (accountId) {
          (0, import_client3.setCredentialFeature)(credentials, "RESOLVED_ACCOUNT_ID", "T");
        }
        (0, import_client3.setCredentialFeature)(credentials, "CREDENTIALS_STS_ASSUME_ROLE_WEB_ID", "k");
        return credentials;
      };
    }, "getDefaultRoleAssumerWithWebIdentity");
    var isH2 = /* @__PURE__ */ __name((requestHandler) => {
      var _a2;
      return ((_a2 = requestHandler == null ? void 0 : requestHandler.metadata) == null ? void 0 : _a2.handlerProtocol) === "h2";
    }, "isH2");
    var import_STSClient2 = require_STSClient2();
    var getCustomizableStsClientCtor = /* @__PURE__ */ __name((baseCtor, customizations) => {
      var _a2;
      if (!customizations)
        return baseCtor;
      else
        return _a2 = class extends baseCtor {
          constructor(config2) {
            super(config2);
            for (const customization of customizations) {
              this.middlewareStack.use(customization);
            }
          }
        }, __name(_a2, "CustomizableSTSClient"), _a2;
    }, "getCustomizableStsClientCtor");
    var getDefaultRoleAssumer2 = /* @__PURE__ */ __name((stsOptions = {}, stsPlugins) => getDefaultRoleAssumer(stsOptions, getCustomizableStsClientCtor(import_STSClient2.STSClient, stsPlugins)), "getDefaultRoleAssumer");
    var getDefaultRoleAssumerWithWebIdentity2 = /* @__PURE__ */ __name((stsOptions = {}, stsPlugins) => getDefaultRoleAssumerWithWebIdentity(stsOptions, getCustomizableStsClientCtor(import_STSClient2.STSClient, stsPlugins)), "getDefaultRoleAssumerWithWebIdentity");
    var decorateDefaultCredentialProvider = /* @__PURE__ */ __name((provider) => (input) => provider({
      roleAssumer: getDefaultRoleAssumer2(input),
      roleAssumerWithWebIdentity: getDefaultRoleAssumerWithWebIdentity2(input),
      ...input
    }), "decorateDefaultCredentialProvider");
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/credential-provider-process/dist-cjs/index.js
var require_dist_cjs73 = __commonJS({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/credential-provider-process/dist-cjs/index.js"(exports6, module) {
    "use strict";
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      fromProcess: () => fromProcess
    });
    module.exports = __toCommonJS3(src_exports);
    var import_shared_ini_file_loader = require_dist_cjs28();
    var import_property_provider3 = require_dist_cjs20();
    var import_child_process = __require("child_process");
    var import_util = (init_util(), __toCommonJS(util_exports));
    var import_client3 = (init_client2(), __toCommonJS(client_exports2));
    var getValidatedProcessCredentials = /* @__PURE__ */ __name((profileName, data, profiles) => {
      var _a;
      if (data.Version !== 1) {
        throw Error(`Profile ${profileName} credential_process did not return Version 1.`);
      }
      if (data.AccessKeyId === void 0 || data.SecretAccessKey === void 0) {
        throw Error(`Profile ${profileName} credential_process returned invalid credentials.`);
      }
      if (data.Expiration) {
        const currentTime = /* @__PURE__ */ new Date();
        const expireTime = new Date(data.Expiration);
        if (expireTime < currentTime) {
          throw Error(`Profile ${profileName} credential_process returned expired credentials.`);
        }
      }
      let accountId = data.AccountId;
      if (!accountId && ((_a = profiles == null ? void 0 : profiles[profileName]) == null ? void 0 : _a.aws_account_id)) {
        accountId = profiles[profileName].aws_account_id;
      }
      const credentials = {
        accessKeyId: data.AccessKeyId,
        secretAccessKey: data.SecretAccessKey,
        ...data.SessionToken && { sessionToken: data.SessionToken },
        ...data.Expiration && { expiration: new Date(data.Expiration) },
        ...data.CredentialScope && { credentialScope: data.CredentialScope },
        ...accountId && { accountId }
      };
      (0, import_client3.setCredentialFeature)(credentials, "CREDENTIALS_PROCESS", "w");
      return credentials;
    }, "getValidatedProcessCredentials");
    var resolveProcessCredentials = /* @__PURE__ */ __name(async (profileName, profiles, logger) => {
      const profile = profiles[profileName];
      if (profiles[profileName]) {
        const credentialProcess = profile["credential_process"];
        if (credentialProcess !== void 0) {
          const execPromise = (0, import_util.promisify)(import_child_process.exec);
          try {
            const { stdout: stdout2 } = await execPromise(credentialProcess);
            let data;
            try {
              data = JSON.parse(stdout2.trim());
            } catch {
              throw Error(`Profile ${profileName} credential_process returned invalid JSON.`);
            }
            return getValidatedProcessCredentials(profileName, data, profiles);
          } catch (error) {
            throw new import_property_provider3.CredentialsProviderError(error.message, { logger });
          }
        } else {
          throw new import_property_provider3.CredentialsProviderError(`Profile ${profileName} did not contain credential_process.`, { logger });
        }
      } else {
        throw new import_property_provider3.CredentialsProviderError(`Profile ${profileName} could not be found in shared credentials file.`, {
          logger
        });
      }
    }, "resolveProcessCredentials");
    var fromProcess = /* @__PURE__ */ __name((init = {}) => async ({ callerClientConfig } = {}) => {
      var _a;
      (_a = init.logger) == null ? void 0 : _a.debug("@aws-sdk/credential-provider-process - fromProcess");
      const profiles = await (0, import_shared_ini_file_loader.parseKnownFiles)(init);
      return resolveProcessCredentials(
        (0, import_shared_ini_file_loader.getProfileName)({
          profile: init.profile ?? (callerClientConfig == null ? void 0 : callerClientConfig.profile)
        }),
        profiles,
        init.logger
      );
    }, "fromProcess");
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromWebToken.js
var require_fromWebToken2 = __commonJS({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromWebToken.js"(exports6) {
    "use strict";
    init_dirname();
    var __createBinding2 = exports6 && exports6.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports6 && exports6.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports6 && exports6.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding2(result, mod, k);
      }
      __setModuleDefault2(result, mod);
      return result;
    };
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.fromWebToken = void 0;
    var fromWebToken2 = (init) => async (awsIdentityProperties) => {
      init.logger?.debug("@aws-sdk/credential-provider-web-identity - fromWebToken");
      const { roleArn, roleSessionName, webIdentityToken, providerId, policyArns, policy, durationSeconds } = init;
      let { roleAssumerWithWebIdentity } = init;
      if (!roleAssumerWithWebIdentity) {
        const { getDefaultRoleAssumerWithWebIdentity } = await Promise.resolve().then(() => __importStar2(require_dist_cjs72()));
        roleAssumerWithWebIdentity = getDefaultRoleAssumerWithWebIdentity({
          ...init.clientConfig,
          credentialProviderLogger: init.logger,
          parentClientConfig: {
            ...awsIdentityProperties?.callerClientConfig,
            ...init.parentClientConfig
          }
        }, init.clientPlugins);
      }
      return roleAssumerWithWebIdentity({
        RoleArn: roleArn,
        RoleSessionName: roleSessionName ?? `aws-sdk-js-session-${Date.now()}`,
        WebIdentityToken: webIdentityToken,
        ProviderId: providerId,
        PolicyArns: policyArns,
        Policy: policy,
        DurationSeconds: durationSeconds
      });
    };
    exports6.fromWebToken = fromWebToken2;
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromTokenFile.js
var require_fromTokenFile2 = __commonJS({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromTokenFile.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.fromTokenFile = void 0;
    var client_1 = (init_client2(), __toCommonJS(client_exports2));
    var property_provider_1 = require_dist_cjs20();
    var fs_1 = __require("fs");
    var fromWebToken_1 = require_fromWebToken2();
    var ENV_TOKEN_FILE = "AWS_WEB_IDENTITY_TOKEN_FILE";
    var ENV_ROLE_ARN = "AWS_ROLE_ARN";
    var ENV_ROLE_SESSION_NAME = "AWS_ROLE_SESSION_NAME";
    var fromTokenFile2 = (init = {}) => async () => {
      init.logger?.debug("@aws-sdk/credential-provider-web-identity - fromTokenFile");
      const webIdentityTokenFile = init?.webIdentityTokenFile ?? process.env[ENV_TOKEN_FILE];
      const roleArn = init?.roleArn ?? process.env[ENV_ROLE_ARN];
      const roleSessionName = init?.roleSessionName ?? process.env[ENV_ROLE_SESSION_NAME];
      if (!webIdentityTokenFile || !roleArn) {
        throw new property_provider_1.CredentialsProviderError("Web identity configuration not specified", {
          logger: init.logger
        });
      }
      const credentials = await (0, fromWebToken_1.fromWebToken)({
        ...init,
        webIdentityToken: (0, fs_1.readFileSync)(webIdentityTokenFile, { encoding: "ascii" }),
        roleArn,
        roleSessionName
      })();
      if (webIdentityTokenFile === process.env[ENV_TOKEN_FILE]) {
        (0, client_1.setCredentialFeature)(credentials, "CREDENTIALS_ENV_VARS_STS_WEB_ID_TOKEN", "h");
      }
      return credentials;
    };
    exports6.fromTokenFile = fromTokenFile2;
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/index.js
var require_dist_cjs74 = __commonJS({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/index.js"(exports6, module) {
    "use strict";
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __reExport = (target, mod, secondTarget) => (__copyProps3(target, mod, "default"), secondTarget && __copyProps3(secondTarget, mod, "default"));
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    module.exports = __toCommonJS3(src_exports);
    __reExport(src_exports, require_fromTokenFile2(), module.exports);
    __reExport(src_exports, require_fromWebToken2(), module.exports);
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/index.js
var require_dist_cjs75 = __commonJS({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/index.js"(exports6, module) {
    "use strict";
    init_dirname();
    var __create3 = Object.create;
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __getProtoOf3 = Object.getPrototypeOf;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM3 = (mod, isNodeMode, target) => (target = mod != null ? __create3(__getProtoOf3(mod)) : {}, __copyProps3(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp3(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      fromIni: () => fromIni
    });
    module.exports = __toCommonJS3(src_exports);
    var import_shared_ini_file_loader = require_dist_cjs28();
    var import_client3 = (init_client2(), __toCommonJS(client_exports2));
    var import_property_provider3 = require_dist_cjs20();
    var resolveCredentialSource = /* @__PURE__ */ __name((credentialSource, profileName, logger) => {
      const sourceProvidersMap = {
        EcsContainer: async (options) => {
          const { fromHttp } = await Promise.resolve().then(() => __toESM3(__require("@aws-sdk/credential-provider-http")));
          const { fromContainerMetadata } = await Promise.resolve().then(() => __toESM3(require_dist_cjs39()));
          logger == null ? void 0 : logger.debug("@aws-sdk/credential-provider-ini - credential_source is EcsContainer");
          return async () => (0, import_property_provider3.chain)(fromHttp(options ?? {}), fromContainerMetadata(options))().then(setNamedProvider);
        },
        Ec2InstanceMetadata: async (options) => {
          logger == null ? void 0 : logger.debug("@aws-sdk/credential-provider-ini - credential_source is Ec2InstanceMetadata");
          const { fromInstanceMetadata } = await Promise.resolve().then(() => __toESM3(require_dist_cjs39()));
          return async () => fromInstanceMetadata(options)().then(setNamedProvider);
        },
        Environment: async (options) => {
          logger == null ? void 0 : logger.debug("@aws-sdk/credential-provider-ini - credential_source is Environment");
          const { fromEnv } = await Promise.resolve().then(() => __toESM3(require_dist_cjs65()));
          return async () => fromEnv(options)().then(setNamedProvider);
        }
      };
      if (credentialSource in sourceProvidersMap) {
        return sourceProvidersMap[credentialSource];
      } else {
        throw new import_property_provider3.CredentialsProviderError(
          `Unsupported credential source in profile ${profileName}. Got ${credentialSource}, expected EcsContainer or Ec2InstanceMetadata or Environment.`,
          { logger }
        );
      }
    }, "resolveCredentialSource");
    var setNamedProvider = /* @__PURE__ */ __name((creds) => (0, import_client3.setCredentialFeature)(creds, "CREDENTIALS_PROFILE_NAMED_PROVIDER", "p"), "setNamedProvider");
    var isAssumeRoleProfile = /* @__PURE__ */ __name((arg, { profile = "default", logger } = {}) => {
      return Boolean(arg) && typeof arg === "object" && typeof arg.role_arn === "string" && ["undefined", "string"].indexOf(typeof arg.role_session_name) > -1 && ["undefined", "string"].indexOf(typeof arg.external_id) > -1 && ["undefined", "string"].indexOf(typeof arg.mfa_serial) > -1 && (isAssumeRoleWithSourceProfile(arg, { profile, logger }) || isCredentialSourceProfile(arg, { profile, logger }));
    }, "isAssumeRoleProfile");
    var isAssumeRoleWithSourceProfile = /* @__PURE__ */ __name((arg, { profile, logger }) => {
      var _a;
      const withSourceProfile = typeof arg.source_profile === "string" && typeof arg.credential_source === "undefined";
      if (withSourceProfile) {
        (_a = logger == null ? void 0 : logger.debug) == null ? void 0 : _a.call(logger, `    ${profile} isAssumeRoleWithSourceProfile source_profile=${arg.source_profile}`);
      }
      return withSourceProfile;
    }, "isAssumeRoleWithSourceProfile");
    var isCredentialSourceProfile = /* @__PURE__ */ __name((arg, { profile, logger }) => {
      var _a;
      const withProviderProfile = typeof arg.credential_source === "string" && typeof arg.source_profile === "undefined";
      if (withProviderProfile) {
        (_a = logger == null ? void 0 : logger.debug) == null ? void 0 : _a.call(logger, `    ${profile} isCredentialSourceProfile credential_source=${arg.credential_source}`);
      }
      return withProviderProfile;
    }, "isCredentialSourceProfile");
    var resolveAssumeRoleCredentials = /* @__PURE__ */ __name(async (profileName, profiles, options, visitedProfiles = {}) => {
      var _a, _b, _c;
      (_a = options.logger) == null ? void 0 : _a.debug("@aws-sdk/credential-provider-ini - resolveAssumeRoleCredentials (STS)");
      const profileData = profiles[profileName];
      const { source_profile, region } = profileData;
      if (!options.roleAssumer) {
        const { getDefaultRoleAssumer } = await Promise.resolve().then(() => __toESM3(require_dist_cjs72()));
        options.roleAssumer = getDefaultRoleAssumer(
          {
            ...options.clientConfig,
            credentialProviderLogger: options.logger,
            parentClientConfig: {
              ...options == null ? void 0 : options.parentClientConfig,
              region: region ?? ((_b = options == null ? void 0 : options.parentClientConfig) == null ? void 0 : _b.region)
            }
          },
          options.clientPlugins
        );
      }
      if (source_profile && source_profile in visitedProfiles) {
        throw new import_property_provider3.CredentialsProviderError(
          `Detected a cycle attempting to resolve credentials for profile ${(0, import_shared_ini_file_loader.getProfileName)(options)}. Profiles visited: ` + Object.keys(visitedProfiles).join(", "),
          { logger: options.logger }
        );
      }
      (_c = options.logger) == null ? void 0 : _c.debug(
        `@aws-sdk/credential-provider-ini - finding credential resolver using ${source_profile ? `source_profile=[${source_profile}]` : `profile=[${profileName}]`}`
      );
      const sourceCredsProvider = source_profile ? resolveProfileData(
        source_profile,
        profiles,
        options,
        {
          ...visitedProfiles,
          [source_profile]: true
        },
        isCredentialSourceWithoutRoleArn(profiles[source_profile] ?? {})
      ) : (await resolveCredentialSource(profileData.credential_source, profileName, options.logger)(options))();
      if (isCredentialSourceWithoutRoleArn(profileData)) {
        return sourceCredsProvider.then((creds) => (0, import_client3.setCredentialFeature)(creds, "CREDENTIALS_PROFILE_SOURCE_PROFILE", "o"));
      } else {
        const params = {
          RoleArn: profileData.role_arn,
          RoleSessionName: profileData.role_session_name || `aws-sdk-js-${Date.now()}`,
          ExternalId: profileData.external_id,
          DurationSeconds: parseInt(profileData.duration_seconds || "3600", 10)
        };
        const { mfa_serial } = profileData;
        if (mfa_serial) {
          if (!options.mfaCodeProvider) {
            throw new import_property_provider3.CredentialsProviderError(
              `Profile ${profileName} requires multi-factor authentication, but no MFA code callback was provided.`,
              { logger: options.logger, tryNextLink: false }
            );
          }
          params.SerialNumber = mfa_serial;
          params.TokenCode = await options.mfaCodeProvider(mfa_serial);
        }
        const sourceCreds = await sourceCredsProvider;
        return options.roleAssumer(sourceCreds, params).then(
          (creds) => (0, import_client3.setCredentialFeature)(creds, "CREDENTIALS_PROFILE_SOURCE_PROFILE", "o")
        );
      }
    }, "resolveAssumeRoleCredentials");
    var isCredentialSourceWithoutRoleArn = /* @__PURE__ */ __name((section) => {
      return !section.role_arn && !!section.credential_source;
    }, "isCredentialSourceWithoutRoleArn");
    var isProcessProfile = /* @__PURE__ */ __name((arg) => Boolean(arg) && typeof arg === "object" && typeof arg.credential_process === "string", "isProcessProfile");
    var resolveProcessCredentials = /* @__PURE__ */ __name(async (options, profile) => Promise.resolve().then(() => __toESM3(require_dist_cjs73())).then(
      ({ fromProcess }) => fromProcess({
        ...options,
        profile
      })().then((creds) => (0, import_client3.setCredentialFeature)(creds, "CREDENTIALS_PROFILE_PROCESS", "v"))
    ), "resolveProcessCredentials");
    var resolveSsoCredentials = /* @__PURE__ */ __name(async (profile, profileData, options = {}) => {
      const { fromSSO: fromSSO2 } = await Promise.resolve().then(() => __toESM3(require_dist_cjs71()));
      return fromSSO2({
        profile,
        logger: options.logger,
        parentClientConfig: options.parentClientConfig,
        clientConfig: options.clientConfig
      })().then((creds) => {
        if (profileData.sso_session) {
          return (0, import_client3.setCredentialFeature)(creds, "CREDENTIALS_PROFILE_SSO", "r");
        } else {
          return (0, import_client3.setCredentialFeature)(creds, "CREDENTIALS_PROFILE_SSO_LEGACY", "t");
        }
      });
    }, "resolveSsoCredentials");
    var isSsoProfile = /* @__PURE__ */ __name((arg) => arg && (typeof arg.sso_start_url === "string" || typeof arg.sso_account_id === "string" || typeof arg.sso_session === "string" || typeof arg.sso_region === "string" || typeof arg.sso_role_name === "string"), "isSsoProfile");
    var isStaticCredsProfile = /* @__PURE__ */ __name((arg) => Boolean(arg) && typeof arg === "object" && typeof arg.aws_access_key_id === "string" && typeof arg.aws_secret_access_key === "string" && ["undefined", "string"].indexOf(typeof arg.aws_session_token) > -1 && ["undefined", "string"].indexOf(typeof arg.aws_account_id) > -1, "isStaticCredsProfile");
    var resolveStaticCredentials = /* @__PURE__ */ __name(async (profile, options) => {
      var _a;
      (_a = options == null ? void 0 : options.logger) == null ? void 0 : _a.debug("@aws-sdk/credential-provider-ini - resolveStaticCredentials");
      const credentials = {
        accessKeyId: profile.aws_access_key_id,
        secretAccessKey: profile.aws_secret_access_key,
        sessionToken: profile.aws_session_token,
        ...profile.aws_credential_scope && { credentialScope: profile.aws_credential_scope },
        ...profile.aws_account_id && { accountId: profile.aws_account_id }
      };
      return (0, import_client3.setCredentialFeature)(credentials, "CREDENTIALS_PROFILE", "n");
    }, "resolveStaticCredentials");
    var isWebIdentityProfile = /* @__PURE__ */ __name((arg) => Boolean(arg) && typeof arg === "object" && typeof arg.web_identity_token_file === "string" && typeof arg.role_arn === "string" && ["undefined", "string"].indexOf(typeof arg.role_session_name) > -1, "isWebIdentityProfile");
    var resolveWebIdentityCredentials = /* @__PURE__ */ __name(async (profile, options) => Promise.resolve().then(() => __toESM3(require_dist_cjs74())).then(
      ({ fromTokenFile: fromTokenFile2 }) => fromTokenFile2({
        webIdentityTokenFile: profile.web_identity_token_file,
        roleArn: profile.role_arn,
        roleSessionName: profile.role_session_name,
        roleAssumerWithWebIdentity: options.roleAssumerWithWebIdentity,
        logger: options.logger,
        parentClientConfig: options.parentClientConfig
      })().then((creds) => (0, import_client3.setCredentialFeature)(creds, "CREDENTIALS_PROFILE_STS_WEB_ID_TOKEN", "q"))
    ), "resolveWebIdentityCredentials");
    var resolveProfileData = /* @__PURE__ */ __name(async (profileName, profiles, options, visitedProfiles = {}, isAssumeRoleRecursiveCall = false) => {
      const data = profiles[profileName];
      if (Object.keys(visitedProfiles).length > 0 && isStaticCredsProfile(data)) {
        return resolveStaticCredentials(data, options);
      }
      if (isAssumeRoleRecursiveCall || isAssumeRoleProfile(data, { profile: profileName, logger: options.logger })) {
        return resolveAssumeRoleCredentials(profileName, profiles, options, visitedProfiles);
      }
      if (isStaticCredsProfile(data)) {
        return resolveStaticCredentials(data, options);
      }
      if (isWebIdentityProfile(data)) {
        return resolveWebIdentityCredentials(data, options);
      }
      if (isProcessProfile(data)) {
        return resolveProcessCredentials(options, profileName);
      }
      if (isSsoProfile(data)) {
        return await resolveSsoCredentials(profileName, data, options);
      }
      throw new import_property_provider3.CredentialsProviderError(
        `Could not resolve credentials using profile: [${profileName}] in configuration/credentials file(s).`,
        { logger: options.logger }
      );
    }, "resolveProfileData");
    var fromIni = /* @__PURE__ */ __name((_init = {}) => async ({ callerClientConfig } = {}) => {
      var _a;
      const init = {
        ..._init,
        parentClientConfig: {
          ...callerClientConfig,
          ..._init.parentClientConfig
        }
      };
      (_a = init.logger) == null ? void 0 : _a.debug("@aws-sdk/credential-provider-ini - fromIni");
      const profiles = await (0, import_shared_ini_file_loader.parseKnownFiles)(init);
      return resolveProfileData(
        (0, import_shared_ini_file_loader.getProfileName)({
          profile: _init.profile ?? (callerClientConfig == null ? void 0 : callerClientConfig.profile)
        }),
        profiles,
        init
      );
    }, "fromIni");
  }
});

// node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/credential-provider-node/dist-cjs/index.js
var require_dist_cjs76 = __commonJS({
  "node_modules/@aws-sdk/client-bedrock/node_modules/@aws-sdk/credential-provider-node/dist-cjs/index.js"(exports6, module) {
    "use strict";
    init_dirname();
    var __create3 = Object.create;
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __getProtoOf3 = Object.getPrototypeOf;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM3 = (mod, isNodeMode, target) => (target = mod != null ? __create3(__getProtoOf3(mod)) : {}, __copyProps3(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp3(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      credentialsTreatedAsExpired: () => credentialsTreatedAsExpired,
      credentialsWillNeedRefresh: () => credentialsWillNeedRefresh,
      defaultProvider: () => defaultProvider
    });
    module.exports = __toCommonJS3(src_exports);
    var import_credential_provider_env = require_dist_cjs65();
    var import_shared_ini_file_loader = require_dist_cjs28();
    var import_property_provider3 = require_dist_cjs20();
    var ENV_IMDS_DISABLED = "AWS_EC2_METADATA_DISABLED";
    var remoteProvider = /* @__PURE__ */ __name(async (init) => {
      var _a, _b;
      const { ENV_CMDS_FULL_URI, ENV_CMDS_RELATIVE_URI, fromContainerMetadata, fromInstanceMetadata } = await Promise.resolve().then(() => __toESM3(require_dist_cjs39()));
      if (process.env[ENV_CMDS_RELATIVE_URI] || process.env[ENV_CMDS_FULL_URI]) {
        (_a = init.logger) == null ? void 0 : _a.debug("@aws-sdk/credential-provider-node - remoteProvider::fromHttp/fromContainerMetadata");
        const { fromHttp } = await Promise.resolve().then(() => __toESM3(__require("@aws-sdk/credential-provider-http")));
        return (0, import_property_provider3.chain)(fromHttp(init), fromContainerMetadata(init));
      }
      if (process.env[ENV_IMDS_DISABLED]) {
        return async () => {
          throw new import_property_provider3.CredentialsProviderError("EC2 Instance Metadata Service access disabled", { logger: init.logger });
        };
      }
      (_b = init.logger) == null ? void 0 : _b.debug("@aws-sdk/credential-provider-node - remoteProvider::fromInstanceMetadata");
      return fromInstanceMetadata(init);
    }, "remoteProvider");
    var multipleCredentialSourceWarningEmitted = false;
    var defaultProvider = /* @__PURE__ */ __name((init = {}) => (0, import_property_provider3.memoize)(
      (0, import_property_provider3.chain)(
        async () => {
          var _a, _b, _c, _d;
          const profile = init.profile ?? process.env[import_shared_ini_file_loader.ENV_PROFILE];
          if (profile) {
            const envStaticCredentialsAreSet = process.env[import_credential_provider_env.ENV_KEY] && process.env[import_credential_provider_env.ENV_SECRET];
            if (envStaticCredentialsAreSet) {
              if (!multipleCredentialSourceWarningEmitted) {
                const warnFn = ((_a = init.logger) == null ? void 0 : _a.warn) && ((_c = (_b = init.logger) == null ? void 0 : _b.constructor) == null ? void 0 : _c.name) !== "NoOpLogger" ? init.logger.warn : console.warn;
                warnFn(
                  `@aws-sdk/credential-provider-node - defaultProvider::fromEnv WARNING:
    Multiple credential sources detected: 
    Both AWS_PROFILE and the pair AWS_ACCESS_KEY_ID/AWS_SECRET_ACCESS_KEY static credentials are set.
    This SDK will proceed with the AWS_PROFILE value.
    
    However, a future version may change this behavior to prefer the ENV static credentials.
    Please ensure that your environment only sets either the AWS_PROFILE or the
    AWS_ACCESS_KEY_ID/AWS_SECRET_ACCESS_KEY pair.
`
                );
                multipleCredentialSourceWarningEmitted = true;
              }
            }
            throw new import_property_provider3.CredentialsProviderError("AWS_PROFILE is set, skipping fromEnv provider.", {
              logger: init.logger,
              tryNextLink: true
            });
          }
          (_d = init.logger) == null ? void 0 : _d.debug("@aws-sdk/credential-provider-node - defaultProvider::fromEnv");
          return (0, import_credential_provider_env.fromEnv)(init)();
        },
        async () => {
          var _a;
          (_a = init.logger) == null ? void 0 : _a.debug("@aws-sdk/credential-provider-node - defaultProvider::fromSSO");
          const { ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoSession } = init;
          if (!ssoStartUrl && !ssoAccountId && !ssoRegion && !ssoRoleName && !ssoSession) {
            throw new import_property_provider3.CredentialsProviderError(
              "Skipping SSO provider in default chain (inputs do not include SSO fields).",
              { logger: init.logger }
            );
          }
          const { fromSSO: fromSSO2 } = await Promise.resolve().then(() => __toESM3(require_dist_cjs71()));
          return fromSSO2(init)();
        },
        async () => {
          var _a;
          (_a = init.logger) == null ? void 0 : _a.debug("@aws-sdk/credential-provider-node - defaultProvider::fromIni");
          const { fromIni } = await Promise.resolve().then(() => __toESM3(require_dist_cjs75()));
          return fromIni(init)();
        },
        async () => {
          var _a;
          (_a = init.logger) == null ? void 0 : _a.debug("@aws-sdk/credential-provider-node - defaultProvider::fromProcess");
          const { fromProcess } = await Promise.resolve().then(() => __toESM3(require_dist_cjs73()));
          return fromProcess(init)();
        },
        async () => {
          var _a;
          (_a = init.logger) == null ? void 0 : _a.debug("@aws-sdk/credential-provider-node - defaultProvider::fromTokenFile");
          const { fromTokenFile: fromTokenFile2 } = await Promise.resolve().then(() => __toESM3(require_dist_cjs74()));
          return fromTokenFile2(init)();
        },
        async () => {
          var _a;
          (_a = init.logger) == null ? void 0 : _a.debug("@aws-sdk/credential-provider-node - defaultProvider::remoteProvider");
          return (await remoteProvider(init))();
        },
        async () => {
          throw new import_property_provider3.CredentialsProviderError("Could not load credentials from any providers", {
            tryNextLink: false,
            logger: init.logger
          });
        }
      ),
      credentialsTreatedAsExpired,
      credentialsWillNeedRefresh
    ), "defaultProvider");
    var credentialsWillNeedRefresh = /* @__PURE__ */ __name((credentials) => (credentials == null ? void 0 : credentials.expiration) !== void 0, "credentialsWillNeedRefresh");
    var credentialsTreatedAsExpired = /* @__PURE__ */ __name((credentials) => (credentials == null ? void 0 : credentials.expiration) !== void 0 && credentials.expiration.getTime() - Date.now() < 3e5, "credentialsTreatedAsExpired");
  }
});

// node_modules/@aws-sdk/client-bedrock/dist-cjs/endpoint/ruleset.js
var require_ruleset8 = __commonJS({
  "node_modules/@aws-sdk/client-bedrock/dist-cjs/endpoint/ruleset.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.ruleSet = void 0;
    var s = "required";
    var t = "fn";
    var u = "argv";
    var v = "ref";
    var a = true;
    var b = "isSet";
    var c = "booleanEquals";
    var d = "error";
    var e = "endpoint";
    var f = "tree";
    var g = "PartitionResult";
    var h = { [s]: false, "type": "String" };
    var i = { [s]: true, "default": false, "type": "Boolean" };
    var j = { [v]: "Endpoint" };
    var k = { [t]: c, [u]: [{ [v]: "UseFIPS" }, true] };
    var l = { [t]: c, [u]: [{ [v]: "UseDualStack" }, true] };
    var m = {};
    var n = { [t]: "getAttr", [u]: [{ [v]: g }, "supportsFIPS"] };
    var o = { [t]: c, [u]: [true, { [t]: "getAttr", [u]: [{ [v]: g }, "supportsDualStack"] }] };
    var p = [k];
    var q = [l];
    var r = [{ [v]: "Region" }];
    var _data = { version: "1.0", parameters: { Region: h, UseDualStack: i, UseFIPS: i, Endpoint: h }, rules: [{ conditions: [{ [t]: b, [u]: [j] }], rules: [{ conditions: p, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: d }, { rules: [{ conditions: q, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: d }, { endpoint: { url: j, properties: m, headers: m }, type: e }], type: f }], type: f }, { rules: [{ conditions: [{ [t]: b, [u]: r }], rules: [{ conditions: [{ [t]: "aws.partition", [u]: r, assign: g }], rules: [{ conditions: [k, l], rules: [{ conditions: [{ [t]: c, [u]: [a, n] }, o], rules: [{ rules: [{ endpoint: { url: "https://bedrock-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: m, headers: m }, type: e }], type: f }], type: f }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: d }], type: f }, { conditions: p, rules: [{ conditions: [{ [t]: c, [u]: [n, a] }], rules: [{ rules: [{ endpoint: { url: "https://bedrock-fips.{Region}.{PartitionResult#dnsSuffix}", properties: m, headers: m }, type: e }], type: f }], type: f }, { error: "FIPS is enabled but this partition does not support FIPS", type: d }], type: f }, { conditions: q, rules: [{ conditions: [o], rules: [{ rules: [{ endpoint: { url: "https://bedrock.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: m, headers: m }, type: e }], type: f }], type: f }, { error: "DualStack is enabled but this partition does not support DualStack", type: d }], type: f }, { rules: [{ endpoint: { url: "https://bedrock.{Region}.{PartitionResult#dnsSuffix}", properties: m, headers: m }, type: e }], type: f }], type: f }], type: f }, { error: "Invalid Configuration: Missing Region", type: d }], type: f }] };
    exports6.ruleSet = _data;
  }
});

// node_modules/@aws-sdk/client-bedrock/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver8 = __commonJS({
  "node_modules/@aws-sdk/client-bedrock/dist-cjs/endpoint/endpointResolver.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs63();
    var util_endpoints_2 = require_dist_cjs18();
    var ruleset_1 = require_ruleset8();
    var cache = new util_endpoints_2.EndpointCache({
      size: 50,
      params: ["Endpoint", "Region", "UseDualStack", "UseFIPS"]
    });
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return cache.get(endpointParams, () => (0, util_endpoints_2.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      }));
    };
    exports6.defaultEndpointResolver = defaultEndpointResolver;
    util_endpoints_2.customEndpointFunctions.aws = util_endpoints_1.awsEndpointFunctions;
  }
});

// node_modules/@aws-sdk/client-bedrock/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared8 = __commonJS({
  "node_modules/@aws-sdk/client-bedrock/dist-cjs/runtimeConfig.shared.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.getRuntimeConfig = void 0;
    var core_1 = (init_dist_es3(), __toCommonJS(dist_es_exports3));
    var smithy_client_1 = require_dist_cjs23();
    var url_parser_1 = require_dist_cjs31();
    var util_base64_1 = require_dist_cjs11();
    var util_utf8_1 = require_dist_cjs10();
    var httpAuthSchemeProvider_1 = require_httpAuthSchemeProvider5();
    var endpointResolver_1 = require_endpointResolver8();
    var getRuntimeConfig = (config2) => {
      return {
        apiVersion: "2023-04-20",
        base64Decoder: config2?.base64Decoder ?? util_base64_1.fromBase64,
        base64Encoder: config2?.base64Encoder ?? util_base64_1.toBase64,
        disableHostPrefix: config2?.disableHostPrefix ?? false,
        endpointProvider: config2?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
        extensions: config2?.extensions ?? [],
        httpAuthSchemeProvider: config2?.httpAuthSchemeProvider ?? httpAuthSchemeProvider_1.defaultBedrockHttpAuthSchemeProvider,
        httpAuthSchemes: config2?.httpAuthSchemes ?? [
          {
            schemeId: "aws.auth#sigv4",
            identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4"),
            signer: new core_1.AwsSdkSigV4Signer()
          }
        ],
        logger: config2?.logger ?? new smithy_client_1.NoOpLogger(),
        serviceId: config2?.serviceId ?? "Bedrock",
        urlParser: config2?.urlParser ?? url_parser_1.parseUrl,
        utf8Decoder: config2?.utf8Decoder ?? util_utf8_1.fromUtf8,
        utf8Encoder: config2?.utf8Encoder ?? util_utf8_1.toUtf8
      };
    };
    exports6.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-bedrock/dist-cjs/runtimeConfig.js
var require_runtimeConfig8 = __commonJS({
  "node_modules/@aws-sdk/client-bedrock/dist-cjs/runtimeConfig.js"(exports6) {
    "use strict";
    init_dirname();
    Object.defineProperty(exports6, "__esModule", { value: true });
    exports6.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package5());
    var core_1 = (init_dist_es3(), __toCommonJS(dist_es_exports3));
    var credential_provider_node_1 = require_dist_cjs76();
    var util_user_agent_node_1 = require_dist_cjs66();
    var config_resolver_1 = require_dist_cjs26();
    var hash_node_1 = require_dist_cjs37();
    var middleware_retry_1 = require_dist_cjs35();
    var node_config_provider_1 = require_dist_cjs29();
    var node_http_handler_1 = require_dist_cjs14();
    var util_body_length_node_1 = require_dist_cjs38();
    var util_retry_1 = require_dist_cjs34();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared8();
    var smithy_client_1 = require_dist_cjs23();
    var util_defaults_mode_node_1 = require_dist_cjs40();
    var smithy_client_2 = require_dist_cjs23();
    var getRuntimeConfig = (config2) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config2);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config2);
      (0, core_1.emitWarningIfUnsupportedVersion)(process.version);
      const profileConfig = { profile: config2?.profile };
      return {
        ...clientSharedValues,
        ...config2,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config2?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider: config2?.credentialDefaultProvider ?? credential_provider_node_1.defaultProvider,
        defaultUserAgentProvider: config2?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.createDefaultUserAgentProvider)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: config2?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS, config2),
        region: config2?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, { ...config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS, ...profileConfig }),
        requestHandler: node_http_handler_1.NodeHttpHandler.create(config2?.requestHandler ?? defaultConfigProvider),
        retryMode: config2?.retryMode ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }, config2),
        sha256: config2?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: config2?.streamCollector ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: config2?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS, profileConfig),
        useFipsEndpoint: config2?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS, profileConfig),
        userAgentAppId: config2?.userAgentAppId ?? (0, node_config_provider_1.loadConfig)(util_user_agent_node_1.NODE_APP_ID_CONFIG_OPTIONS, profileConfig)
      };
    };
    exports6.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-bedrock/dist-cjs/index.js
var require_dist_cjs77 = __commonJS({
  "node_modules/@aws-sdk/client-bedrock/dist-cjs/index.js"(exports6, module) {
    "use strict";
    init_dirname();
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp3(target, "name", { value, configurable: true });
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      AccessDeniedException: () => AccessDeniedException,
      ApplicationType: () => ApplicationType,
      AutomatedEvaluationConfigFilterSensitiveLog: () => AutomatedEvaluationConfigFilterSensitiveLog,
      BatchDeleteEvaluationJobCommand: () => BatchDeleteEvaluationJobCommand,
      BatchDeleteEvaluationJobErrorFilterSensitiveLog: () => BatchDeleteEvaluationJobErrorFilterSensitiveLog,
      BatchDeleteEvaluationJobItemFilterSensitiveLog: () => BatchDeleteEvaluationJobItemFilterSensitiveLog,
      BatchDeleteEvaluationJobRequestFilterSensitiveLog: () => BatchDeleteEvaluationJobRequestFilterSensitiveLog,
      BatchDeleteEvaluationJobResponseFilterSensitiveLog: () => BatchDeleteEvaluationJobResponseFilterSensitiveLog,
      Bedrock: () => Bedrock,
      BedrockClient: () => BedrockClient2,
      BedrockServiceException: () => BedrockServiceException,
      ByteContentDocFilterSensitiveLog: () => ByteContentDocFilterSensitiveLog,
      CommitmentDuration: () => CommitmentDuration,
      ConflictException: () => ConflictException,
      CreateEvaluationJobCommand: () => CreateEvaluationJobCommand,
      CreateEvaluationJobRequestFilterSensitiveLog: () => CreateEvaluationJobRequestFilterSensitiveLog,
      CreateGuardrailCommand: () => CreateGuardrailCommand,
      CreateGuardrailRequestFilterSensitiveLog: () => CreateGuardrailRequestFilterSensitiveLog,
      CreateGuardrailVersionCommand: () => CreateGuardrailVersionCommand,
      CreateGuardrailVersionRequestFilterSensitiveLog: () => CreateGuardrailVersionRequestFilterSensitiveLog,
      CreateInferenceProfileCommand: () => CreateInferenceProfileCommand,
      CreateInferenceProfileRequestFilterSensitiveLog: () => CreateInferenceProfileRequestFilterSensitiveLog,
      CreateMarketplaceModelEndpointCommand: () => CreateMarketplaceModelEndpointCommand,
      CreateModelCopyJobCommand: () => CreateModelCopyJobCommand,
      CreateModelCustomizationJobCommand: () => CreateModelCustomizationJobCommand,
      CreateModelCustomizationJobRequestFilterSensitiveLog: () => CreateModelCustomizationJobRequestFilterSensitiveLog,
      CreateModelImportJobCommand: () => CreateModelImportJobCommand,
      CreateModelInvocationJobCommand: () => CreateModelInvocationJobCommand,
      CreateProvisionedModelThroughputCommand: () => CreateProvisionedModelThroughputCommand,
      CustomizationConfig: () => CustomizationConfig,
      CustomizationType: () => CustomizationType,
      DeleteCustomModelCommand: () => DeleteCustomModelCommand,
      DeleteGuardrailCommand: () => DeleteGuardrailCommand,
      DeleteImportedModelCommand: () => DeleteImportedModelCommand,
      DeleteInferenceProfileCommand: () => DeleteInferenceProfileCommand,
      DeleteMarketplaceModelEndpointCommand: () => DeleteMarketplaceModelEndpointCommand,
      DeleteModelInvocationLoggingConfigurationCommand: () => DeleteModelInvocationLoggingConfigurationCommand,
      DeleteProvisionedModelThroughputCommand: () => DeleteProvisionedModelThroughputCommand,
      DeregisterMarketplaceModelEndpointCommand: () => DeregisterMarketplaceModelEndpointCommand,
      EndpointConfig: () => EndpointConfig,
      EvaluationBedrockModelFilterSensitiveLog: () => EvaluationBedrockModelFilterSensitiveLog,
      EvaluationConfig: () => EvaluationConfig,
      EvaluationConfigFilterSensitiveLog: () => EvaluationConfigFilterSensitiveLog,
      EvaluationDatasetFilterSensitiveLog: () => EvaluationDatasetFilterSensitiveLog,
      EvaluationDatasetLocation: () => EvaluationDatasetLocation,
      EvaluationDatasetMetricConfigFilterSensitiveLog: () => EvaluationDatasetMetricConfigFilterSensitiveLog,
      EvaluationInferenceConfig: () => EvaluationInferenceConfig,
      EvaluationInferenceConfigFilterSensitiveLog: () => EvaluationInferenceConfigFilterSensitiveLog,
      EvaluationJobStatus: () => EvaluationJobStatus,
      EvaluationJobType: () => EvaluationJobType,
      EvaluationModelConfig: () => EvaluationModelConfig,
      EvaluationModelConfigFilterSensitiveLog: () => EvaluationModelConfigFilterSensitiveLog,
      EvaluationTaskType: () => EvaluationTaskType,
      EvaluatorModelConfig: () => EvaluatorModelConfig,
      ExternalSourceFilterSensitiveLog: () => ExternalSourceFilterSensitiveLog,
      ExternalSourceType: () => ExternalSourceType,
      ExternalSourcesGenerationConfigurationFilterSensitiveLog: () => ExternalSourcesGenerationConfigurationFilterSensitiveLog,
      ExternalSourcesRetrieveAndGenerateConfigurationFilterSensitiveLog: () => ExternalSourcesRetrieveAndGenerateConfigurationFilterSensitiveLog,
      FineTuningJobStatus: () => FineTuningJobStatus,
      FoundationModelLifecycleStatus: () => FoundationModelLifecycleStatus,
      GenerationConfigurationFilterSensitiveLog: () => GenerationConfigurationFilterSensitiveLog,
      GetCustomModelCommand: () => GetCustomModelCommand,
      GetCustomModelResponseFilterSensitiveLog: () => GetCustomModelResponseFilterSensitiveLog,
      GetEvaluationJobCommand: () => GetEvaluationJobCommand,
      GetEvaluationJobRequestFilterSensitiveLog: () => GetEvaluationJobRequestFilterSensitiveLog,
      GetEvaluationJobResponseFilterSensitiveLog: () => GetEvaluationJobResponseFilterSensitiveLog,
      GetFoundationModelCommand: () => GetFoundationModelCommand,
      GetGuardrailCommand: () => GetGuardrailCommand,
      GetGuardrailResponseFilterSensitiveLog: () => GetGuardrailResponseFilterSensitiveLog,
      GetImportedModelCommand: () => GetImportedModelCommand,
      GetInferenceProfileCommand: () => GetInferenceProfileCommand,
      GetInferenceProfileResponseFilterSensitiveLog: () => GetInferenceProfileResponseFilterSensitiveLog,
      GetMarketplaceModelEndpointCommand: () => GetMarketplaceModelEndpointCommand,
      GetModelCopyJobCommand: () => GetModelCopyJobCommand,
      GetModelCustomizationJobCommand: () => GetModelCustomizationJobCommand,
      GetModelCustomizationJobResponseFilterSensitiveLog: () => GetModelCustomizationJobResponseFilterSensitiveLog,
      GetModelImportJobCommand: () => GetModelImportJobCommand,
      GetModelInvocationJobCommand: () => GetModelInvocationJobCommand,
      GetModelInvocationJobResponseFilterSensitiveLog: () => GetModelInvocationJobResponseFilterSensitiveLog,
      GetModelInvocationLoggingConfigurationCommand: () => GetModelInvocationLoggingConfigurationCommand,
      GetPromptRouterCommand: () => GetPromptRouterCommand,
      GetPromptRouterResponseFilterSensitiveLog: () => GetPromptRouterResponseFilterSensitiveLog,
      GetProvisionedModelThroughputCommand: () => GetProvisionedModelThroughputCommand,
      GuardrailContentFilterConfigFilterSensitiveLog: () => GuardrailContentFilterConfigFilterSensitiveLog,
      GuardrailContentFilterFilterSensitiveLog: () => GuardrailContentFilterFilterSensitiveLog,
      GuardrailContentFilterType: () => GuardrailContentFilterType,
      GuardrailContentPolicyConfigFilterSensitiveLog: () => GuardrailContentPolicyConfigFilterSensitiveLog,
      GuardrailContentPolicyFilterSensitiveLog: () => GuardrailContentPolicyFilterSensitiveLog,
      GuardrailContextualGroundingFilterType: () => GuardrailContextualGroundingFilterType,
      GuardrailFilterStrength: () => GuardrailFilterStrength,
      GuardrailManagedWordsType: () => GuardrailManagedWordsType,
      GuardrailModality: () => GuardrailModality,
      GuardrailPiiEntityType: () => GuardrailPiiEntityType,
      GuardrailSensitiveInformationAction: () => GuardrailSensitiveInformationAction,
      GuardrailStatus: () => GuardrailStatus,
      GuardrailSummaryFilterSensitiveLog: () => GuardrailSummaryFilterSensitiveLog,
      GuardrailTopicConfigFilterSensitiveLog: () => GuardrailTopicConfigFilterSensitiveLog,
      GuardrailTopicFilterSensitiveLog: () => GuardrailTopicFilterSensitiveLog,
      GuardrailTopicPolicyConfigFilterSensitiveLog: () => GuardrailTopicPolicyConfigFilterSensitiveLog,
      GuardrailTopicPolicyFilterSensitiveLog: () => GuardrailTopicPolicyFilterSensitiveLog,
      GuardrailTopicType: () => GuardrailTopicType,
      HumanEvaluationConfigFilterSensitiveLog: () => HumanEvaluationConfigFilterSensitiveLog,
      HumanEvaluationCustomMetricFilterSensitiveLog: () => HumanEvaluationCustomMetricFilterSensitiveLog,
      HumanWorkflowConfigFilterSensitiveLog: () => HumanWorkflowConfigFilterSensitiveLog,
      InferenceProfileModelSource: () => InferenceProfileModelSource,
      InferenceProfileStatus: () => InferenceProfileStatus,
      InferenceProfileSummaryFilterSensitiveLog: () => InferenceProfileSummaryFilterSensitiveLog,
      InferenceProfileType: () => InferenceProfileType,
      InferenceType: () => InferenceType,
      InternalServerException: () => InternalServerException,
      InvocationLogSource: () => InvocationLogSource,
      InvocationLogsConfigFilterSensitiveLog: () => InvocationLogsConfigFilterSensitiveLog,
      KnowledgeBaseConfig: () => KnowledgeBaseConfig,
      KnowledgeBaseConfigFilterSensitiveLog: () => KnowledgeBaseConfigFilterSensitiveLog,
      KnowledgeBaseRetrievalConfigurationFilterSensitiveLog: () => KnowledgeBaseRetrievalConfigurationFilterSensitiveLog,
      KnowledgeBaseRetrieveAndGenerateConfigurationFilterSensitiveLog: () => KnowledgeBaseRetrieveAndGenerateConfigurationFilterSensitiveLog,
      KnowledgeBaseVectorSearchConfigurationFilterSensitiveLog: () => KnowledgeBaseVectorSearchConfigurationFilterSensitiveLog,
      ListCustomModelsCommand: () => ListCustomModelsCommand,
      ListEvaluationJobsCommand: () => ListEvaluationJobsCommand,
      ListFoundationModelsCommand: () => ListFoundationModelsCommand2,
      ListGuardrailsCommand: () => ListGuardrailsCommand,
      ListGuardrailsResponseFilterSensitiveLog: () => ListGuardrailsResponseFilterSensitiveLog,
      ListImportedModelsCommand: () => ListImportedModelsCommand,
      ListInferenceProfilesCommand: () => ListInferenceProfilesCommand,
      ListInferenceProfilesResponseFilterSensitiveLog: () => ListInferenceProfilesResponseFilterSensitiveLog,
      ListMarketplaceModelEndpointsCommand: () => ListMarketplaceModelEndpointsCommand,
      ListModelCopyJobsCommand: () => ListModelCopyJobsCommand,
      ListModelCustomizationJobsCommand: () => ListModelCustomizationJobsCommand,
      ListModelImportJobsCommand: () => ListModelImportJobsCommand,
      ListModelInvocationJobsCommand: () => ListModelInvocationJobsCommand,
      ListModelInvocationJobsResponseFilterSensitiveLog: () => ListModelInvocationJobsResponseFilterSensitiveLog,
      ListPromptRoutersCommand: () => ListPromptRoutersCommand,
      ListPromptRoutersResponseFilterSensitiveLog: () => ListPromptRoutersResponseFilterSensitiveLog,
      ListProvisionedModelThroughputsCommand: () => ListProvisionedModelThroughputsCommand,
      ListTagsForResourceCommand: () => ListTagsForResourceCommand,
      ModelCopyJobStatus: () => ModelCopyJobStatus,
      ModelCustomization: () => ModelCustomization,
      ModelCustomizationJobStatus: () => ModelCustomizationJobStatus,
      ModelDataSource: () => ModelDataSource,
      ModelImportJobStatus: () => ModelImportJobStatus,
      ModelInvocationJobInputDataConfig: () => ModelInvocationJobInputDataConfig,
      ModelInvocationJobOutputDataConfig: () => ModelInvocationJobOutputDataConfig,
      ModelInvocationJobStatus: () => ModelInvocationJobStatus,
      ModelInvocationJobSummaryFilterSensitiveLog: () => ModelInvocationJobSummaryFilterSensitiveLog,
      ModelModality: () => ModelModality,
      PromptRouterStatus: () => PromptRouterStatus,
      PromptRouterSummaryFilterSensitiveLog: () => PromptRouterSummaryFilterSensitiveLog,
      PromptRouterType: () => PromptRouterType,
      PromptTemplateFilterSensitiveLog: () => PromptTemplateFilterSensitiveLog,
      ProvisionedModelStatus: () => ProvisionedModelStatus,
      PutModelInvocationLoggingConfigurationCommand: () => PutModelInvocationLoggingConfigurationCommand,
      QueryTransformationType: () => QueryTransformationType,
      RAGConfig: () => RAGConfig,
      RAGConfigFilterSensitiveLog: () => RAGConfigFilterSensitiveLog,
      RegisterMarketplaceModelEndpointCommand: () => RegisterMarketplaceModelEndpointCommand,
      RequestMetadataBaseFiltersFilterSensitiveLog: () => RequestMetadataBaseFiltersFilterSensitiveLog,
      RequestMetadataFilters: () => RequestMetadataFilters,
      RequestMetadataFiltersFilterSensitiveLog: () => RequestMetadataFiltersFilterSensitiveLog,
      ResourceNotFoundException: () => ResourceNotFoundException,
      RetrievalFilter: () => RetrievalFilter,
      RetrievalFilterFilterSensitiveLog: () => RetrievalFilterFilterSensitiveLog,
      RetrieveAndGenerateConfigurationFilterSensitiveLog: () => RetrieveAndGenerateConfigurationFilterSensitiveLog,
      RetrieveAndGenerateType: () => RetrieveAndGenerateType,
      RetrieveConfigFilterSensitiveLog: () => RetrieveConfigFilterSensitiveLog,
      S3InputFormat: () => S3InputFormat,
      SearchType: () => SearchType,
      ServiceQuotaExceededException: () => ServiceQuotaExceededException,
      ServiceUnavailableException: () => ServiceUnavailableException,
      SortByProvisionedModels: () => SortByProvisionedModels,
      SortJobsBy: () => SortJobsBy,
      SortModelsBy: () => SortModelsBy,
      SortOrder: () => SortOrder,
      Status: () => Status,
      StopEvaluationJobCommand: () => StopEvaluationJobCommand,
      StopEvaluationJobRequestFilterSensitiveLog: () => StopEvaluationJobRequestFilterSensitiveLog,
      StopModelCustomizationJobCommand: () => StopModelCustomizationJobCommand,
      StopModelInvocationJobCommand: () => StopModelInvocationJobCommand,
      TagResourceCommand: () => TagResourceCommand,
      ThrottlingException: () => ThrottlingException,
      TooManyTagsException: () => TooManyTagsException,
      TrainingDataConfigFilterSensitiveLog: () => TrainingDataConfigFilterSensitiveLog,
      UntagResourceCommand: () => UntagResourceCommand,
      UpdateGuardrailCommand: () => UpdateGuardrailCommand,
      UpdateGuardrailRequestFilterSensitiveLog: () => UpdateGuardrailRequestFilterSensitiveLog,
      UpdateMarketplaceModelEndpointCommand: () => UpdateMarketplaceModelEndpointCommand,
      UpdateProvisionedModelThroughputCommand: () => UpdateProvisionedModelThroughputCommand,
      ValidationException: () => ValidationException,
      __Client: () => import_smithy_client7.Client,
      paginateListCustomModels: () => paginateListCustomModels,
      paginateListEvaluationJobs: () => paginateListEvaluationJobs,
      paginateListGuardrails: () => paginateListGuardrails,
      paginateListImportedModels: () => paginateListImportedModels,
      paginateListInferenceProfiles: () => paginateListInferenceProfiles,
      paginateListMarketplaceModelEndpoints: () => paginateListMarketplaceModelEndpoints,
      paginateListModelCopyJobs: () => paginateListModelCopyJobs,
      paginateListModelCustomizationJobs: () => paginateListModelCustomizationJobs,
      paginateListModelImportJobs: () => paginateListModelImportJobs,
      paginateListModelInvocationJobs: () => paginateListModelInvocationJobs,
      paginateListPromptRouters: () => paginateListPromptRouters,
      paginateListProvisionedModelThroughputs: () => paginateListProvisionedModelThroughputs
    });
    module.exports = __toCommonJS3(src_exports);
    var import_middleware_host_header = require_dist_cjs60();
    var import_middleware_logger = require_dist_cjs61();
    var import_middleware_recursion_detection = require_dist_cjs62();
    var import_middleware_user_agent = require_dist_cjs64();
    var import_config_resolver = require_dist_cjs26();
    var import_core5 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var import_middleware_content_length = require_dist_cjs27();
    var import_middleware_endpoint = require_dist_cjs32();
    var import_middleware_retry = require_dist_cjs35();
    var import_httpAuthSchemeProvider = require_httpAuthSchemeProvider5();
    var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "bedrock"
      };
    }, "resolveClientEndpointParameters");
    var commonParams = {
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
    var import_runtimeConfig = require_runtimeConfig8();
    var import_region_config_resolver = require_dist_cjs67();
    var import_protocol_http11 = require_dist_cjs2();
    var import_smithy_client7 = require_dist_cjs23();
    var getHttpAuthExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
      const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
      let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
      let _credentials = runtimeConfig.credentials;
      return {
        setHttpAuthScheme(httpAuthScheme) {
          const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
          if (index === -1) {
            _httpAuthSchemes.push(httpAuthScheme);
          } else {
            _httpAuthSchemes.splice(index, 1, httpAuthScheme);
          }
        },
        httpAuthSchemes() {
          return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
          _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
          return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
          _credentials = credentials;
        },
        credentials() {
          return _credentials;
        }
      };
    }, "getHttpAuthExtensionConfiguration");
    var resolveHttpAuthRuntimeConfig = /* @__PURE__ */ __name((config2) => {
      return {
        httpAuthSchemes: config2.httpAuthSchemes(),
        httpAuthSchemeProvider: config2.httpAuthSchemeProvider(),
        credentials: config2.credentials()
      };
    }, "resolveHttpAuthRuntimeConfig");
    var asPartial = /* @__PURE__ */ __name((t) => t, "asPartial");
    var resolveRuntimeExtensions = /* @__PURE__ */ __name((runtimeConfig, extensions) => {
      const extensionConfiguration = {
        ...asPartial((0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig)),
        ...asPartial((0, import_smithy_client7.getDefaultExtensionConfiguration)(runtimeConfig)),
        ...asPartial((0, import_protocol_http11.getHttpHandlerExtensionConfiguration)(runtimeConfig)),
        ...asPartial(getHttpAuthExtensionConfiguration(runtimeConfig))
      };
      extensions.forEach((extension) => extension.configure(extensionConfiguration));
      return {
        ...runtimeConfig,
        ...(0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
        ...(0, import_smithy_client7.resolveDefaultRuntimeConfig)(extensionConfiguration),
        ...(0, import_protocol_http11.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),
        ...resolveHttpAuthRuntimeConfig(extensionConfiguration)
      };
    }, "resolveRuntimeExtensions");
    var _BedrockClient = class _BedrockClient extends import_smithy_client7.Client {
      constructor(...[configuration]) {
        const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});
        const _config_1 = resolveClientEndpointParameters(_config_0);
        const _config_2 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_1);
        const _config_3 = (0, import_middleware_retry.resolveRetryConfig)(_config_2);
        const _config_4 = (0, import_config_resolver.resolveRegionConfig)(_config_3);
        const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, import_middleware_endpoint.resolveEndpointConfig)(_config_5);
        const _config_7 = (0, import_httpAuthSchemeProvider.resolveHttpAuthSchemeConfig)(_config_6);
        const _config_8 = resolveRuntimeExtensions(_config_7, (configuration == null ? void 0 : configuration.extensions) || []);
        super(_config_8);
        this.config = _config_8;
        this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_retry.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_content_length.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_host_header.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use(
          (0, import_core5.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
            httpAuthSchemeParametersProvider: import_httpAuthSchemeProvider.defaultBedrockHttpAuthSchemeParametersProvider,
            identityProviderConfigProvider: async (config2) => new import_core5.DefaultIdentityProviderConfig({
              "aws.auth#sigv4": config2.credentials
            })
          })
        );
        this.middlewareStack.use((0, import_core5.getHttpSigningPlugin)(this.config));
      }
      /**
       * Destroy underlying resources, like sockets. It's usually not necessary to do this.
       * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
       * Otherwise, sockets might stay open for quite a long time before the server terminates them.
       */
      destroy() {
        super.destroy();
      }
    };
    __name(_BedrockClient, "BedrockClient");
    var BedrockClient2 = _BedrockClient;
    var import_middleware_serde2 = require_dist_cjs7();
    var _BedrockServiceException = class _BedrockServiceException2 extends import_smithy_client7.ServiceException {
      /**
       * @internal
       */
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, _BedrockServiceException2.prototype);
      }
    };
    __name(_BedrockServiceException, "BedrockServiceException");
    var BedrockServiceException = _BedrockServiceException;
    var _AccessDeniedException = class _AccessDeniedException2 extends BedrockServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "AccessDeniedException",
          $fault: "client",
          ...opts
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _AccessDeniedException2.prototype);
      }
    };
    __name(_AccessDeniedException, "AccessDeniedException");
    var AccessDeniedException = _AccessDeniedException;
    var _ConflictException = class _ConflictException2 extends BedrockServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ConflictException",
          $fault: "client",
          ...opts
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ConflictException2.prototype);
      }
    };
    __name(_ConflictException, "ConflictException");
    var ConflictException = _ConflictException;
    var EndpointConfig;
    ((EndpointConfig3) => {
      EndpointConfig3.visit = /* @__PURE__ */ __name((value, visitor) => {
        if (value.sageMaker !== void 0)
          return visitor.sageMaker(value.sageMaker);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      }, "visit");
    })(EndpointConfig || (EndpointConfig = {}));
    var Status = {
      INCOMPATIBLE_ENDPOINT: "INCOMPATIBLE_ENDPOINT",
      REGISTERED: "REGISTERED"
    };
    var _InternalServerException = class _InternalServerException2 extends BedrockServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InternalServerException",
          $fault: "server",
          ...opts
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, _InternalServerException2.prototype);
      }
    };
    __name(_InternalServerException, "InternalServerException");
    var InternalServerException = _InternalServerException;
    var _ResourceNotFoundException = class _ResourceNotFoundException2 extends BedrockServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ResourceNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ResourceNotFoundException2.prototype);
      }
    };
    __name(_ResourceNotFoundException, "ResourceNotFoundException");
    var ResourceNotFoundException = _ResourceNotFoundException;
    var _ServiceQuotaExceededException = class _ServiceQuotaExceededException2 extends BedrockServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ServiceQuotaExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "ServiceQuotaExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ServiceQuotaExceededException2.prototype);
      }
    };
    __name(_ServiceQuotaExceededException, "ServiceQuotaExceededException");
    var ServiceQuotaExceededException = _ServiceQuotaExceededException;
    var _ThrottlingException = class _ThrottlingException2 extends BedrockServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ThrottlingException",
          $fault: "client",
          ...opts
        });
        this.name = "ThrottlingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ThrottlingException2.prototype);
      }
    };
    __name(_ThrottlingException, "ThrottlingException");
    var ThrottlingException = _ThrottlingException;
    var _ValidationException = class _ValidationException2 extends BedrockServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ValidationException",
          $fault: "client",
          ...opts
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ValidationException2.prototype);
      }
    };
    __name(_ValidationException, "ValidationException");
    var ValidationException = _ValidationException;
    var _ServiceUnavailableException = class _ServiceUnavailableException2 extends BedrockServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ServiceUnavailableException",
          $fault: "server",
          ...opts
        });
        this.name = "ServiceUnavailableException";
        this.$fault = "server";
        Object.setPrototypeOf(this, _ServiceUnavailableException2.prototype);
      }
    };
    __name(_ServiceUnavailableException, "ServiceUnavailableException");
    var ServiceUnavailableException = _ServiceUnavailableException;
    var EvaluationJobStatus = {
      COMPLETED: "Completed",
      DELETING: "Deleting",
      FAILED: "Failed",
      IN_PROGRESS: "InProgress",
      STOPPED: "Stopped",
      STOPPING: "Stopping"
    };
    var ApplicationType = {
      MODEL_EVALUATION: "ModelEvaluation",
      RAG_EVALUATION: "RagEvaluation"
    };
    var EvaluationDatasetLocation;
    ((EvaluationDatasetLocation3) => {
      EvaluationDatasetLocation3.visit = /* @__PURE__ */ __name((value, visitor) => {
        if (value.s3Uri !== void 0)
          return visitor.s3Uri(value.s3Uri);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      }, "visit");
    })(EvaluationDatasetLocation || (EvaluationDatasetLocation = {}));
    var EvaluationTaskType = {
      CLASSIFICATION: "Classification",
      CUSTOM: "Custom",
      GENERATION: "Generation",
      QUESTION_AND_ANSWER: "QuestionAndAnswer",
      SUMMARIZATION: "Summarization"
    };
    var EvaluatorModelConfig;
    ((EvaluatorModelConfig3) => {
      EvaluatorModelConfig3.visit = /* @__PURE__ */ __name((value, visitor) => {
        if (value.bedrockEvaluatorModels !== void 0)
          return visitor.bedrockEvaluatorModels(value.bedrockEvaluatorModels);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      }, "visit");
    })(EvaluatorModelConfig || (EvaluatorModelConfig = {}));
    var EvaluationConfig;
    ((EvaluationConfig3) => {
      EvaluationConfig3.visit = /* @__PURE__ */ __name((value, visitor) => {
        if (value.automated !== void 0)
          return visitor.automated(value.automated);
        if (value.human !== void 0)
          return visitor.human(value.human);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      }, "visit");
    })(EvaluationConfig || (EvaluationConfig = {}));
    var EvaluationModelConfig;
    ((EvaluationModelConfig3) => {
      EvaluationModelConfig3.visit = /* @__PURE__ */ __name((value, visitor) => {
        if (value.bedrockModel !== void 0)
          return visitor.bedrockModel(value.bedrockModel);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      }, "visit");
    })(EvaluationModelConfig || (EvaluationModelConfig = {}));
    var ExternalSourceType = {
      BYTE_CONTENT: "BYTE_CONTENT",
      S3: "S3"
    };
    var QueryTransformationType = {
      QUERY_DECOMPOSITION: "QUERY_DECOMPOSITION"
    };
    var SearchType = {
      HYBRID: "HYBRID",
      SEMANTIC: "SEMANTIC"
    };
    var RetrieveAndGenerateType = {
      EXTERNAL_SOURCES: "EXTERNAL_SOURCES",
      KNOWLEDGE_BASE: "KNOWLEDGE_BASE"
    };
    var EvaluationJobType = {
      AUTOMATED: "Automated",
      HUMAN: "Human"
    };
    var SortJobsBy = {
      CREATION_TIME: "CreationTime"
    };
    var SortOrder = {
      ASCENDING: "Ascending",
      DESCENDING: "Descending"
    };
    var GuardrailModality = {
      IMAGE: "IMAGE",
      TEXT: "TEXT"
    };
    var GuardrailFilterStrength = {
      HIGH: "HIGH",
      LOW: "LOW",
      MEDIUM: "MEDIUM",
      NONE: "NONE"
    };
    var GuardrailContentFilterType = {
      HATE: "HATE",
      INSULTS: "INSULTS",
      MISCONDUCT: "MISCONDUCT",
      PROMPT_ATTACK: "PROMPT_ATTACK",
      SEXUAL: "SEXUAL",
      VIOLENCE: "VIOLENCE"
    };
    var GuardrailContextualGroundingFilterType = {
      GROUNDING: "GROUNDING",
      RELEVANCE: "RELEVANCE"
    };
    var GuardrailSensitiveInformationAction = {
      ANONYMIZE: "ANONYMIZE",
      BLOCK: "BLOCK"
    };
    var GuardrailPiiEntityType = {
      ADDRESS: "ADDRESS",
      AGE: "AGE",
      AWS_ACCESS_KEY: "AWS_ACCESS_KEY",
      AWS_SECRET_KEY: "AWS_SECRET_KEY",
      CA_HEALTH_NUMBER: "CA_HEALTH_NUMBER",
      CA_SOCIAL_INSURANCE_NUMBER: "CA_SOCIAL_INSURANCE_NUMBER",
      CREDIT_DEBIT_CARD_CVV: "CREDIT_DEBIT_CARD_CVV",
      CREDIT_DEBIT_CARD_EXPIRY: "CREDIT_DEBIT_CARD_EXPIRY",
      CREDIT_DEBIT_CARD_NUMBER: "CREDIT_DEBIT_CARD_NUMBER",
      DRIVER_ID: "DRIVER_ID",
      EMAIL: "EMAIL",
      INTERNATIONAL_BANK_ACCOUNT_NUMBER: "INTERNATIONAL_BANK_ACCOUNT_NUMBER",
      IP_ADDRESS: "IP_ADDRESS",
      LICENSE_PLATE: "LICENSE_PLATE",
      MAC_ADDRESS: "MAC_ADDRESS",
      NAME: "NAME",
      PASSWORD: "PASSWORD",
      PHONE: "PHONE",
      PIN: "PIN",
      SWIFT_CODE: "SWIFT_CODE",
      UK_NATIONAL_HEALTH_SERVICE_NUMBER: "UK_NATIONAL_HEALTH_SERVICE_NUMBER",
      UK_NATIONAL_INSURANCE_NUMBER: "UK_NATIONAL_INSURANCE_NUMBER",
      UK_UNIQUE_TAXPAYER_REFERENCE_NUMBER: "UK_UNIQUE_TAXPAYER_REFERENCE_NUMBER",
      URL: "URL",
      USERNAME: "USERNAME",
      US_BANK_ACCOUNT_NUMBER: "US_BANK_ACCOUNT_NUMBER",
      US_BANK_ROUTING_NUMBER: "US_BANK_ROUTING_NUMBER",
      US_INDIVIDUAL_TAX_IDENTIFICATION_NUMBER: "US_INDIVIDUAL_TAX_IDENTIFICATION_NUMBER",
      US_PASSPORT_NUMBER: "US_PASSPORT_NUMBER",
      US_SOCIAL_SECURITY_NUMBER: "US_SOCIAL_SECURITY_NUMBER",
      VEHICLE_IDENTIFICATION_NUMBER: "VEHICLE_IDENTIFICATION_NUMBER"
    };
    var GuardrailTopicType = {
      DENY: "DENY"
    };
    var GuardrailManagedWordsType = {
      PROFANITY: "PROFANITY"
    };
    var _TooManyTagsException = class _TooManyTagsException2 extends BedrockServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "TooManyTagsException",
          $fault: "client",
          ...opts
        });
        this.name = "TooManyTagsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _TooManyTagsException2.prototype);
        this.resourceName = opts.resourceName;
      }
    };
    __name(_TooManyTagsException, "TooManyTagsException");
    var TooManyTagsException = _TooManyTagsException;
    var GuardrailStatus = {
      CREATING: "CREATING",
      DELETING: "DELETING",
      FAILED: "FAILED",
      READY: "READY",
      UPDATING: "UPDATING",
      VERSIONING: "VERSIONING"
    };
    var InferenceProfileModelSource;
    ((InferenceProfileModelSource3) => {
      InferenceProfileModelSource3.visit = /* @__PURE__ */ __name((value, visitor) => {
        if (value.copyFrom !== void 0)
          return visitor.copyFrom(value.copyFrom);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      }, "visit");
    })(InferenceProfileModelSource || (InferenceProfileModelSource = {}));
    var InferenceProfileStatus = {
      ACTIVE: "ACTIVE"
    };
    var InferenceProfileType = {
      APPLICATION: "APPLICATION",
      SYSTEM_DEFINED: "SYSTEM_DEFINED"
    };
    var ModelCopyJobStatus = {
      COMPLETED: "Completed",
      FAILED: "Failed",
      IN_PROGRESS: "InProgress"
    };
    var ModelDataSource;
    ((ModelDataSource3) => {
      ModelDataSource3.visit = /* @__PURE__ */ __name((value, visitor) => {
        if (value.s3DataSource !== void 0)
          return visitor.s3DataSource(value.s3DataSource);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      }, "visit");
    })(ModelDataSource || (ModelDataSource = {}));
    var ModelImportJobStatus = {
      COMPLETED: "Completed",
      FAILED: "Failed",
      IN_PROGRESS: "InProgress"
    };
    var SortModelsBy = {
      CREATION_TIME: "CreationTime"
    };
    var S3InputFormat = {
      JSONL: "JSONL"
    };
    var ModelInvocationJobInputDataConfig;
    ((ModelInvocationJobInputDataConfig3) => {
      ModelInvocationJobInputDataConfig3.visit = /* @__PURE__ */ __name((value, visitor) => {
        if (value.s3InputDataConfig !== void 0)
          return visitor.s3InputDataConfig(value.s3InputDataConfig);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      }, "visit");
    })(ModelInvocationJobInputDataConfig || (ModelInvocationJobInputDataConfig = {}));
    var ModelInvocationJobOutputDataConfig;
    ((ModelInvocationJobOutputDataConfig3) => {
      ModelInvocationJobOutputDataConfig3.visit = /* @__PURE__ */ __name((value, visitor) => {
        if (value.s3OutputDataConfig !== void 0)
          return visitor.s3OutputDataConfig(value.s3OutputDataConfig);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      }, "visit");
    })(ModelInvocationJobOutputDataConfig || (ModelInvocationJobOutputDataConfig = {}));
    var ModelInvocationJobStatus = {
      COMPLETED: "Completed",
      EXPIRED: "Expired",
      FAILED: "Failed",
      IN_PROGRESS: "InProgress",
      PARTIALLY_COMPLETED: "PartiallyCompleted",
      SCHEDULED: "Scheduled",
      STOPPED: "Stopped",
      STOPPING: "Stopping",
      SUBMITTED: "Submitted",
      VALIDATING: "Validating"
    };
    var CustomizationConfig;
    ((CustomizationConfig3) => {
      CustomizationConfig3.visit = /* @__PURE__ */ __name((value, visitor) => {
        if (value.distillationConfig !== void 0)
          return visitor.distillationConfig(value.distillationConfig);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      }, "visit");
    })(CustomizationConfig || (CustomizationConfig = {}));
    var CustomizationType = {
      CONTINUED_PRE_TRAINING: "CONTINUED_PRE_TRAINING",
      DISTILLATION: "DISTILLATION",
      FINE_TUNING: "FINE_TUNING"
    };
    var InvocationLogSource;
    ((InvocationLogSource3) => {
      InvocationLogSource3.visit = /* @__PURE__ */ __name((value, visitor) => {
        if (value.s3Uri !== void 0)
          return visitor.s3Uri(value.s3Uri);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      }, "visit");
    })(InvocationLogSource || (InvocationLogSource = {}));
    var RequestMetadataFilters;
    ((RequestMetadataFilters3) => {
      RequestMetadataFilters3.visit = /* @__PURE__ */ __name((value, visitor) => {
        if (value.equals !== void 0)
          return visitor.equals(value.equals);
        if (value.notEquals !== void 0)
          return visitor.notEquals(value.notEquals);
        if (value.andAll !== void 0)
          return visitor.andAll(value.andAll);
        if (value.orAll !== void 0)
          return visitor.orAll(value.orAll);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      }, "visit");
    })(RequestMetadataFilters || (RequestMetadataFilters = {}));
    var ModelCustomization = {
      CONTINUED_PRE_TRAINING: "CONTINUED_PRE_TRAINING",
      DISTILLATION: "DISTILLATION",
      FINE_TUNING: "FINE_TUNING"
    };
    var InferenceType = {
      ON_DEMAND: "ON_DEMAND",
      PROVISIONED: "PROVISIONED"
    };
    var ModelModality = {
      EMBEDDING: "EMBEDDING",
      IMAGE: "IMAGE",
      TEXT: "TEXT"
    };
    var FoundationModelLifecycleStatus = {
      ACTIVE: "ACTIVE",
      LEGACY: "LEGACY"
    };
    var PromptRouterStatus = {
      AVAILABLE: "AVAILABLE"
    };
    var PromptRouterType = {
      CUSTOM: "custom",
      DEFAULT: "default"
    };
    var CommitmentDuration = {
      ONE_MONTH: "OneMonth",
      SIX_MONTHS: "SixMonths"
    };
    var ProvisionedModelStatus = {
      CREATING: "Creating",
      FAILED: "Failed",
      IN_SERVICE: "InService",
      UPDATING: "Updating"
    };
    var SortByProvisionedModels = {
      CREATION_TIME: "CreationTime"
    };
    var ModelCustomizationJobStatus = {
      COMPLETED: "Completed",
      FAILED: "Failed",
      IN_PROGRESS: "InProgress",
      STOPPED: "Stopped",
      STOPPING: "Stopping"
    };
    var FineTuningJobStatus = {
      COMPLETED: "Completed",
      FAILED: "Failed",
      IN_PROGRESS: "InProgress",
      STOPPED: "Stopped",
      STOPPING: "Stopping"
    };
    var RetrievalFilter;
    ((RetrievalFilter2) => {
      RetrievalFilter2.visit = /* @__PURE__ */ __name((value, visitor) => {
        if (value.equals !== void 0)
          return visitor.equals(value.equals);
        if (value.notEquals !== void 0)
          return visitor.notEquals(value.notEquals);
        if (value.greaterThan !== void 0)
          return visitor.greaterThan(value.greaterThan);
        if (value.greaterThanOrEquals !== void 0)
          return visitor.greaterThanOrEquals(value.greaterThanOrEquals);
        if (value.lessThan !== void 0)
          return visitor.lessThan(value.lessThan);
        if (value.lessThanOrEquals !== void 0)
          return visitor.lessThanOrEquals(value.lessThanOrEquals);
        if (value.in !== void 0)
          return visitor.in(value.in);
        if (value.notIn !== void 0)
          return visitor.notIn(value.notIn);
        if (value.startsWith !== void 0)
          return visitor.startsWith(value.startsWith);
        if (value.listContains !== void 0)
          return visitor.listContains(value.listContains);
        if (value.stringContains !== void 0)
          return visitor.stringContains(value.stringContains);
        if (value.andAll !== void 0)
          return visitor.andAll(value.andAll);
        if (value.orAll !== void 0)
          return visitor.orAll(value.orAll);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      }, "visit");
    })(RetrievalFilter || (RetrievalFilter = {}));
    var KnowledgeBaseConfig;
    ((KnowledgeBaseConfig2) => {
      KnowledgeBaseConfig2.visit = /* @__PURE__ */ __name((value, visitor) => {
        if (value.retrieveConfig !== void 0)
          return visitor.retrieveConfig(value.retrieveConfig);
        if (value.retrieveAndGenerateConfig !== void 0)
          return visitor.retrieveAndGenerateConfig(value.retrieveAndGenerateConfig);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      }, "visit");
    })(KnowledgeBaseConfig || (KnowledgeBaseConfig = {}));
    var RAGConfig;
    ((RAGConfig2) => {
      RAGConfig2.visit = /* @__PURE__ */ __name((value, visitor) => {
        if (value.knowledgeBaseConfig !== void 0)
          return visitor.knowledgeBaseConfig(value.knowledgeBaseConfig);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      }, "visit");
    })(RAGConfig || (RAGConfig = {}));
    var EvaluationInferenceConfig;
    ((EvaluationInferenceConfig2) => {
      EvaluationInferenceConfig2.visit = /* @__PURE__ */ __name((value, visitor) => {
        if (value.models !== void 0)
          return visitor.models(value.models);
        if (value.ragConfigs !== void 0)
          return visitor.ragConfigs(value.ragConfigs);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      }, "visit");
    })(EvaluationInferenceConfig || (EvaluationInferenceConfig = {}));
    var BatchDeleteEvaluationJobRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.jobIdentifiers && { jobIdentifiers: import_smithy_client7.SENSITIVE_STRING }
    }), "BatchDeleteEvaluationJobRequestFilterSensitiveLog");
    var BatchDeleteEvaluationJobErrorFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.jobIdentifier && { jobIdentifier: import_smithy_client7.SENSITIVE_STRING }
    }), "BatchDeleteEvaluationJobErrorFilterSensitiveLog");
    var BatchDeleteEvaluationJobItemFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.jobIdentifier && { jobIdentifier: import_smithy_client7.SENSITIVE_STRING }
    }), "BatchDeleteEvaluationJobItemFilterSensitiveLog");
    var BatchDeleteEvaluationJobResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.errors && { errors: obj.errors.map((item) => BatchDeleteEvaluationJobErrorFilterSensitiveLog(item)) },
      ...obj.evaluationJobs && {
        evaluationJobs: obj.evaluationJobs.map((item) => BatchDeleteEvaluationJobItemFilterSensitiveLog(item))
      }
    }), "BatchDeleteEvaluationJobResponseFilterSensitiveLog");
    var EvaluationDatasetFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.name && { name: import_smithy_client7.SENSITIVE_STRING },
      ...obj.datasetLocation && { datasetLocation: obj.datasetLocation }
    }), "EvaluationDatasetFilterSensitiveLog");
    var EvaluationDatasetMetricConfigFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.dataset && { dataset: EvaluationDatasetFilterSensitiveLog(obj.dataset) },
      ...obj.metricNames && { metricNames: import_smithy_client7.SENSITIVE_STRING }
    }), "EvaluationDatasetMetricConfigFilterSensitiveLog");
    var AutomatedEvaluationConfigFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.datasetMetricConfigs && {
        datasetMetricConfigs: obj.datasetMetricConfigs.map((item) => EvaluationDatasetMetricConfigFilterSensitiveLog(item))
      },
      ...obj.evaluatorModelConfig && { evaluatorModelConfig: obj.evaluatorModelConfig }
    }), "AutomatedEvaluationConfigFilterSensitiveLog");
    var HumanEvaluationCustomMetricFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.name && { name: import_smithy_client7.SENSITIVE_STRING },
      ...obj.description && { description: import_smithy_client7.SENSITIVE_STRING }
    }), "HumanEvaluationCustomMetricFilterSensitiveLog");
    var HumanWorkflowConfigFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.instructions && { instructions: import_smithy_client7.SENSITIVE_STRING }
    }), "HumanWorkflowConfigFilterSensitiveLog");
    var HumanEvaluationConfigFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.humanWorkflowConfig && {
        humanWorkflowConfig: HumanWorkflowConfigFilterSensitiveLog(obj.humanWorkflowConfig)
      },
      ...obj.customMetrics && {
        customMetrics: obj.customMetrics.map((item) => HumanEvaluationCustomMetricFilterSensitiveLog(item))
      },
      ...obj.datasetMetricConfigs && {
        datasetMetricConfigs: obj.datasetMetricConfigs.map((item) => EvaluationDatasetMetricConfigFilterSensitiveLog(item))
      }
    }), "HumanEvaluationConfigFilterSensitiveLog");
    var EvaluationConfigFilterSensitiveLog = /* @__PURE__ */ __name((obj) => {
      if (obj.automated !== void 0)
        return { automated: AutomatedEvaluationConfigFilterSensitiveLog(obj.automated) };
      if (obj.human !== void 0)
        return { human: HumanEvaluationConfigFilterSensitiveLog(obj.human) };
      if (obj.$unknown !== void 0)
        return { [obj.$unknown[0]]: "UNKNOWN" };
    }, "EvaluationConfigFilterSensitiveLog");
    var EvaluationBedrockModelFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.inferenceParams && { inferenceParams: import_smithy_client7.SENSITIVE_STRING }
    }), "EvaluationBedrockModelFilterSensitiveLog");
    var EvaluationModelConfigFilterSensitiveLog = /* @__PURE__ */ __name((obj) => {
      if (obj.bedrockModel !== void 0)
        return { bedrockModel: EvaluationBedrockModelFilterSensitiveLog(obj.bedrockModel) };
      if (obj.$unknown !== void 0)
        return { [obj.$unknown[0]]: "UNKNOWN" };
    }, "EvaluationModelConfigFilterSensitiveLog");
    var PromptTemplateFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.textPromptTemplate && { textPromptTemplate: import_smithy_client7.SENSITIVE_STRING }
    }), "PromptTemplateFilterSensitiveLog");
    var ExternalSourcesGenerationConfigurationFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.promptTemplate && { promptTemplate: PromptTemplateFilterSensitiveLog(obj.promptTemplate) }
    }), "ExternalSourcesGenerationConfigurationFilterSensitiveLog");
    var ByteContentDocFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.identifier && { identifier: import_smithy_client7.SENSITIVE_STRING },
      ...obj.data && { data: import_smithy_client7.SENSITIVE_STRING }
    }), "ByteContentDocFilterSensitiveLog");
    var ExternalSourceFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.byteContent && { byteContent: ByteContentDocFilterSensitiveLog(obj.byteContent) }
    }), "ExternalSourceFilterSensitiveLog");
    var ExternalSourcesRetrieveAndGenerateConfigurationFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.sources && { sources: obj.sources.map((item) => ExternalSourceFilterSensitiveLog(item)) },
      ...obj.generationConfiguration && {
        generationConfiguration: ExternalSourcesGenerationConfigurationFilterSensitiveLog(obj.generationConfiguration)
      }
    }), "ExternalSourcesRetrieveAndGenerateConfigurationFilterSensitiveLog");
    var GenerationConfigurationFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.promptTemplate && { promptTemplate: PromptTemplateFilterSensitiveLog(obj.promptTemplate) }
    }), "GenerationConfigurationFilterSensitiveLog");
    var GetEvaluationJobRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.jobIdentifier && { jobIdentifier: import_smithy_client7.SENSITIVE_STRING }
    }), "GetEvaluationJobRequestFilterSensitiveLog");
    var StopEvaluationJobRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.jobIdentifier && { jobIdentifier: import_smithy_client7.SENSITIVE_STRING }
    }), "StopEvaluationJobRequestFilterSensitiveLog");
    var GuardrailContentFilterConfigFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.inputModalities && { inputModalities: import_smithy_client7.SENSITIVE_STRING },
      ...obj.outputModalities && { outputModalities: import_smithy_client7.SENSITIVE_STRING }
    }), "GuardrailContentFilterConfigFilterSensitiveLog");
    var GuardrailContentPolicyConfigFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.filtersConfig && {
        filtersConfig: obj.filtersConfig.map((item) => GuardrailContentFilterConfigFilterSensitiveLog(item))
      }
    }), "GuardrailContentPolicyConfigFilterSensitiveLog");
    var GuardrailTopicConfigFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.name && { name: import_smithy_client7.SENSITIVE_STRING },
      ...obj.definition && { definition: import_smithy_client7.SENSITIVE_STRING },
      ...obj.examples && { examples: import_smithy_client7.SENSITIVE_STRING }
    }), "GuardrailTopicConfigFilterSensitiveLog");
    var GuardrailTopicPolicyConfigFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.topicsConfig && {
        topicsConfig: obj.topicsConfig.map((item) => GuardrailTopicConfigFilterSensitiveLog(item))
      }
    }), "GuardrailTopicPolicyConfigFilterSensitiveLog");
    var CreateGuardrailRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.name && { name: import_smithy_client7.SENSITIVE_STRING },
      ...obj.description && { description: import_smithy_client7.SENSITIVE_STRING },
      ...obj.topicPolicyConfig && {
        topicPolicyConfig: GuardrailTopicPolicyConfigFilterSensitiveLog(obj.topicPolicyConfig)
      },
      ...obj.contentPolicyConfig && {
        contentPolicyConfig: GuardrailContentPolicyConfigFilterSensitiveLog(obj.contentPolicyConfig)
      },
      ...obj.blockedInputMessaging && { blockedInputMessaging: import_smithy_client7.SENSITIVE_STRING },
      ...obj.blockedOutputsMessaging && { blockedOutputsMessaging: import_smithy_client7.SENSITIVE_STRING }
    }), "CreateGuardrailRequestFilterSensitiveLog");
    var CreateGuardrailVersionRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.description && { description: import_smithy_client7.SENSITIVE_STRING }
    }), "CreateGuardrailVersionRequestFilterSensitiveLog");
    var GuardrailContentFilterFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.inputModalities && { inputModalities: import_smithy_client7.SENSITIVE_STRING },
      ...obj.outputModalities && { outputModalities: import_smithy_client7.SENSITIVE_STRING }
    }), "GuardrailContentFilterFilterSensitiveLog");
    var GuardrailContentPolicyFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.filters && { filters: obj.filters.map((item) => GuardrailContentFilterFilterSensitiveLog(item)) }
    }), "GuardrailContentPolicyFilterSensitiveLog");
    var GuardrailTopicFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.name && { name: import_smithy_client7.SENSITIVE_STRING },
      ...obj.definition && { definition: import_smithy_client7.SENSITIVE_STRING },
      ...obj.examples && { examples: import_smithy_client7.SENSITIVE_STRING }
    }), "GuardrailTopicFilterSensitiveLog");
    var GuardrailTopicPolicyFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.topics && { topics: obj.topics.map((item) => GuardrailTopicFilterSensitiveLog(item)) }
    }), "GuardrailTopicPolicyFilterSensitiveLog");
    var GetGuardrailResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.name && { name: import_smithy_client7.SENSITIVE_STRING },
      ...obj.description && { description: import_smithy_client7.SENSITIVE_STRING },
      ...obj.topicPolicy && { topicPolicy: GuardrailTopicPolicyFilterSensitiveLog(obj.topicPolicy) },
      ...obj.contentPolicy && { contentPolicy: GuardrailContentPolicyFilterSensitiveLog(obj.contentPolicy) },
      ...obj.statusReasons && { statusReasons: import_smithy_client7.SENSITIVE_STRING },
      ...obj.failureRecommendations && { failureRecommendations: import_smithy_client7.SENSITIVE_STRING },
      ...obj.blockedInputMessaging && { blockedInputMessaging: import_smithy_client7.SENSITIVE_STRING },
      ...obj.blockedOutputsMessaging && { blockedOutputsMessaging: import_smithy_client7.SENSITIVE_STRING }
    }), "GetGuardrailResponseFilterSensitiveLog");
    var GuardrailSummaryFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.name && { name: import_smithy_client7.SENSITIVE_STRING },
      ...obj.description && { description: import_smithy_client7.SENSITIVE_STRING }
    }), "GuardrailSummaryFilterSensitiveLog");
    var ListGuardrailsResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.guardrails && { guardrails: obj.guardrails.map((item) => GuardrailSummaryFilterSensitiveLog(item)) }
    }), "ListGuardrailsResponseFilterSensitiveLog");
    var UpdateGuardrailRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.name && { name: import_smithy_client7.SENSITIVE_STRING },
      ...obj.description && { description: import_smithy_client7.SENSITIVE_STRING },
      ...obj.topicPolicyConfig && {
        topicPolicyConfig: GuardrailTopicPolicyConfigFilterSensitiveLog(obj.topicPolicyConfig)
      },
      ...obj.contentPolicyConfig && {
        contentPolicyConfig: GuardrailContentPolicyConfigFilterSensitiveLog(obj.contentPolicyConfig)
      },
      ...obj.blockedInputMessaging && { blockedInputMessaging: import_smithy_client7.SENSITIVE_STRING },
      ...obj.blockedOutputsMessaging && { blockedOutputsMessaging: import_smithy_client7.SENSITIVE_STRING }
    }), "UpdateGuardrailRequestFilterSensitiveLog");
    var CreateInferenceProfileRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.description && { description: import_smithy_client7.SENSITIVE_STRING },
      ...obj.modelSource && { modelSource: obj.modelSource }
    }), "CreateInferenceProfileRequestFilterSensitiveLog");
    var GetInferenceProfileResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.description && { description: import_smithy_client7.SENSITIVE_STRING }
    }), "GetInferenceProfileResponseFilterSensitiveLog");
    var InferenceProfileSummaryFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.description && { description: import_smithy_client7.SENSITIVE_STRING }
    }), "InferenceProfileSummaryFilterSensitiveLog");
    var ListInferenceProfilesResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.inferenceProfileSummaries && {
        inferenceProfileSummaries: obj.inferenceProfileSummaries.map(
          (item) => InferenceProfileSummaryFilterSensitiveLog(item)
        )
      }
    }), "ListInferenceProfilesResponseFilterSensitiveLog");
    var GetModelInvocationJobResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.message && { message: import_smithy_client7.SENSITIVE_STRING },
      ...obj.inputDataConfig && { inputDataConfig: obj.inputDataConfig },
      ...obj.outputDataConfig && { outputDataConfig: obj.outputDataConfig }
    }), "GetModelInvocationJobResponseFilterSensitiveLog");
    var ModelInvocationJobSummaryFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.message && { message: import_smithy_client7.SENSITIVE_STRING },
      ...obj.inputDataConfig && { inputDataConfig: obj.inputDataConfig },
      ...obj.outputDataConfig && { outputDataConfig: obj.outputDataConfig }
    }), "ModelInvocationJobSummaryFilterSensitiveLog");
    var ListModelInvocationJobsResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.invocationJobSummaries && {
        invocationJobSummaries: obj.invocationJobSummaries.map((item) => ModelInvocationJobSummaryFilterSensitiveLog(item))
      }
    }), "ListModelInvocationJobsResponseFilterSensitiveLog");
    var RequestMetadataBaseFiltersFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.equals && { equals: import_smithy_client7.SENSITIVE_STRING },
      ...obj.notEquals && { notEquals: import_smithy_client7.SENSITIVE_STRING }
    }), "RequestMetadataBaseFiltersFilterSensitiveLog");
    var RequestMetadataFiltersFilterSensitiveLog = /* @__PURE__ */ __name((obj) => {
      if (obj.equals !== void 0)
        return { equals: import_smithy_client7.SENSITIVE_STRING };
      if (obj.notEquals !== void 0)
        return { notEquals: import_smithy_client7.SENSITIVE_STRING };
      if (obj.andAll !== void 0)
        return { andAll: obj.andAll.map((item) => RequestMetadataBaseFiltersFilterSensitiveLog(item)) };
      if (obj.orAll !== void 0)
        return { orAll: obj.orAll.map((item) => RequestMetadataBaseFiltersFilterSensitiveLog(item)) };
      if (obj.$unknown !== void 0)
        return { [obj.$unknown[0]]: "UNKNOWN" };
    }, "RequestMetadataFiltersFilterSensitiveLog");
    var InvocationLogsConfigFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.invocationLogSource && { invocationLogSource: obj.invocationLogSource },
      ...obj.requestMetadataFilters && {
        requestMetadataFilters: RequestMetadataFiltersFilterSensitiveLog(obj.requestMetadataFilters)
      }
    }), "InvocationLogsConfigFilterSensitiveLog");
    var TrainingDataConfigFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.invocationLogsConfig && {
        invocationLogsConfig: InvocationLogsConfigFilterSensitiveLog(obj.invocationLogsConfig)
      }
    }), "TrainingDataConfigFilterSensitiveLog");
    var GetCustomModelResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.trainingDataConfig && { trainingDataConfig: TrainingDataConfigFilterSensitiveLog(obj.trainingDataConfig) },
      ...obj.customizationConfig && { customizationConfig: obj.customizationConfig }
    }), "GetCustomModelResponseFilterSensitiveLog");
    var GetPromptRouterResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.description && { description: import_smithy_client7.SENSITIVE_STRING }
    }), "GetPromptRouterResponseFilterSensitiveLog");
    var PromptRouterSummaryFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.description && { description: import_smithy_client7.SENSITIVE_STRING }
    }), "PromptRouterSummaryFilterSensitiveLog");
    var ListPromptRoutersResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.promptRouterSummaries && {
        promptRouterSummaries: obj.promptRouterSummaries.map((item) => PromptRouterSummaryFilterSensitiveLog(item))
      }
    }), "ListPromptRoutersResponseFilterSensitiveLog");
    var CreateModelCustomizationJobRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.trainingDataConfig && { trainingDataConfig: TrainingDataConfigFilterSensitiveLog(obj.trainingDataConfig) },
      ...obj.customizationConfig && { customizationConfig: obj.customizationConfig }
    }), "CreateModelCustomizationJobRequestFilterSensitiveLog");
    var GetModelCustomizationJobResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.trainingDataConfig && { trainingDataConfig: TrainingDataConfigFilterSensitiveLog(obj.trainingDataConfig) },
      ...obj.customizationConfig && { customizationConfig: obj.customizationConfig }
    }), "GetModelCustomizationJobResponseFilterSensitiveLog");
    var RetrievalFilterFilterSensitiveLog = /* @__PURE__ */ __name((obj) => {
      if (obj.equals !== void 0)
        return { equals: obj.equals };
      if (obj.notEquals !== void 0)
        return { notEquals: obj.notEquals };
      if (obj.greaterThan !== void 0)
        return { greaterThan: obj.greaterThan };
      if (obj.greaterThanOrEquals !== void 0)
        return { greaterThanOrEquals: obj.greaterThanOrEquals };
      if (obj.lessThan !== void 0)
        return { lessThan: obj.lessThan };
      if (obj.lessThanOrEquals !== void 0)
        return { lessThanOrEquals: obj.lessThanOrEquals };
      if (obj.in !== void 0)
        return { in: obj.in };
      if (obj.notIn !== void 0)
        return { notIn: obj.notIn };
      if (obj.startsWith !== void 0)
        return { startsWith: obj.startsWith };
      if (obj.listContains !== void 0)
        return { listContains: obj.listContains };
      if (obj.stringContains !== void 0)
        return { stringContains: obj.stringContains };
      if (obj.andAll !== void 0)
        return { andAll: import_smithy_client7.SENSITIVE_STRING };
      if (obj.orAll !== void 0)
        return { orAll: import_smithy_client7.SENSITIVE_STRING };
      if (obj.$unknown !== void 0)
        return { [obj.$unknown[0]]: "UNKNOWN" };
    }, "RetrievalFilterFilterSensitiveLog");
    var KnowledgeBaseVectorSearchConfigurationFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.filter && { filter: import_smithy_client7.SENSITIVE_STRING }
    }), "KnowledgeBaseVectorSearchConfigurationFilterSensitiveLog");
    var KnowledgeBaseRetrievalConfigurationFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.vectorSearchConfiguration && {
        vectorSearchConfiguration: KnowledgeBaseVectorSearchConfigurationFilterSensitiveLog(obj.vectorSearchConfiguration)
      }
    }), "KnowledgeBaseRetrievalConfigurationFilterSensitiveLog");
    var KnowledgeBaseRetrieveAndGenerateConfigurationFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.retrievalConfiguration && {
        retrievalConfiguration: KnowledgeBaseRetrievalConfigurationFilterSensitiveLog(obj.retrievalConfiguration)
      },
      ...obj.generationConfiguration && {
        generationConfiguration: GenerationConfigurationFilterSensitiveLog(obj.generationConfiguration)
      }
    }), "KnowledgeBaseRetrieveAndGenerateConfigurationFilterSensitiveLog");
    var RetrieveConfigFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.knowledgeBaseRetrievalConfiguration && {
        knowledgeBaseRetrievalConfiguration: KnowledgeBaseRetrievalConfigurationFilterSensitiveLog(
          obj.knowledgeBaseRetrievalConfiguration
        )
      }
    }), "RetrieveConfigFilterSensitiveLog");
    var RetrieveAndGenerateConfigurationFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.knowledgeBaseConfiguration && {
        knowledgeBaseConfiguration: KnowledgeBaseRetrieveAndGenerateConfigurationFilterSensitiveLog(
          obj.knowledgeBaseConfiguration
        )
      },
      ...obj.externalSourcesConfiguration && {
        externalSourcesConfiguration: ExternalSourcesRetrieveAndGenerateConfigurationFilterSensitiveLog(
          obj.externalSourcesConfiguration
        )
      }
    }), "RetrieveAndGenerateConfigurationFilterSensitiveLog");
    var KnowledgeBaseConfigFilterSensitiveLog = /* @__PURE__ */ __name((obj) => {
      if (obj.retrieveConfig !== void 0)
        return { retrieveConfig: RetrieveConfigFilterSensitiveLog(obj.retrieveConfig) };
      if (obj.retrieveAndGenerateConfig !== void 0)
        return {
          retrieveAndGenerateConfig: RetrieveAndGenerateConfigurationFilterSensitiveLog(obj.retrieveAndGenerateConfig)
        };
      if (obj.$unknown !== void 0)
        return { [obj.$unknown[0]]: "UNKNOWN" };
    }, "KnowledgeBaseConfigFilterSensitiveLog");
    var RAGConfigFilterSensitiveLog = /* @__PURE__ */ __name((obj) => {
      if (obj.knowledgeBaseConfig !== void 0)
        return { knowledgeBaseConfig: KnowledgeBaseConfigFilterSensitiveLog(obj.knowledgeBaseConfig) };
      if (obj.$unknown !== void 0)
        return { [obj.$unknown[0]]: "UNKNOWN" };
    }, "RAGConfigFilterSensitiveLog");
    var EvaluationInferenceConfigFilterSensitiveLog = /* @__PURE__ */ __name((obj) => {
      if (obj.models !== void 0)
        return { models: obj.models.map((item) => EvaluationModelConfigFilterSensitiveLog(item)) };
      if (obj.ragConfigs !== void 0)
        return { ragConfigs: obj.ragConfigs.map((item) => RAGConfigFilterSensitiveLog(item)) };
      if (obj.$unknown !== void 0)
        return { [obj.$unknown[0]]: "UNKNOWN" };
    }, "EvaluationInferenceConfigFilterSensitiveLog");
    var CreateEvaluationJobRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.jobDescription && { jobDescription: import_smithy_client7.SENSITIVE_STRING },
      ...obj.evaluationConfig && { evaluationConfig: EvaluationConfigFilterSensitiveLog(obj.evaluationConfig) },
      ...obj.inferenceConfig && { inferenceConfig: EvaluationInferenceConfigFilterSensitiveLog(obj.inferenceConfig) }
    }), "CreateEvaluationJobRequestFilterSensitiveLog");
    var GetEvaluationJobResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.jobDescription && { jobDescription: import_smithy_client7.SENSITIVE_STRING },
      ...obj.evaluationConfig && { evaluationConfig: EvaluationConfigFilterSensitiveLog(obj.evaluationConfig) },
      ...obj.inferenceConfig && { inferenceConfig: EvaluationInferenceConfigFilterSensitiveLog(obj.inferenceConfig) }
    }), "GetEvaluationJobResponseFilterSensitiveLog");
    var import_core22 = (init_dist_es3(), __toCommonJS(dist_es_exports3));
    var import_uuid = (init_esm_node(), __toCommonJS(esm_node_exports));
    var se_BatchDeleteEvaluationJobCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {
        "content-type": "application/json"
      };
      b.bp("/evaluation-jobs/batch-delete");
      let body;
      body = JSON.stringify(
        (0, import_smithy_client7.take)(input, {
          jobIdentifiers: (_) => (0, import_smithy_client7._json)(_)
        })
      );
      b.m("POST").h(headers).b(body);
      return b.build();
    }, "se_BatchDeleteEvaluationJobCommand");
    var se_CreateEvaluationJobCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {
        "content-type": "application/json"
      };
      b.bp("/evaluation-jobs");
      let body;
      body = JSON.stringify(
        (0, import_smithy_client7.take)(input, {
          applicationType: [],
          clientRequestToken: [true, (_) => _ ?? (0, import_uuid.v4)()],
          customerEncryptionKeyId: [],
          evaluationConfig: (_) => (0, import_smithy_client7._json)(_),
          inferenceConfig: (_) => se_EvaluationInferenceConfig(_, context),
          jobDescription: [],
          jobName: [],
          jobTags: (_) => (0, import_smithy_client7._json)(_),
          outputDataConfig: (_) => (0, import_smithy_client7._json)(_),
          roleArn: []
        })
      );
      b.m("POST").h(headers).b(body);
      return b.build();
    }, "se_CreateEvaluationJobCommand");
    var se_CreateGuardrailCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {
        "content-type": "application/json"
      };
      b.bp("/guardrails");
      let body;
      body = JSON.stringify(
        (0, import_smithy_client7.take)(input, {
          blockedInputMessaging: [],
          blockedOutputsMessaging: [],
          clientRequestToken: [true, (_) => _ ?? (0, import_uuid.v4)()],
          contentPolicyConfig: (_) => (0, import_smithy_client7._json)(_),
          contextualGroundingPolicyConfig: (_) => se_GuardrailContextualGroundingPolicyConfig(_, context),
          description: [],
          kmsKeyId: [],
          name: [],
          sensitiveInformationPolicyConfig: (_) => (0, import_smithy_client7._json)(_),
          tags: (_) => (0, import_smithy_client7._json)(_),
          topicPolicyConfig: (_) => (0, import_smithy_client7._json)(_),
          wordPolicyConfig: (_) => (0, import_smithy_client7._json)(_)
        })
      );
      b.m("POST").h(headers).b(body);
      return b.build();
    }, "se_CreateGuardrailCommand");
    var se_CreateGuardrailVersionCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {
        "content-type": "application/json"
      };
      b.bp("/guardrails/{guardrailIdentifier}");
      b.p("guardrailIdentifier", () => input.guardrailIdentifier, "{guardrailIdentifier}", false);
      let body;
      body = JSON.stringify(
        (0, import_smithy_client7.take)(input, {
          clientRequestToken: [true, (_) => _ ?? (0, import_uuid.v4)()],
          description: []
        })
      );
      b.m("POST").h(headers).b(body);
      return b.build();
    }, "se_CreateGuardrailVersionCommand");
    var se_CreateInferenceProfileCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {
        "content-type": "application/json"
      };
      b.bp("/inference-profiles");
      let body;
      body = JSON.stringify(
        (0, import_smithy_client7.take)(input, {
          clientRequestToken: [true, (_) => _ ?? (0, import_uuid.v4)()],
          description: [],
          inferenceProfileName: [],
          modelSource: (_) => (0, import_smithy_client7._json)(_),
          tags: (_) => (0, import_smithy_client7._json)(_)
        })
      );
      b.m("POST").h(headers).b(body);
      return b.build();
    }, "se_CreateInferenceProfileCommand");
    var se_CreateMarketplaceModelEndpointCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {
        "content-type": "application/json"
      };
      b.bp("/marketplace-model/endpoints");
      let body;
      body = JSON.stringify(
        (0, import_smithy_client7.take)(input, {
          acceptEula: [],
          clientRequestToken: [true, (_) => _ ?? (0, import_uuid.v4)()],
          endpointConfig: (_) => (0, import_smithy_client7._json)(_),
          endpointName: [],
          modelSourceIdentifier: [],
          tags: (_) => (0, import_smithy_client7._json)(_)
        })
      );
      b.m("POST").h(headers).b(body);
      return b.build();
    }, "se_CreateMarketplaceModelEndpointCommand");
    var se_CreateModelCopyJobCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {
        "content-type": "application/json"
      };
      b.bp("/model-copy-jobs");
      let body;
      body = JSON.stringify(
        (0, import_smithy_client7.take)(input, {
          clientRequestToken: [true, (_) => _ ?? (0, import_uuid.v4)()],
          modelKmsKeyId: [],
          sourceModelArn: [],
          targetModelName: [],
          targetModelTags: (_) => (0, import_smithy_client7._json)(_)
        })
      );
      b.m("POST").h(headers).b(body);
      return b.build();
    }, "se_CreateModelCopyJobCommand");
    var se_CreateModelCustomizationJobCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {
        "content-type": "application/json"
      };
      b.bp("/model-customization-jobs");
      let body;
      body = JSON.stringify(
        (0, import_smithy_client7.take)(input, {
          baseModelIdentifier: [],
          clientRequestToken: [true, (_) => _ ?? (0, import_uuid.v4)()],
          customModelKmsKeyId: [],
          customModelName: [],
          customModelTags: (_) => (0, import_smithy_client7._json)(_),
          customizationConfig: (_) => (0, import_smithy_client7._json)(_),
          customizationType: [],
          hyperParameters: (_) => (0, import_smithy_client7._json)(_),
          jobName: [],
          jobTags: (_) => (0, import_smithy_client7._json)(_),
          outputDataConfig: (_) => (0, import_smithy_client7._json)(_),
          roleArn: [],
          trainingDataConfig: (_) => (0, import_smithy_client7._json)(_),
          validationDataConfig: (_) => (0, import_smithy_client7._json)(_),
          vpcConfig: (_) => (0, import_smithy_client7._json)(_)
        })
      );
      b.m("POST").h(headers).b(body);
      return b.build();
    }, "se_CreateModelCustomizationJobCommand");
    var se_CreateModelImportJobCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {
        "content-type": "application/json"
      };
      b.bp("/model-import-jobs");
      let body;
      body = JSON.stringify(
        (0, import_smithy_client7.take)(input, {
          clientRequestToken: [],
          importedModelKmsKeyId: [],
          importedModelName: [],
          importedModelTags: (_) => (0, import_smithy_client7._json)(_),
          jobName: [],
          jobTags: (_) => (0, import_smithy_client7._json)(_),
          modelDataSource: (_) => (0, import_smithy_client7._json)(_),
          roleArn: [],
          vpcConfig: (_) => (0, import_smithy_client7._json)(_)
        })
      );
      b.m("POST").h(headers).b(body);
      return b.build();
    }, "se_CreateModelImportJobCommand");
    var se_CreateModelInvocationJobCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {
        "content-type": "application/json"
      };
      b.bp("/model-invocation-job");
      let body;
      body = JSON.stringify(
        (0, import_smithy_client7.take)(input, {
          clientRequestToken: [true, (_) => _ ?? (0, import_uuid.v4)()],
          inputDataConfig: (_) => (0, import_smithy_client7._json)(_),
          jobName: [],
          modelId: [],
          outputDataConfig: (_) => (0, import_smithy_client7._json)(_),
          roleArn: [],
          tags: (_) => (0, import_smithy_client7._json)(_),
          timeoutDurationInHours: [],
          vpcConfig: (_) => (0, import_smithy_client7._json)(_)
        })
      );
      b.m("POST").h(headers).b(body);
      return b.build();
    }, "se_CreateModelInvocationJobCommand");
    var se_CreateProvisionedModelThroughputCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {
        "content-type": "application/json"
      };
      b.bp("/provisioned-model-throughput");
      let body;
      body = JSON.stringify(
        (0, import_smithy_client7.take)(input, {
          clientRequestToken: [true, (_) => _ ?? (0, import_uuid.v4)()],
          commitmentDuration: [],
          modelId: [],
          modelUnits: [],
          provisionedModelName: [],
          tags: (_) => (0, import_smithy_client7._json)(_)
        })
      );
      b.m("POST").h(headers).b(body);
      return b.build();
    }, "se_CreateProvisionedModelThroughputCommand");
    var se_DeleteCustomModelCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {};
      b.bp("/custom-models/{modelIdentifier}");
      b.p("modelIdentifier", () => input.modelIdentifier, "{modelIdentifier}", false);
      let body;
      b.m("DELETE").h(headers).b(body);
      return b.build();
    }, "se_DeleteCustomModelCommand");
    var se_DeleteGuardrailCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {};
      b.bp("/guardrails/{guardrailIdentifier}");
      b.p("guardrailIdentifier", () => input.guardrailIdentifier, "{guardrailIdentifier}", false);
      const query = (0, import_smithy_client7.map)({
        [_gV]: [, input[_gV]]
      });
      let body;
      b.m("DELETE").h(headers).q(query).b(body);
      return b.build();
    }, "se_DeleteGuardrailCommand");
    var se_DeleteImportedModelCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {};
      b.bp("/imported-models/{modelIdentifier}");
      b.p("modelIdentifier", () => input.modelIdentifier, "{modelIdentifier}", false);
      let body;
      b.m("DELETE").h(headers).b(body);
      return b.build();
    }, "se_DeleteImportedModelCommand");
    var se_DeleteInferenceProfileCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {};
      b.bp("/inference-profiles/{inferenceProfileIdentifier}");
      b.p("inferenceProfileIdentifier", () => input.inferenceProfileIdentifier, "{inferenceProfileIdentifier}", false);
      let body;
      b.m("DELETE").h(headers).b(body);
      return b.build();
    }, "se_DeleteInferenceProfileCommand");
    var se_DeleteMarketplaceModelEndpointCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {};
      b.bp("/marketplace-model/endpoints/{endpointArn}");
      b.p("endpointArn", () => input.endpointArn, "{endpointArn}", false);
      let body;
      b.m("DELETE").h(headers).b(body);
      return b.build();
    }, "se_DeleteMarketplaceModelEndpointCommand");
    var se_DeleteModelInvocationLoggingConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {};
      b.bp("/logging/modelinvocations");
      let body;
      b.m("DELETE").h(headers).b(body);
      return b.build();
    }, "se_DeleteModelInvocationLoggingConfigurationCommand");
    var se_DeleteProvisionedModelThroughputCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {};
      b.bp("/provisioned-model-throughput/{provisionedModelId}");
      b.p("provisionedModelId", () => input.provisionedModelId, "{provisionedModelId}", false);
      let body;
      b.m("DELETE").h(headers).b(body);
      return b.build();
    }, "se_DeleteProvisionedModelThroughputCommand");
    var se_DeregisterMarketplaceModelEndpointCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {};
      b.bp("/marketplace-model/endpoints/{endpointArn}/registration");
      b.p("endpointArn", () => input.endpointArn, "{endpointArn}", false);
      let body;
      b.m("DELETE").h(headers).b(body);
      return b.build();
    }, "se_DeregisterMarketplaceModelEndpointCommand");
    var se_GetCustomModelCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {};
      b.bp("/custom-models/{modelIdentifier}");
      b.p("modelIdentifier", () => input.modelIdentifier, "{modelIdentifier}", false);
      let body;
      b.m("GET").h(headers).b(body);
      return b.build();
    }, "se_GetCustomModelCommand");
    var se_GetEvaluationJobCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {};
      b.bp("/evaluation-jobs/{jobIdentifier}");
      b.p("jobIdentifier", () => input.jobIdentifier, "{jobIdentifier}", false);
      let body;
      b.m("GET").h(headers).b(body);
      return b.build();
    }, "se_GetEvaluationJobCommand");
    var se_GetFoundationModelCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {};
      b.bp("/foundation-models/{modelIdentifier}");
      b.p("modelIdentifier", () => input.modelIdentifier, "{modelIdentifier}", false);
      let body;
      b.m("GET").h(headers).b(body);
      return b.build();
    }, "se_GetFoundationModelCommand");
    var se_GetGuardrailCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {};
      b.bp("/guardrails/{guardrailIdentifier}");
      b.p("guardrailIdentifier", () => input.guardrailIdentifier, "{guardrailIdentifier}", false);
      const query = (0, import_smithy_client7.map)({
        [_gV]: [, input[_gV]]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_GetGuardrailCommand");
    var se_GetImportedModelCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {};
      b.bp("/imported-models/{modelIdentifier}");
      b.p("modelIdentifier", () => input.modelIdentifier, "{modelIdentifier}", false);
      let body;
      b.m("GET").h(headers).b(body);
      return b.build();
    }, "se_GetImportedModelCommand");
    var se_GetInferenceProfileCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {};
      b.bp("/inference-profiles/{inferenceProfileIdentifier}");
      b.p("inferenceProfileIdentifier", () => input.inferenceProfileIdentifier, "{inferenceProfileIdentifier}", false);
      let body;
      b.m("GET").h(headers).b(body);
      return b.build();
    }, "se_GetInferenceProfileCommand");
    var se_GetMarketplaceModelEndpointCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {};
      b.bp("/marketplace-model/endpoints/{endpointArn}");
      b.p("endpointArn", () => input.endpointArn, "{endpointArn}", false);
      let body;
      b.m("GET").h(headers).b(body);
      return b.build();
    }, "se_GetMarketplaceModelEndpointCommand");
    var se_GetModelCopyJobCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {};
      b.bp("/model-copy-jobs/{jobArn}");
      b.p("jobArn", () => input.jobArn, "{jobArn}", false);
      let body;
      b.m("GET").h(headers).b(body);
      return b.build();
    }, "se_GetModelCopyJobCommand");
    var se_GetModelCustomizationJobCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {};
      b.bp("/model-customization-jobs/{jobIdentifier}");
      b.p("jobIdentifier", () => input.jobIdentifier, "{jobIdentifier}", false);
      let body;
      b.m("GET").h(headers).b(body);
      return b.build();
    }, "se_GetModelCustomizationJobCommand");
    var se_GetModelImportJobCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {};
      b.bp("/model-import-jobs/{jobIdentifier}");
      b.p("jobIdentifier", () => input.jobIdentifier, "{jobIdentifier}", false);
      let body;
      b.m("GET").h(headers).b(body);
      return b.build();
    }, "se_GetModelImportJobCommand");
    var se_GetModelInvocationJobCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {};
      b.bp("/model-invocation-job/{jobIdentifier}");
      b.p("jobIdentifier", () => input.jobIdentifier, "{jobIdentifier}", false);
      let body;
      b.m("GET").h(headers).b(body);
      return b.build();
    }, "se_GetModelInvocationJobCommand");
    var se_GetModelInvocationLoggingConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {};
      b.bp("/logging/modelinvocations");
      let body;
      b.m("GET").h(headers).b(body);
      return b.build();
    }, "se_GetModelInvocationLoggingConfigurationCommand");
    var se_GetPromptRouterCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {};
      b.bp("/prompt-routers/{promptRouterArn}");
      b.p("promptRouterArn", () => input.promptRouterArn, "{promptRouterArn}", false);
      let body;
      b.m("GET").h(headers).b(body);
      return b.build();
    }, "se_GetPromptRouterCommand");
    var se_GetProvisionedModelThroughputCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {};
      b.bp("/provisioned-model-throughput/{provisionedModelId}");
      b.p("provisionedModelId", () => input.provisionedModelId, "{provisionedModelId}", false);
      let body;
      b.m("GET").h(headers).b(body);
      return b.build();
    }, "se_GetProvisionedModelThroughputCommand");
    var se_ListCustomModelsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {};
      b.bp("/custom-models");
      const query = (0, import_smithy_client7.map)({
        [_cTB]: [() => input.creationTimeBefore !== void 0, () => (0, import_smithy_client7.serializeDateTime)(input[_cTB]).toString()],
        [_cTA]: [() => input.creationTimeAfter !== void 0, () => (0, import_smithy_client7.serializeDateTime)(input[_cTA]).toString()],
        [_nC]: [, input[_nC]],
        [_bMAE]: [, input[_bMAE]],
        [_fMAE]: [, input[_fMAE]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
        [_sB]: [, input[_sB]],
        [_sO]: [, input[_sO]],
        [_iO]: [() => input.isOwned !== void 0, () => input[_iO].toString()]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_ListCustomModelsCommand");
    var se_ListEvaluationJobsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {};
      b.bp("/evaluation-jobs");
      const query = (0, import_smithy_client7.map)({
        [_cTA]: [() => input.creationTimeAfter !== void 0, () => (0, import_smithy_client7.serializeDateTime)(input[_cTA]).toString()],
        [_cTB]: [() => input.creationTimeBefore !== void 0, () => (0, import_smithy_client7.serializeDateTime)(input[_cTB]).toString()],
        [_sE]: [, input[_sE]],
        [_aTE]: [, input[_aTE]],
        [_nC]: [, input[_nC]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
        [_sB]: [, input[_sB]],
        [_sO]: [, input[_sO]]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_ListEvaluationJobsCommand");
    var se_ListFoundationModelsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {};
      b.bp("/foundation-models");
      const query = (0, import_smithy_client7.map)({
        [_bP]: [, input[_bP]],
        [_bCT]: [, input[_bCT]],
        [_bOM]: [, input[_bOM]],
        [_bIT]: [, input[_bIT]]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_ListFoundationModelsCommand");
    var se_ListGuardrailsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {};
      b.bp("/guardrails");
      const query = (0, import_smithy_client7.map)({
        [_gI]: [, input[_gI]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_ListGuardrailsCommand");
    var se_ListImportedModelsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {};
      b.bp("/imported-models");
      const query = (0, import_smithy_client7.map)({
        [_cTB]: [() => input.creationTimeBefore !== void 0, () => (0, import_smithy_client7.serializeDateTime)(input[_cTB]).toString()],
        [_cTA]: [() => input.creationTimeAfter !== void 0, () => (0, import_smithy_client7.serializeDateTime)(input[_cTA]).toString()],
        [_nC]: [, input[_nC]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
        [_sB]: [, input[_sB]],
        [_sO]: [, input[_sO]]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_ListImportedModelsCommand");
    var se_ListInferenceProfilesCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {};
      b.bp("/inference-profiles");
      const query = (0, import_smithy_client7.map)({
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
        [_t]: [, input[_tE]]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_ListInferenceProfilesCommand");
    var se_ListMarketplaceModelEndpointsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {};
      b.bp("/marketplace-model/endpoints");
      const query = (0, import_smithy_client7.map)({
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
        [_mSI]: [, input[_mSE]]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_ListMarketplaceModelEndpointsCommand");
    var se_ListModelCopyJobsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {};
      b.bp("/model-copy-jobs");
      const query = (0, import_smithy_client7.map)({
        [_cTA]: [() => input.creationTimeAfter !== void 0, () => (0, import_smithy_client7.serializeDateTime)(input[_cTA]).toString()],
        [_cTB]: [() => input.creationTimeBefore !== void 0, () => (0, import_smithy_client7.serializeDateTime)(input[_cTB]).toString()],
        [_sE]: [, input[_sE]],
        [_sAE]: [, input[_sAE]],
        [_sMAE]: [, input[_sMAE]],
        [_oMNC]: [, input[_tMNC]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
        [_sB]: [, input[_sB]],
        [_sO]: [, input[_sO]]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_ListModelCopyJobsCommand");
    var se_ListModelCustomizationJobsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {};
      b.bp("/model-customization-jobs");
      const query = (0, import_smithy_client7.map)({
        [_cTA]: [() => input.creationTimeAfter !== void 0, () => (0, import_smithy_client7.serializeDateTime)(input[_cTA]).toString()],
        [_cTB]: [() => input.creationTimeBefore !== void 0, () => (0, import_smithy_client7.serializeDateTime)(input[_cTB]).toString()],
        [_sE]: [, input[_sE]],
        [_nC]: [, input[_nC]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
        [_sB]: [, input[_sB]],
        [_sO]: [, input[_sO]]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_ListModelCustomizationJobsCommand");
    var se_ListModelImportJobsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {};
      b.bp("/model-import-jobs");
      const query = (0, import_smithy_client7.map)({
        [_cTA]: [() => input.creationTimeAfter !== void 0, () => (0, import_smithy_client7.serializeDateTime)(input[_cTA]).toString()],
        [_cTB]: [() => input.creationTimeBefore !== void 0, () => (0, import_smithy_client7.serializeDateTime)(input[_cTB]).toString()],
        [_sE]: [, input[_sE]],
        [_nC]: [, input[_nC]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
        [_sB]: [, input[_sB]],
        [_sO]: [, input[_sO]]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_ListModelImportJobsCommand");
    var se_ListModelInvocationJobsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {};
      b.bp("/model-invocation-jobs");
      const query = (0, import_smithy_client7.map)({
        [_sTA]: [() => input.submitTimeAfter !== void 0, () => (0, import_smithy_client7.serializeDateTime)(input[_sTA]).toString()],
        [_sTB]: [() => input.submitTimeBefore !== void 0, () => (0, import_smithy_client7.serializeDateTime)(input[_sTB]).toString()],
        [_sE]: [, input[_sE]],
        [_nC]: [, input[_nC]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
        [_sB]: [, input[_sB]],
        [_sO]: [, input[_sO]]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_ListModelInvocationJobsCommand");
    var se_ListPromptRoutersCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {};
      b.bp("/prompt-routers");
      const query = (0, import_smithy_client7.map)({
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_ListPromptRoutersCommand");
    var se_ListProvisionedModelThroughputsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {};
      b.bp("/provisioned-model-throughputs");
      const query = (0, import_smithy_client7.map)({
        [_cTA]: [() => input.creationTimeAfter !== void 0, () => (0, import_smithy_client7.serializeDateTime)(input[_cTA]).toString()],
        [_cTB]: [() => input.creationTimeBefore !== void 0, () => (0, import_smithy_client7.serializeDateTime)(input[_cTB]).toString()],
        [_sE]: [, input[_sE]],
        [_mAE]: [, input[_mAE]],
        [_nC]: [, input[_nC]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
        [_sB]: [, input[_sB]],
        [_sO]: [, input[_sO]]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_ListProvisionedModelThroughputsCommand");
    var se_ListTagsForResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {
        "content-type": "application/json"
      };
      b.bp("/listTagsForResource");
      let body;
      body = JSON.stringify(
        (0, import_smithy_client7.take)(input, {
          resourceARN: []
        })
      );
      b.m("POST").h(headers).b(body);
      return b.build();
    }, "se_ListTagsForResourceCommand");
    var se_PutModelInvocationLoggingConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {
        "content-type": "application/json"
      };
      b.bp("/logging/modelinvocations");
      let body;
      body = JSON.stringify(
        (0, import_smithy_client7.take)(input, {
          loggingConfig: (_) => (0, import_smithy_client7._json)(_)
        })
      );
      b.m("PUT").h(headers).b(body);
      return b.build();
    }, "se_PutModelInvocationLoggingConfigurationCommand");
    var se_RegisterMarketplaceModelEndpointCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {
        "content-type": "application/json"
      };
      b.bp("/marketplace-model/endpoints/{endpointIdentifier}/registration");
      b.p("endpointIdentifier", () => input.endpointIdentifier, "{endpointIdentifier}", false);
      let body;
      body = JSON.stringify(
        (0, import_smithy_client7.take)(input, {
          modelSourceIdentifier: []
        })
      );
      b.m("POST").h(headers).b(body);
      return b.build();
    }, "se_RegisterMarketplaceModelEndpointCommand");
    var se_StopEvaluationJobCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {};
      b.bp("/evaluation-job/{jobIdentifier}/stop");
      b.p("jobIdentifier", () => input.jobIdentifier, "{jobIdentifier}", false);
      let body;
      b.m("POST").h(headers).b(body);
      return b.build();
    }, "se_StopEvaluationJobCommand");
    var se_StopModelCustomizationJobCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {};
      b.bp("/model-customization-jobs/{jobIdentifier}/stop");
      b.p("jobIdentifier", () => input.jobIdentifier, "{jobIdentifier}", false);
      let body;
      b.m("POST").h(headers).b(body);
      return b.build();
    }, "se_StopModelCustomizationJobCommand");
    var se_StopModelInvocationJobCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {};
      b.bp("/model-invocation-job/{jobIdentifier}/stop");
      b.p("jobIdentifier", () => input.jobIdentifier, "{jobIdentifier}", false);
      let body;
      b.m("POST").h(headers).b(body);
      return b.build();
    }, "se_StopModelInvocationJobCommand");
    var se_TagResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {
        "content-type": "application/json"
      };
      b.bp("/tagResource");
      let body;
      body = JSON.stringify(
        (0, import_smithy_client7.take)(input, {
          resourceARN: [],
          tags: (_) => (0, import_smithy_client7._json)(_)
        })
      );
      b.m("POST").h(headers).b(body);
      return b.build();
    }, "se_TagResourceCommand");
    var se_UntagResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {
        "content-type": "application/json"
      };
      b.bp("/untagResource");
      let body;
      body = JSON.stringify(
        (0, import_smithy_client7.take)(input, {
          resourceARN: [],
          tagKeys: (_) => (0, import_smithy_client7._json)(_)
        })
      );
      b.m("POST").h(headers).b(body);
      return b.build();
    }, "se_UntagResourceCommand");
    var se_UpdateGuardrailCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {
        "content-type": "application/json"
      };
      b.bp("/guardrails/{guardrailIdentifier}");
      b.p("guardrailIdentifier", () => input.guardrailIdentifier, "{guardrailIdentifier}", false);
      let body;
      body = JSON.stringify(
        (0, import_smithy_client7.take)(input, {
          blockedInputMessaging: [],
          blockedOutputsMessaging: [],
          contentPolicyConfig: (_) => (0, import_smithy_client7._json)(_),
          contextualGroundingPolicyConfig: (_) => se_GuardrailContextualGroundingPolicyConfig(_, context),
          description: [],
          kmsKeyId: [],
          name: [],
          sensitiveInformationPolicyConfig: (_) => (0, import_smithy_client7._json)(_),
          topicPolicyConfig: (_) => (0, import_smithy_client7._json)(_),
          wordPolicyConfig: (_) => (0, import_smithy_client7._json)(_)
        })
      );
      b.m("PUT").h(headers).b(body);
      return b.build();
    }, "se_UpdateGuardrailCommand");
    var se_UpdateMarketplaceModelEndpointCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {
        "content-type": "application/json"
      };
      b.bp("/marketplace-model/endpoints/{endpointArn}");
      b.p("endpointArn", () => input.endpointArn, "{endpointArn}", false);
      let body;
      body = JSON.stringify(
        (0, import_smithy_client7.take)(input, {
          clientRequestToken: [true, (_) => _ ?? (0, import_uuid.v4)()],
          endpointConfig: (_) => (0, import_smithy_client7._json)(_)
        })
      );
      b.m("PATCH").h(headers).b(body);
      return b.build();
    }, "se_UpdateMarketplaceModelEndpointCommand");
    var se_UpdateProvisionedModelThroughputCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core5.requestBuilder)(input, context);
      const headers = {
        "content-type": "application/json"
      };
      b.bp("/provisioned-model-throughput/{provisionedModelId}");
      b.p("provisionedModelId", () => input.provisionedModelId, "{provisionedModelId}", false);
      let body;
      body = JSON.stringify(
        (0, import_smithy_client7.take)(input, {
          desiredModelId: [],
          desiredProvisionedModelName: []
        })
      );
      b.m("PATCH").h(headers).b(body);
      return b.build();
    }, "se_UpdateProvisionedModelThroughputCommand");
    var de_BatchDeleteEvaluationJobCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client7.take)(data, {
        errors: import_smithy_client7._json,
        evaluationJobs: import_smithy_client7._json
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_BatchDeleteEvaluationJobCommand");
    var de_CreateEvaluationJobCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client7.take)(data, {
        jobArn: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_CreateEvaluationJobCommand");
    var de_CreateGuardrailCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client7.take)(data, {
        createdAt: (_) => (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.parseRfc3339DateTimeWithOffset)(_)),
        guardrailArn: import_smithy_client7.expectString,
        guardrailId: import_smithy_client7.expectString,
        version: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_CreateGuardrailCommand");
    var de_CreateGuardrailVersionCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client7.take)(data, {
        guardrailId: import_smithy_client7.expectString,
        version: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_CreateGuardrailVersionCommand");
    var de_CreateInferenceProfileCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client7.take)(data, {
        inferenceProfileArn: import_smithy_client7.expectString,
        status: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_CreateInferenceProfileCommand");
    var de_CreateMarketplaceModelEndpointCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client7.take)(data, {
        marketplaceModelEndpoint: (_) => de_MarketplaceModelEndpoint(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_CreateMarketplaceModelEndpointCommand");
    var de_CreateModelCopyJobCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client7.take)(data, {
        jobArn: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_CreateModelCopyJobCommand");
    var de_CreateModelCustomizationJobCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client7.take)(data, {
        jobArn: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_CreateModelCustomizationJobCommand");
    var de_CreateModelImportJobCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client7.take)(data, {
        jobArn: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_CreateModelImportJobCommand");
    var de_CreateModelInvocationJobCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client7.take)(data, {
        jobArn: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_CreateModelInvocationJobCommand");
    var de_CreateProvisionedModelThroughputCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client7.take)(data, {
        provisionedModelArn: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_CreateProvisionedModelThroughputCommand");
    var de_DeleteCustomModelCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, import_smithy_client7.collectBody)(output.body, context);
      return contents;
    }, "de_DeleteCustomModelCommand");
    var de_DeleteGuardrailCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, import_smithy_client7.collectBody)(output.body, context);
      return contents;
    }, "de_DeleteGuardrailCommand");
    var de_DeleteImportedModelCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, import_smithy_client7.collectBody)(output.body, context);
      return contents;
    }, "de_DeleteImportedModelCommand");
    var de_DeleteInferenceProfileCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, import_smithy_client7.collectBody)(output.body, context);
      return contents;
    }, "de_DeleteInferenceProfileCommand");
    var de_DeleteMarketplaceModelEndpointCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, import_smithy_client7.collectBody)(output.body, context);
      return contents;
    }, "de_DeleteMarketplaceModelEndpointCommand");
    var de_DeleteModelInvocationLoggingConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, import_smithy_client7.collectBody)(output.body, context);
      return contents;
    }, "de_DeleteModelInvocationLoggingConfigurationCommand");
    var de_DeleteProvisionedModelThroughputCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, import_smithy_client7.collectBody)(output.body, context);
      return contents;
    }, "de_DeleteProvisionedModelThroughputCommand");
    var de_DeregisterMarketplaceModelEndpointCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, import_smithy_client7.collectBody)(output.body, context);
      return contents;
    }, "de_DeregisterMarketplaceModelEndpointCommand");
    var de_GetCustomModelCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client7.take)(data, {
        baseModelArn: import_smithy_client7.expectString,
        creationTime: (_) => (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.parseRfc3339DateTimeWithOffset)(_)),
        customizationConfig: (_) => (0, import_smithy_client7._json)((0, import_core22.awsExpectUnion)(_)),
        customizationType: import_smithy_client7.expectString,
        hyperParameters: import_smithy_client7._json,
        jobArn: import_smithy_client7.expectString,
        jobName: import_smithy_client7.expectString,
        modelArn: import_smithy_client7.expectString,
        modelKmsKeyArn: import_smithy_client7.expectString,
        modelName: import_smithy_client7.expectString,
        outputDataConfig: import_smithy_client7._json,
        trainingDataConfig: import_smithy_client7._json,
        trainingMetrics: (_) => de_TrainingMetrics(_, context),
        validationDataConfig: import_smithy_client7._json,
        validationMetrics: (_) => de_ValidationMetrics(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_GetCustomModelCommand");
    var de_GetEvaluationJobCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client7.take)(data, {
        applicationType: import_smithy_client7.expectString,
        creationTime: (_) => (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.parseRfc3339DateTimeWithOffset)(_)),
        customerEncryptionKeyId: import_smithy_client7.expectString,
        evaluationConfig: (_) => (0, import_smithy_client7._json)((0, import_core22.awsExpectUnion)(_)),
        failureMessages: import_smithy_client7._json,
        inferenceConfig: (_) => de_EvaluationInferenceConfig((0, import_core22.awsExpectUnion)(_), context),
        jobArn: import_smithy_client7.expectString,
        jobDescription: import_smithy_client7.expectString,
        jobName: import_smithy_client7.expectString,
        jobType: import_smithy_client7.expectString,
        lastModifiedTime: (_) => (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.parseRfc3339DateTimeWithOffset)(_)),
        outputDataConfig: import_smithy_client7._json,
        roleArn: import_smithy_client7.expectString,
        status: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_GetEvaluationJobCommand");
    var de_GetFoundationModelCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client7.take)(data, {
        modelDetails: import_smithy_client7._json
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_GetFoundationModelCommand");
    var de_GetGuardrailCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client7.take)(data, {
        blockedInputMessaging: import_smithy_client7.expectString,
        blockedOutputsMessaging: import_smithy_client7.expectString,
        contentPolicy: import_smithy_client7._json,
        contextualGroundingPolicy: (_) => de_GuardrailContextualGroundingPolicy(_, context),
        createdAt: (_) => (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.parseRfc3339DateTimeWithOffset)(_)),
        description: import_smithy_client7.expectString,
        failureRecommendations: import_smithy_client7._json,
        guardrailArn: import_smithy_client7.expectString,
        guardrailId: import_smithy_client7.expectString,
        kmsKeyArn: import_smithy_client7.expectString,
        name: import_smithy_client7.expectString,
        sensitiveInformationPolicy: import_smithy_client7._json,
        status: import_smithy_client7.expectString,
        statusReasons: import_smithy_client7._json,
        topicPolicy: import_smithy_client7._json,
        updatedAt: (_) => (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.parseRfc3339DateTimeWithOffset)(_)),
        version: import_smithy_client7.expectString,
        wordPolicy: import_smithy_client7._json
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_GetGuardrailCommand");
    var de_GetImportedModelCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client7.take)(data, {
        creationTime: (_) => (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.parseRfc3339DateTimeWithOffset)(_)),
        instructSupported: import_smithy_client7.expectBoolean,
        jobArn: import_smithy_client7.expectString,
        jobName: import_smithy_client7.expectString,
        modelArchitecture: import_smithy_client7.expectString,
        modelArn: import_smithy_client7.expectString,
        modelDataSource: (_) => (0, import_smithy_client7._json)((0, import_core22.awsExpectUnion)(_)),
        modelKmsKeyArn: import_smithy_client7.expectString,
        modelName: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_GetImportedModelCommand");
    var de_GetInferenceProfileCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client7.take)(data, {
        createdAt: (_) => (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.parseRfc3339DateTimeWithOffset)(_)),
        description: import_smithy_client7.expectString,
        inferenceProfileArn: import_smithy_client7.expectString,
        inferenceProfileId: import_smithy_client7.expectString,
        inferenceProfileName: import_smithy_client7.expectString,
        models: import_smithy_client7._json,
        status: import_smithy_client7.expectString,
        type: import_smithy_client7.expectString,
        updatedAt: (_) => (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.parseRfc3339DateTimeWithOffset)(_))
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_GetInferenceProfileCommand");
    var de_GetMarketplaceModelEndpointCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client7.take)(data, {
        marketplaceModelEndpoint: (_) => de_MarketplaceModelEndpoint(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_GetMarketplaceModelEndpointCommand");
    var de_GetModelCopyJobCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client7.take)(data, {
        creationTime: (_) => (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.parseRfc3339DateTimeWithOffset)(_)),
        failureMessage: import_smithy_client7.expectString,
        jobArn: import_smithy_client7.expectString,
        sourceAccountId: import_smithy_client7.expectString,
        sourceModelArn: import_smithy_client7.expectString,
        sourceModelName: import_smithy_client7.expectString,
        status: import_smithy_client7.expectString,
        targetModelArn: import_smithy_client7.expectString,
        targetModelKmsKeyArn: import_smithy_client7.expectString,
        targetModelName: import_smithy_client7.expectString,
        targetModelTags: import_smithy_client7._json
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_GetModelCopyJobCommand");
    var de_GetModelCustomizationJobCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client7.take)(data, {
        baseModelArn: import_smithy_client7.expectString,
        clientRequestToken: import_smithy_client7.expectString,
        creationTime: (_) => (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.parseRfc3339DateTimeWithOffset)(_)),
        customizationConfig: (_) => (0, import_smithy_client7._json)((0, import_core22.awsExpectUnion)(_)),
        customizationType: import_smithy_client7.expectString,
        endTime: (_) => (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.parseRfc3339DateTimeWithOffset)(_)),
        failureMessage: import_smithy_client7.expectString,
        hyperParameters: import_smithy_client7._json,
        jobArn: import_smithy_client7.expectString,
        jobName: import_smithy_client7.expectString,
        lastModifiedTime: (_) => (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.parseRfc3339DateTimeWithOffset)(_)),
        outputDataConfig: import_smithy_client7._json,
        outputModelArn: import_smithy_client7.expectString,
        outputModelKmsKeyArn: import_smithy_client7.expectString,
        outputModelName: import_smithy_client7.expectString,
        roleArn: import_smithy_client7.expectString,
        status: import_smithy_client7.expectString,
        trainingDataConfig: import_smithy_client7._json,
        trainingMetrics: (_) => de_TrainingMetrics(_, context),
        validationDataConfig: import_smithy_client7._json,
        validationMetrics: (_) => de_ValidationMetrics(_, context),
        vpcConfig: import_smithy_client7._json
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_GetModelCustomizationJobCommand");
    var de_GetModelImportJobCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client7.take)(data, {
        creationTime: (_) => (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.parseRfc3339DateTimeWithOffset)(_)),
        endTime: (_) => (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.parseRfc3339DateTimeWithOffset)(_)),
        failureMessage: import_smithy_client7.expectString,
        importedModelArn: import_smithy_client7.expectString,
        importedModelKmsKeyArn: import_smithy_client7.expectString,
        importedModelName: import_smithy_client7.expectString,
        jobArn: import_smithy_client7.expectString,
        jobName: import_smithy_client7.expectString,
        lastModifiedTime: (_) => (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.parseRfc3339DateTimeWithOffset)(_)),
        modelDataSource: (_) => (0, import_smithy_client7._json)((0, import_core22.awsExpectUnion)(_)),
        roleArn: import_smithy_client7.expectString,
        status: import_smithy_client7.expectString,
        vpcConfig: import_smithy_client7._json
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_GetModelImportJobCommand");
    var de_GetModelInvocationJobCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client7.take)(data, {
        clientRequestToken: import_smithy_client7.expectString,
        endTime: (_) => (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.parseRfc3339DateTimeWithOffset)(_)),
        inputDataConfig: (_) => (0, import_smithy_client7._json)((0, import_core22.awsExpectUnion)(_)),
        jobArn: import_smithy_client7.expectString,
        jobExpirationTime: (_) => (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.parseRfc3339DateTimeWithOffset)(_)),
        jobName: import_smithy_client7.expectString,
        lastModifiedTime: (_) => (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.parseRfc3339DateTimeWithOffset)(_)),
        message: import_smithy_client7.expectString,
        modelId: import_smithy_client7.expectString,
        outputDataConfig: (_) => (0, import_smithy_client7._json)((0, import_core22.awsExpectUnion)(_)),
        roleArn: import_smithy_client7.expectString,
        status: import_smithy_client7.expectString,
        submitTime: (_) => (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.parseRfc3339DateTimeWithOffset)(_)),
        timeoutDurationInHours: import_smithy_client7.expectInt32,
        vpcConfig: import_smithy_client7._json
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_GetModelInvocationJobCommand");
    var de_GetModelInvocationLoggingConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client7.take)(data, {
        loggingConfig: import_smithy_client7._json
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_GetModelInvocationLoggingConfigurationCommand");
    var de_GetPromptRouterCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client7.take)(data, {
        createdAt: (_) => (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.parseRfc3339DateTimeWithOffset)(_)),
        description: import_smithy_client7.expectString,
        fallbackModel: import_smithy_client7._json,
        models: import_smithy_client7._json,
        promptRouterArn: import_smithy_client7.expectString,
        promptRouterName: import_smithy_client7.expectString,
        routingCriteria: (_) => de_RoutingCriteria(_, context),
        status: import_smithy_client7.expectString,
        type: import_smithy_client7.expectString,
        updatedAt: (_) => (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.parseRfc3339DateTimeWithOffset)(_))
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_GetPromptRouterCommand");
    var de_GetProvisionedModelThroughputCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client7.take)(data, {
        commitmentDuration: import_smithy_client7.expectString,
        commitmentExpirationTime: (_) => (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.parseRfc3339DateTimeWithOffset)(_)),
        creationTime: (_) => (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.parseRfc3339DateTimeWithOffset)(_)),
        desiredModelArn: import_smithy_client7.expectString,
        desiredModelUnits: import_smithy_client7.expectInt32,
        failureMessage: import_smithy_client7.expectString,
        foundationModelArn: import_smithy_client7.expectString,
        lastModifiedTime: (_) => (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.parseRfc3339DateTimeWithOffset)(_)),
        modelArn: import_smithy_client7.expectString,
        modelUnits: import_smithy_client7.expectInt32,
        provisionedModelArn: import_smithy_client7.expectString,
        provisionedModelName: import_smithy_client7.expectString,
        status: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_GetProvisionedModelThroughputCommand");
    var de_ListCustomModelsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client7.take)(data, {
        modelSummaries: (_) => de_CustomModelSummaryList(_, context),
        nextToken: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_ListCustomModelsCommand");
    var de_ListEvaluationJobsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client7.take)(data, {
        jobSummaries: (_) => de_EvaluationSummaries(_, context),
        nextToken: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_ListEvaluationJobsCommand");
    var de_ListFoundationModelsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client7.take)(data, {
        modelSummaries: import_smithy_client7._json
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_ListFoundationModelsCommand");
    var de_ListGuardrailsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client7.take)(data, {
        guardrails: (_) => de_GuardrailSummaries(_, context),
        nextToken: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_ListGuardrailsCommand");
    var de_ListImportedModelsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client7.take)(data, {
        modelSummaries: (_) => de_ImportedModelSummaryList(_, context),
        nextToken: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_ListImportedModelsCommand");
    var de_ListInferenceProfilesCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client7.take)(data, {
        inferenceProfileSummaries: (_) => de_InferenceProfileSummaries(_, context),
        nextToken: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_ListInferenceProfilesCommand");
    var de_ListMarketplaceModelEndpointsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client7.take)(data, {
        marketplaceModelEndpoints: (_) => de_MarketplaceModelEndpointSummaries(_, context),
        nextToken: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_ListMarketplaceModelEndpointsCommand");
    var de_ListModelCopyJobsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client7.take)(data, {
        modelCopyJobSummaries: (_) => de_ModelCopyJobSummaries(_, context),
        nextToken: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_ListModelCopyJobsCommand");
    var de_ListModelCustomizationJobsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client7.take)(data, {
        modelCustomizationJobSummaries: (_) => de_ModelCustomizationJobSummaries(_, context),
        nextToken: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_ListModelCustomizationJobsCommand");
    var de_ListModelImportJobsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client7.take)(data, {
        modelImportJobSummaries: (_) => de_ModelImportJobSummaries(_, context),
        nextToken: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_ListModelImportJobsCommand");
    var de_ListModelInvocationJobsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client7.take)(data, {
        invocationJobSummaries: (_) => de_ModelInvocationJobSummaries(_, context),
        nextToken: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_ListModelInvocationJobsCommand");
    var de_ListPromptRoutersCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client7.take)(data, {
        nextToken: import_smithy_client7.expectString,
        promptRouterSummaries: (_) => de_PromptRouterSummaries(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_ListPromptRoutersCommand");
    var de_ListProvisionedModelThroughputsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client7.take)(data, {
        nextToken: import_smithy_client7.expectString,
        provisionedModelSummaries: (_) => de_ProvisionedModelSummaries(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_ListProvisionedModelThroughputsCommand");
    var de_ListTagsForResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client7.take)(data, {
        tags: import_smithy_client7._json
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_ListTagsForResourceCommand");
    var de_PutModelInvocationLoggingConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, import_smithy_client7.collectBody)(output.body, context);
      return contents;
    }, "de_PutModelInvocationLoggingConfigurationCommand");
    var de_RegisterMarketplaceModelEndpointCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client7.take)(data, {
        marketplaceModelEndpoint: (_) => de_MarketplaceModelEndpoint(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_RegisterMarketplaceModelEndpointCommand");
    var de_StopEvaluationJobCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, import_smithy_client7.collectBody)(output.body, context);
      return contents;
    }, "de_StopEvaluationJobCommand");
    var de_StopModelCustomizationJobCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, import_smithy_client7.collectBody)(output.body, context);
      return contents;
    }, "de_StopModelCustomizationJobCommand");
    var de_StopModelInvocationJobCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, import_smithy_client7.collectBody)(output.body, context);
      return contents;
    }, "de_StopModelInvocationJobCommand");
    var de_TagResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, import_smithy_client7.collectBody)(output.body, context);
      return contents;
    }, "de_TagResourceCommand");
    var de_UntagResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, import_smithy_client7.collectBody)(output.body, context);
      return contents;
    }, "de_UntagResourceCommand");
    var de_UpdateGuardrailCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client7.take)(data, {
        guardrailArn: import_smithy_client7.expectString,
        guardrailId: import_smithy_client7.expectString,
        updatedAt: (_) => (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.parseRfc3339DateTimeWithOffset)(_)),
        version: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_UpdateGuardrailCommand");
    var de_UpdateMarketplaceModelEndpointCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client7.take)(data, {
        marketplaceModelEndpoint: (_) => de_MarketplaceModelEndpoint(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_UpdateMarketplaceModelEndpointCommand");
    var de_UpdateProvisionedModelThroughputCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client7.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, import_smithy_client7.collectBody)(output.body, context);
      return contents;
    }, "de_UpdateProvisionedModelThroughputCommand");
    var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await (0, import_core22.parseJsonErrorBody)(output.body, context)
      };
      const errorCode = (0, import_core22.loadRestJsonErrorCode)(output, parsedOutput.body);
      switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.bedrock#AccessDeniedException":
          throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.bedrock#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.bedrock#InternalServerException":
          throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.bedrock#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.bedrock#ThrottlingException":
          throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.bedrock#ValidationException":
          throw await de_ValidationExceptionRes(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.bedrock#ServiceQuotaExceededException":
          throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.bedrock#TooManyTagsException":
          throw await de_TooManyTagsExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.bedrock#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    }, "de_CommandError");
    var throwDefaultError = (0, import_smithy_client7.withBaseException)(BedrockServiceException);
    var de_AccessDeniedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client7.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client7.take)(data, {
        message: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, parsedOutput.body);
    }, "de_AccessDeniedExceptionRes");
    var de_ConflictExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client7.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client7.take)(data, {
        message: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, parsedOutput.body);
    }, "de_ConflictExceptionRes");
    var de_InternalServerExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client7.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client7.take)(data, {
        message: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, parsedOutput.body);
    }, "de_InternalServerExceptionRes");
    var de_ResourceNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client7.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client7.take)(data, {
        message: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, parsedOutput.body);
    }, "de_ResourceNotFoundExceptionRes");
    var de_ServiceQuotaExceededExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client7.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client7.take)(data, {
        message: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, parsedOutput.body);
    }, "de_ServiceQuotaExceededExceptionRes");
    var de_ServiceUnavailableExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client7.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client7.take)(data, {
        message: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      const exception = new ServiceUnavailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, parsedOutput.body);
    }, "de_ServiceUnavailableExceptionRes");
    var de_ThrottlingExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client7.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client7.take)(data, {
        message: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, parsedOutput.body);
    }, "de_ThrottlingExceptionRes");
    var de_TooManyTagsExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client7.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client7.take)(data, {
        message: import_smithy_client7.expectString,
        resourceName: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      const exception = new TooManyTagsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, parsedOutput.body);
    }, "de_TooManyTagsExceptionRes");
    var de_ValidationExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client7.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client7.take)(data, {
        message: import_smithy_client7.expectString
      });
      Object.assign(contents, doc);
      const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client7.decorateServiceException)(exception, parsedOutput.body);
    }, "de_ValidationExceptionRes");
    var se_AdditionalModelRequestFields = /* @__PURE__ */ __name((input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = se_AdditionalModelRequestFieldsValue(value, context);
        return acc;
      }, {});
    }, "se_AdditionalModelRequestFields");
    var se_AdditionalModelRequestFieldsValue = /* @__PURE__ */ __name((input, context) => {
      return input;
    }, "se_AdditionalModelRequestFieldsValue");
    var se_ByteContentDoc = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client7.take)(input, {
        contentType: [],
        data: context.base64Encoder,
        identifier: []
      });
    }, "se_ByteContentDoc");
    var se_EvaluationInferenceConfig = /* @__PURE__ */ __name((input, context) => {
      return EvaluationInferenceConfig.visit(input, {
        models: (value) => ({ models: (0, import_smithy_client7._json)(value) }),
        ragConfigs: (value) => ({ ragConfigs: se_RagConfigs(value, context) }),
        _: (name, value) => ({ name: value })
      });
    }, "se_EvaluationInferenceConfig");
    var se_ExternalSource = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client7.take)(input, {
        byteContent: (_) => se_ByteContentDoc(_, context),
        s3Location: import_smithy_client7._json,
        sourceType: []
      });
    }, "se_ExternalSource");
    var se_ExternalSources = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return se_ExternalSource(entry, context);
      });
    }, "se_ExternalSources");
    var se_ExternalSourcesGenerationConfiguration = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client7.take)(input, {
        additionalModelRequestFields: (_) => se_AdditionalModelRequestFields(_, context),
        guardrailConfiguration: import_smithy_client7._json,
        kbInferenceConfig: (_) => se_KbInferenceConfig(_, context),
        promptTemplate: import_smithy_client7._json
      });
    }, "se_ExternalSourcesGenerationConfiguration");
    var se_ExternalSourcesRetrieveAndGenerateConfiguration = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client7.take)(input, {
        generationConfiguration: (_) => se_ExternalSourcesGenerationConfiguration(_, context),
        modelArn: [],
        sources: (_) => se_ExternalSources(_, context)
      });
    }, "se_ExternalSourcesRetrieveAndGenerateConfiguration");
    var se_FilterAttribute = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client7.take)(input, {
        key: [],
        value: (_) => se_FilterValue(_, context)
      });
    }, "se_FilterAttribute");
    var se_FilterValue = /* @__PURE__ */ __name((input, context) => {
      return input;
    }, "se_FilterValue");
    var se_GenerationConfiguration = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client7.take)(input, {
        additionalModelRequestFields: (_) => se_AdditionalModelRequestFields(_, context),
        guardrailConfiguration: import_smithy_client7._json,
        kbInferenceConfig: (_) => se_KbInferenceConfig(_, context),
        promptTemplate: import_smithy_client7._json
      });
    }, "se_GenerationConfiguration");
    var se_GuardrailContextualGroundingFilterConfig = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client7.take)(input, {
        threshold: import_smithy_client7.serializeFloat,
        type: []
      });
    }, "se_GuardrailContextualGroundingFilterConfig");
    var se_GuardrailContextualGroundingFiltersConfig = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return se_GuardrailContextualGroundingFilterConfig(entry, context);
      });
    }, "se_GuardrailContextualGroundingFiltersConfig");
    var se_GuardrailContextualGroundingPolicyConfig = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client7.take)(input, {
        filtersConfig: (_) => se_GuardrailContextualGroundingFiltersConfig(_, context)
      });
    }, "se_GuardrailContextualGroundingPolicyConfig");
    var se_KbInferenceConfig = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client7.take)(input, {
        textInferenceConfig: (_) => se_TextInferenceConfig(_, context)
      });
    }, "se_KbInferenceConfig");
    var se_KnowledgeBaseConfig = /* @__PURE__ */ __name((input, context) => {
      return KnowledgeBaseConfig.visit(input, {
        retrieveAndGenerateConfig: (value) => ({
          retrieveAndGenerateConfig: se_RetrieveAndGenerateConfiguration(value, context)
        }),
        retrieveConfig: (value) => ({ retrieveConfig: se_RetrieveConfig(value, context) }),
        _: (name, value) => ({ name: value })
      });
    }, "se_KnowledgeBaseConfig");
    var se_KnowledgeBaseRetrievalConfiguration = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client7.take)(input, {
        vectorSearchConfiguration: (_) => se_KnowledgeBaseVectorSearchConfiguration(_, context)
      });
    }, "se_KnowledgeBaseRetrievalConfiguration");
    var se_KnowledgeBaseRetrieveAndGenerateConfiguration = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client7.take)(input, {
        generationConfiguration: (_) => se_GenerationConfiguration(_, context),
        knowledgeBaseId: [],
        modelArn: [],
        orchestrationConfiguration: import_smithy_client7._json,
        retrievalConfiguration: (_) => se_KnowledgeBaseRetrievalConfiguration(_, context)
      });
    }, "se_KnowledgeBaseRetrieveAndGenerateConfiguration");
    var se_KnowledgeBaseVectorSearchConfiguration = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client7.take)(input, {
        filter: (_) => se_RetrievalFilter(_, context),
        numberOfResults: [],
        overrideSearchType: []
      });
    }, "se_KnowledgeBaseVectorSearchConfiguration");
    var se_RAGConfig = /* @__PURE__ */ __name((input, context) => {
      return RAGConfig.visit(input, {
        knowledgeBaseConfig: (value) => ({ knowledgeBaseConfig: se_KnowledgeBaseConfig(value, context) }),
        _: (name, value) => ({ name: value })
      });
    }, "se_RAGConfig");
    var se_RagConfigs = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return se_RAGConfig(entry, context);
      });
    }, "se_RagConfigs");
    var se_RetrievalFilter = /* @__PURE__ */ __name((input, context) => {
      return RetrievalFilter.visit(input, {
        andAll: (value) => ({ andAll: se_RetrievalFilterList(value, context) }),
        equals: (value) => ({ equals: se_FilterAttribute(value, context) }),
        greaterThan: (value) => ({ greaterThan: se_FilterAttribute(value, context) }),
        greaterThanOrEquals: (value) => ({ greaterThanOrEquals: se_FilterAttribute(value, context) }),
        in: (value) => ({ in: se_FilterAttribute(value, context) }),
        lessThan: (value) => ({ lessThan: se_FilterAttribute(value, context) }),
        lessThanOrEquals: (value) => ({ lessThanOrEquals: se_FilterAttribute(value, context) }),
        listContains: (value) => ({ listContains: se_FilterAttribute(value, context) }),
        notEquals: (value) => ({ notEquals: se_FilterAttribute(value, context) }),
        notIn: (value) => ({ notIn: se_FilterAttribute(value, context) }),
        orAll: (value) => ({ orAll: se_RetrievalFilterList(value, context) }),
        startsWith: (value) => ({ startsWith: se_FilterAttribute(value, context) }),
        stringContains: (value) => ({ stringContains: se_FilterAttribute(value, context) }),
        _: (name, value) => ({ name: value })
      });
    }, "se_RetrievalFilter");
    var se_RetrievalFilterList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return se_RetrievalFilter(entry, context);
      });
    }, "se_RetrievalFilterList");
    var se_RetrieveAndGenerateConfiguration = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client7.take)(input, {
        externalSourcesConfiguration: (_) => se_ExternalSourcesRetrieveAndGenerateConfiguration(_, context),
        knowledgeBaseConfiguration: (_) => se_KnowledgeBaseRetrieveAndGenerateConfiguration(_, context),
        type: []
      });
    }, "se_RetrieveAndGenerateConfiguration");
    var se_RetrieveConfig = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client7.take)(input, {
        knowledgeBaseId: [],
        knowledgeBaseRetrievalConfiguration: (_) => se_KnowledgeBaseRetrievalConfiguration(_, context)
      });
    }, "se_RetrieveConfig");
    var se_TextInferenceConfig = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client7.take)(input, {
        maxTokens: [],
        stopSequences: import_smithy_client7._json,
        temperature: import_smithy_client7.serializeFloat,
        topP: import_smithy_client7.serializeFloat
      });
    }, "se_TextInferenceConfig");
    var de_AdditionalModelRequestFields = /* @__PURE__ */ __name((output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = de_AdditionalModelRequestFieldsValue(value, context);
        return acc;
      }, {});
    }, "de_AdditionalModelRequestFields");
    var de_AdditionalModelRequestFieldsValue = /* @__PURE__ */ __name((output, context) => {
      return output;
    }, "de_AdditionalModelRequestFieldsValue");
    var de_ByteContentDoc = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client7.take)(output, {
        contentType: import_smithy_client7.expectString,
        data: context.base64Decoder,
        identifier: import_smithy_client7.expectString
      });
    }, "de_ByteContentDoc");
    var de_CustomModelSummary = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client7.take)(output, {
        baseModelArn: import_smithy_client7.expectString,
        baseModelName: import_smithy_client7.expectString,
        creationTime: (_) => (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.parseRfc3339DateTimeWithOffset)(_)),
        customizationType: import_smithy_client7.expectString,
        modelArn: import_smithy_client7.expectString,
        modelName: import_smithy_client7.expectString,
        ownerAccountId: import_smithy_client7.expectString
      });
    }, "de_CustomModelSummary");
    var de_CustomModelSummaryList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_CustomModelSummary(entry, context);
      });
      return retVal;
    }, "de_CustomModelSummaryList");
    var de_EvaluationInferenceConfig = /* @__PURE__ */ __name((output, context) => {
      if (output.models != null) {
        return {
          models: (0, import_smithy_client7._json)(output.models)
        };
      }
      if (output.ragConfigs != null) {
        return {
          ragConfigs: de_RagConfigs(output.ragConfigs, context)
        };
      }
      return { $unknown: Object.entries(output)[0] };
    }, "de_EvaluationInferenceConfig");
    var de_EvaluationSummaries = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_EvaluationSummary(entry, context);
      });
      return retVal;
    }, "de_EvaluationSummaries");
    var de_EvaluationSummary = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client7.take)(output, {
        applicationType: import_smithy_client7.expectString,
        creationTime: (_) => (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.parseRfc3339DateTimeWithOffset)(_)),
        evaluationTaskTypes: import_smithy_client7._json,
        evaluatorModelIdentifiers: import_smithy_client7._json,
        jobArn: import_smithy_client7.expectString,
        jobName: import_smithy_client7.expectString,
        jobType: import_smithy_client7.expectString,
        modelIdentifiers: import_smithy_client7._json,
        ragIdentifiers: import_smithy_client7._json,
        status: import_smithy_client7.expectString
      });
    }, "de_EvaluationSummary");
    var de_ExternalSource = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client7.take)(output, {
        byteContent: (_) => de_ByteContentDoc(_, context),
        s3Location: import_smithy_client7._json,
        sourceType: import_smithy_client7.expectString
      });
    }, "de_ExternalSource");
    var de_ExternalSources = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_ExternalSource(entry, context);
      });
      return retVal;
    }, "de_ExternalSources");
    var de_ExternalSourcesGenerationConfiguration = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client7.take)(output, {
        additionalModelRequestFields: (_) => de_AdditionalModelRequestFields(_, context),
        guardrailConfiguration: import_smithy_client7._json,
        kbInferenceConfig: (_) => de_KbInferenceConfig(_, context),
        promptTemplate: import_smithy_client7._json
      });
    }, "de_ExternalSourcesGenerationConfiguration");
    var de_ExternalSourcesRetrieveAndGenerateConfiguration = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client7.take)(output, {
        generationConfiguration: (_) => de_ExternalSourcesGenerationConfiguration(_, context),
        modelArn: import_smithy_client7.expectString,
        sources: (_) => de_ExternalSources(_, context)
      });
    }, "de_ExternalSourcesRetrieveAndGenerateConfiguration");
    var de_FilterAttribute = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client7.take)(output, {
        key: import_smithy_client7.expectString,
        value: (_) => de_FilterValue(_, context)
      });
    }, "de_FilterAttribute");
    var de_FilterValue = /* @__PURE__ */ __name((output, context) => {
      return output;
    }, "de_FilterValue");
    var de_GenerationConfiguration = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client7.take)(output, {
        additionalModelRequestFields: (_) => de_AdditionalModelRequestFields(_, context),
        guardrailConfiguration: import_smithy_client7._json,
        kbInferenceConfig: (_) => de_KbInferenceConfig(_, context),
        promptTemplate: import_smithy_client7._json
      });
    }, "de_GenerationConfiguration");
    var de_GuardrailContextualGroundingFilter = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client7.take)(output, {
        threshold: import_smithy_client7.limitedParseDouble,
        type: import_smithy_client7.expectString
      });
    }, "de_GuardrailContextualGroundingFilter");
    var de_GuardrailContextualGroundingFilters = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_GuardrailContextualGroundingFilter(entry, context);
      });
      return retVal;
    }, "de_GuardrailContextualGroundingFilters");
    var de_GuardrailContextualGroundingPolicy = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client7.take)(output, {
        filters: (_) => de_GuardrailContextualGroundingFilters(_, context)
      });
    }, "de_GuardrailContextualGroundingPolicy");
    var de_GuardrailSummaries = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_GuardrailSummary(entry, context);
      });
      return retVal;
    }, "de_GuardrailSummaries");
    var de_GuardrailSummary = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client7.take)(output, {
        arn: import_smithy_client7.expectString,
        createdAt: (_) => (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.parseRfc3339DateTimeWithOffset)(_)),
        description: import_smithy_client7.expectString,
        id: import_smithy_client7.expectString,
        name: import_smithy_client7.expectString,
        status: import_smithy_client7.expectString,
        updatedAt: (_) => (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.parseRfc3339DateTimeWithOffset)(_)),
        version: import_smithy_client7.expectString
      });
    }, "de_GuardrailSummary");
    var de_ImportedModelSummary = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client7.take)(output, {
        creationTime: (_) => (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.parseRfc3339DateTimeWithOffset)(_)),
        instructSupported: import_smithy_client7.expectBoolean,
        modelArchitecture: import_smithy_client7.expectString,
        modelArn: import_smithy_client7.expectString,
        modelName: import_smithy_client7.expectString
      });
    }, "de_ImportedModelSummary");
    var de_ImportedModelSummaryList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_ImportedModelSummary(entry, context);
      });
      return retVal;
    }, "de_ImportedModelSummaryList");
    var de_InferenceProfileSummaries = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_InferenceProfileSummary(entry, context);
      });
      return retVal;
    }, "de_InferenceProfileSummaries");
    var de_InferenceProfileSummary = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client7.take)(output, {
        createdAt: (_) => (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.parseRfc3339DateTimeWithOffset)(_)),
        description: import_smithy_client7.expectString,
        inferenceProfileArn: import_smithy_client7.expectString,
        inferenceProfileId: import_smithy_client7.expectString,
        inferenceProfileName: import_smithy_client7.expectString,
        models: import_smithy_client7._json,
        status: import_smithy_client7.expectString,
        type: import_smithy_client7.expectString,
        updatedAt: (_) => (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.parseRfc3339DateTimeWithOffset)(_))
      });
    }, "de_InferenceProfileSummary");
    var de_KbInferenceConfig = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client7.take)(output, {
        textInferenceConfig: (_) => de_TextInferenceConfig(_, context)
      });
    }, "de_KbInferenceConfig");
    var de_KnowledgeBaseConfig = /* @__PURE__ */ __name((output, context) => {
      if (output.retrieveAndGenerateConfig != null) {
        return {
          retrieveAndGenerateConfig: de_RetrieveAndGenerateConfiguration(output.retrieveAndGenerateConfig, context)
        };
      }
      if (output.retrieveConfig != null) {
        return {
          retrieveConfig: de_RetrieveConfig(output.retrieveConfig, context)
        };
      }
      return { $unknown: Object.entries(output)[0] };
    }, "de_KnowledgeBaseConfig");
    var de_KnowledgeBaseRetrievalConfiguration = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client7.take)(output, {
        vectorSearchConfiguration: (_) => de_KnowledgeBaseVectorSearchConfiguration(_, context)
      });
    }, "de_KnowledgeBaseRetrievalConfiguration");
    var de_KnowledgeBaseRetrieveAndGenerateConfiguration = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client7.take)(output, {
        generationConfiguration: (_) => de_GenerationConfiguration(_, context),
        knowledgeBaseId: import_smithy_client7.expectString,
        modelArn: import_smithy_client7.expectString,
        orchestrationConfiguration: import_smithy_client7._json,
        retrievalConfiguration: (_) => de_KnowledgeBaseRetrievalConfiguration(_, context)
      });
    }, "de_KnowledgeBaseRetrieveAndGenerateConfiguration");
    var de_KnowledgeBaseVectorSearchConfiguration = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client7.take)(output, {
        filter: (_) => de_RetrievalFilter((0, import_core22.awsExpectUnion)(_), context),
        numberOfResults: import_smithy_client7.expectInt32,
        overrideSearchType: import_smithy_client7.expectString
      });
    }, "de_KnowledgeBaseVectorSearchConfiguration");
    var de_MarketplaceModelEndpoint = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client7.take)(output, {
        createdAt: (_) => (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.parseRfc3339DateTimeWithOffset)(_)),
        endpointArn: import_smithy_client7.expectString,
        endpointConfig: (_) => (0, import_smithy_client7._json)((0, import_core22.awsExpectUnion)(_)),
        endpointStatus: import_smithy_client7.expectString,
        endpointStatusMessage: import_smithy_client7.expectString,
        modelSourceIdentifier: import_smithy_client7.expectString,
        status: import_smithy_client7.expectString,
        statusMessage: import_smithy_client7.expectString,
        updatedAt: (_) => (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.parseRfc3339DateTimeWithOffset)(_))
      });
    }, "de_MarketplaceModelEndpoint");
    var de_MarketplaceModelEndpointSummaries = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_MarketplaceModelEndpointSummary(entry, context);
      });
      return retVal;
    }, "de_MarketplaceModelEndpointSummaries");
    var de_MarketplaceModelEndpointSummary = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client7.take)(output, {
        createdAt: (_) => (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.parseRfc3339DateTimeWithOffset)(_)),
        endpointArn: import_smithy_client7.expectString,
        modelSourceIdentifier: import_smithy_client7.expectString,
        status: import_smithy_client7.expectString,
        statusMessage: import_smithy_client7.expectString,
        updatedAt: (_) => (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.parseRfc3339DateTimeWithOffset)(_))
      });
    }, "de_MarketplaceModelEndpointSummary");
    var de_ModelCopyJobSummaries = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_ModelCopyJobSummary(entry, context);
      });
      return retVal;
    }, "de_ModelCopyJobSummaries");
    var de_ModelCopyJobSummary = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client7.take)(output, {
        creationTime: (_) => (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.parseRfc3339DateTimeWithOffset)(_)),
        failureMessage: import_smithy_client7.expectString,
        jobArn: import_smithy_client7.expectString,
        sourceAccountId: import_smithy_client7.expectString,
        sourceModelArn: import_smithy_client7.expectString,
        sourceModelName: import_smithy_client7.expectString,
        status: import_smithy_client7.expectString,
        targetModelArn: import_smithy_client7.expectString,
        targetModelKmsKeyArn: import_smithy_client7.expectString,
        targetModelName: import_smithy_client7.expectString,
        targetModelTags: import_smithy_client7._json
      });
    }, "de_ModelCopyJobSummary");
    var de_ModelCustomizationJobSummaries = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_ModelCustomizationJobSummary(entry, context);
      });
      return retVal;
    }, "de_ModelCustomizationJobSummaries");
    var de_ModelCustomizationJobSummary = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client7.take)(output, {
        baseModelArn: import_smithy_client7.expectString,
        creationTime: (_) => (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.parseRfc3339DateTimeWithOffset)(_)),
        customModelArn: import_smithy_client7.expectString,
        customModelName: import_smithy_client7.expectString,
        customizationType: import_smithy_client7.expectString,
        endTime: (_) => (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.parseRfc3339DateTimeWithOffset)(_)),
        jobArn: import_smithy_client7.expectString,
        jobName: import_smithy_client7.expectString,
        lastModifiedTime: (_) => (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.parseRfc3339DateTimeWithOffset)(_)),
        status: import_smithy_client7.expectString
      });
    }, "de_ModelCustomizationJobSummary");
    var de_ModelImportJobSummaries = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_ModelImportJobSummary(entry, context);
      });
      return retVal;
    }, "de_ModelImportJobSummaries");
    var de_ModelImportJobSummary = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client7.take)(output, {
        creationTime: (_) => (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.parseRfc3339DateTimeWithOffset)(_)),
        endTime: (_) => (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.parseRfc3339DateTimeWithOffset)(_)),
        importedModelArn: import_smithy_client7.expectString,
        importedModelName: import_smithy_client7.expectString,
        jobArn: import_smithy_client7.expectString,
        jobName: import_smithy_client7.expectString,
        lastModifiedTime: (_) => (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.parseRfc3339DateTimeWithOffset)(_)),
        status: import_smithy_client7.expectString
      });
    }, "de_ModelImportJobSummary");
    var de_ModelInvocationJobSummaries = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_ModelInvocationJobSummary(entry, context);
      });
      return retVal;
    }, "de_ModelInvocationJobSummaries");
    var de_ModelInvocationJobSummary = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client7.take)(output, {
        clientRequestToken: import_smithy_client7.expectString,
        endTime: (_) => (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.parseRfc3339DateTimeWithOffset)(_)),
        inputDataConfig: (_) => (0, import_smithy_client7._json)((0, import_core22.awsExpectUnion)(_)),
        jobArn: import_smithy_client7.expectString,
        jobExpirationTime: (_) => (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.parseRfc3339DateTimeWithOffset)(_)),
        jobName: import_smithy_client7.expectString,
        lastModifiedTime: (_) => (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.parseRfc3339DateTimeWithOffset)(_)),
        message: import_smithy_client7.expectString,
        modelId: import_smithy_client7.expectString,
        outputDataConfig: (_) => (0, import_smithy_client7._json)((0, import_core22.awsExpectUnion)(_)),
        roleArn: import_smithy_client7.expectString,
        status: import_smithy_client7.expectString,
        submitTime: (_) => (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.parseRfc3339DateTimeWithOffset)(_)),
        timeoutDurationInHours: import_smithy_client7.expectInt32,
        vpcConfig: import_smithy_client7._json
      });
    }, "de_ModelInvocationJobSummary");
    var de_PromptRouterSummaries = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_PromptRouterSummary(entry, context);
      });
      return retVal;
    }, "de_PromptRouterSummaries");
    var de_PromptRouterSummary = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client7.take)(output, {
        createdAt: (_) => (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.parseRfc3339DateTimeWithOffset)(_)),
        description: import_smithy_client7.expectString,
        fallbackModel: import_smithy_client7._json,
        models: import_smithy_client7._json,
        promptRouterArn: import_smithy_client7.expectString,
        promptRouterName: import_smithy_client7.expectString,
        routingCriteria: (_) => de_RoutingCriteria(_, context),
        status: import_smithy_client7.expectString,
        type: import_smithy_client7.expectString,
        updatedAt: (_) => (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.parseRfc3339DateTimeWithOffset)(_))
      });
    }, "de_PromptRouterSummary");
    var de_ProvisionedModelSummaries = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_ProvisionedModelSummary(entry, context);
      });
      return retVal;
    }, "de_ProvisionedModelSummaries");
    var de_ProvisionedModelSummary = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client7.take)(output, {
        commitmentDuration: import_smithy_client7.expectString,
        commitmentExpirationTime: (_) => (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.parseRfc3339DateTimeWithOffset)(_)),
        creationTime: (_) => (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.parseRfc3339DateTimeWithOffset)(_)),
        desiredModelArn: import_smithy_client7.expectString,
        desiredModelUnits: import_smithy_client7.expectInt32,
        foundationModelArn: import_smithy_client7.expectString,
        lastModifiedTime: (_) => (0, import_smithy_client7.expectNonNull)((0, import_smithy_client7.parseRfc3339DateTimeWithOffset)(_)),
        modelArn: import_smithy_client7.expectString,
        modelUnits: import_smithy_client7.expectInt32,
        provisionedModelArn: import_smithy_client7.expectString,
        provisionedModelName: import_smithy_client7.expectString,
        status: import_smithy_client7.expectString
      });
    }, "de_ProvisionedModelSummary");
    var de_RAGConfig = /* @__PURE__ */ __name((output, context) => {
      if (output.knowledgeBaseConfig != null) {
        return {
          knowledgeBaseConfig: de_KnowledgeBaseConfig((0, import_core22.awsExpectUnion)(output.knowledgeBaseConfig), context)
        };
      }
      return { $unknown: Object.entries(output)[0] };
    }, "de_RAGConfig");
    var de_RagConfigs = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_RAGConfig((0, import_core22.awsExpectUnion)(entry), context);
      });
      return retVal;
    }, "de_RagConfigs");
    var de_RetrievalFilter = /* @__PURE__ */ __name((output, context) => {
      if (output.andAll != null) {
        return {
          andAll: de_RetrievalFilterList(output.andAll, context)
        };
      }
      if (output.equals != null) {
        return {
          equals: de_FilterAttribute(output.equals, context)
        };
      }
      if (output.greaterThan != null) {
        return {
          greaterThan: de_FilterAttribute(output.greaterThan, context)
        };
      }
      if (output.greaterThanOrEquals != null) {
        return {
          greaterThanOrEquals: de_FilterAttribute(output.greaterThanOrEquals, context)
        };
      }
      if (output.in != null) {
        return {
          in: de_FilterAttribute(output.in, context)
        };
      }
      if (output.lessThan != null) {
        return {
          lessThan: de_FilterAttribute(output.lessThan, context)
        };
      }
      if (output.lessThanOrEquals != null) {
        return {
          lessThanOrEquals: de_FilterAttribute(output.lessThanOrEquals, context)
        };
      }
      if (output.listContains != null) {
        return {
          listContains: de_FilterAttribute(output.listContains, context)
        };
      }
      if (output.notEquals != null) {
        return {
          notEquals: de_FilterAttribute(output.notEquals, context)
        };
      }
      if (output.notIn != null) {
        return {
          notIn: de_FilterAttribute(output.notIn, context)
        };
      }
      if (output.orAll != null) {
        return {
          orAll: de_RetrievalFilterList(output.orAll, context)
        };
      }
      if (output.startsWith != null) {
        return {
          startsWith: de_FilterAttribute(output.startsWith, context)
        };
      }
      if (output.stringContains != null) {
        return {
          stringContains: de_FilterAttribute(output.stringContains, context)
        };
      }
      return { $unknown: Object.entries(output)[0] };
    }, "de_RetrievalFilter");
    var de_RetrievalFilterList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_RetrievalFilter((0, import_core22.awsExpectUnion)(entry), context);
      });
      return retVal;
    }, "de_RetrievalFilterList");
    var de_RetrieveAndGenerateConfiguration = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client7.take)(output, {
        externalSourcesConfiguration: (_) => de_ExternalSourcesRetrieveAndGenerateConfiguration(_, context),
        knowledgeBaseConfiguration: (_) => de_KnowledgeBaseRetrieveAndGenerateConfiguration(_, context),
        type: import_smithy_client7.expectString
      });
    }, "de_RetrieveAndGenerateConfiguration");
    var de_RetrieveConfig = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client7.take)(output, {
        knowledgeBaseId: import_smithy_client7.expectString,
        knowledgeBaseRetrievalConfiguration: (_) => de_KnowledgeBaseRetrievalConfiguration(_, context)
      });
    }, "de_RetrieveConfig");
    var de_RoutingCriteria = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client7.take)(output, {
        responseQualityDifference: import_smithy_client7.limitedParseDouble
      });
    }, "de_RoutingCriteria");
    var de_TextInferenceConfig = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client7.take)(output, {
        maxTokens: import_smithy_client7.expectInt32,
        stopSequences: import_smithy_client7._json,
        temperature: import_smithy_client7.limitedParseFloat32,
        topP: import_smithy_client7.limitedParseFloat32
      });
    }, "de_TextInferenceConfig");
    var de_TrainingMetrics = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client7.take)(output, {
        trainingLoss: import_smithy_client7.limitedParseFloat32
      });
    }, "de_TrainingMetrics");
    var de_ValidationMetrics = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_ValidatorMetric(entry, context);
      });
      return retVal;
    }, "de_ValidationMetrics");
    var de_ValidatorMetric = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client7.take)(output, {
        validationLoss: import_smithy_client7.limitedParseFloat32
      });
    }, "de_ValidatorMetric");
    var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    }), "deserializeMetadata");
    var _aTE = "applicationTypeEquals";
    var _bCT = "byCustomizationType";
    var _bIT = "byInferenceType";
    var _bMAE = "baseModelArnEquals";
    var _bOM = "byOutputModality";
    var _bP = "byProvider";
    var _cTA = "creationTimeAfter";
    var _cTB = "creationTimeBefore";
    var _fMAE = "foundationModelArnEquals";
    var _gI = "guardrailIdentifier";
    var _gV = "guardrailVersion";
    var _iO = "isOwned";
    var _mAE = "modelArnEquals";
    var _mR = "maxResults";
    var _mSE = "modelSourceEquals";
    var _mSI = "modelSourceIdentifier";
    var _nC = "nameContains";
    var _nT = "nextToken";
    var _oMNC = "outputModelNameContains";
    var _sAE = "sourceAccountEquals";
    var _sB = "sortBy";
    var _sE = "statusEquals";
    var _sMAE = "sourceModelArnEquals";
    var _sO = "sortOrder";
    var _sTA = "submitTimeAfter";
    var _sTB = "submitTimeBefore";
    var _t = "type";
    var _tE = "typeEquals";
    var _tMNC = "targetModelNameContains";
    var _BatchDeleteEvaluationJobCommand = class _BatchDeleteEvaluationJobCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockControlPlaneService", "BatchDeleteEvaluationJob", {}).n("BedrockClient", "BatchDeleteEvaluationJobCommand").f(BatchDeleteEvaluationJobRequestFilterSensitiveLog, BatchDeleteEvaluationJobResponseFilterSensitiveLog).ser(se_BatchDeleteEvaluationJobCommand).de(de_BatchDeleteEvaluationJobCommand).build() {
    };
    __name(_BatchDeleteEvaluationJobCommand, "BatchDeleteEvaluationJobCommand");
    var BatchDeleteEvaluationJobCommand = _BatchDeleteEvaluationJobCommand;
    var _CreateEvaluationJobCommand = class _CreateEvaluationJobCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockControlPlaneService", "CreateEvaluationJob", {}).n("BedrockClient", "CreateEvaluationJobCommand").f(CreateEvaluationJobRequestFilterSensitiveLog, void 0).ser(se_CreateEvaluationJobCommand).de(de_CreateEvaluationJobCommand).build() {
    };
    __name(_CreateEvaluationJobCommand, "CreateEvaluationJobCommand");
    var CreateEvaluationJobCommand = _CreateEvaluationJobCommand;
    var _CreateGuardrailCommand = class _CreateGuardrailCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockControlPlaneService", "CreateGuardrail", {}).n("BedrockClient", "CreateGuardrailCommand").f(CreateGuardrailRequestFilterSensitiveLog, void 0).ser(se_CreateGuardrailCommand).de(de_CreateGuardrailCommand).build() {
    };
    __name(_CreateGuardrailCommand, "CreateGuardrailCommand");
    var CreateGuardrailCommand = _CreateGuardrailCommand;
    var _CreateGuardrailVersionCommand = class _CreateGuardrailVersionCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockControlPlaneService", "CreateGuardrailVersion", {}).n("BedrockClient", "CreateGuardrailVersionCommand").f(CreateGuardrailVersionRequestFilterSensitiveLog, void 0).ser(se_CreateGuardrailVersionCommand).de(de_CreateGuardrailVersionCommand).build() {
    };
    __name(_CreateGuardrailVersionCommand, "CreateGuardrailVersionCommand");
    var CreateGuardrailVersionCommand = _CreateGuardrailVersionCommand;
    var _CreateInferenceProfileCommand = class _CreateInferenceProfileCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockControlPlaneService", "CreateInferenceProfile", {}).n("BedrockClient", "CreateInferenceProfileCommand").f(CreateInferenceProfileRequestFilterSensitiveLog, void 0).ser(se_CreateInferenceProfileCommand).de(de_CreateInferenceProfileCommand).build() {
    };
    __name(_CreateInferenceProfileCommand, "CreateInferenceProfileCommand");
    var CreateInferenceProfileCommand = _CreateInferenceProfileCommand;
    var _CreateMarketplaceModelEndpointCommand = class _CreateMarketplaceModelEndpointCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockControlPlaneService", "CreateMarketplaceModelEndpoint", {}).n("BedrockClient", "CreateMarketplaceModelEndpointCommand").f(void 0, void 0).ser(se_CreateMarketplaceModelEndpointCommand).de(de_CreateMarketplaceModelEndpointCommand).build() {
    };
    __name(_CreateMarketplaceModelEndpointCommand, "CreateMarketplaceModelEndpointCommand");
    var CreateMarketplaceModelEndpointCommand = _CreateMarketplaceModelEndpointCommand;
    var _CreateModelCopyJobCommand = class _CreateModelCopyJobCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockControlPlaneService", "CreateModelCopyJob", {}).n("BedrockClient", "CreateModelCopyJobCommand").f(void 0, void 0).ser(se_CreateModelCopyJobCommand).de(de_CreateModelCopyJobCommand).build() {
    };
    __name(_CreateModelCopyJobCommand, "CreateModelCopyJobCommand");
    var CreateModelCopyJobCommand = _CreateModelCopyJobCommand;
    var _CreateModelCustomizationJobCommand = class _CreateModelCustomizationJobCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockControlPlaneService", "CreateModelCustomizationJob", {}).n("BedrockClient", "CreateModelCustomizationJobCommand").f(CreateModelCustomizationJobRequestFilterSensitiveLog, void 0).ser(se_CreateModelCustomizationJobCommand).de(de_CreateModelCustomizationJobCommand).build() {
    };
    __name(_CreateModelCustomizationJobCommand, "CreateModelCustomizationJobCommand");
    var CreateModelCustomizationJobCommand = _CreateModelCustomizationJobCommand;
    var _CreateModelImportJobCommand = class _CreateModelImportJobCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockControlPlaneService", "CreateModelImportJob", {}).n("BedrockClient", "CreateModelImportJobCommand").f(void 0, void 0).ser(se_CreateModelImportJobCommand).de(de_CreateModelImportJobCommand).build() {
    };
    __name(_CreateModelImportJobCommand, "CreateModelImportJobCommand");
    var CreateModelImportJobCommand = _CreateModelImportJobCommand;
    var _CreateModelInvocationJobCommand = class _CreateModelInvocationJobCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockControlPlaneService", "CreateModelInvocationJob", {}).n("BedrockClient", "CreateModelInvocationJobCommand").f(void 0, void 0).ser(se_CreateModelInvocationJobCommand).de(de_CreateModelInvocationJobCommand).build() {
    };
    __name(_CreateModelInvocationJobCommand, "CreateModelInvocationJobCommand");
    var CreateModelInvocationJobCommand = _CreateModelInvocationJobCommand;
    var _CreateProvisionedModelThroughputCommand = class _CreateProvisionedModelThroughputCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockControlPlaneService", "CreateProvisionedModelThroughput", {}).n("BedrockClient", "CreateProvisionedModelThroughputCommand").f(void 0, void 0).ser(se_CreateProvisionedModelThroughputCommand).de(de_CreateProvisionedModelThroughputCommand).build() {
    };
    __name(_CreateProvisionedModelThroughputCommand, "CreateProvisionedModelThroughputCommand");
    var CreateProvisionedModelThroughputCommand = _CreateProvisionedModelThroughputCommand;
    var _DeleteCustomModelCommand = class _DeleteCustomModelCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockControlPlaneService", "DeleteCustomModel", {}).n("BedrockClient", "DeleteCustomModelCommand").f(void 0, void 0).ser(se_DeleteCustomModelCommand).de(de_DeleteCustomModelCommand).build() {
    };
    __name(_DeleteCustomModelCommand, "DeleteCustomModelCommand");
    var DeleteCustomModelCommand = _DeleteCustomModelCommand;
    var _DeleteGuardrailCommand = class _DeleteGuardrailCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockControlPlaneService", "DeleteGuardrail", {}).n("BedrockClient", "DeleteGuardrailCommand").f(void 0, void 0).ser(se_DeleteGuardrailCommand).de(de_DeleteGuardrailCommand).build() {
    };
    __name(_DeleteGuardrailCommand, "DeleteGuardrailCommand");
    var DeleteGuardrailCommand = _DeleteGuardrailCommand;
    var _DeleteImportedModelCommand = class _DeleteImportedModelCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockControlPlaneService", "DeleteImportedModel", {}).n("BedrockClient", "DeleteImportedModelCommand").f(void 0, void 0).ser(se_DeleteImportedModelCommand).de(de_DeleteImportedModelCommand).build() {
    };
    __name(_DeleteImportedModelCommand, "DeleteImportedModelCommand");
    var DeleteImportedModelCommand = _DeleteImportedModelCommand;
    var _DeleteInferenceProfileCommand = class _DeleteInferenceProfileCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockControlPlaneService", "DeleteInferenceProfile", {}).n("BedrockClient", "DeleteInferenceProfileCommand").f(void 0, void 0).ser(se_DeleteInferenceProfileCommand).de(de_DeleteInferenceProfileCommand).build() {
    };
    __name(_DeleteInferenceProfileCommand, "DeleteInferenceProfileCommand");
    var DeleteInferenceProfileCommand = _DeleteInferenceProfileCommand;
    var _DeleteMarketplaceModelEndpointCommand = class _DeleteMarketplaceModelEndpointCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockControlPlaneService", "DeleteMarketplaceModelEndpoint", {}).n("BedrockClient", "DeleteMarketplaceModelEndpointCommand").f(void 0, void 0).ser(se_DeleteMarketplaceModelEndpointCommand).de(de_DeleteMarketplaceModelEndpointCommand).build() {
    };
    __name(_DeleteMarketplaceModelEndpointCommand, "DeleteMarketplaceModelEndpointCommand");
    var DeleteMarketplaceModelEndpointCommand = _DeleteMarketplaceModelEndpointCommand;
    var _DeleteModelInvocationLoggingConfigurationCommand = class _DeleteModelInvocationLoggingConfigurationCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockControlPlaneService", "DeleteModelInvocationLoggingConfiguration", {}).n("BedrockClient", "DeleteModelInvocationLoggingConfigurationCommand").f(void 0, void 0).ser(se_DeleteModelInvocationLoggingConfigurationCommand).de(de_DeleteModelInvocationLoggingConfigurationCommand).build() {
    };
    __name(_DeleteModelInvocationLoggingConfigurationCommand, "DeleteModelInvocationLoggingConfigurationCommand");
    var DeleteModelInvocationLoggingConfigurationCommand = _DeleteModelInvocationLoggingConfigurationCommand;
    var _DeleteProvisionedModelThroughputCommand = class _DeleteProvisionedModelThroughputCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockControlPlaneService", "DeleteProvisionedModelThroughput", {}).n("BedrockClient", "DeleteProvisionedModelThroughputCommand").f(void 0, void 0).ser(se_DeleteProvisionedModelThroughputCommand).de(de_DeleteProvisionedModelThroughputCommand).build() {
    };
    __name(_DeleteProvisionedModelThroughputCommand, "DeleteProvisionedModelThroughputCommand");
    var DeleteProvisionedModelThroughputCommand = _DeleteProvisionedModelThroughputCommand;
    var _DeregisterMarketplaceModelEndpointCommand = class _DeregisterMarketplaceModelEndpointCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockControlPlaneService", "DeregisterMarketplaceModelEndpoint", {}).n("BedrockClient", "DeregisterMarketplaceModelEndpointCommand").f(void 0, void 0).ser(se_DeregisterMarketplaceModelEndpointCommand).de(de_DeregisterMarketplaceModelEndpointCommand).build() {
    };
    __name(_DeregisterMarketplaceModelEndpointCommand, "DeregisterMarketplaceModelEndpointCommand");
    var DeregisterMarketplaceModelEndpointCommand = _DeregisterMarketplaceModelEndpointCommand;
    var _GetCustomModelCommand = class _GetCustomModelCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockControlPlaneService", "GetCustomModel", {}).n("BedrockClient", "GetCustomModelCommand").f(void 0, GetCustomModelResponseFilterSensitiveLog).ser(se_GetCustomModelCommand).de(de_GetCustomModelCommand).build() {
    };
    __name(_GetCustomModelCommand, "GetCustomModelCommand");
    var GetCustomModelCommand = _GetCustomModelCommand;
    var _GetEvaluationJobCommand = class _GetEvaluationJobCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockControlPlaneService", "GetEvaluationJob", {}).n("BedrockClient", "GetEvaluationJobCommand").f(GetEvaluationJobRequestFilterSensitiveLog, GetEvaluationJobResponseFilterSensitiveLog).ser(se_GetEvaluationJobCommand).de(de_GetEvaluationJobCommand).build() {
    };
    __name(_GetEvaluationJobCommand, "GetEvaluationJobCommand");
    var GetEvaluationJobCommand = _GetEvaluationJobCommand;
    var _GetFoundationModelCommand = class _GetFoundationModelCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockControlPlaneService", "GetFoundationModel", {}).n("BedrockClient", "GetFoundationModelCommand").f(void 0, void 0).ser(se_GetFoundationModelCommand).de(de_GetFoundationModelCommand).build() {
    };
    __name(_GetFoundationModelCommand, "GetFoundationModelCommand");
    var GetFoundationModelCommand = _GetFoundationModelCommand;
    var _GetGuardrailCommand = class _GetGuardrailCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockControlPlaneService", "GetGuardrail", {}).n("BedrockClient", "GetGuardrailCommand").f(void 0, GetGuardrailResponseFilterSensitiveLog).ser(se_GetGuardrailCommand).de(de_GetGuardrailCommand).build() {
    };
    __name(_GetGuardrailCommand, "GetGuardrailCommand");
    var GetGuardrailCommand = _GetGuardrailCommand;
    var _GetImportedModelCommand = class _GetImportedModelCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockControlPlaneService", "GetImportedModel", {}).n("BedrockClient", "GetImportedModelCommand").f(void 0, void 0).ser(se_GetImportedModelCommand).de(de_GetImportedModelCommand).build() {
    };
    __name(_GetImportedModelCommand, "GetImportedModelCommand");
    var GetImportedModelCommand = _GetImportedModelCommand;
    var _GetInferenceProfileCommand = class _GetInferenceProfileCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockControlPlaneService", "GetInferenceProfile", {}).n("BedrockClient", "GetInferenceProfileCommand").f(void 0, GetInferenceProfileResponseFilterSensitiveLog).ser(se_GetInferenceProfileCommand).de(de_GetInferenceProfileCommand).build() {
    };
    __name(_GetInferenceProfileCommand, "GetInferenceProfileCommand");
    var GetInferenceProfileCommand = _GetInferenceProfileCommand;
    var _GetMarketplaceModelEndpointCommand = class _GetMarketplaceModelEndpointCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockControlPlaneService", "GetMarketplaceModelEndpoint", {}).n("BedrockClient", "GetMarketplaceModelEndpointCommand").f(void 0, void 0).ser(se_GetMarketplaceModelEndpointCommand).de(de_GetMarketplaceModelEndpointCommand).build() {
    };
    __name(_GetMarketplaceModelEndpointCommand, "GetMarketplaceModelEndpointCommand");
    var GetMarketplaceModelEndpointCommand = _GetMarketplaceModelEndpointCommand;
    var _GetModelCopyJobCommand = class _GetModelCopyJobCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockControlPlaneService", "GetModelCopyJob", {}).n("BedrockClient", "GetModelCopyJobCommand").f(void 0, void 0).ser(se_GetModelCopyJobCommand).de(de_GetModelCopyJobCommand).build() {
    };
    __name(_GetModelCopyJobCommand, "GetModelCopyJobCommand");
    var GetModelCopyJobCommand = _GetModelCopyJobCommand;
    var _GetModelCustomizationJobCommand = class _GetModelCustomizationJobCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockControlPlaneService", "GetModelCustomizationJob", {}).n("BedrockClient", "GetModelCustomizationJobCommand").f(void 0, GetModelCustomizationJobResponseFilterSensitiveLog).ser(se_GetModelCustomizationJobCommand).de(de_GetModelCustomizationJobCommand).build() {
    };
    __name(_GetModelCustomizationJobCommand, "GetModelCustomizationJobCommand");
    var GetModelCustomizationJobCommand = _GetModelCustomizationJobCommand;
    var _GetModelImportJobCommand = class _GetModelImportJobCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockControlPlaneService", "GetModelImportJob", {}).n("BedrockClient", "GetModelImportJobCommand").f(void 0, void 0).ser(se_GetModelImportJobCommand).de(de_GetModelImportJobCommand).build() {
    };
    __name(_GetModelImportJobCommand, "GetModelImportJobCommand");
    var GetModelImportJobCommand = _GetModelImportJobCommand;
    var _GetModelInvocationJobCommand = class _GetModelInvocationJobCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockControlPlaneService", "GetModelInvocationJob", {}).n("BedrockClient", "GetModelInvocationJobCommand").f(void 0, GetModelInvocationJobResponseFilterSensitiveLog).ser(se_GetModelInvocationJobCommand).de(de_GetModelInvocationJobCommand).build() {
    };
    __name(_GetModelInvocationJobCommand, "GetModelInvocationJobCommand");
    var GetModelInvocationJobCommand = _GetModelInvocationJobCommand;
    var _GetModelInvocationLoggingConfigurationCommand = class _GetModelInvocationLoggingConfigurationCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockControlPlaneService", "GetModelInvocationLoggingConfiguration", {}).n("BedrockClient", "GetModelInvocationLoggingConfigurationCommand").f(void 0, void 0).ser(se_GetModelInvocationLoggingConfigurationCommand).de(de_GetModelInvocationLoggingConfigurationCommand).build() {
    };
    __name(_GetModelInvocationLoggingConfigurationCommand, "GetModelInvocationLoggingConfigurationCommand");
    var GetModelInvocationLoggingConfigurationCommand = _GetModelInvocationLoggingConfigurationCommand;
    var _GetPromptRouterCommand = class _GetPromptRouterCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockControlPlaneService", "GetPromptRouter", {}).n("BedrockClient", "GetPromptRouterCommand").f(void 0, GetPromptRouterResponseFilterSensitiveLog).ser(se_GetPromptRouterCommand).de(de_GetPromptRouterCommand).build() {
    };
    __name(_GetPromptRouterCommand, "GetPromptRouterCommand");
    var GetPromptRouterCommand = _GetPromptRouterCommand;
    var _GetProvisionedModelThroughputCommand = class _GetProvisionedModelThroughputCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockControlPlaneService", "GetProvisionedModelThroughput", {}).n("BedrockClient", "GetProvisionedModelThroughputCommand").f(void 0, void 0).ser(se_GetProvisionedModelThroughputCommand).de(de_GetProvisionedModelThroughputCommand).build() {
    };
    __name(_GetProvisionedModelThroughputCommand, "GetProvisionedModelThroughputCommand");
    var GetProvisionedModelThroughputCommand = _GetProvisionedModelThroughputCommand;
    var _ListCustomModelsCommand = class _ListCustomModelsCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockControlPlaneService", "ListCustomModels", {}).n("BedrockClient", "ListCustomModelsCommand").f(void 0, void 0).ser(se_ListCustomModelsCommand).de(de_ListCustomModelsCommand).build() {
    };
    __name(_ListCustomModelsCommand, "ListCustomModelsCommand");
    var ListCustomModelsCommand = _ListCustomModelsCommand;
    var _ListEvaluationJobsCommand = class _ListEvaluationJobsCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockControlPlaneService", "ListEvaluationJobs", {}).n("BedrockClient", "ListEvaluationJobsCommand").f(void 0, void 0).ser(se_ListEvaluationJobsCommand).de(de_ListEvaluationJobsCommand).build() {
    };
    __name(_ListEvaluationJobsCommand, "ListEvaluationJobsCommand");
    var ListEvaluationJobsCommand = _ListEvaluationJobsCommand;
    var _ListFoundationModelsCommand = class _ListFoundationModelsCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockControlPlaneService", "ListFoundationModels", {}).n("BedrockClient", "ListFoundationModelsCommand").f(void 0, void 0).ser(se_ListFoundationModelsCommand).de(de_ListFoundationModelsCommand).build() {
    };
    __name(_ListFoundationModelsCommand, "ListFoundationModelsCommand");
    var ListFoundationModelsCommand2 = _ListFoundationModelsCommand;
    var _ListGuardrailsCommand = class _ListGuardrailsCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockControlPlaneService", "ListGuardrails", {}).n("BedrockClient", "ListGuardrailsCommand").f(void 0, ListGuardrailsResponseFilterSensitiveLog).ser(se_ListGuardrailsCommand).de(de_ListGuardrailsCommand).build() {
    };
    __name(_ListGuardrailsCommand, "ListGuardrailsCommand");
    var ListGuardrailsCommand = _ListGuardrailsCommand;
    var _ListImportedModelsCommand = class _ListImportedModelsCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockControlPlaneService", "ListImportedModels", {}).n("BedrockClient", "ListImportedModelsCommand").f(void 0, void 0).ser(se_ListImportedModelsCommand).de(de_ListImportedModelsCommand).build() {
    };
    __name(_ListImportedModelsCommand, "ListImportedModelsCommand");
    var ListImportedModelsCommand = _ListImportedModelsCommand;
    var _ListInferenceProfilesCommand = class _ListInferenceProfilesCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockControlPlaneService", "ListInferenceProfiles", {}).n("BedrockClient", "ListInferenceProfilesCommand").f(void 0, ListInferenceProfilesResponseFilterSensitiveLog).ser(se_ListInferenceProfilesCommand).de(de_ListInferenceProfilesCommand).build() {
    };
    __name(_ListInferenceProfilesCommand, "ListInferenceProfilesCommand");
    var ListInferenceProfilesCommand = _ListInferenceProfilesCommand;
    var _ListMarketplaceModelEndpointsCommand = class _ListMarketplaceModelEndpointsCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockControlPlaneService", "ListMarketplaceModelEndpoints", {}).n("BedrockClient", "ListMarketplaceModelEndpointsCommand").f(void 0, void 0).ser(se_ListMarketplaceModelEndpointsCommand).de(de_ListMarketplaceModelEndpointsCommand).build() {
    };
    __name(_ListMarketplaceModelEndpointsCommand, "ListMarketplaceModelEndpointsCommand");
    var ListMarketplaceModelEndpointsCommand = _ListMarketplaceModelEndpointsCommand;
    var _ListModelCopyJobsCommand = class _ListModelCopyJobsCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockControlPlaneService", "ListModelCopyJobs", {}).n("BedrockClient", "ListModelCopyJobsCommand").f(void 0, void 0).ser(se_ListModelCopyJobsCommand).de(de_ListModelCopyJobsCommand).build() {
    };
    __name(_ListModelCopyJobsCommand, "ListModelCopyJobsCommand");
    var ListModelCopyJobsCommand = _ListModelCopyJobsCommand;
    var _ListModelCustomizationJobsCommand = class _ListModelCustomizationJobsCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockControlPlaneService", "ListModelCustomizationJobs", {}).n("BedrockClient", "ListModelCustomizationJobsCommand").f(void 0, void 0).ser(se_ListModelCustomizationJobsCommand).de(de_ListModelCustomizationJobsCommand).build() {
    };
    __name(_ListModelCustomizationJobsCommand, "ListModelCustomizationJobsCommand");
    var ListModelCustomizationJobsCommand = _ListModelCustomizationJobsCommand;
    var _ListModelImportJobsCommand = class _ListModelImportJobsCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockControlPlaneService", "ListModelImportJobs", {}).n("BedrockClient", "ListModelImportJobsCommand").f(void 0, void 0).ser(se_ListModelImportJobsCommand).de(de_ListModelImportJobsCommand).build() {
    };
    __name(_ListModelImportJobsCommand, "ListModelImportJobsCommand");
    var ListModelImportJobsCommand = _ListModelImportJobsCommand;
    var _ListModelInvocationJobsCommand = class _ListModelInvocationJobsCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockControlPlaneService", "ListModelInvocationJobs", {}).n("BedrockClient", "ListModelInvocationJobsCommand").f(void 0, ListModelInvocationJobsResponseFilterSensitiveLog).ser(se_ListModelInvocationJobsCommand).de(de_ListModelInvocationJobsCommand).build() {
    };
    __name(_ListModelInvocationJobsCommand, "ListModelInvocationJobsCommand");
    var ListModelInvocationJobsCommand = _ListModelInvocationJobsCommand;
    var _ListPromptRoutersCommand = class _ListPromptRoutersCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockControlPlaneService", "ListPromptRouters", {}).n("BedrockClient", "ListPromptRoutersCommand").f(void 0, ListPromptRoutersResponseFilterSensitiveLog).ser(se_ListPromptRoutersCommand).de(de_ListPromptRoutersCommand).build() {
    };
    __name(_ListPromptRoutersCommand, "ListPromptRoutersCommand");
    var ListPromptRoutersCommand = _ListPromptRoutersCommand;
    var _ListProvisionedModelThroughputsCommand = class _ListProvisionedModelThroughputsCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockControlPlaneService", "ListProvisionedModelThroughputs", {}).n("BedrockClient", "ListProvisionedModelThroughputsCommand").f(void 0, void 0).ser(se_ListProvisionedModelThroughputsCommand).de(de_ListProvisionedModelThroughputsCommand).build() {
    };
    __name(_ListProvisionedModelThroughputsCommand, "ListProvisionedModelThroughputsCommand");
    var ListProvisionedModelThroughputsCommand = _ListProvisionedModelThroughputsCommand;
    var _ListTagsForResourceCommand = class _ListTagsForResourceCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockControlPlaneService", "ListTagsForResource", {}).n("BedrockClient", "ListTagsForResourceCommand").f(void 0, void 0).ser(se_ListTagsForResourceCommand).de(de_ListTagsForResourceCommand).build() {
    };
    __name(_ListTagsForResourceCommand, "ListTagsForResourceCommand");
    var ListTagsForResourceCommand = _ListTagsForResourceCommand;
    var _PutModelInvocationLoggingConfigurationCommand = class _PutModelInvocationLoggingConfigurationCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockControlPlaneService", "PutModelInvocationLoggingConfiguration", {}).n("BedrockClient", "PutModelInvocationLoggingConfigurationCommand").f(void 0, void 0).ser(se_PutModelInvocationLoggingConfigurationCommand).de(de_PutModelInvocationLoggingConfigurationCommand).build() {
    };
    __name(_PutModelInvocationLoggingConfigurationCommand, "PutModelInvocationLoggingConfigurationCommand");
    var PutModelInvocationLoggingConfigurationCommand = _PutModelInvocationLoggingConfigurationCommand;
    var _RegisterMarketplaceModelEndpointCommand = class _RegisterMarketplaceModelEndpointCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockControlPlaneService", "RegisterMarketplaceModelEndpoint", {}).n("BedrockClient", "RegisterMarketplaceModelEndpointCommand").f(void 0, void 0).ser(se_RegisterMarketplaceModelEndpointCommand).de(de_RegisterMarketplaceModelEndpointCommand).build() {
    };
    __name(_RegisterMarketplaceModelEndpointCommand, "RegisterMarketplaceModelEndpointCommand");
    var RegisterMarketplaceModelEndpointCommand = _RegisterMarketplaceModelEndpointCommand;
    var _StopEvaluationJobCommand = class _StopEvaluationJobCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockControlPlaneService", "StopEvaluationJob", {}).n("BedrockClient", "StopEvaluationJobCommand").f(StopEvaluationJobRequestFilterSensitiveLog, void 0).ser(se_StopEvaluationJobCommand).de(de_StopEvaluationJobCommand).build() {
    };
    __name(_StopEvaluationJobCommand, "StopEvaluationJobCommand");
    var StopEvaluationJobCommand = _StopEvaluationJobCommand;
    var _StopModelCustomizationJobCommand = class _StopModelCustomizationJobCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockControlPlaneService", "StopModelCustomizationJob", {}).n("BedrockClient", "StopModelCustomizationJobCommand").f(void 0, void 0).ser(se_StopModelCustomizationJobCommand).de(de_StopModelCustomizationJobCommand).build() {
    };
    __name(_StopModelCustomizationJobCommand, "StopModelCustomizationJobCommand");
    var StopModelCustomizationJobCommand = _StopModelCustomizationJobCommand;
    var _StopModelInvocationJobCommand = class _StopModelInvocationJobCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockControlPlaneService", "StopModelInvocationJob", {}).n("BedrockClient", "StopModelInvocationJobCommand").f(void 0, void 0).ser(se_StopModelInvocationJobCommand).de(de_StopModelInvocationJobCommand).build() {
    };
    __name(_StopModelInvocationJobCommand, "StopModelInvocationJobCommand");
    var StopModelInvocationJobCommand = _StopModelInvocationJobCommand;
    var _TagResourceCommand = class _TagResourceCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockControlPlaneService", "TagResource", {}).n("BedrockClient", "TagResourceCommand").f(void 0, void 0).ser(se_TagResourceCommand).de(de_TagResourceCommand).build() {
    };
    __name(_TagResourceCommand, "TagResourceCommand");
    var TagResourceCommand = _TagResourceCommand;
    var _UntagResourceCommand = class _UntagResourceCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockControlPlaneService", "UntagResource", {}).n("BedrockClient", "UntagResourceCommand").f(void 0, void 0).ser(se_UntagResourceCommand).de(de_UntagResourceCommand).build() {
    };
    __name(_UntagResourceCommand, "UntagResourceCommand");
    var UntagResourceCommand = _UntagResourceCommand;
    var _UpdateGuardrailCommand = class _UpdateGuardrailCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockControlPlaneService", "UpdateGuardrail", {}).n("BedrockClient", "UpdateGuardrailCommand").f(UpdateGuardrailRequestFilterSensitiveLog, void 0).ser(se_UpdateGuardrailCommand).de(de_UpdateGuardrailCommand).build() {
    };
    __name(_UpdateGuardrailCommand, "UpdateGuardrailCommand");
    var UpdateGuardrailCommand = _UpdateGuardrailCommand;
    var _UpdateMarketplaceModelEndpointCommand = class _UpdateMarketplaceModelEndpointCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockControlPlaneService", "UpdateMarketplaceModelEndpoint", {}).n("BedrockClient", "UpdateMarketplaceModelEndpointCommand").f(void 0, void 0).ser(se_UpdateMarketplaceModelEndpointCommand).de(de_UpdateMarketplaceModelEndpointCommand).build() {
    };
    __name(_UpdateMarketplaceModelEndpointCommand, "UpdateMarketplaceModelEndpointCommand");
    var UpdateMarketplaceModelEndpointCommand = _UpdateMarketplaceModelEndpointCommand;
    var _UpdateProvisionedModelThroughputCommand = class _UpdateProvisionedModelThroughputCommand extends import_smithy_client7.Command.classBuilder().ep(commonParams).m(function(Command, cs, config2, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config2, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config2, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonBedrockControlPlaneService", "UpdateProvisionedModelThroughput", {}).n("BedrockClient", "UpdateProvisionedModelThroughputCommand").f(void 0, void 0).ser(se_UpdateProvisionedModelThroughputCommand).de(de_UpdateProvisionedModelThroughputCommand).build() {
    };
    __name(_UpdateProvisionedModelThroughputCommand, "UpdateProvisionedModelThroughputCommand");
    var UpdateProvisionedModelThroughputCommand = _UpdateProvisionedModelThroughputCommand;
    var commands = {
      BatchDeleteEvaluationJobCommand,
      CreateEvaluationJobCommand,
      CreateGuardrailCommand,
      CreateGuardrailVersionCommand,
      CreateInferenceProfileCommand,
      CreateMarketplaceModelEndpointCommand,
      CreateModelCopyJobCommand,
      CreateModelCustomizationJobCommand,
      CreateModelImportJobCommand,
      CreateModelInvocationJobCommand,
      CreateProvisionedModelThroughputCommand,
      DeleteCustomModelCommand,
      DeleteGuardrailCommand,
      DeleteImportedModelCommand,
      DeleteInferenceProfileCommand,
      DeleteMarketplaceModelEndpointCommand,
      DeleteModelInvocationLoggingConfigurationCommand,
      DeleteProvisionedModelThroughputCommand,
      DeregisterMarketplaceModelEndpointCommand,
      GetCustomModelCommand,
      GetEvaluationJobCommand,
      GetFoundationModelCommand,
      GetGuardrailCommand,
      GetImportedModelCommand,
      GetInferenceProfileCommand,
      GetMarketplaceModelEndpointCommand,
      GetModelCopyJobCommand,
      GetModelCustomizationJobCommand,
      GetModelImportJobCommand,
      GetModelInvocationJobCommand,
      GetModelInvocationLoggingConfigurationCommand,
      GetPromptRouterCommand,
      GetProvisionedModelThroughputCommand,
      ListCustomModelsCommand,
      ListEvaluationJobsCommand,
      ListFoundationModelsCommand: ListFoundationModelsCommand2,
      ListGuardrailsCommand,
      ListImportedModelsCommand,
      ListInferenceProfilesCommand,
      ListMarketplaceModelEndpointsCommand,
      ListModelCopyJobsCommand,
      ListModelCustomizationJobsCommand,
      ListModelImportJobsCommand,
      ListModelInvocationJobsCommand,
      ListPromptRoutersCommand,
      ListProvisionedModelThroughputsCommand,
      ListTagsForResourceCommand,
      PutModelInvocationLoggingConfigurationCommand,
      RegisterMarketplaceModelEndpointCommand,
      StopEvaluationJobCommand,
      StopModelCustomizationJobCommand,
      StopModelInvocationJobCommand,
      TagResourceCommand,
      UntagResourceCommand,
      UpdateGuardrailCommand,
      UpdateMarketplaceModelEndpointCommand,
      UpdateProvisionedModelThroughputCommand
    };
    var _Bedrock = class _Bedrock extends BedrockClient2 {
    };
    __name(_Bedrock, "Bedrock");
    var Bedrock = _Bedrock;
    (0, import_smithy_client7.createAggregatedClient)(commands, Bedrock);
    var paginateListCustomModels = (0, import_core5.createPaginator)(BedrockClient2, ListCustomModelsCommand, "nextToken", "nextToken", "maxResults");
    var paginateListEvaluationJobs = (0, import_core5.createPaginator)(BedrockClient2, ListEvaluationJobsCommand, "nextToken", "nextToken", "maxResults");
    var paginateListGuardrails = (0, import_core5.createPaginator)(BedrockClient2, ListGuardrailsCommand, "nextToken", "nextToken", "maxResults");
    var paginateListImportedModels = (0, import_core5.createPaginator)(BedrockClient2, ListImportedModelsCommand, "nextToken", "nextToken", "maxResults");
    var paginateListInferenceProfiles = (0, import_core5.createPaginator)(BedrockClient2, ListInferenceProfilesCommand, "nextToken", "nextToken", "maxResults");
    var paginateListMarketplaceModelEndpoints = (0, import_core5.createPaginator)(BedrockClient2, ListMarketplaceModelEndpointsCommand, "nextToken", "nextToken", "maxResults");
    var paginateListModelCopyJobs = (0, import_core5.createPaginator)(BedrockClient2, ListModelCopyJobsCommand, "nextToken", "nextToken", "maxResults");
    var paginateListModelCustomizationJobs = (0, import_core5.createPaginator)(BedrockClient2, ListModelCustomizationJobsCommand, "nextToken", "nextToken", "maxResults");
    var paginateListModelImportJobs = (0, import_core5.createPaginator)(BedrockClient2, ListModelImportJobsCommand, "nextToken", "nextToken", "maxResults");
    var paginateListModelInvocationJobs = (0, import_core5.createPaginator)(BedrockClient2, ListModelInvocationJobsCommand, "nextToken", "nextToken", "maxResults");
    var paginateListPromptRouters = (0, import_core5.createPaginator)(BedrockClient2, ListPromptRoutersCommand, "nextToken", "nextToken", "maxResults");
    var paginateListProvisionedModelThroughputs = (0, import_core5.createPaginator)(BedrockClient2, ListProvisionedModelThroughputsCommand, "nextToken", "nextToken", "maxResults");
  }
});

// main.ts
init_dirname();

// node_modules/@aws-sdk/credential-providers/dist-es/fromSSO.js
init_dirname();
var import_credential_provider_sso = __toESM(require_dist_cjs51());
var fromSSO = (init = {}) => {
  return (0, import_credential_provider_sso.fromSSO)({ ...init });
};

// main.ts
var import_client_bedrock_runtime = __toESM(require_dist_cjs59(), 1);
var import_client_bedrock = __toESM(require_dist_cjs77(), 1);
var import_fetch_http_handler = __toESM(require_dist_cjs15(), 1);
var defaultCredentialConfig = {
  filepath: "~/.aws/credentials",
  clientConfig: {
    region: "us-east-1",
    requestHandler: new import_fetch_http_handler.FetchHttpHandler({
      requestTimeout: 3e4
    }),
    streamCollector: import_fetch_http_handler.streamCollector
  }
};
var defaultClientConfig = {
  region: "us-east-1",
  requestHandler: new import_fetch_http_handler.FetchHttpHandler({
    requestTimeout: 3e4
  }),
  streamCollector: import_fetch_http_handler.streamCollector
};
var BedrockModelPlugin = class {
  configure(configuration) {
  }
  configuration() {
    return [
      {
        input: (context) => ({
          region: {
            displayName: "AWS Region",
            type: "select",
            required: true,
            options: ["us-east-1", "us-east-2", "eu-west-1"]
          }
        })
      },
      {
        input: async (context) => {
          const region = context.region;
          if (!region) {
            return {
              "model-id": {
                displayName: "AWS Bedrock model",
                type: "select",
                required: true,
                options: ["Configure AWS region first"]
              }
            };
          }
          const credentialsProvider = fromSSO({
            ...defaultCredentialConfig,
            clientConfig: {
              ...defaultCredentialConfig.clientConfig,
              region
            }
          });
          const client = new import_client_bedrock.BedrockClient({
            ...defaultClientConfig,
            region,
            credentials: credentialsProvider
          });
          const response = await client.send(new import_client_bedrock.ListFoundationModelsCommand());
          const modelChoices = response.modelSummaries?.filter((m) => m.inferenceTypesSupported?.includes("ON_DEMAND") && m.outputModalities?.includes("TEXT"))?.map((m) => m.modelId) || [];
          return {
            "model-id": {
              displayName: "AWS Bedrock model",
              type: "select",
              required: true,
              options: modelChoices
            }
          };
        }
      }
    ];
  }
  async test() {
    const credentialsProvider = fromSSO(defaultCredentialConfig);
    const runtimeClient = new import_client_bedrock_runtime.BedrockRuntimeClient({
      ...defaultClientConfig,
      credentials: credentialsProvider
    });
    const command = new import_client_bedrock_runtime.ConverseCommand({
      modelId: "anthropic.claude-3-haiku-20240307-v1:0",
      messages: [
        {
          role: "user",
          content: [
            {
              text: "Hello!"
            }
          ]
        }
      ]
    });
    const response = await runtimeClient.send(command);
    console.log(JSON.stringify(response.output));
  }
};
var plugin = new BedrockModelPlugin();
export {
  plugin
};
/*! Bundled license information:

@jspm/core/nodelibs/browser/chunk-DtuTasat.js:
  (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)

@jspm/core/nodelibs/browser/chunk-CcCWfKp1.js:
  (*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> *)
*/
